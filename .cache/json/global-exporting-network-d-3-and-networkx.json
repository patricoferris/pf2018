{"data":{"markdownRemark":{"html":"<p><img src=\"https://res.cloudinary.com/patricoferris/image/upload/v1539814961/pf2018/blogposts/17-10-2018/network.png\" alt=\"Global Exporting Network\"></p>\n<p>Data-Driven Documents (D3) is a JavaScript library for building powerful graphics to communicate information in datasets. It is also fair to say that for many, myself included, it has a non-standard approach to building the graphics. Often the learning curve can feel steep.</p>\n<p>In this post we’ll look at using NetworkX — a Python library for exploring graph structures — to do some of the initial data processing for us. Then we’ll add the artistic finishing touches in JavaScript with D3. The full code can be found on my <a href=\"https://github.com/patricoferris/blog-posts/tree/master/Exporting_Dependencies\">GitHub</a> and an interactive version can be found <a href=\"https://bl.ocks.org/patricoferris/bd646b1122b087cc3ec61de0690625b8/104d0bbfd541851d99d0babdbc0a6f35a6f5a20f\">here</a>.</p>\n<p>The data</p>\n<p>I remember when I was first introduced to the <a href=\"https://www.cia.gov/library/publications/the-world-factbook/\">CIA World Factbook</a>, and I loved it. It holds a treasure trove of information about all of the countries in the world. It is just screaming for visualisations of the data to be made. On top of this, it has been converted to different formats on <a href=\"https://github.com/factbook\">GitHub</a> and — most importantly for us — to JSON.</p>\n<p>The data is given per country using their two character ISO encoding. We’ll need the continent each country is in to access the data. First we’ll create that dictionary:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\">\n      <pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">from</span> bs4 <span class=\"token keyword\">import</span> BeautifulSoup\n<span class=\"token keyword\">import</span> json\n<span class=\"token comment\">#Accessing the Webpage</span>\nresult <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://github.com/factbook/factbook.json'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#Getting the content of the webpage</span>\ncontent <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>content\n<span class=\"token comment\">#Beautiful-souping it</span>\nbsoup <span class=\"token operator\">=</span> BeautifulSoup<span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span> <span class=\"token string\">'html5lib'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#Getting the table data cells from the page with a specific class - (Use Chrome Dev Tools)</span>\ntds <span class=\"token operator\">=</span> bsoup<span class=\"token punctuation\">.</span>find_all<span class=\"token punctuation\">(</span><span class=\"token string\">'td'</span><span class=\"token punctuation\">,</span> class_<span class=\"token operator\">=</span><span class=\"token string\">'content'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#An array of the possible continents</span>\ncontinents <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> td <span class=\"token keyword\">in</span> tds<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\ncontinents<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>td<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ncode_to_continent <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">#Key-value pairs of country code to their respective continent</span>\n<span class=\"token keyword\">for</span> continent <span class=\"token keyword\">in</span> continents<span class=\"token punctuation\">:</span> \n   <span class=\"token keyword\">if</span> continent <span class=\"token operator\">!=</span> <span class=\"token string\">'meta'</span><span class=\"token punctuation\">:</span>\n       url <span class=\"token operator\">=</span> <span class=\"token string\">'https://github.com/factbook/factbook.json/tree/master/{c}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">=</span>continent<span class=\"token punctuation\">)</span>\n       countries_page <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n       content <span class=\"token operator\">=</span> countries_page<span class=\"token punctuation\">.</span>content\n       bsoup <span class=\"token operator\">=</span> BeautifulSoup<span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span> <span class=\"token string\">'html5lib'</span><span class=\"token punctuation\">)</span>\n       tds <span class=\"token operator\">=</span> bsoup<span class=\"token punctuation\">.</span>find_all<span class=\"token punctuation\">(</span><span class=\"token string\">'td'</span><span class=\"token punctuation\">,</span> class_<span class=\"token operator\">=</span><span class=\"token string\">'content'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> td <span class=\"token keyword\">in</span> tds<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n   code_to_continent<span class=\"token punctuation\">[</span>td<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> continent</code></pre>\n      </div>\n<p>The dictionary makes things a lot simpler when we want to access the URL for each country’s data.</p>\n<p>The next step is to define a simple Country class to hold the data. While we’re at it, it would improve the visualisation if we could use actual country names — not their two character code — so we can find that information and store it for later use.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\">\n      <pre class=\"language-python\"><code class=\"language-python\">\n<span class=\"token comment\">#A simple country class to store the data relating to the country</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Country</span><span class=\"token punctuation\">:</span>\n   <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n       self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n       self<span class=\"token punctuation\">.</span>code <span class=\"token operator\">=</span> code\n       <span class=\"token comment\">#The country being exported to and the percentage</span>\n       self<span class=\"token punctuation\">.</span>exporting_partners <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">def</span> <span class=\"token function\">add_partner</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n       self<span class=\"token punctuation\">.</span>exporting_partners<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v\n       <span class=\"token comment\">#Different possible names pointing to one country code - we might have 'USA': 'us' and 'United States': 'us' etc. </span>\n       names_to_code <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n       <span class=\"token keyword\">for</span> code <span class=\"token keyword\">in</span> code_to_continent<span class=\"token punctuation\">:</span>\n           url <span class=\"token operator\">=</span> <span class=\"token string\">'https://raw.githubusercontent.com/factbook/factbook.json/master/{continent}/{code}.json'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>continent<span class=\"token operator\">=</span>code_to_continent<span class=\"token punctuation\">[</span>code<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> code<span class=\"token operator\">=</span>code<span class=\"token punctuation\">)</span>\n           names_to_code<span class=\"token punctuation\">[</span>code<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> code\n           json <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n           <span class=\"token keyword\">if</span> <span class=\"token string\">'Country name'</span> <span class=\"token keyword\">in</span> json<span class=\"token punctuation\">[</span><span class=\"token string\">'Government'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n               <span class=\"token keyword\">if</span> <span class=\"token string\">'conventional short form'</span> <span class=\"token keyword\">in</span> json<span class=\"token punctuation\">[</span><span class=\"token string\">'Government'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Country name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                   names_to_code<span class=\"token punctuation\">[</span>json<span class=\"token punctuation\">[</span><span class=\"token string\">'Government'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Country name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'conventional short form'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'text'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> code\n               <span class=\"token keyword\">if</span> <span class=\"token string\">'conventional long form'</span> <span class=\"token keyword\">in</span> json<span class=\"token punctuation\">[</span><span class=\"token string\">'Government'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Country name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                   names_to_code<span class=\"token punctuation\">[</span>json<span class=\"token punctuation\">[</span><span class=\"token string\">'Government'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Country name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'conventional long form'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'text'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> code</code></pre>\n      </div>\n<p>And now we’re finally ready to add the exporter information — this method isn’t perfect but it gets a majority of the information.</p>\n<p>Don’t worry too much about the split() functions on the exporting partners. That’s just cleaning up some of the data so we only get the names and the percentages we want. Check out the GitHub page to see the extra names I had to add for the graph construction to work.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\">\n      <pre class=\"language-python\"><code class=\"language-python\">\ncountries <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">#For all of the country codes</span>\n<span class=\"token keyword\">for</span> code <span class=\"token keyword\">in</span> code_to_continent<span class=\"token punctuation\">:</span>\n   <span class=\"token comment\">#Get the JSON Data</span>\n   url <span class=\"token operator\">=</span> <span class=\"token string\">'https://raw.githubusercontent.com/factbook/factbook.json/master/{continent}/{code}.json'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>continent<span class=\"token operator\">=</span>code_to_continent<span class=\"token punctuation\">[</span>code<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> code<span class=\"token operator\">=</span>code<span class=\"token punctuation\">)</span>\n   json <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">if</span> <span class=\"token string\">'Country name'</span> <span class=\"token keyword\">in</span> json<span class=\"token punctuation\">[</span><span class=\"token string\">'Government'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n   <span class=\"token comment\">#We might miss a few if they don't have this</span>\n       <span class=\"token keyword\">if</span> <span class=\"token string\">'conventional short form'</span> <span class=\"token keyword\">in</span> json<span class=\"token punctuation\">[</span><span class=\"token string\">'Government'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Country name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n       name <span class=\"token operator\">=</span> json<span class=\"token punctuation\">[</span><span class=\"token string\">'Government'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Country name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'conventional short form'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'text'</span><span class=\"token punctuation\">]</span>\n           <span class=\"token keyword\">if</span> <span class=\"token string\">'Exports - partners'</span> <span class=\"token keyword\">in</span> json<span class=\"token punctuation\">[</span><span class=\"token string\">'Economy'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n               <span class=\"token comment\">#Get the exporters</span>\n               partners <span class=\"token operator\">=</span> json<span class=\"token punctuation\">[</span><span class=\"token string\">'Economy'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Exports - partners'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'text'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span>\n               country <span class=\"token operator\">=</span> Country<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> code<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> partner <span class=\"token keyword\">in</span> partners<span class=\"token punctuation\">:</span>\n   <span class=\"token comment\">#Process the data to drop some bits we don't need and get the values we want</span>\n   p <span class=\"token operator\">=</span> partner<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">if</span> p<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'('</span><span class=\"token punctuation\">:</span>\n       country<span class=\"token punctuation\">.</span>add_partner<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'%'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">elif</span> p<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">:</span>\n       country<span class=\"token punctuation\">.</span>add_partner<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'%'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n   <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n       country<span class=\"token punctuation\">.</span>add_partner<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'%'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   countries<span class=\"token punctuation\">[</span>code<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> country</code></pre>\n      </div>\n<p>NetworkX</p>\n<p><a href=\"https://networkx.github.io/\">NetworkX</a> is a fairly sophisticated Python library for constructing, analysing, and — to a certain extent — exporting graph data structures. It is also really simple to use.</p>\n<p>Now that we have the data we want stored in our Country objects, the code for creating our directed graph is very simple.</p>\n<p>We can also add attributes to our nodes like the degree of the node and the name (not the ISO code). Once we have our data structure we can export it to a JSON format and dump it in a file ready to be used with D3.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\">\n      <pre class=\"language-python\"><code class=\"language-python\">\n<span class=\"token keyword\">import</span> networkx <span class=\"token keyword\">as</span> nx\n<span class=\"token comment\">#Create the empty directed graph</span>\nG <span class=\"token operator\">=</span> nx<span class=\"token punctuation\">.</span>DiGraph<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#Add the edges with a weight proportional to their percentage expressed as a decimal</span>\n<span class=\"token comment\">#For consistency we're using the ISO-Codes </span>\n<span class=\"token keyword\">for</span> country <span class=\"token keyword\">in</span> countries<span class=\"token punctuation\">:</span>\n   <span class=\"token keyword\">for</span> partner <span class=\"token keyword\">in</span> countries<span class=\"token punctuation\">[</span>country<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>exporting_partners<span class=\"token punctuation\">:</span> \n       G<span class=\"token punctuation\">.</span>add_edge<span class=\"token punctuation\">(</span>names_to_code<span class=\"token punctuation\">[</span>countries<span class=\"token punctuation\">[</span>country<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> names_to_code<span class=\"token punctuation\">[</span>partner<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> weight<span class=\"token operator\">=</span>countries<span class=\"token punctuation\">[</span>country<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>exporting_partners<span class=\"token punctuation\">[</span>partner<span class=\"token punctuation\">]</span><span class=\"token operator\">/</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#So we can visualise some cooler things later on we can also add some attributes to the nodes</span>\ndegrees <span class=\"token operator\">=</span> nx<span class=\"token punctuation\">.</span>degree<span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#The non-ISO code name</span>\nnames <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> country <span class=\"token keyword\">in</span> countries<span class=\"token punctuation\">:</span>\n   names<span class=\"token punctuation\">[</span>country<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> countries<span class=\"token punctuation\">[</span>country<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name\n<span class=\"token comment\">#Number of exporting partners</span>\nds <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> name<span class=\"token punctuation\">,</span> d <span class=\"token keyword\">in</span> degrees<span class=\"token punctuation\">:</span> \n   ds<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> d\n\nnx<span class=\"token punctuation\">.</span>set_node_attributes<span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">,</span> ds<span class=\"token punctuation\">,</span> <span class=\"token string\">'degree'</span><span class=\"token punctuation\">)</span>\nnx<span class=\"token punctuation\">.</span>set_node_attributes<span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">,</span> names<span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#And finally export it to a JSON format compatible with D3</span>\n\n<span class=\"token keyword\">from</span> networkx<span class=\"token punctuation\">.</span>readwrite <span class=\"token keyword\">import</span> json_graph\ndata <span class=\"token operator\">=</span> json_graph<span class=\"token punctuation\">.</span>node_link_data<span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#And then dump it in a file</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'graph.json'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> fp<span class=\"token punctuation\">:</span>\n   json<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<p>What’s different about D3?</p>\n<p>From the outset, Mike Bostock (the founder of D3) wanted to create a “reusable chart.” In his <a href=\"https://bost.ocks.org/mike/chart/\">post</a> on the subject, he highlights the key goals and missions for the D3 project. These can help us understand the syntactic structure it has.</p>\n<p>The first, and most important, take-away is that charts should be implementable “as closures with getter-setter methods.” If you’re new to programming you may be confused as to what a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures\">closure</a> is. Don’t worry! The big concept associated with closures is lexical scoping, which sounds a lot scarier than it really is. The basic idea behind it all is nested functions and how the inner function has access to the outer function’s variables.</p>\n<p>Take a look at EXAMPLE 1 in the code below. Here we simply return the inner function, which has access to the arguments passed to the outer function. The variable we declare, closureOne , is a function and when we execute it with closureOne() we console.log(config.name) .</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token comment\">//EXAMPLE 1: A Closure - A function within a function (nested)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">closureOne</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nconfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Joe Blogs'</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> closureOne <span class=\"token operator\">=</span> <span class=\"token function\">closureOne</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">closureOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'Joe Blogs'</span>\n<span class=\"token comment\">//EXAMPLE 2: A slightly more complicated D3-esque closure</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">closureTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">var</span> nameOfPerson <span class=\"token operator\">=</span> <span class=\"token string\">'Bob Smith'</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token keyword\">function</span> <span class=\"token function\">my</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// Some Code Here;</span>\n   <span class=\"token punctuation\">}</span>\n\n   my<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">fullName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>arguments<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> nameOfPerson<span class=\"token punctuation\">;</span>\n           nameOfPerson <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n           <span class=\"token keyword\">return</span> my<span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span>\n       <span class=\"token keyword\">return</span> my<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> closureTwo <span class=\"token operator\">=</span> <span class=\"token function\">closureTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nclosureTwo<span class=\"token punctuation\">.</span><span class=\"token function\">fullName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Alice Smith'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>closureTwo<span class=\"token punctuation\">.</span><span class=\"token function\">fullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'Alice Smith';</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>closureTwo<span class=\"token punctuation\">.</span>nameOfPerson<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Undefined;</span></code></pre>\n      </div>\n<p>In EXAMPLE 2, we declare variables within the scope of the outer function allowing the inner my function to have access to it. In the fullName function associated with the my function — a method — we can either set or get the nameOfPerson depending on it any arguments are passed. Notice how the developer does not have access to the variable nameOfPerson . The developer is forced to use our defined methods to update and access it, providing a level of security to our function.</p>\n<p>This method of using closures is how D3 is coded. Take a look at the <a href=\"https://github.com/d3/d3-shape/blob/master/src/line.js\">line</a> function to see this in action. This <a href=\"https://www.youtube.com/watch?v=-jysK0nlz7A&#x26;t=647s\">video</a> may also shed some light on the topic.</p>\n<p>Programming in D3</p>\n<p>Thankfully you don’t need to be a master of closures and D3 to create a visualisation. In fact, so long as you can copy and paste, you can usually get something running in no time at all thanks to <a href=\"https://bl.ocks.org/mbostock\">Mike Bostock’s Blocks</a>. This site has many open-source examples of building data visualisations in D3. You can use the code to create your own with your data.</p>\n<p>To create the network for this tutorial, I used <a href=\"https://bl.ocks.org/mbostock/4062045\">this example</a>. To get it running on screen, all I had to change was the name of the .csv file.</p>\n<p>Let’s look at some of the key lines of code making this visualisation work, and also the parts I’ve added to hopefully improve it further.</p>\n<p>Just before we dive in, Andrew Dunkman wrote a great article helping explain <a href=\"https://techtime.getharvest.com/blog/understanding-d3-selection-operations\">D3 selection</a> which I recommend reading.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token comment\">// D3.select allows for DOM manipulation</span>\n<span class=\"token comment\">// Here we get the SVG in our index.html and then get it's width and height </span>\n<span class=\"token keyword\">var</span> svg <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"svg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\nwidth <span class=\"token operator\">=</span> svg<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"width\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\nheight <span class=\"token operator\">=</span> svg<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"height\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Here we create a the hover over 'tooltip' - note it is an element of the body and not the SVG</span>\n<span class=\"token keyword\">var</span> div <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"body\"</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tooltip\"</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">.</span><span class=\"token function\">style</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"opacity\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// the forceSimulation method starts a new force simulation to which we then add forces </span>\n<span class=\"token keyword\">var</span> simulation <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">forceSimulation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n   <span class=\"token comment\">//d3.forceLink applies the force between source and target nodes </span>\n   <span class=\"token punctuation\">.</span><span class=\"token function\">force</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"link\"</span><span class=\"token punctuation\">,</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">forceLink</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> d<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token comment\">//d3.forceManyBody acts like 'electrical charge' and keeps the nodes separated</span>\n   <span class=\"token punctuation\">.</span><span class=\"token function\">force</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"charge\"</span><span class=\"token punctuation\">,</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">forceManyBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token comment\">//d3.forceCenter moves the position of the centre to the middle of our SVG instead of the top left corner</span>\n   <span class=\"token punctuation\">.</span><span class=\"token function\">force</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"center\"</span><span class=\"token punctuation\">,</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">forceCenter</span><span class=\"token punctuation\">(</span>width <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> height <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//d3.json(file, callback) - once we have the data we execute the code in the callback</span>\nd3<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"graph.json\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">,</span> graph<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span>\n   <span class=\"token comment\">//Here we create the links in the graph - we first append a 'g' or a group to the SVG</span>\n   <span class=\"token keyword\">var</span> link <span class=\"token operator\">=</span> svg<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"g\"</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"links\"</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"line\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//Don't worry that there are no lines - when we use the .enter() method we can create them</span>\n       <span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">.</span>links<span class=\"token punctuation\">)</span> <span class=\"token comment\">//Our d3.json graph has the link information</span>\n       <span class=\"token punctuation\">.</span><span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"line\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// For each of these we want to create a line</span>\n       <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stroke-width\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// With some width function associated with the value of the data point</span>\n   <span class=\"token keyword\">var</span> node <span class=\"token operator\">=</span> svg<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"g\"</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"nodes\"</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"circle\"</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">.</span><span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"circle\"</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">,</span> scaledSize<span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fill\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">color</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>degree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n   <span class=\"token comment\">// All of the above should seem familiar from the 'links' code above - what's different is the extra functionality we add</span>\n       <span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mouseover\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">mouseOver</span><span class=\"token punctuation\">(</span><span class=\"token number\">.7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//two new functions for mousing over and mousing out which we will look at</span>\n       <span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mouseout\"</span><span class=\"token punctuation\">,</span> mouseOut<span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>d3<span class=\"token punctuation\">.</span><span class=\"token function\">drag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n   <span class=\"token comment\">// Call performed on the entire selection - d3.drag does exactly what you would expect - again we'll</span>\n   <span class=\"token comment\">// take a look at the functions passed in. </span>\n       <span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"start\"</span><span class=\"token punctuation\">,</span> dragstarted<span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"drag\"</span><span class=\"token punctuation\">,</span> dragged<span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"end\"</span><span class=\"token punctuation\">,</span> dragended<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">// Supplying the simulation with the nodes and telling it to perform the ticked function per tick</span>\n   simulation\n       <span class=\"token punctuation\">.</span><span class=\"token function\">nodes</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tick\"</span><span class=\"token punctuation\">,</span> ticked<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   simulation<span class=\"token punctuation\">.</span><span class=\"token function\">force</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"link\"</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">.</span><span class=\"token function\">links</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">.</span>links<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token comment\">//... more functions - take a look at the full code to see them</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>To see the functions we’re calling like dragstarted , scaledSize , or mouseOut , be sure to look at the full code <a href=\"https://github.com/patricoferris/blog-posts/blob/master/Exporting_Dependencies/index.js\">here</a>. As an example, let’s see what’s happening when we click on a node.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token comment\">//We first perform a selectAll on the circles of the SVG (i.e. the nodes of our graph)</span>\n<span class=\"token comment\">//And if a node is clicked, we perform the function supplying that nodes values as an argument</span>\nsvg<span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"circle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">//We first create a string for the country's name of the node clicked</span>\n   <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Country: \"</span> <span class=\"token operator\">+</span> d<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token comment\">//We then set up the exporters string</span>\n   <span class=\"token keyword\">let</span> string <span class=\"token operator\">=</span> <span class=\"token string\">\"Exporters: \"</span><span class=\"token punctuation\">;</span>\n   <span class=\"token comment\">//From our predefined object containing key-value pairs of linked nodes we check to see what our node is linked to</span>\n   <span class=\"token comment\">//To make the linkedByIndex object we iterated over the links of the graph and placed them in it</span>\n   Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>linkedByIndex<span class=\"token punctuation\">[</span>d<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>n <span class=\"token keyword\">of</span> graph<span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token comment\">//Sometimes we might not have parsed the data perfectly so we need to do some sanity checks</span>\n           <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>index <span class=\"token operator\">==</span> key <span class=\"token operator\">&amp;&amp;</span> n<span class=\"token punctuation\">.</span>name <span class=\"token operator\">!=</span> undefined<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n               <span class=\"token comment\">//If everything is code we add it to the string</span>\n               string <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">}</span>\n       <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">//And then manipulate the DOM using some vanilla JS</span>\n   <span class=\"token keyword\">let</span> country <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"country\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   country<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">let</span> exporters <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exporters\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   exporters<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Conclusion</p>\n<p>The code is messy, the visualisation isn’t perfect, and there is so much left to discuss and learn.</p>\n<p>But that’s beside the point. Hopefully this post has been able to let you get your feet wet with NetworkX and D3 without throwing too much at you. We all have to start somewhere, and this can be your beginning to create insightful and powerful data visualisations.</p>\n<p>If you’re stuck wondering what to tackle next, here are a few of suggestions:</p>\n<p>Mike Bostock’s Towards Reusable Charts — this is a great example of someone explaining their thought process and then their implementation. This shows how his goals for the project affected his implementation.</p>\n<p>D3 and React — two libraries fighting over the DOM, this is currently what I’m reading about, and seeing what are the best ways to utilise both on a project.</p>\n<p>Elijah Meeks, Senior Data Visualization Engineer at Netflix —any of Elijah Meeks’ posts are a great resource and often shed light on the world of data visualisation.</p>\n<p>Thanks for sticking with me to the end. Happy visualising!</p>","frontmatter":{"path":"/global-exporting-network-d3-and-networkx","title":"Visualising the Global Exporting Network","subtitle":"How to use NetworkX in Python and D3 in JavaScript to visualise the Global Exporting Network","date":"2018-10-17","imageUrl":"https://res.cloudinary.com/patricoferris/image/upload/v1539814961/pf2018/blogposts/17-10-2018/network.png"}}},"pathContext":{}}