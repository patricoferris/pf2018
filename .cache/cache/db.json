{"keys":[{"id":"transformer-remark-markdown-ast-30717f8b5b5a89b2192ecc720cc27aaf-gatsby-remark-imagesgatsby-remark-prismjs-","value":{"type":"root","children":[{"type":"yaml","value":"path: '/tensorflow-and-word2vec'\ntitle: 'Tensorflow, British MPs Tweets and Word2Vec'\nsubtitle: 'A deep dive into the mathematics, science and findings of analysing the tweets of British MPs'\ndate: '2018-07-23'","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":6,"column":4,"offset":218},"indent":[1,1,1,1,1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Machine Learning","position":{"start":{"line":8,"column":3,"offset":222},"end":{"line":8,"column":19,"offset":238},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":220},"end":{"line":8,"column":19,"offset":238},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":9,"column":1,"offset":239}}}},{"id":"transformer-remark-markdown-ast-a6a996565eb9c1aa6349639fdf8b077a-gatsby-remark-imagesgatsby-remark-prismjs-","value":{"type":"root","children":[{"type":"yaml","value":"path: '/graphics-and-p5'\ntitle: 'Computer Graphics for Everyone'\nsubtitle: 'An Introduction to Computer Graphics using p5.js'\ndate: '2018-02-27'","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":6,"column":4,"offset":152},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"graphics-and-p5/tree.png","alt":"Recursive Tree","position":{"start":{"line":8,"column":1,"offset":154},"end":{"line":8,"column":44,"offset":197},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":154},"end":{"line":8,"column":44,"offset":197},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Graphics and computer programming are two dearly intertwined disciplines. The oscilloscope is often recognised as one of the first examples of “computer graphics”, the cathode-ray versions emitting a beam of electrons onto a phosphorescent screen. By using magnetic fields to change the beam’s direction, we can sweep from left to right and move up and down — the basic idea behind most CG! (I highly recommend watching this ","position":{"start":{"line":10,"column":1,"offset":199},"end":{"line":10,"column":426,"offset":624},"indent":[]}},{"type":"link","title":null,"url":"https://archive.org/details/introductiontothecathoderayoscilloscope","children":[{"type":"text","value":"video","position":{"start":{"line":10,"column":427,"offset":625},"end":{"line":10,"column":432,"offset":630},"indent":[]}}],"position":{"start":{"line":10,"column":426,"offset":624},"end":{"line":10,"column":502,"offset":700},"indent":[]}},{"type":"text","value":" from 1970).","position":{"start":{"line":10,"column":502,"offset":700},"end":{"line":10,"column":514,"offset":712},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":199},"end":{"line":10,"column":514,"offset":712},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We’ve come a long way since then — modern day graphics is a complicated science as well as an art, and the barrier to entry is constantly increasing. Graphics programming can be so complex, that a simple program to draw a triangle can be over ","position":{"start":{"line":12,"column":1,"offset":714},"end":{"line":12,"column":244,"offset":957},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/SaschaWillems/Vulkan/blob/master/examples/triangle/triangle.cpp","children":[{"type":"text","value":"1000 lines of code","position":{"start":{"line":12,"column":245,"offset":958},"end":{"line":12,"column":263,"offset":976},"indent":[]}}],"position":{"start":{"line":12,"column":244,"offset":957},"end":{"line":12,"column":348,"offset":1061},"indent":[]}},{"type":"text","value":"! However, this article will introduce you to ","position":{"start":{"line":12,"column":348,"offset":1061},"end":{"line":12,"column":394,"offset":1107},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/","children":[{"type":"text","value":"p5.js","position":{"start":{"line":12,"column":395,"offset":1108},"end":{"line":12,"column":400,"offset":1113},"indent":[]}}],"position":{"start":{"line":12,"column":394,"offset":1107},"end":{"line":12,"column":420,"offset":1133},"indent":[]}},{"type":"text","value":" (also known as p5). A simpler, less complex solution for people who want to start making computer graphics, but don’t want the headache of streams of boiler-plate code.","position":{"start":{"line":12,"column":420,"offset":1133},"end":{"line":12,"column":589,"offset":1302},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":714},"end":{"line":12,"column":589,"offset":1302},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Straight from the landing page of the p5.js website.","position":{"start":{"line":14,"column":1,"offset":1304},"end":{"line":14,"column":53,"offset":1356},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":1304},"end":{"line":14,"column":53,"offset":1356},"indent":[]}},{"type":"blockquote","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"…make coding accessible for artists, designers, educators and beginners…","position":{"start":{"line":15,"column":5,"offset":1361},"end":{"line":15,"column":77,"offset":1433},"indent":[]}}],"position":{"start":{"line":15,"column":3,"offset":1359},"end":{"line":15,"column":77,"offset":1433},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":1357},"end":{"line":15,"column":77,"offset":1433},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"p5.js is the result of hard-work of the ","position":{"start":{"line":17,"column":1,"offset":1435},"end":{"line":17,"column":41,"offset":1475},"indent":[]}},{"type":"link","title":null,"url":"https://processingfoundation.org/","children":[{"type":"text","value":"Processing Foundation","position":{"start":{"line":17,"column":42,"offset":1476},"end":{"line":17,"column":63,"offset":1497},"indent":[]}}],"position":{"start":{"line":17,"column":41,"offset":1475},"end":{"line":17,"column":99,"offset":1533},"indent":[]}},{"type":"text","value":", a group focused on spreading computer and visual literacy. It distills their ","position":{"start":{"line":17,"column":99,"offset":1533},"end":{"line":17,"column":178,"offset":1612},"indent":[]}},{"type":"link","title":null,"url":"https://en.wikipedia.org/wiki/Processing_(programming_language)","children":[{"type":"text","value":"Processing","position":{"start":{"line":17,"column":179,"offset":1613},"end":{"line":17,"column":189,"offset":1623},"indent":[]}}],"position":{"start":{"line":17,"column":178,"offset":1612},"end":{"line":17,"column":255,"offset":1689},"indent":[]}},{"type":"text","value":" language into a JavaScript library that makes creating graphics easy and accessible whilst providing an ideal platform to springboard people’s careers in computer graphics. It should be mentioned now that a lot of inspiration has been taken from ","position":{"start":{"line":17,"column":255,"offset":1689},"end":{"line":17,"column":502,"offset":1936},"indent":[]}},{"type":"link","title":null,"url":"http://shiffman.net/","children":[{"type":"text","value":"Daniel Shiffman’s","position":{"start":{"line":17,"column":503,"offset":1937},"end":{"line":17,"column":520,"offset":1954},"indent":[]}}],"position":{"start":{"line":17,"column":502,"offset":1936},"end":{"line":17,"column":543,"offset":1977},"indent":[]}},{"type":"text","value":" p5 projects (from the ","position":{"start":{"line":17,"column":543,"offset":1977},"end":{"line":17,"column":566,"offset":2000},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/CodingTrain/website/tree/master/CodingChallenges/CC_03_Snake_game_p5.js","children":[{"type":"text","value":"classic snake game","position":{"start":{"line":17,"column":567,"offset":2001},"end":{"line":17,"column":585,"offset":2019},"indent":[]}}],"position":{"start":{"line":17,"column":566,"offset":2000},"end":{"line":17,"column":678,"offset":2112},"indent":[]}},{"type":"text","value":", to a ","position":{"start":{"line":17,"column":678,"offset":2112},"end":{"line":17,"column":685,"offset":2119},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/CodingTrain/website/tree/master/CodingChallenges/CC_93_DoublePendulum_p5.js","children":[{"type":"text","value":"double pendulum","position":{"start":{"line":17,"column":686,"offset":2120},"end":{"line":17,"column":701,"offset":2135},"indent":[]}}],"position":{"start":{"line":17,"column":685,"offset":2119},"end":{"line":17,"column":798,"offset":2232},"indent":[]}},{"type":"text","value":"). I can’t urge you enough to follow these projects to really improve your understanding of coding concepts and the p5 library.","position":{"start":{"line":17,"column":798,"offset":2232},"end":{"line":17,"column":925,"offset":2359},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":1435},"end":{"line":17,"column":925,"offset":2359},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Some prerequisites:","position":{"start":{"line":19,"column":5,"offset":2365},"end":{"line":19,"column":24,"offset":2384},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":2361},"end":{"line":19,"column":24,"offset":2384},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Before jumping into the p5 code I first want to make clear that there is assumed knowledge of HTML5 and JavaScript including arrays, functions, variables etc. in the rest of this article. If you have a good grasp of JavaScript then skip to the p5 code below, otherwise here are few resources to get you up to scratch.","position":{"start":{"line":21,"column":1,"offset":2386},"end":{"line":21,"column":318,"offset":2703},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":2386},"end":{"line":21,"column":318,"offset":2703},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":true,"children":[{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.youtube.com/watch?v=spIVWmv1jnw","children":[{"type":"text","value":"HaC Intro to Programming","position":{"start":{"line":23,"column":4,"offset":2708},"end":{"line":23,"column":28,"offset":2732},"indent":[]}}],"position":{"start":{"line":23,"column":3,"offset":2707},"end":{"line":23,"column":74,"offset":2778},"indent":[]}},{"type":"text","value":" — A workshop that is being run by Hackers at Cambridge to help anyone start learning to program (which uses JavaScript).","position":{"start":{"line":23,"column":74,"offset":2778},"end":{"line":23,"column":195,"offset":2899},"indent":[]}}],"position":{"start":{"line":23,"column":3,"offset":2707},"end":{"line":23,"column":195,"offset":2899},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":2705},"end":{"line":24,"column":1,"offset":2900},"indent":[1]}},{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.codecademy.com/learn/introduction-to-javascript","children":[{"type":"text","value":"Codecademy","position":{"start":{"line":25,"column":4,"offset":2904},"end":{"line":25,"column":14,"offset":2914},"indent":[]}}],"position":{"start":{"line":25,"column":3,"offset":2903},"end":{"line":25,"column":76,"offset":2976},"indent":[]}},{"type":"text","value":" — a great resource for learning how to code with instant feedback in your browser.","position":{"start":{"line":25,"column":76,"offset":2976},"end":{"line":25,"column":159,"offset":3059},"indent":[]}}],"position":{"start":{"line":25,"column":3,"offset":2903},"end":{"line":25,"column":159,"offset":3059},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":2901},"end":{"line":26,"column":1,"offset":3060},"indent":[1]}},{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript","children":[{"type":"text","value":"MDN","position":{"start":{"line":27,"column":4,"offset":3064},"end":{"line":27,"column":7,"offset":3067},"indent":[]}}],"position":{"start":{"line":27,"column":3,"offset":3063},"end":{"line":27,"column":65,"offset":3125},"indent":[]}},{"type":"text","value":" — a great resource for learning about all aspects of web development.","position":{"start":{"line":27,"column":65,"offset":3125},"end":{"line":27,"column":135,"offset":3195},"indent":[]}}],"position":{"start":{"line":27,"column":3,"offset":3063},"end":{"line":27,"column":135,"offset":3195},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":3061},"end":{"line":28,"column":1,"offset":3196},"indent":[1]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://codepen.io/","children":[{"type":"text","value":"Codepen","position":{"start":{"line":29,"column":4,"offset":3200},"end":{"line":29,"column":11,"offset":3207},"indent":[]}}],"position":{"start":{"line":29,"column":3,"offset":3199},"end":{"line":29,"column":33,"offset":3229},"indent":[]}},{"type":"text","value":" — a brilliant online text-editor for creating cool projects in HTML, CSS and JavaScript. Equally good for getting inspiration from a lot of talented users. Another possible solution would be ","position":{"start":{"line":29,"column":33,"offset":3229},"end":{"line":29,"column":225,"offset":3421},"indent":[]}},{"type":"link","title":null,"url":"https://jsfiddle.net/","children":[{"type":"text","value":"JSFiddle","position":{"start":{"line":29,"column":226,"offset":3422},"end":{"line":29,"column":234,"offset":3430},"indent":[]}}],"position":{"start":{"line":29,"column":225,"offset":3421},"end":{"line":29,"column":258,"offset":3454},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":29,"column":258,"offset":3454},"end":{"line":29,"column":259,"offset":3455},"indent":[]}}],"position":{"start":{"line":29,"column":3,"offset":3199},"end":{"line":29,"column":259,"offset":3455},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":3197},"end":{"line":29,"column":259,"offset":3455},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":2705},"end":{"line":29,"column":259,"offset":3455},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"What follows is a series of steps that will introduce you to p5 concepts. With code examples and explanations I hope to give you enough information to understand the ideas, but to fully grasp the concepts you will have to dive into the code, experiment with it, break it and learn from it. So without further ado, let’s get coding.","position":{"start":{"line":31,"column":1,"offset":3457},"end":{"line":31,"column":332,"offset":3788},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":3457},"end":{"line":31,"column":332,"offset":3788},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Step 1: The Setup","position":{"start":{"line":33,"column":5,"offset":3794},"end":{"line":33,"column":22,"offset":3811},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":3790},"end":{"line":33,"column":22,"offset":3811},"indent":[]}},{"type":"html","value":"<high-light className='JavaScript'>\nfunction setup(){\n  //Initialisation of canvas, objects, variables etc.\n}\nfunction draw(){\n  //The drawing loop - updates at a constant rate declared in setup\n}\n</high-light>","position":{"start":{"line":35,"column":1,"offset":3813},"end":{"line":42,"column":14,"offset":4023},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"p5 is really simple to setup once you know what to do. There are two files shown above — an index.html and a template.js. The index.html file gets the libraries for us and the template.js is the barebones structure of a p5 project and at the moment it does nothing! Within this we have two functions:","position":{"start":{"line":44,"column":1,"offset":4025},"end":{"line":44,"column":301,"offset":4325},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":4025},"end":{"line":44,"column":301,"offset":4325},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":true,"children":[{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"setup() — a function for creating what we will need for our graphic or project. Like creating a canvas, initialising some objects or arrays etc.","position":{"start":{"line":46,"column":3,"offset":4329},"end":{"line":46,"column":147,"offset":4473},"indent":[]}}],"position":{"start":{"line":46,"column":3,"offset":4329},"end":{"line":46,"column":147,"offset":4473},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":4327},"end":{"line":47,"column":1,"offset":4474},"indent":[1]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"draw() — a function which will be called periodically like a loop. This is where will call draw functions and update functions to make graphics and animations.","position":{"start":{"line":48,"column":3,"offset":4477},"end":{"line":48,"column":162,"offset":4636},"indent":[]}}],"position":{"start":{"line":48,"column":3,"offset":4477},"end":{"line":48,"column":162,"offset":4636},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":4475},"end":{"line":48,"column":162,"offset":4636},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":4327},"end":{"line":48,"column":162,"offset":4636},"indent":[1,1]}},{"type":"html","value":"<iframe height='400' scrolling='no' title='Simple Triangle Tutorial' src='//codepen.io/patricoferris/embed/dddxjr/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/dddxjr/'>Simple Triangle Tutorial</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":50,"column":1,"offset":4638},"end":{"line":51,"column":10,"offset":5132},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Let’s first look at the setup function. We used the p5 function createCanvas(width, height) which created and initialised a ","position":{"start":{"line":53,"column":1,"offset":5134},"end":{"line":53,"column":125,"offset":5258},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API","children":[{"type":"text","value":"canvas","position":{"start":{"line":53,"column":126,"offset":5259},"end":{"line":53,"column":132,"offset":5265},"indent":[]}}],"position":{"start":{"line":53,"column":125,"offset":5258},"end":{"line":53,"column":194,"offset":5327},"indent":[]}},{"type":"text","value":" with arguments width and height. Now within our setup() and createCanvas() functions we can reference the variables width and height without ever instantiating them!","position":{"start":{"line":53,"column":194,"offset":5327},"end":{"line":53,"column":360,"offset":5493},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":5134},"end":{"line":53,"column":360,"offset":5493},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Next comes the meaty, draw function. I have purposefully put extra code in here so we can learn more about what p5 has to offer. Firstly always remember that draw() is a loop that runs from top to bottom. Initially, we set the background (of our canvas) to white with background(255) which is the same as background(255, 255, 255) (maximising the red, green and blue values to give white). This may seem simple, but implicitly we are also clearing our canvas every loop… in one line of code! This will be useful for animations later as we want to redraw objects in a new location rather than have the ","position":{"start":{"line":55,"column":1,"offset":5495},"end":{"line":55,"column":602,"offset":6096},"indent":[]}},{"type":"link","title":null,"url":"https://codepen.io/patricoferris/pen/paxZaw","children":[{"type":"text","value":"build-up on the same canvas","position":{"start":{"line":55,"column":603,"offset":6097},"end":{"line":55,"column":630,"offset":6124},"indent":[]}}],"position":{"start":{"line":55,"column":602,"offset":6096},"end":{"line":55,"column":676,"offset":6170},"indent":[]}},{"type":"text","value":" (click to see it go spectacularly wrong). Next is a translate(width/2, height/2) which moves our current drawing location to the centre of our canvas. We then declare the fill colour of our triangle with fill(255, 0, 0)(making it red).","position":{"start":{"line":55,"column":676,"offset":6170},"end":{"line":55,"column":912,"offset":6406},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":5495},"end":{"line":55,"column":912,"offset":6406},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We want to create an equilateral triangle with side length s. The triangle itself is a function that takes the vertex coordinates as arguments — triangle(x1, y1, x2, y2, x3, y3) and in this example starting from the centre we have one vertex at (-s/2, 0) another at (s/2, 0) giving a bottom length of s . Now comes the trickier part. A very important aspect of most computer graphics is that the coordinate system starts in the top left corner (or wherever your origin is) and x increases left to right, whilst y increases top to bottom. To move of the screen we need a negative y value. Our last coordinate is given as (0, -sin(PI/3)) (if you’re stuck, think about cutting the triangle in two and using trigonometry).","position":{"start":{"line":57,"column":1,"offset":6408},"end":{"line":57,"column":719,"offset":7126},"indent":[]}}],"position":{"start":{"line":57,"column":1,"offset":6408},"end":{"line":57,"column":719,"offset":7126},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Step 2: Get Creative","position":{"start":{"line":59,"column":5,"offset":7132},"end":{"line":59,"column":25,"offset":7152},"indent":[]}}],"position":{"start":{"line":59,"column":1,"offset":7128},"end":{"line":59,"column":25,"offset":7152},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We’ve learnt how to set up our canvas and start drawing. Armed with the p5 ","position":{"start":{"line":61,"column":1,"offset":7154},"end":{"line":61,"column":76,"offset":7229},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/reference/","children":[{"type":"text","value":"reference page","position":{"start":{"line":61,"column":77,"offset":7230},"end":{"line":61,"column":91,"offset":7244},"indent":[]}}],"position":{"start":{"line":61,"column":76,"offset":7229},"end":{"line":61,"column":121,"offset":7274},"indent":[]}},{"type":"text","value":" and our creativity, we can make some truly stunning graphics. How about a bouncing ball animation?","position":{"start":{"line":61,"column":121,"offset":7274},"end":{"line":61,"column":220,"offset":7373},"indent":[]}}],"position":{"start":{"line":61,"column":1,"offset":7154},"end":{"line":61,"column":220,"offset":7373},"indent":[]}},{"type":"html","value":"<iframe height='400' scrolling='no' title='Bouncing Balls' src='//codepen.io/patricoferris/embed/PQpOrB/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/PQpOrB/'>Bouncing Balls</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":63,"column":1,"offset":7375},"end":{"line":64,"column":10,"offset":7849},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Let’s look at the interesting p5 aspects that we didn’t know before:","position":{"start":{"line":66,"column":1,"offset":7851},"end":{"line":66,"column":69,"offset":7919},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":7851},"end":{"line":66,"column":69,"offset":7919},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":true,"children":[{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"frameRate(20) — This enables us to specify the frame rate of our drawing loop, that is, how many times per second it redraws everything for us.","position":{"start":{"line":68,"column":3,"offset":7923},"end":{"line":68,"column":146,"offset":8066},"indent":[]}}],"position":{"start":{"line":68,"column":3,"offset":7923},"end":{"line":68,"column":146,"offset":8066},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":7921},"end":{"line":69,"column":1,"offset":8067},"indent":[1]}},{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"gravity = createVector(0, 9) — p5 allows us to ","position":{"start":{"line":70,"column":3,"offset":8070},"end":{"line":70,"column":50,"offset":8117},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/reference/#/p5.Vector","children":[{"type":"text","value":"create vector objects","position":{"start":{"line":70,"column":51,"offset":8118},"end":{"line":70,"column":72,"offset":8139},"indent":[]}}],"position":{"start":{"line":70,"column":50,"offset":8117},"end":{"line":70,"column":113,"offset":8180},"indent":[]}},{"type":"text","value":" with which we can perform vector operations like addition, multiplication, dot-product and cross-product. This is useful when we want to simulate physics like forces.","position":{"start":{"line":70,"column":113,"offset":8180},"end":{"line":70,"column":280,"offset":8347},"indent":[]}}],"position":{"start":{"line":70,"column":3,"offset":8070},"end":{"line":70,"column":280,"offset":8347},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":8068},"end":{"line":71,"column":1,"offset":8348},"indent":[1]}},{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"floor(random(50)) — Here we’re using p5 math functions. floor() takes a real number and rounds it down to the nearest integer. random(arg) produces a random number as small as 0 or up to 49. In this example, we are giving it to the ellipse(x, y, w)function to create randomly sized balls by setting the width to a random number. If we gave another argument it would set the ellipse’s height, but here it infers that we want a circle.","position":{"start":{"line":72,"column":3,"offset":8351},"end":{"line":72,"column":436,"offset":8784},"indent":[]}}],"position":{"start":{"line":72,"column":3,"offset":8351},"end":{"line":72,"column":436,"offset":8784},"indent":[]}}],"position":{"start":{"line":72,"column":1,"offset":8349},"end":{"line":73,"column":1,"offset":8785},"indent":[1]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"stroke(0) — This function sets the colour of our shape’s outline. If you don’t want any border you can add noStroke() .","position":{"start":{"line":74,"column":3,"offset":8788},"end":{"line":74,"column":122,"offset":8907},"indent":[]}}],"position":{"start":{"line":74,"column":3,"offset":8788},"end":{"line":74,"column":122,"offset":8907},"indent":[]}}],"position":{"start":{"line":74,"column":1,"offset":8786},"end":{"line":74,"column":122,"offset":8907},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":7921},"end":{"line":74,"column":122,"offset":8907},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"All you need now is to add some physics to these ideas and you have yourself a bouncing ball animation.","position":{"start":{"line":76,"column":1,"offset":8909},"end":{"line":76,"column":104,"offset":9012},"indent":[]}}],"position":{"start":{"line":76,"column":1,"offset":8909},"end":{"line":76,"column":104,"offset":9012},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Step 3: Experiment with p5","position":{"start":{"line":78,"column":5,"offset":9018},"end":{"line":78,"column":31,"offset":9044},"indent":[]}}],"position":{"start":{"line":78,"column":1,"offset":9014},"end":{"line":78,"column":31,"offset":9044},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Hopefully now you have a good understanding of the p5 fundamentals, but we’ve barely scratched the surface. This last example will use two extra features of p5: ","position":{"start":{"line":80,"column":1,"offset":9046},"end":{"line":80,"column":162,"offset":9207},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"interactivity","position":{"start":{"line":80,"column":163,"offset":9208},"end":{"line":80,"column":176,"offset":9221},"indent":[]}}],"position":{"start":{"line":80,"column":162,"offset":9207},"end":{"line":80,"column":177,"offset":9222},"indent":[]}},{"type":"text","value":" and* ","position":{"start":{"line":80,"column":177,"offset":9222},"end":{"line":80,"column":183,"offset":9228},"indent":[]}},{"type":"link","title":null,"url":"http://flafla2.github.io/2014/08/09/perlinnoise.html","children":[{"type":"text","value":"Perlin Noise","position":{"start":{"line":80,"column":184,"offset":9229},"end":{"line":80,"column":196,"offset":9241},"indent":[]}}],"position":{"start":{"line":80,"column":183,"offset":9228},"end":{"line":80,"column":251,"offset":9296},"indent":[]}},{"type":"text","value":"*. Keep reading to find out more on these two concepts.","position":{"start":{"line":80,"column":251,"offset":9296},"end":{"line":80,"column":306,"offset":9351},"indent":[]}}],"position":{"start":{"line":80,"column":1,"offset":9046},"end":{"line":80,"column":306,"offset":9351},"indent":[]}},{"type":"html","value":"<iframe height='400' scrolling='no' title='Pixel Fire' src='//codepen.io/patricoferris/embed/XZMxmV/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/XZMxmV/'>Pixel Fire</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":82,"column":1,"offset":9353},"end":{"line":83,"column":10,"offset":9819},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"In this CodePen I have created a relatively simple flame model using squares and Perlin Noise. First of all, how do we get user input? Lucky for us p5 has some functions that can help.","position":{"start":{"line":85,"column":1,"offset":9821},"end":{"line":85,"column":185,"offset":10005},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":9821},"end":{"line":85,"column":185,"offset":10005},"indent":[]}},{"type":"html","value":"<high-light className='JavaScript'>\nvar touch = false;\nfunction setup(){\n  createCanvas(640, 640);\n}\nfunction draw(){\n  if(touch){\n    fill(255, 0, 0);\n    rect(mouseX, mouseY, 20, 20);\n  }\n}\nfunction touchStarted(){\n  touch = true;\n}\nfunction touchEnded(){\n  touch = false;\n}\n</high-light>","position":{"start":{"line":87,"column":1,"offset":10007},"end":{"line":104,"column":14,"offset":10297},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"At the top of the code we have declared a boolean “flag” as to whether or not our mouse is being pressed — this allows us to do things if the mouse is being held down. The touchStarted() and touchEnded() are p5 functions that are executed whenever the mouse is pressed or released or the screen is touched and released. Lastly, in our rect() function we have the variables mouseX and mouseY which are p5 variables corresponding to the mouse’s current position. Oddly, these also refer to your ","position":{"start":{"line":106,"column":1,"offset":10299},"end":{"line":106,"column":494,"offset":10792},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/processing/p5.js/issues/1705","children":[{"type":"text","value":"“touch” coordinates","position":{"start":{"line":106,"column":495,"offset":10793},"end":{"line":106,"column":514,"offset":10812},"indent":[]}}],"position":{"start":{"line":106,"column":494,"offset":10792},"end":{"line":106,"column":564,"offset":10862},"indent":[]}},{"type":"text","value":". With all these variables and functions predefined for us we can focus on making visually stunning graphics, whilst not being hampered by having to code extra functions unrelated to the graphic we’re producing.","position":{"start":{"line":106,"column":564,"offset":10862},"end":{"line":106,"column":775,"offset":11073},"indent":[]}}],"position":{"start":{"line":106,"column":1,"offset":10299},"end":{"line":106,"column":775,"offset":11073},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now for the Perlin Noise. In 1983, tired with the artificial look of computer graphics, Ken Perlin developed a type of *gradient noise. *The basic idea being you create a big grid of gradients randomly and then use the dot product to interpolate between them. In short, we get random values based on the coordinate system we’re drawing on. Great! For each of our squares we can start them at a random position near our mouse, and generate a random upward vector using their position and Perlin Noise. Let’s look at the code:","position":{"start":{"line":108,"column":1,"offset":11075},"end":{"line":108,"column":525,"offset":11599},"indent":[]}}],"position":{"start":{"line":108,"column":1,"offset":11075},"end":{"line":108,"column":525,"offset":11599},"indent":[]}},{"type":"html","value":"<high-light className='JavaScript'>\nfunction Particle(x, y, color){\n  this.pos = createVector(x + random(-10, 10), y + random(-10, 10));\n  this.vel = createVector(floor(random(-1, 1))*noise(this.pos.x), -noise(this.pos.y)*7);\n  this.alpha = 255;\n  this.r = random(170, 255);\n  this.g = random(10, 255);\n  this.b = random(0, 100);\n  this.update = function(){\n    this.pos.add(this.vel);\n    this.alpha -= 5;\n  }\n  this.show = function(){\n    noStroke();\n    fill(this.r, this.g, this.b, this.alpha);\n    rect(this.pos.x, this.pos.y, 5, 5);\n  }\n  this.dead = function(){\n    if(this.alpha < 0){\n      return true;\n    }else{\n      return false;\n    }\n  }\n}\n</high-light>","position":{"start":{"line":110,"column":1,"offset":11601},"end":{"line":135,"column":14,"offset":12269},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Some key things to notice:","position":{"start":{"line":137,"column":1,"offset":12271},"end":{"line":137,"column":27,"offset":12297},"indent":[]}}],"position":{"start":{"line":137,"column":1,"offset":12271},"end":{"line":137,"column":27,"offset":12297},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":true,"children":[{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"noise(this.pos.x) — The Perlin Noise ","position":{"start":{"line":139,"column":3,"offset":12301},"end":{"line":139,"column":40,"offset":12338},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/reference/#/p5/noise","children":[{"type":"text","value":"function","position":{"start":{"line":139,"column":41,"offset":12339},"end":{"line":139,"column":49,"offset":12347},"indent":[]}}],"position":{"start":{"line":139,"column":40,"offset":12338},"end":{"line":139,"column":89,"offset":12387},"indent":[]}},{"type":"text","value":" that gets a random number based on the square’s current x position. It returns a value between 0 and 1.","position":{"start":{"line":139,"column":89,"offset":12387},"end":{"line":139,"column":193,"offset":12491},"indent":[]}}],"position":{"start":{"line":139,"column":3,"offset":12301},"end":{"line":139,"column":193,"offset":12491},"indent":[]}}],"position":{"start":{"line":139,"column":1,"offset":12299},"end":{"line":140,"column":1,"offset":12492},"indent":[1]}},{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"fill(this.r, this.g, this.b, this.alpha) — Here we have extended fill’s ability by including an alpha value for the objects transparency, by decreasing alpha in the update() function we get a nice fade out like a flame.","position":{"start":{"line":141,"column":3,"offset":12495},"end":{"line":141,"column":222,"offset":12714},"indent":[]}}],"position":{"start":{"line":141,"column":3,"offset":12495},"end":{"line":141,"column":222,"offset":12714},"indent":[]}}],"position":{"start":{"line":141,"column":1,"offset":12493},"end":{"line":142,"column":1,"offset":12715},"indent":[1]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"dead() — This function allows us to keep track of which particles have disappeared as their alpha is now less than zero. We can then splice() them out of our array to ensure we’re not drawing an unbounded number of particles over time which would cause performance issues.","position":{"start":{"line":143,"column":3,"offset":12718},"end":{"line":143,"column":275,"offset":12990},"indent":[]}}],"position":{"start":{"line":143,"column":3,"offset":12718},"end":{"line":143,"column":275,"offset":12990},"indent":[]}}],"position":{"start":{"line":143,"column":1,"offset":12716},"end":{"line":143,"column":275,"offset":12990},"indent":[]}}],"position":{"start":{"line":139,"column":1,"offset":12299},"end":{"line":143,"column":275,"offset":12990},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"As a challenge, you can also use blendMode() to make it seem even more realistic — check this ","position":{"start":{"line":145,"column":1,"offset":12992},"end":{"line":145,"column":95,"offset":13086},"indent":[]}},{"type":"link","title":null,"url":"https://codepen.io/anon/pen/YeOaJX","children":[{"type":"text","value":"alteration","position":{"start":{"line":145,"column":96,"offset":13087},"end":{"line":145,"column":106,"offset":13097},"indent":[]}}],"position":{"start":{"line":145,"column":95,"offset":13086},"end":{"line":145,"column":143,"offset":13134},"indent":[]}},{"type":"text","value":" to see it in action.","position":{"start":{"line":145,"column":143,"offset":13134},"end":{"line":145,"column":164,"offset":13155},"indent":[]}}],"position":{"start":{"line":145,"column":1,"offset":12992},"end":{"line":145,"column":164,"offset":13155},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"With only a few concepts and the p5 library, it is incredibly straightforward to start building anything you want. Be sure to checkout what else is possible with the library. Here are few cool ideas to get you started: ","position":{"start":{"line":147,"column":1,"offset":13157},"end":{"line":147,"column":220,"offset":13376},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/examples/3d-geometries.html","children":[{"type":"text","value":"3D graphics","position":{"start":{"line":147,"column":221,"offset":13377},"end":{"line":147,"column":232,"offset":13388},"indent":[]}}],"position":{"start":{"line":147,"column":220,"offset":13376},"end":{"line":147,"column":279,"offset":13435},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":147,"column":279,"offset":13435},"end":{"line":147,"column":281,"offset":13437},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/examples/dom-slider.html","children":[{"type":"text","value":"sliders","position":{"start":{"line":147,"column":282,"offset":13438},"end":{"line":147,"column":289,"offset":13445},"indent":[]}}],"position":{"start":{"line":147,"column":281,"offset":13437},"end":{"line":147,"column":333,"offset":13489},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":147,"column":333,"offset":13489},"end":{"line":147,"column":338,"offset":13494},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/examples/image-load-and-display-image.html","children":[{"type":"text","value":"images","position":{"start":{"line":147,"column":339,"offset":13495},"end":{"line":147,"column":345,"offset":13501},"indent":[]}}],"position":{"start":{"line":147,"column":338,"offset":13494},"end":{"line":147,"column":407,"offset":13563},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":147,"column":407,"offset":13563},"end":{"line":147,"column":408,"offset":13564},"indent":[]}}],"position":{"start":{"line":147,"column":1,"offset":13157},"end":{"line":147,"column":408,"offset":13564},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":149,"column":5,"offset":13570},"end":{"line":149,"column":15,"offset":13580},"indent":[]}}],"position":{"start":{"line":149,"column":1,"offset":13566},"end":{"line":149,"column":15,"offset":13580},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As computers and technology become ubiquitous in our daily lives and an increasing number of professions are now relying on computer literacy, p5.js is a beautiful example of how we can ensure as many people as possible have an entry-point to the wonderful world of computer programming. It also acts as a reminder to some more experienced programmers that creativity and imagination are vital in producing meaningful code and ultimately making the tech world a better place.","position":{"start":{"line":151,"column":1,"offset":13582},"end":{"line":151,"column":476,"offset":14057},"indent":[]}}],"position":{"start":{"line":151,"column":1,"offset":13582},"end":{"line":151,"column":476,"offset":14057},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Hopefully this intro to p5 has convinced you of its usefulness and has encouraged you to start taking your first steps into the world of graphics programming. Here are my recommendations for where to go next:","position":{"start":{"line":153,"column":1,"offset":14059},"end":{"line":153,"column":209,"offset":14267},"indent":[]}}],"position":{"start":{"line":153,"column":1,"offset":14059},"end":{"line":153,"column":209,"offset":14267},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":true,"children":[{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.youtube.com/user/shiffman","children":[{"type":"text","value":"The Coding Train","position":{"start":{"line":155,"column":4,"offset":14272},"end":{"line":155,"column":20,"offset":14288},"indent":[]}}],"position":{"start":{"line":155,"column":3,"offset":14271},"end":{"line":155,"column":60,"offset":14328},"indent":[]}},{"type":"text","value":" — A brilliant YouTube channel by Daniel Shiffman where he teaches JavaScript and p5.js amongst many other incredible things!","position":{"start":{"line":155,"column":60,"offset":14328},"end":{"line":155,"column":185,"offset":14453},"indent":[]}}],"position":{"start":{"line":155,"column":3,"offset":14271},"end":{"line":155,"column":185,"offset":14453},"indent":[]}}],"position":{"start":{"line":155,"column":1,"offset":14269},"end":{"line":156,"column":1,"offset":14454},"indent":[1]}},{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://p5js.org/examples/","children":[{"type":"text","value":"p5js.org ","position":{"start":{"line":157,"column":4,"offset":14458},"end":{"line":157,"column":13,"offset":14467},"indent":[]}}],"position":{"start":{"line":157,"column":3,"offset":14457},"end":{"line":157,"column":42,"offset":14496},"indent":[]}},{"type":"text","value":"— The examples page on this website is full of inspiring projects which you could recreate and extend further.","position":{"start":{"line":157,"column":42,"offset":14496},"end":{"line":157,"column":152,"offset":14606},"indent":[]}}],"position":{"start":{"line":157,"column":3,"offset":14457},"end":{"line":157,"column":152,"offset":14606},"indent":[]}}],"position":{"start":{"line":157,"column":1,"offset":14455},"end":{"line":158,"column":1,"offset":14607},"indent":[1]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.scratchapixel.com/index.php","children":[{"type":"text","value":"Sratchapixel","position":{"start":{"line":159,"column":4,"offset":14611},"end":{"line":159,"column":16,"offset":14623},"indent":[]}}],"position":{"start":{"line":159,"column":3,"offset":14610},"end":{"line":159,"column":58,"offset":14665},"indent":[]}},{"type":"text","value":" — If you feel ready to delve into the deeper concepts and implementations of computer graphics then this website is an incredible resource for you to use.","position":{"start":{"line":159,"column":58,"offset":14665},"end":{"line":159,"column":213,"offset":14820},"indent":[]}}],"position":{"start":{"line":159,"column":3,"offset":14610},"end":{"line":159,"column":213,"offset":14820},"indent":[]}}],"position":{"start":{"line":159,"column":1,"offset":14608},"end":{"line":159,"column":213,"offset":14820},"indent":[]}}],"position":{"start":{"line":155,"column":1,"offset":14269},"end":{"line":159,"column":213,"offset":14820},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"A special thanks to ","position":{"start":{"line":161,"column":1,"offset":14822},"end":{"line":161,"column":21,"offset":14842},"indent":[]}},{"type":"link","title":null,"url":"undefined","children":[{"type":"text","value":"Tom Read Cutting","position":{"start":{"line":161,"column":22,"offset":14843},"end":{"line":161,"column":38,"offset":14859},"indent":[]}}],"position":{"start":{"line":161,"column":21,"offset":14842},"end":{"line":161,"column":50,"offset":14871},"indent":[]}},{"type":"text","value":" for editing this article and ","position":{"start":{"line":161,"column":50,"offset":14871},"end":{"line":161,"column":80,"offset":14901},"indent":[]}},{"type":"link","title":null,"url":"undefined","children":[{"type":"text","value":"Christian Silver","position":{"start":{"line":161,"column":81,"offset":14902},"end":{"line":161,"column":97,"offset":14918},"indent":[]}}],"position":{"start":{"line":161,"column":80,"offset":14901},"end":{"line":161,"column":109,"offset":14930},"indent":[]}},{"type":"text","value":" for helping get it off the ground.","position":{"start":{"line":161,"column":109,"offset":14930},"end":{"line":161,"column":144,"offset":14965},"indent":[]}}],"position":{"start":{"line":161,"column":1,"offset":14822},"end":{"line":161,"column":144,"offset":14965},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":162,"column":1,"offset":14966}}}},{"id":"transformer-remark-markdown-ast-6de84442be590f5afaeaabc34f2549f0-gatsby-remark-imagesgatsby-remark-prismjs-","value":{"type":"root","children":[{"type":"yaml","value":"path: '/optimise-your-website'\ntitle: 'Optimising your Website'\nsubtitle: 'Tips and tricks to keep your website lean and fast'\ndate: '2018-07-28'","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":6,"column":4,"offset":153},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://res.cloudinary.com/patricoferris/image/upload/v1532781201/pf2018/blogposts/28-07-2018/website_optimisation_2.png","alt":"Optimising your Website","position":{"start":{"line":7,"column":1,"offset":154},"end":{"line":7,"column":149,"offset":302},"indent":[]}},{"type":"text","value":"\nInspired by a ","position":{"start":{"line":7,"column":149,"offset":302},"end":{"line":8,"column":15,"offset":317},"indent":[1]}},{"type":"link","title":null,"url":"https://syntax.fm/","children":[{"type":"text","value":"Syntax","position":{"start":{"line":8,"column":16,"offset":318},"end":{"line":8,"column":22,"offset":324},"indent":[]}}],"position":{"start":{"line":8,"column":15,"offset":317},"end":{"line":8,"column":43,"offset":345},"indent":[]}},{"type":"text","value":" podcast, I got really interested in website optimisation. It can often be an overlooked aspect in web development with more focus on design and functionality, I realised my number one priority whenever I visited a website is load speed. My attention is a website’s number one goal, lose it and they lose all potential ad revenue or possibility to give me whatever information I was looking for. ","position":{"start":{"line":8,"column":43,"offset":345},"end":{"line":8,"column":439,"offset":741},"indent":[]}},{"type":"link","title":null,"url":"https://developers.google.com/web/fundamentals/performance/get-started/","children":[{"type":"text","value":"Many seem to agree. 53% of users abandon websites that take more than 3 seconds to load","position":{"start":{"line":8,"column":440,"offset":742},"end":{"line":8,"column":527,"offset":829},"indent":[]}}],"position":{"start":{"line":8,"column":439,"offset":741},"end":{"line":8,"column":601,"offset":903},"indent":[]}},{"type":"text","value":". No amount of fancy graphics or parallax scrolling that appears five seconds after someone’s clicked will hide the slow loading times.","position":{"start":{"line":8,"column":601,"offset":903},"end":{"line":8,"column":736,"offset":1038},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":154},"end":{"line":8,"column":736,"offset":1038},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"The aim of this article is to give a broad overview of the concepts and ideas behind optimising your website, experienced developers are likely already using things like Webpack (a module bundler) among other tools to speed-up their sites.","position":{"start":{"line":10,"column":1,"offset":1040},"end":{"line":10,"column":240,"offset":1279},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":1040},"end":{"line":10,"column":240,"offset":1279},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For testing load-times I will be using the ","position":{"start":{"line":12,"column":1,"offset":1281},"end":{"line":12,"column":44,"offset":1324},"indent":[]}},{"type":"link","title":null,"url":"https://chrome.google.com/webstore/detail/page-load-time/fploionmjgeclbkemipmkogoaohcdbig?hl=en","children":[{"type":"text","value":"Page Load Time ","position":{"start":{"line":12,"column":45,"offset":1325},"end":{"line":12,"column":60,"offset":1340},"indent":[]}}],"position":{"start":{"line":12,"column":44,"offset":1324},"end":{"line":12,"column":158,"offset":1438},"indent":[]}},{"type":"text","value":"Chrome extension. There are a few ways to measure website loading time including: ","position":{"start":{"line":12,"column":158,"offset":1438},"end":{"line":12,"column":240,"offset":1520},"indent":[]}},{"type":"link","title":null,"url":"https://developers.google.com/web/tools/chrome-user-experience-report/","children":[{"type":"text","value":"first paint, first meaning paint, DOMContentLoaded","position":{"start":{"line":12,"column":241,"offset":1521},"end":{"line":12,"column":291,"offset":1571},"indent":[]}}],"position":{"start":{"line":12,"column":240,"offset":1520},"end":{"line":12,"column":364,"offset":1644},"indent":[]}},{"type":"text","value":" etc. For a more detailed look into what this timer measures, check out the Github repository below.\n","position":{"start":{"line":12,"column":364,"offset":1644},"end":{"line":13,"column":1,"offset":1745},"indent":[1]}},{"type":"link","title":null,"url":"https://github.com/alex-vv/chrome-load-timer","children":[{"type":"strong","children":[{"type":"text","value":"alex-vv/chrome-load-timer","position":{"start":{"line":13,"column":4,"offset":1748},"end":{"line":13,"column":29,"offset":1773},"indent":[]}}],"position":{"start":{"line":13,"column":2,"offset":1746},"end":{"line":13,"column":31,"offset":1775},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":13,"column":31,"offset":1775},"end":{"line":14,"column":1,"offset":1776},"indent":[1]}},{"type":"emphasis","children":[{"type":"text","value":"chrome-load-timer - Google Chrome extension to measure page load time and display it in the toolbar","position":{"start":{"line":14,"column":2,"offset":1777},"end":{"line":14,"column":101,"offset":1876},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":1776},"end":{"line":14,"column":102,"offset":1877},"indent":[]}},{"type":"text","value":"github.com","position":{"start":{"line":14,"column":102,"offset":1877},"end":{"line":14,"column":112,"offset":1887},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":1745},"end":{"line":14,"column":159,"offset":1934},"indent":[1]}}],"position":{"start":{"line":12,"column":1,"offset":1281},"end":{"line":14,"column":159,"offset":1934},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"strong","children":[{"type":"text","value":"Use Minified Stylesheets and Scripts","position":{"start":{"line":16,"column":7,"offset":1942},"end":{"line":16,"column":43,"offset":1978},"indent":[]}}],"position":{"start":{"line":16,"column":5,"offset":1940},"end":{"line":16,"column":45,"offset":1980},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":1936},"end":{"line":16,"column":45,"offset":1980},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You would be amazed at how much performance can be gained by this simple trick. What is a minified document? When we write code it is never our job to make it optimised for the computer, instead our golden rule is to make it readable to humans. This improves readability, cuts down on debug time and makes it easier to maintain. However, to achieve this we often add extra spacing which costs us precious space. Minifying the code is trimming all this fat from what we’ve written to have code that produces the same result but is far more difficult to read and maintain. This is okay though, because a computer has no problem deciphering it. Take the following code for example.","position":{"start":{"line":18,"column":1,"offset":1982},"end":{"line":18,"column":679,"offset":2660},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1982},"end":{"line":18,"column":679,"offset":2660},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","position":{"start":{"line":20,"column":1,"offset":2662},"end":{"line":29,"column":4,"offset":2921},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Notice how, wherever possible, our line-breaks and spaces are gone. On top of that, the code in the for-loop is only one line so there’s no need for the curly braces which extends our code over three lines when it can be done in one. Does this make a difference?","position":{"start":{"line":31,"column":1,"offset":2923},"end":{"line":31,"column":263,"offset":3185},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":2923},"end":{"line":31,"column":263,"offset":3185},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"I tried it out on simple website that just had one ","position":{"start":{"line":33,"column":1,"offset":3187},"end":{"line":33,"column":52,"offset":3238},"indent":[]}},{"type":"html","value":"<script>","position":{"start":{"line":33,"column":52,"offset":3238},"end":{"line":33,"column":60,"offset":3246},"indent":[]}},{"type":"text","value":" tag being loaded in for the graphics library ","position":{"start":{"line":33,"column":60,"offset":3246},"end":{"line":33,"column":106,"offset":3292},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/","children":[{"type":"text","value":"p5.js","position":{"start":{"line":33,"column":107,"offset":3293},"end":{"line":33,"column":112,"offset":3298},"indent":[]}}],"position":{"start":{"line":33,"column":106,"offset":3292},"end":{"line":33,"column":132,"offset":3318},"indent":[]}},{"type":"text","value":". Using the non-minified CDN link I got a load time of 0.25 seconds. Using the minified version I got a markedly improved load time of 0.08 seconds. Depending on what your website project is, there are a few ways to automatically minify code. If it is a ","position":{"start":{"line":33,"column":132,"offset":3318},"end":{"line":33,"column":386,"offset":3572},"indent":[]}},{"type":"link","title":null,"url":"https://guide.meteor.com/build-tool.html","children":[{"type":"text","value":"Meteor app","position":{"start":{"line":33,"column":387,"offset":3573},"end":{"line":33,"column":397,"offset":3583},"indent":[]}}],"position":{"start":{"line":33,"column":386,"offset":3572},"end":{"line":33,"column":440,"offset":3626},"indent":[]}},{"type":"text","value":" it will be done automatically, using ","position":{"start":{"line":33,"column":440,"offset":3626},"end":{"line":33,"column":478,"offset":3664},"indent":[]}},{"type":"link","title":null,"url":"https://webpack.js.org/guides/production/","children":[{"type":"text","value":"Webpack ","position":{"start":{"line":33,"column":479,"offset":3665},"end":{"line":33,"column":487,"offset":3673},"indent":[]}}],"position":{"start":{"line":33,"column":478,"offset":3664},"end":{"line":33,"column":531,"offset":3717},"indent":[]}},{"type":"text","value":"will also allow you to do this. Otherwise there are some online tools like ","position":{"start":{"line":33,"column":531,"offset":3717},"end":{"line":33,"column":606,"offset":3792},"indent":[]}},{"type":"link","title":null,"url":"https://jscompress.com/","children":[{"type":"text","value":"JSCompress ","position":{"start":{"line":33,"column":607,"offset":3793},"end":{"line":33,"column":618,"offset":3804},"indent":[]}}],"position":{"start":{"line":33,"column":606,"offset":3792},"end":{"line":33,"column":644,"offset":3830},"indent":[]}},{"type":"text","value":"or ","position":{"start":{"line":33,"column":644,"offset":3830},"end":{"line":33,"column":647,"offset":3833},"indent":[]}},{"type":"link","title":null,"url":"https://cssminifier.com/","children":[{"type":"text","value":"CSSMinifier ","position":{"start":{"line":33,"column":648,"offset":3834},"end":{"line":33,"column":660,"offset":3846},"indent":[]}}],"position":{"start":{"line":33,"column":647,"offset":3833},"end":{"line":33,"column":687,"offset":3873},"indent":[]}},{"type":"text","value":"that you can upload your code to.","position":{"start":{"line":33,"column":687,"offset":3873},"end":{"line":33,"column":720,"offset":3906},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":3187},"end":{"line":33,"column":720,"offset":3906},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Design Versus Performance","position":{"start":{"line":35,"column":5,"offset":3912},"end":{"line":35,"column":30,"offset":3937},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":3908},"end":{"line":35,"column":30,"offset":3937},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Whilst design is undoubtedly a major aspect to a website’s overall success, both developers and designers must work together to compromise and make a mutually beneficial trade-off between design and performance. The classic example is fonts. Take the two screenshots of a simple website below.","position":{"start":{"line":37,"column":1,"offset":3939},"end":{"line":37,"column":294,"offset":4232},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":3939},"end":{"line":37,"column":294,"offset":4232},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://res.cloudinary.com/patricoferris/image/upload/v1532780050/pf2018/blogposts/28-07-2018/Helvetica.png","alt":"The example website using Helvetica Font (commonly found on many computers) — check [this](https://css-tricks.com/snippets/css/system-font-stack/) link for common system fonts","position":{"start":{"line":39,"column":1,"offset":4234},"end":{"line":39,"column":288,"offset":4521},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":39,"column":288,"offset":4521},"end":{"line":40,"column":1,"offset":4522},"indent":[1]}},{"type":"emphasis","children":[{"type":"text","value":"The example website using Helvetica Font (commonly found on many computers) — check ","position":{"start":{"line":40,"column":2,"offset":4523},"end":{"line":40,"column":86,"offset":4607},"indent":[]}},{"type":"link","title":null,"url":"https://css-tricks.com/snippets/css/system-font-stack/","children":[{"type":"text","value":"this","position":{"start":{"line":40,"column":87,"offset":4608},"end":{"line":40,"column":91,"offset":4612},"indent":[]}}],"position":{"start":{"line":40,"column":86,"offset":4607},"end":{"line":40,"column":148,"offset":4669},"indent":[]}},{"type":"text","value":" link for common system fonts","position":{"start":{"line":40,"column":148,"offset":4669},"end":{"line":40,"column":177,"offset":4698},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":4522},"end":{"line":40,"column":178,"offset":4699},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":4234},"end":{"line":40,"column":178,"offset":4699},"indent":[1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://cdn-images-1.medium.com/max/5760/1*8ciuJNBdqMhlLSaOpNUXow.png","alt":"The example website using Roboto Font (designed by Google and linked from [Google Fonts](https://fonts.google.com/?selection.family=Roboto))","position":{"start":{"line":42,"column":1,"offset":4701},"end":{"line":42,"column":215,"offset":4915},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"The example website using Roboto Font (designed by Google and linked from ","position":{"start":{"line":42,"column":216,"offset":4916},"end":{"line":42,"column":290,"offset":4990},"indent":[]}},{"type":"link","title":null,"url":"https://fonts.google.com/?selection.family=Roboto","children":[{"type":"text","value":"Google Fonts","position":{"start":{"line":42,"column":291,"offset":4991},"end":{"line":42,"column":303,"offset":5003},"indent":[]}}],"position":{"start":{"line":42,"column":290,"offset":4990},"end":{"line":42,"column":355,"offset":5055},"indent":[]}},{"type":"text","value":")","position":{"start":{"line":42,"column":355,"offset":5055},"end":{"line":42,"column":356,"offset":5056},"indent":[]}}],"position":{"start":{"line":42,"column":215,"offset":4915},"end":{"line":42,"column":357,"offset":5057},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":4701},"end":{"line":42,"column":357,"offset":5057},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Before critiquing my questionable design skills take a moment to appreciate that these two fonts are very similar — yet the loading time for a website for the Roboto font was 0.22 seconds as compared with 0.17 for Helvetica. Whilst not that significant, using lots of custom fonts will slow down your website, although using Google Fonts’ API will help keep your website optimised. As an over-the-top example, linking 20 different fonts from the Google API increased the load time to 0.87 seconds.","position":{"start":{"line":44,"column":1,"offset":5059},"end":{"line":44,"column":498,"offset":5556},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":5059},"end":{"line":44,"column":498,"offset":5556},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Inlining your JavaScript and CSS","position":{"start":{"line":46,"column":5,"offset":5562},"end":{"line":46,"column":37,"offset":5594},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":5558},"end":{"line":46,"column":37,"offset":5594},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For each individual document or component of your website, when the parser reaches the script tag or link tag it sends and HTTP request for that document and if not stated differently, these will be blocking actions. What this means is your machine is parsing the HTML document getting the words to display in your browser but if it hits the script tag with the attribute src='js/main.js' for example, it will block the parsing and load in that file. This is where as a developer you need to be clever about where in the document you place things.","position":{"start":{"line":48,"column":1,"offset":5596},"end":{"line":48,"column":548,"offset":6143},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":5596},"end":{"line":48,"column":548,"offset":6143},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Whilst it may not ultimately affect the loading time of your website, it can affect the order in which things are loaded. Again we’ll be using the un-minified p5.js library to simulate a large JavaScript file and load it in different places to see how it affects our user experience.","position":{"start":{"line":50,"column":1,"offset":6145},"end":{"line":50,"column":284,"offset":6428},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":6145},"end":{"line":50,"column":284,"offset":6428},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://cdn-images-1.medium.com/max/2780/1*h_3GogfkaahcXCO9a43CPA.gif","alt":"Refreshing website with the script tag inserted at the bottom of the body tag","position":{"start":{"line":52,"column":1,"offset":6430},"end":{"line":52,"column":152,"offset":6581},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Refreshing website with the script tag inserted at the bottom of the body tag","position":{"start":{"line":52,"column":153,"offset":6582},"end":{"line":52,"column":230,"offset":6659},"indent":[]}}],"position":{"start":{"line":52,"column":152,"offset":6581},"end":{"line":52,"column":231,"offset":6660},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":6430},"end":{"line":52,"column":231,"offset":6660},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://cdn-images-1.medium.com/max/2780/1*xLOq5r4erQAwb4Au_hB-Ww.gif","alt":"Refreshing website with the script tag inserted at the top of the body tag","position":{"start":{"line":54,"column":1,"offset":6662},"end":{"line":54,"column":149,"offset":6810},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Refreshing website with the script tag inserted at the top of the body tag","position":{"start":{"line":54,"column":150,"offset":6811},"end":{"line":54,"column":224,"offset":6885},"indent":[]}}],"position":{"start":{"line":54,"column":149,"offset":6810},"end":{"line":54,"column":225,"offset":6886},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":6662},"end":{"line":54,"column":225,"offset":6886},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Whilst the load times were similar for both cases — the user experience is far better by placing the script at the body tag allowing the HTML to be parsed before the JavaScript giving the user the website content immediately!","position":{"start":{"line":56,"column":1,"offset":6888},"end":{"line":56,"column":226,"offset":7113},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":6888},"end":{"line":56,"column":226,"offset":7113},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In the same vein CSS can also be render-blocking especially because more often than not it is linked in the head tag of your HTML document before the body. But if we want our user to see the content in the quickest time we don’t want to be loading CSS for the footer of our document which the user won’t see until they’ve scrolled to the bottom. In fact, we don’t want to load any CSS in that the user can’t immediately see when the page first loads on their device.","position":{"start":{"line":58,"column":1,"offset":7115},"end":{"line":58,"column":467,"offset":7581},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":7115},"end":{"line":58,"column":467,"offset":7581},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The CSS that you need is often called the ","position":{"start":{"line":60,"column":1,"offset":7583},"end":{"line":60,"column":43,"offset":7625},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Critical CSS","position":{"start":{"line":60,"column":44,"offset":7626},"end":{"line":60,"column":56,"offset":7638},"indent":[]}}],"position":{"start":{"line":60,"column":43,"offset":7625},"end":{"line":60,"column":57,"offset":7639},"indent":[]}},{"type":"text","value":". Finding it for yourself would be a headache. It will be different for different devices, meaning you would have to check manually for all possible devices. Lucky for us we have (if you’re using ","position":{"start":{"line":60,"column":57,"offset":7639},"end":{"line":60,"column":253,"offset":7835},"indent":[]}},{"type":"link","title":null,"url":"https://nodejs.org/en/","children":[{"type":"text","value":"Node.js","position":{"start":{"line":60,"column":254,"offset":7836},"end":{"line":60,"column":261,"offset":7843},"indent":[]}}],"position":{"start":{"line":60,"column":253,"offset":7835},"end":{"line":60,"column":286,"offset":7868},"indent":[]}},{"type":"text","value":") ","position":{"start":{"line":60,"column":286,"offset":7868},"end":{"line":60,"column":288,"offset":7870},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/addyosmani/critical","children":[{"type":"text","value":"Critical","position":{"start":{"line":60,"column":289,"offset":7871},"end":{"line":60,"column":297,"offset":7879},"indent":[]}}],"position":{"start":{"line":60,"column":288,"offset":7870},"end":{"line":60,"column":338,"offset":7920},"indent":[]}},{"type":"text","value":". This helpful package does the CSS inlining for us and all we do is add some code to a Javascript file. Here’s a code snippet from the Github page.","position":{"start":{"line":60,"column":338,"offset":7920},"end":{"line":60,"column":486,"offset":8068},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":7583},"end":{"line":60,"column":486,"offset":8068},"indent":[]}},{"type":"html","lang":"JavaScript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">//Normal JavaScript Code\nconst arr = [1, 2, 3, 4, 5];\nfor(let i = 0; i &lt; arr.length; i++){\n  console.log(arr[i]);\n}\n\n//Minified Code - A 22.83% Compression saving 0.02kB\nconst arr=[1,2,3,4,5];for(let a=0;a&lt;arr.length;a++)console.log(arr[a]);</code></pre>\n      </div>","position":{"start":{"line":62,"column":1,"offset":8070},"end":{"line":73,"column":4,"offset":8331},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Using the generate function, we supply it with a JavaScript object with some values defined. base is where we’re going to save our src and dest (our project folder usually). What’s great is now we just supply an array of dimensions and the code will compute the critical CSS for each and inline that code into our head tag.","position":{"start":{"line":75,"column":1,"offset":8333},"end":{"line":75,"column":324,"offset":8656},"indent":[]}}],"position":{"start":{"line":75,"column":1,"offset":8333},"end":{"line":75,"column":324,"offset":8656},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Async and Defer","position":{"start":{"line":77,"column":5,"offset":8662},"end":{"line":77,"column":20,"offset":8677},"indent":[]}}],"position":{"start":{"line":77,"column":1,"offset":8658},"end":{"line":77,"column":20,"offset":8677},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Again, we come back to this idea of render-blocking and how best we should implement this for our website. When you have a plain script tag in your HTML it blocks the HTML from loading whilst the JavaScript loads ","position":{"start":{"line":79,"column":1,"offset":8679},"end":{"line":79,"column":214,"offset":8892},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"and","position":{"start":{"line":79,"column":216,"offset":8894},"end":{"line":79,"column":219,"offset":8897},"indent":[]}}],"position":{"start":{"line":79,"column":214,"offset":8892},"end":{"line":79,"column":221,"offset":8899},"indent":[]}},{"type":"text","value":" runs. Async and defer are simple attributes that you can add to your script tags that change the way your JavaScript will be loaded.","position":{"start":{"line":79,"column":221,"offset":8899},"end":{"line":79,"column":354,"offset":9032},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":8679},"end":{"line":79,"column":354,"offset":9032},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Defer essentially “defers” execution of the script until after the HTML has been parsed. A major advantage of this is that you no longer need some $(document).ready() jQuery-style function to make sure the body was loaded before you could manipulate it, which could cut out some of the dependencies on libraries like jQuery which helps reduce load-time.","position":{"start":{"line":81,"column":1,"offset":9034},"end":{"line":81,"column":354,"offset":9387},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":9034},"end":{"line":81,"column":354,"offset":9387},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Async is, unsurprisingly, the asynchronous loading of JavaScript files. What does this mean? Your HTML will continue to be parsed whilst the file is loaded and then whenever its ready the file will be executed. This helps improving user experience whilst viewing your website. Imagine for example you had a JavaScript file for doing some cool graphics. You want the words around this graphic to be parsed until your graphic is ready to be executed. As soon as it is ready, it is executed and we get a more seamless loading of our webpage without missing pieces.","position":{"start":{"line":83,"column":1,"offset":9389},"end":{"line":83,"column":562,"offset":9950},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":9389},"end":{"line":83,"column":562,"offset":9950},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Check this ","position":{"start":{"line":85,"column":1,"offset":9952},"end":{"line":85,"column":12,"offset":9963},"indent":[]}},{"type":"link","title":null,"url":"http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html","children":[{"type":"text","value":"website","position":{"start":{"line":85,"column":13,"offset":9964},"end":{"line":85,"column":20,"offset":9971},"indent":[]}}],"position":{"start":{"line":85,"column":12,"offset":9963},"end":{"line":85,"column":94,"offset":10045},"indent":[]}},{"type":"text","value":" for a really intuitive, graphical representation of this.","position":{"start":{"line":85,"column":94,"offset":10045},"end":{"line":85,"column":152,"offset":10103},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":9952},"end":{"line":85,"column":152,"offset":10103},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Image Optimisation and Media Queries","position":{"start":{"line":87,"column":5,"offset":10109},"end":{"line":87,"column":41,"offset":10145},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":10105},"end":{"line":87,"column":41,"offset":10145},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The cornerstone of all website performance optimisation is the simple rule that, the less data you send to the client, the quicker and better your website will perform. With the plethora of devices on the market capable of viewing websites, there is a growing trend to optimise your website based on the device it is being viewed on.","position":{"start":{"line":89,"column":1,"offset":10147},"end":{"line":89,"column":334,"offset":10480},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":10147},"end":{"line":89,"column":334,"offset":10480},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Media queries are a fairly new tool added to CSS3. With more and more content being consumed using mobile-devices there has been a shift in design thinking towards mobile first. Using media queries you can then add stylings for larger screen sizes.","position":{"start":{"line":91,"column":1,"offset":10482},"end":{"line":91,"column":249,"offset":10730},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":10482},"end":{"line":91,"column":249,"offset":10730},"indent":[]}},{"type":"html","value":"<iframe src=\"https://medium.com/media/2b53ce5004bbba6e65050bf48c9a864b\" frameborder=0></iframe>","position":{"start":{"line":93,"column":1,"offset":10732},"end":{"line":93,"column":96,"offset":10827},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The @media tag starts a new CSS rule, whilst the only keyword stops older browsers that don’t support media queries from using it. The screen keyword applies the rules to screens rather than prints. After that you add the media-feature which supports the and , or and not keywords so you can get as specific as you want. When you’re loading your image you can write code like:","position":{"start":{"line":95,"column":1,"offset":10829},"end":{"line":95,"column":377,"offset":11205},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":10829},"end":{"line":95,"column":377,"offset":11205},"indent":[]}},{"type":"html","value":"<iframe src=\"https://medium.com/media/ecbcd475236339fbe45efdd97bfcdeed\" frameborder=0></iframe>","position":{"start":{"line":97,"column":1,"offset":11207},"end":{"line":97,"column":96,"offset":11302},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This isn’t necessarily the best or optimal approach for image optimisation. Luckily we have other options. ","position":{"start":{"line":99,"column":1,"offset":11304},"end":{"line":99,"column":108,"offset":11411},"indent":[]}},{"type":"link","title":null,"url":"https://www.imgix.com/","children":[{"type":"text","value":"Imgix","position":{"start":{"line":99,"column":109,"offset":11412},"end":{"line":99,"column":114,"offset":11417},"indent":[]}}],"position":{"start":{"line":99,"column":108,"offset":11411},"end":{"line":99,"column":139,"offset":11442},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":99,"column":139,"offset":11442},"end":{"line":99,"column":144,"offset":11447},"indent":[]}},{"type":"link","title":null,"url":"https://cloudinary.com/","children":[{"type":"text","value":"Cloudinary","position":{"start":{"line":99,"column":145,"offset":11448},"end":{"line":99,"column":155,"offset":11458},"indent":[]}}],"position":{"start":{"line":99,"column":144,"offset":11447},"end":{"line":99,"column":181,"offset":11484},"indent":[]}},{"type":"text","value":" are two ways you can help optimise your site for the right device. Imgix is a Content Delivery Network (CDN) for images with a lot of cool features. A CDN simply takes your files and spreads them across the globe so that someone in a different country doesn’t have to wait for your files on your server to make it all the way to them. This ","position":{"start":{"line":99,"column":181,"offset":11484},"end":{"line":99,"column":522,"offset":11825},"indent":[]}},{"type":"link","title":null,"url":"https://docs.imgix.com/tutorials/responsive-images-srcset-imgix","children":[{"type":"text","value":"tutorial","position":{"start":{"line":99,"column":523,"offset":11826},"end":{"line":99,"column":531,"offset":11834},"indent":[]}}],"position":{"start":{"line":99,"column":522,"offset":11825},"end":{"line":99,"column":597,"offset":11900},"indent":[]}},{"type":"text","value":" goes through how to use Imgix for different device pixel ratios. Cloudinary is a similar service, and their ","position":{"start":{"line":99,"column":597,"offset":11900},"end":{"line":99,"column":706,"offset":12009},"indent":[]}},{"type":"link","title":null,"url":"https://cloudinary.com/documentation/image_optimization","children":[{"type":"text","value":"tutorial ","position":{"start":{"line":99,"column":707,"offset":12010},"end":{"line":99,"column":716,"offset":12019},"indent":[]}}],"position":{"start":{"line":99,"column":706,"offset":12009},"end":{"line":99,"column":774,"offset":12077},"indent":[]}},{"type":"text","value":"will take you through the importance of optimisation and how to achieve it will their incredible services. Below is a small example showing how easy it is to use Cloudinary straight in the HTML markup.","position":{"start":{"line":99,"column":774,"offset":12077},"end":{"line":99,"column":975,"offset":12278},"indent":[]}}],"position":{"start":{"line":99,"column":1,"offset":11304},"end":{"line":99,"column":975,"offset":12278},"indent":[]}},{"type":"html","value":"<iframe src=\"https://medium.com/media/98868354e5bf607d317496f64ddec2a2\" frameborder=0></iframe>","position":{"start":{"line":101,"column":1,"offset":12280},"end":{"line":101,"column":96,"offset":12375},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As a last point on image optimisation, the format you use can have a large impact on file size. Some files contain lots of metadata which you don’t want to be serving to your client — ","position":{"start":{"line":103,"column":1,"offset":12377},"end":{"line":103,"column":185,"offset":12561},"indent":[]}},{"type":"link","title":null,"url":"https://www.sno.phy.queensu.ca/~phil/exiftool/","children":[{"type":"text","value":"ExifTool","position":{"start":{"line":103,"column":186,"offset":12562},"end":{"line":103,"column":194,"offset":12570},"indent":[]}}],"position":{"start":{"line":103,"column":185,"offset":12561},"end":{"line":103,"column":243,"offset":12619},"indent":[]}},{"type":"text","value":" is a commonly used command-line application that can help you trim down those files sizes. On top of this, Scalable Vector Graphics (SVG) are a web-standard developed by W3C that offers XML-based vector graphics. This means they have infinite resolution unlike PNG or JPG files. It also makes them highly versatile, easily editable and can even be animated. At the end of the day SVGs are just code and so the file sizes tend to be small. For more reasons to use them, check out this ","position":{"start":{"line":103,"column":243,"offset":12619},"end":{"line":103,"column":728,"offset":13104},"indent":[]}},{"type":"link","title":null,"url":"https://watb.co.uk/5-reasons-you-should-be-using-svgs-over-pngs/","children":[{"type":"text","value":"article","position":{"start":{"line":103,"column":729,"offset":13105},"end":{"line":103,"column":736,"offset":13112},"indent":[]}}],"position":{"start":{"line":103,"column":728,"offset":13104},"end":{"line":103,"column":803,"offset":13179},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":103,"column":803,"offset":13179},"end":{"line":103,"column":804,"offset":13180},"indent":[]}}],"position":{"start":{"line":103,"column":1,"offset":12377},"end":{"line":103,"column":804,"offset":13180},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":105,"column":5,"offset":13186},"end":{"line":105,"column":15,"offset":13196},"indent":[]}}],"position":{"start":{"line":105,"column":1,"offset":13182},"end":{"line":105,"column":15,"offset":13196},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We’ve only scratched the surface of what’s possible for website optimisation. There are many tools you can use to help you stream-line this process like ","position":{"start":{"line":107,"column":1,"offset":13198},"end":{"line":107,"column":154,"offset":13351},"indent":[]}},{"type":"link","title":null,"url":"https://webpack.js.org/","children":[{"type":"text","value":"Webpack","position":{"start":{"line":107,"column":155,"offset":13352},"end":{"line":107,"column":162,"offset":13359},"indent":[]}}],"position":{"start":{"line":107,"column":154,"offset":13351},"end":{"line":107,"column":188,"offset":13385},"indent":[]}},{"type":"text","value":" for bundling or static-site generators like ","position":{"start":{"line":107,"column":188,"offset":13385},"end":{"line":107,"column":233,"offset":13430},"indent":[]}},{"type":"link","title":null,"url":"https://www.gatsbyjs.org/","children":[{"type":"text","value":"Gatsby","position":{"start":{"line":107,"column":234,"offset":13431},"end":{"line":107,"column":240,"offset":13437},"indent":[]}}],"position":{"start":{"line":107,"column":233,"offset":13430},"end":{"line":107,"column":268,"offset":13465},"indent":[]}},{"type":"text","value":". ","position":{"start":{"line":107,"column":268,"offset":13465},"end":{"line":107,"column":270,"offset":13467},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking","children":[{"type":"text","value":"Tree shaking","position":{"start":{"line":107,"column":271,"offset":13468},"end":{"line":107,"column":283,"offset":13480},"indent":[]}}],"position":{"start":{"line":107,"column":270,"offset":13467},"end":{"line":107,"column":348,"offset":13545},"indent":[]}},{"type":"text","value":" is another commonly used technique to remove excess, unused modules lying around your website.","position":{"start":{"line":107,"column":348,"offset":13545},"end":{"line":107,"column":443,"offset":13640},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":13198},"end":{"line":107,"column":443,"offset":13640},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Hopefully this article has touched on some useful techniques you can use on your next site to help improve its performance. Happy coding!","position":{"start":{"line":109,"column":1,"offset":13642},"end":{"line":109,"column":138,"offset":13779},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":13642},"end":{"line":109,"column":138,"offset":13779},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A big thank you to ","position":{"start":{"line":111,"column":1,"offset":13781},"end":{"line":111,"column":20,"offset":13800},"indent":[]}},{"type":"link","title":null,"url":"undefined","children":[{"type":"text","value":"Christian Silver","position":{"start":{"line":111,"column":21,"offset":13801},"end":{"line":111,"column":37,"offset":13817},"indent":[]}}],"position":{"start":{"line":111,"column":20,"offset":13800},"end":{"line":111,"column":49,"offset":13829},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":111,"column":49,"offset":13829},"end":{"line":111,"column":54,"offset":13834},"indent":[]}},{"type":"link","title":null,"url":"undefined","children":[{"type":"text","value":"Charlie Crisp","position":{"start":{"line":111,"column":55,"offset":13835},"end":{"line":111,"column":68,"offset":13848},"indent":[]}}],"position":{"start":{"line":111,"column":54,"offset":13834},"end":{"line":111,"column":80,"offset":13860},"indent":[]}},{"type":"text","value":" for editing this post and providing extremely useful advice and extra content to make it even better.","position":{"start":{"line":111,"column":80,"offset":13860},"end":{"line":111,"column":182,"offset":13962},"indent":[]}}],"position":{"start":{"line":111,"column":1,"offset":13781},"end":{"line":111,"column":182,"offset":13962},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":112,"column":1,"offset":13963}}}},{"id":"transformer-remark-markdown-html-ast-30717f8b5b5a89b2192ecc720cc27aaf-gatsby-remark-imagesgatsby-remark-prismjs-","value":{"type":"root","children":[{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"Machine Learning","position":{"start":{"line":8,"column":3,"offset":222},"end":{"line":8,"column":19,"offset":238}}}],"position":{"start":{"line":8,"column":1,"offset":220},"end":{"line":8,"column":19,"offset":238}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":9,"column":1,"offset":239}}}},{"id":"transformer-remark-markdown-html-ast-a6a996565eb9c1aa6349639fdf8b077a-gatsby-remark-imagesgatsby-remark-prismjs-","value":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"graphics-and-p5/tree.png","alt":"Recursive Tree"},"children":[],"position":{"start":{"line":8,"column":1,"offset":154},"end":{"line":8,"column":44,"offset":197}}}],"position":{"start":{"line":8,"column":1,"offset":154},"end":{"line":8,"column":44,"offset":197}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Graphics and computer programming are two dearly intertwined disciplines. The oscilloscope is often recognised as one of the first examples of “computer graphics”, the cathode-ray versions emitting a beam of electrons onto a phosphorescent screen. By using magnetic fields to change the beam’s direction, we can sweep from left to right and move up and down — the basic idea behind most CG! (I highly recommend watching this ","position":{"start":{"line":10,"column":1,"offset":199},"end":{"line":10,"column":426,"offset":624}}},{"type":"element","tagName":"a","properties":{"href":"https://archive.org/details/introductiontothecathoderayoscilloscope"},"children":[{"type":"text","value":"video","position":{"start":{"line":10,"column":427,"offset":625},"end":{"line":10,"column":432,"offset":630}}}],"position":{"start":{"line":10,"column":426,"offset":624},"end":{"line":10,"column":502,"offset":700}}},{"type":"text","value":" from 1970).","position":{"start":{"line":10,"column":502,"offset":700},"end":{"line":10,"column":514,"offset":712}}}],"position":{"start":{"line":10,"column":1,"offset":199},"end":{"line":10,"column":514,"offset":712}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We’ve come a long way since then — modern day graphics is a complicated science as well as an art, and the barrier to entry is constantly increasing. Graphics programming can be so complex, that a simple program to draw a triangle can be over ","position":{"start":{"line":12,"column":1,"offset":714},"end":{"line":12,"column":244,"offset":957}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/SaschaWillems/Vulkan/blob/master/examples/triangle/triangle.cpp"},"children":[{"type":"text","value":"1000 lines of code","position":{"start":{"line":12,"column":245,"offset":958},"end":{"line":12,"column":263,"offset":976}}}],"position":{"start":{"line":12,"column":244,"offset":957},"end":{"line":12,"column":348,"offset":1061}}},{"type":"text","value":"! However, this article will introduce you to ","position":{"start":{"line":12,"column":348,"offset":1061},"end":{"line":12,"column":394,"offset":1107}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/"},"children":[{"type":"text","value":"p5.js","position":{"start":{"line":12,"column":395,"offset":1108},"end":{"line":12,"column":400,"offset":1113}}}],"position":{"start":{"line":12,"column":394,"offset":1107},"end":{"line":12,"column":420,"offset":1133}}},{"type":"text","value":" (also known as p5). A simpler, less complex solution for people who want to start making computer graphics, but don’t want the headache of streams of boiler-plate code.","position":{"start":{"line":12,"column":420,"offset":1133},"end":{"line":12,"column":589,"offset":1302}}}],"position":{"start":{"line":12,"column":1,"offset":714},"end":{"line":12,"column":589,"offset":1302}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Straight from the landing page of the p5.js website.","position":{"start":{"line":14,"column":1,"offset":1304},"end":{"line":14,"column":53,"offset":1356}}}],"position":{"start":{"line":14,"column":1,"offset":1304},"end":{"line":14,"column":53,"offset":1356}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"…make coding accessible for artists, designers, educators and beginners…","position":{"start":{"line":15,"column":5,"offset":1361},"end":{"line":15,"column":77,"offset":1433}}}],"position":{"start":{"line":15,"column":3,"offset":1359},"end":{"line":15,"column":77,"offset":1433}}},{"type":"text","value":"\n"}],"position":{"start":{"line":15,"column":1,"offset":1357},"end":{"line":15,"column":77,"offset":1433}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"p5.js is the result of hard-work of the ","position":{"start":{"line":17,"column":1,"offset":1435},"end":{"line":17,"column":41,"offset":1475}}},{"type":"element","tagName":"a","properties":{"href":"https://processingfoundation.org/"},"children":[{"type":"text","value":"Processing Foundation","position":{"start":{"line":17,"column":42,"offset":1476},"end":{"line":17,"column":63,"offset":1497}}}],"position":{"start":{"line":17,"column":41,"offset":1475},"end":{"line":17,"column":99,"offset":1533}}},{"type":"text","value":", a group focused on spreading computer and visual literacy. It distills their ","position":{"start":{"line":17,"column":99,"offset":1533},"end":{"line":17,"column":178,"offset":1612}}},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/Processing_(programming_language)"},"children":[{"type":"text","value":"Processing","position":{"start":{"line":17,"column":179,"offset":1613},"end":{"line":17,"column":189,"offset":1623}}}],"position":{"start":{"line":17,"column":178,"offset":1612},"end":{"line":17,"column":255,"offset":1689}}},{"type":"text","value":" language into a JavaScript library that makes creating graphics easy and accessible whilst providing an ideal platform to springboard people’s careers in computer graphics. It should be mentioned now that a lot of inspiration has been taken from ","position":{"start":{"line":17,"column":255,"offset":1689},"end":{"line":17,"column":502,"offset":1936}}},{"type":"element","tagName":"a","properties":{"href":"http://shiffman.net/"},"children":[{"type":"text","value":"Daniel Shiffman’s","position":{"start":{"line":17,"column":503,"offset":1937},"end":{"line":17,"column":520,"offset":1954}}}],"position":{"start":{"line":17,"column":502,"offset":1936},"end":{"line":17,"column":543,"offset":1977}}},{"type":"text","value":" p5 projects (from the ","position":{"start":{"line":17,"column":543,"offset":1977},"end":{"line":17,"column":566,"offset":2000}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/CodingTrain/website/tree/master/CodingChallenges/CC_03_Snake_game_p5.js"},"children":[{"type":"text","value":"classic snake game","position":{"start":{"line":17,"column":567,"offset":2001},"end":{"line":17,"column":585,"offset":2019}}}],"position":{"start":{"line":17,"column":566,"offset":2000},"end":{"line":17,"column":678,"offset":2112}}},{"type":"text","value":", to a ","position":{"start":{"line":17,"column":678,"offset":2112},"end":{"line":17,"column":685,"offset":2119}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/CodingTrain/website/tree/master/CodingChallenges/CC_93_DoublePendulum_p5.js"},"children":[{"type":"text","value":"double pendulum","position":{"start":{"line":17,"column":686,"offset":2120},"end":{"line":17,"column":701,"offset":2135}}}],"position":{"start":{"line":17,"column":685,"offset":2119},"end":{"line":17,"column":798,"offset":2232}}},{"type":"text","value":"). I can’t urge you enough to follow these projects to really improve your understanding of coding concepts and the p5 library.","position":{"start":{"line":17,"column":798,"offset":2232},"end":{"line":17,"column":925,"offset":2359}}}],"position":{"start":{"line":17,"column":1,"offset":1435},"end":{"line":17,"column":925,"offset":2359}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Some prerequisites:","position":{"start":{"line":19,"column":5,"offset":2365},"end":{"line":19,"column":24,"offset":2384}}}],"position":{"start":{"line":19,"column":1,"offset":2361},"end":{"line":19,"column":24,"offset":2384}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Before jumping into the p5 code I first want to make clear that there is assumed knowledge of HTML5 and JavaScript including arrays, functions, variables etc. in the rest of this article. If you have a good grasp of JavaScript then skip to the p5 code below, otherwise here are few resources to get you up to scratch.","position":{"start":{"line":21,"column":1,"offset":2386},"end":{"line":21,"column":318,"offset":2703}}}],"position":{"start":{"line":21,"column":1,"offset":2386},"end":{"line":21,"column":318,"offset":2703}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.youtube.com/watch?v=spIVWmv1jnw"},"children":[{"type":"text","value":"HaC Intro to Programming","position":{"start":{"line":23,"column":4,"offset":2708},"end":{"line":23,"column":28,"offset":2732}}}],"position":{"start":{"line":23,"column":3,"offset":2707},"end":{"line":23,"column":74,"offset":2778}}},{"type":"text","value":" — A workshop that is being run by Hackers at Cambridge to help anyone start learning to program (which uses JavaScript).","position":{"start":{"line":23,"column":74,"offset":2778},"end":{"line":23,"column":195,"offset":2899}}}],"position":{"start":{"line":23,"column":3,"offset":2707},"end":{"line":23,"column":195,"offset":2899}}},{"type":"text","value":"\n"}],"position":{"start":{"line":23,"column":1,"offset":2705},"end":{"line":24,"column":1,"offset":2900}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.codecademy.com/learn/introduction-to-javascript"},"children":[{"type":"text","value":"Codecademy","position":{"start":{"line":25,"column":4,"offset":2904},"end":{"line":25,"column":14,"offset":2914}}}],"position":{"start":{"line":25,"column":3,"offset":2903},"end":{"line":25,"column":76,"offset":2976}}},{"type":"text","value":" — a great resource for learning how to code with instant feedback in your browser.","position":{"start":{"line":25,"column":76,"offset":2976},"end":{"line":25,"column":159,"offset":3059}}}],"position":{"start":{"line":25,"column":3,"offset":2903},"end":{"line":25,"column":159,"offset":3059}}},{"type":"text","value":"\n"}],"position":{"start":{"line":25,"column":1,"offset":2901},"end":{"line":26,"column":1,"offset":3060}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Web/JavaScript"},"children":[{"type":"text","value":"MDN","position":{"start":{"line":27,"column":4,"offset":3064},"end":{"line":27,"column":7,"offset":3067}}}],"position":{"start":{"line":27,"column":3,"offset":3063},"end":{"line":27,"column":65,"offset":3125}}},{"type":"text","value":" — a great resource for learning about all aspects of web development.","position":{"start":{"line":27,"column":65,"offset":3125},"end":{"line":27,"column":135,"offset":3195}}}],"position":{"start":{"line":27,"column":3,"offset":3063},"end":{"line":27,"column":135,"offset":3195}}},{"type":"text","value":"\n"}],"position":{"start":{"line":27,"column":1,"offset":3061},"end":{"line":28,"column":1,"offset":3196}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://codepen.io/"},"children":[{"type":"text","value":"Codepen","position":{"start":{"line":29,"column":4,"offset":3200},"end":{"line":29,"column":11,"offset":3207}}}],"position":{"start":{"line":29,"column":3,"offset":3199},"end":{"line":29,"column":33,"offset":3229}}},{"type":"text","value":" — a brilliant online text-editor for creating cool projects in HTML, CSS and JavaScript. Equally good for getting inspiration from a lot of talented users. Another possible solution would be ","position":{"start":{"line":29,"column":33,"offset":3229},"end":{"line":29,"column":225,"offset":3421}}},{"type":"element","tagName":"a","properties":{"href":"https://jsfiddle.net/"},"children":[{"type":"text","value":"JSFiddle","position":{"start":{"line":29,"column":226,"offset":3422},"end":{"line":29,"column":234,"offset":3430}}}],"position":{"start":{"line":29,"column":225,"offset":3421},"end":{"line":29,"column":258,"offset":3454}}},{"type":"text","value":".","position":{"start":{"line":29,"column":258,"offset":3454},"end":{"line":29,"column":259,"offset":3455}}}],"position":{"start":{"line":29,"column":3,"offset":3199},"end":{"line":29,"column":259,"offset":3455}}},{"type":"text","value":"\n"}],"position":{"start":{"line":29,"column":1,"offset":3197},"end":{"line":29,"column":259,"offset":3455}}},{"type":"text","value":"\n"}],"position":{"start":{"line":23,"column":1,"offset":2705},"end":{"line":29,"column":259,"offset":3455}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"What follows is a series of steps that will introduce you to p5 concepts. With code examples and explanations I hope to give you enough information to understand the ideas, but to fully grasp the concepts you will have to dive into the code, experiment with it, break it and learn from it. So without further ado, let’s get coding.","position":{"start":{"line":31,"column":1,"offset":3457},"end":{"line":31,"column":332,"offset":3788}}}],"position":{"start":{"line":31,"column":1,"offset":3457},"end":{"line":31,"column":332,"offset":3788}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Step 1: The Setup","position":{"start":{"line":33,"column":5,"offset":3794},"end":{"line":33,"column":22,"offset":3811}}}],"position":{"start":{"line":33,"column":1,"offset":3790},"end":{"line":33,"column":22,"offset":3811}}},{"type":"text","value":"\n"},{"type":"raw","value":"<high-light className='JavaScript'>\nfunction setup(){\n  //Initialisation of canvas, objects, variables etc.\n}\nfunction draw(){\n  //The drawing loop - updates at a constant rate declared in setup\n}\n</high-light>","position":{"start":{"line":35,"column":1,"offset":3813},"end":{"line":42,"column":14,"offset":4023}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"p5 is really simple to setup once you know what to do. There are two files shown above — an index.html and a template.js. The index.html file gets the libraries for us and the template.js is the barebones structure of a p5 project and at the moment it does nothing! Within this we have two functions:","position":{"start":{"line":44,"column":1,"offset":4025},"end":{"line":44,"column":301,"offset":4325}}}],"position":{"start":{"line":44,"column":1,"offset":4025},"end":{"line":44,"column":301,"offset":4325}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"setup() — a function for creating what we will need for our graphic or project. Like creating a canvas, initialising some objects or arrays etc.","position":{"start":{"line":46,"column":3,"offset":4329},"end":{"line":46,"column":147,"offset":4473}}}],"position":{"start":{"line":46,"column":3,"offset":4329},"end":{"line":46,"column":147,"offset":4473}}},{"type":"text","value":"\n"}],"position":{"start":{"line":46,"column":1,"offset":4327},"end":{"line":47,"column":1,"offset":4474}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"draw() — a function which will be called periodically like a loop. This is where will call draw functions and update functions to make graphics and animations.","position":{"start":{"line":48,"column":3,"offset":4477},"end":{"line":48,"column":162,"offset":4636}}}],"position":{"start":{"line":48,"column":3,"offset":4477},"end":{"line":48,"column":162,"offset":4636}}},{"type":"text","value":"\n"}],"position":{"start":{"line":48,"column":1,"offset":4475},"end":{"line":48,"column":162,"offset":4636}}},{"type":"text","value":"\n"}],"position":{"start":{"line":46,"column":1,"offset":4327},"end":{"line":48,"column":162,"offset":4636}}},{"type":"text","value":"\n"},{"type":"raw","value":"<iframe height='400' scrolling='no' title='Simple Triangle Tutorial' src='//codepen.io/patricoferris/embed/dddxjr/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/dddxjr/'>Simple Triangle Tutorial</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":50,"column":1,"offset":4638},"end":{"line":51,"column":10,"offset":5132}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let’s first look at the setup function. We used the p5 function createCanvas(width, height) which created and initialised a ","position":{"start":{"line":53,"column":1,"offset":5134},"end":{"line":53,"column":125,"offset":5258}}},{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API"},"children":[{"type":"text","value":"canvas","position":{"start":{"line":53,"column":126,"offset":5259},"end":{"line":53,"column":132,"offset":5265}}}],"position":{"start":{"line":53,"column":125,"offset":5258},"end":{"line":53,"column":194,"offset":5327}}},{"type":"text","value":" with arguments width and height. Now within our setup() and createCanvas() functions we can reference the variables width and height without ever instantiating them!","position":{"start":{"line":53,"column":194,"offset":5327},"end":{"line":53,"column":360,"offset":5493}}}],"position":{"start":{"line":53,"column":1,"offset":5134},"end":{"line":53,"column":360,"offset":5493}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Next comes the meaty, draw function. I have purposefully put extra code in here so we can learn more about what p5 has to offer. Firstly always remember that draw() is a loop that runs from top to bottom. Initially, we set the background (of our canvas) to white with background(255) which is the same as background(255, 255, 255) (maximising the red, green and blue values to give white). This may seem simple, but implicitly we are also clearing our canvas every loop… in one line of code! This will be useful for animations later as we want to redraw objects in a new location rather than have the ","position":{"start":{"line":55,"column":1,"offset":5495},"end":{"line":55,"column":602,"offset":6096}}},{"type":"element","tagName":"a","properties":{"href":"https://codepen.io/patricoferris/pen/paxZaw"},"children":[{"type":"text","value":"build-up on the same canvas","position":{"start":{"line":55,"column":603,"offset":6097},"end":{"line":55,"column":630,"offset":6124}}}],"position":{"start":{"line":55,"column":602,"offset":6096},"end":{"line":55,"column":676,"offset":6170}}},{"type":"text","value":" (click to see it go spectacularly wrong). Next is a translate(width/2, height/2) which moves our current drawing location to the centre of our canvas. We then declare the fill colour of our triangle with fill(255, 0, 0)(making it red).","position":{"start":{"line":55,"column":676,"offset":6170},"end":{"line":55,"column":912,"offset":6406}}}],"position":{"start":{"line":55,"column":1,"offset":5495},"end":{"line":55,"column":912,"offset":6406}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We want to create an equilateral triangle with side length s. The triangle itself is a function that takes the vertex coordinates as arguments — triangle(x1, y1, x2, y2, x3, y3) and in this example starting from the centre we have one vertex at (-s/2, 0) another at (s/2, 0) giving a bottom length of s . Now comes the trickier part. A very important aspect of most computer graphics is that the coordinate system starts in the top left corner (or wherever your origin is) and x increases left to right, whilst y increases top to bottom. To move of the screen we need a negative y value. Our last coordinate is given as (0, -sin(PI/3)) (if you’re stuck, think about cutting the triangle in two and using trigonometry).","position":{"start":{"line":57,"column":1,"offset":6408},"end":{"line":57,"column":719,"offset":7126}}}],"position":{"start":{"line":57,"column":1,"offset":6408},"end":{"line":57,"column":719,"offset":7126}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Step 2: Get Creative","position":{"start":{"line":59,"column":5,"offset":7132},"end":{"line":59,"column":25,"offset":7152}}}],"position":{"start":{"line":59,"column":1,"offset":7128},"end":{"line":59,"column":25,"offset":7152}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We’ve learnt how to set up our canvas and start drawing. Armed with the p5 ","position":{"start":{"line":61,"column":1,"offset":7154},"end":{"line":61,"column":76,"offset":7229}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/reference/"},"children":[{"type":"text","value":"reference page","position":{"start":{"line":61,"column":77,"offset":7230},"end":{"line":61,"column":91,"offset":7244}}}],"position":{"start":{"line":61,"column":76,"offset":7229},"end":{"line":61,"column":121,"offset":7274}}},{"type":"text","value":" and our creativity, we can make some truly stunning graphics. How about a bouncing ball animation?","position":{"start":{"line":61,"column":121,"offset":7274},"end":{"line":61,"column":220,"offset":7373}}}],"position":{"start":{"line":61,"column":1,"offset":7154},"end":{"line":61,"column":220,"offset":7373}}},{"type":"text","value":"\n"},{"type":"raw","value":"<iframe height='400' scrolling='no' title='Bouncing Balls' src='//codepen.io/patricoferris/embed/PQpOrB/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/PQpOrB/'>Bouncing Balls</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":63,"column":1,"offset":7375},"end":{"line":64,"column":10,"offset":7849}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let’s look at the interesting p5 aspects that we didn’t know before:","position":{"start":{"line":66,"column":1,"offset":7851},"end":{"line":66,"column":69,"offset":7919}}}],"position":{"start":{"line":66,"column":1,"offset":7851},"end":{"line":66,"column":69,"offset":7919}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"frameRate(20) — This enables us to specify the frame rate of our drawing loop, that is, how many times per second it redraws everything for us.","position":{"start":{"line":68,"column":3,"offset":7923},"end":{"line":68,"column":146,"offset":8066}}}],"position":{"start":{"line":68,"column":3,"offset":7923},"end":{"line":68,"column":146,"offset":8066}}},{"type":"text","value":"\n"}],"position":{"start":{"line":68,"column":1,"offset":7921},"end":{"line":69,"column":1,"offset":8067}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"gravity = createVector(0, 9) — p5 allows us to ","position":{"start":{"line":70,"column":3,"offset":8070},"end":{"line":70,"column":50,"offset":8117}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/reference/#/p5.Vector"},"children":[{"type":"text","value":"create vector objects","position":{"start":{"line":70,"column":51,"offset":8118},"end":{"line":70,"column":72,"offset":8139}}}],"position":{"start":{"line":70,"column":50,"offset":8117},"end":{"line":70,"column":113,"offset":8180}}},{"type":"text","value":" with which we can perform vector operations like addition, multiplication, dot-product and cross-product. This is useful when we want to simulate physics like forces.","position":{"start":{"line":70,"column":113,"offset":8180},"end":{"line":70,"column":280,"offset":8347}}}],"position":{"start":{"line":70,"column":3,"offset":8070},"end":{"line":70,"column":280,"offset":8347}}},{"type":"text","value":"\n"}],"position":{"start":{"line":70,"column":1,"offset":8068},"end":{"line":71,"column":1,"offset":8348}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"floor(random(50)) — Here we’re using p5 math functions. floor() takes a real number and rounds it down to the nearest integer. random(arg) produces a random number as small as 0 or up to 49. In this example, we are giving it to the ellipse(x, y, w)function to create randomly sized balls by setting the width to a random number. If we gave another argument it would set the ellipse’s height, but here it infers that we want a circle.","position":{"start":{"line":72,"column":3,"offset":8351},"end":{"line":72,"column":436,"offset":8784}}}],"position":{"start":{"line":72,"column":3,"offset":8351},"end":{"line":72,"column":436,"offset":8784}}},{"type":"text","value":"\n"}],"position":{"start":{"line":72,"column":1,"offset":8349},"end":{"line":73,"column":1,"offset":8785}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"stroke(0) — This function sets the colour of our shape’s outline. If you don’t want any border you can add noStroke() .","position":{"start":{"line":74,"column":3,"offset":8788},"end":{"line":74,"column":122,"offset":8907}}}],"position":{"start":{"line":74,"column":3,"offset":8788},"end":{"line":74,"column":122,"offset":8907}}},{"type":"text","value":"\n"}],"position":{"start":{"line":74,"column":1,"offset":8786},"end":{"line":74,"column":122,"offset":8907}}},{"type":"text","value":"\n"}],"position":{"start":{"line":68,"column":1,"offset":7921},"end":{"line":74,"column":122,"offset":8907}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"All you need now is to add some physics to these ideas and you have yourself a bouncing ball animation.","position":{"start":{"line":76,"column":1,"offset":8909},"end":{"line":76,"column":104,"offset":9012}}}],"position":{"start":{"line":76,"column":1,"offset":8909},"end":{"line":76,"column":104,"offset":9012}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Step 3: Experiment with p5","position":{"start":{"line":78,"column":5,"offset":9018},"end":{"line":78,"column":31,"offset":9044}}}],"position":{"start":{"line":78,"column":1,"offset":9014},"end":{"line":78,"column":31,"offset":9044}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Hopefully now you have a good understanding of the p5 fundamentals, but we’ve barely scratched the surface. This last example will use two extra features of p5: ","position":{"start":{"line":80,"column":1,"offset":9046},"end":{"line":80,"column":162,"offset":9207}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"interactivity","position":{"start":{"line":80,"column":163,"offset":9208},"end":{"line":80,"column":176,"offset":9221}}}],"position":{"start":{"line":80,"column":162,"offset":9207},"end":{"line":80,"column":177,"offset":9222}}},{"type":"text","value":" and* ","position":{"start":{"line":80,"column":177,"offset":9222},"end":{"line":80,"column":183,"offset":9228}}},{"type":"element","tagName":"a","properties":{"href":"http://flafla2.github.io/2014/08/09/perlinnoise.html"},"children":[{"type":"text","value":"Perlin Noise","position":{"start":{"line":80,"column":184,"offset":9229},"end":{"line":80,"column":196,"offset":9241}}}],"position":{"start":{"line":80,"column":183,"offset":9228},"end":{"line":80,"column":251,"offset":9296}}},{"type":"text","value":"*. Keep reading to find out more on these two concepts.","position":{"start":{"line":80,"column":251,"offset":9296},"end":{"line":80,"column":306,"offset":9351}}}],"position":{"start":{"line":80,"column":1,"offset":9046},"end":{"line":80,"column":306,"offset":9351}}},{"type":"text","value":"\n"},{"type":"raw","value":"<iframe height='400' scrolling='no' title='Pixel Fire' src='//codepen.io/patricoferris/embed/XZMxmV/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/XZMxmV/'>Pixel Fire</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":82,"column":1,"offset":9353},"end":{"line":83,"column":10,"offset":9819}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In this CodePen I have created a relatively simple flame model using squares and Perlin Noise. First of all, how do we get user input? Lucky for us p5 has some functions that can help.","position":{"start":{"line":85,"column":1,"offset":9821},"end":{"line":85,"column":185,"offset":10005}}}],"position":{"start":{"line":85,"column":1,"offset":9821},"end":{"line":85,"column":185,"offset":10005}}},{"type":"text","value":"\n"},{"type":"raw","value":"<high-light className='JavaScript'>\nvar touch = false;\nfunction setup(){\n  createCanvas(640, 640);\n}\nfunction draw(){\n  if(touch){\n    fill(255, 0, 0);\n    rect(mouseX, mouseY, 20, 20);\n  }\n}\nfunction touchStarted(){\n  touch = true;\n}\nfunction touchEnded(){\n  touch = false;\n}\n</high-light>","position":{"start":{"line":87,"column":1,"offset":10007},"end":{"line":104,"column":14,"offset":10297}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"At the top of the code we have declared a boolean “flag” as to whether or not our mouse is being pressed — this allows us to do things if the mouse is being held down. The touchStarted() and touchEnded() are p5 functions that are executed whenever the mouse is pressed or released or the screen is touched and released. Lastly, in our rect() function we have the variables mouseX and mouseY which are p5 variables corresponding to the mouse’s current position. Oddly, these also refer to your ","position":{"start":{"line":106,"column":1,"offset":10299},"end":{"line":106,"column":494,"offset":10792}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/processing/p5.js/issues/1705"},"children":[{"type":"text","value":"“touch” coordinates","position":{"start":{"line":106,"column":495,"offset":10793},"end":{"line":106,"column":514,"offset":10812}}}],"position":{"start":{"line":106,"column":494,"offset":10792},"end":{"line":106,"column":564,"offset":10862}}},{"type":"text","value":". With all these variables and functions predefined for us we can focus on making visually stunning graphics, whilst not being hampered by having to code extra functions unrelated to the graphic we’re producing.","position":{"start":{"line":106,"column":564,"offset":10862},"end":{"line":106,"column":775,"offset":11073}}}],"position":{"start":{"line":106,"column":1,"offset":10299},"end":{"line":106,"column":775,"offset":11073}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now for the Perlin Noise. In 1983, tired with the artificial look of computer graphics, Ken Perlin developed a type of *gradient noise. *The basic idea being you create a big grid of gradients randomly and then use the dot product to interpolate between them. In short, we get random values based on the coordinate system we’re drawing on. Great! For each of our squares we can start them at a random position near our mouse, and generate a random upward vector using their position and Perlin Noise. Let’s look at the code:","position":{"start":{"line":108,"column":1,"offset":11075},"end":{"line":108,"column":525,"offset":11599}}}],"position":{"start":{"line":108,"column":1,"offset":11075},"end":{"line":108,"column":525,"offset":11599}}},{"type":"text","value":"\n"},{"type":"raw","value":"<high-light className='JavaScript'>\nfunction Particle(x, y, color){\n  this.pos = createVector(x + random(-10, 10), y + random(-10, 10));\n  this.vel = createVector(floor(random(-1, 1))*noise(this.pos.x), -noise(this.pos.y)*7);\n  this.alpha = 255;\n  this.r = random(170, 255);\n  this.g = random(10, 255);\n  this.b = random(0, 100);\n  this.update = function(){\n    this.pos.add(this.vel);\n    this.alpha -= 5;\n  }\n  this.show = function(){\n    noStroke();\n    fill(this.r, this.g, this.b, this.alpha);\n    rect(this.pos.x, this.pos.y, 5, 5);\n  }\n  this.dead = function(){\n    if(this.alpha < 0){\n      return true;\n    }else{\n      return false;\n    }\n  }\n}\n</high-light>","position":{"start":{"line":110,"column":1,"offset":11601},"end":{"line":135,"column":14,"offset":12269}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Some key things to notice:","position":{"start":{"line":137,"column":1,"offset":12271},"end":{"line":137,"column":27,"offset":12297}}}],"position":{"start":{"line":137,"column":1,"offset":12271},"end":{"line":137,"column":27,"offset":12297}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"noise(this.pos.x) — The Perlin Noise ","position":{"start":{"line":139,"column":3,"offset":12301},"end":{"line":139,"column":40,"offset":12338}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/reference/#/p5/noise"},"children":[{"type":"text","value":"function","position":{"start":{"line":139,"column":41,"offset":12339},"end":{"line":139,"column":49,"offset":12347}}}],"position":{"start":{"line":139,"column":40,"offset":12338},"end":{"line":139,"column":89,"offset":12387}}},{"type":"text","value":" that gets a random number based on the square’s current x position. It returns a value between 0 and 1.","position":{"start":{"line":139,"column":89,"offset":12387},"end":{"line":139,"column":193,"offset":12491}}}],"position":{"start":{"line":139,"column":3,"offset":12301},"end":{"line":139,"column":193,"offset":12491}}},{"type":"text","value":"\n"}],"position":{"start":{"line":139,"column":1,"offset":12299},"end":{"line":140,"column":1,"offset":12492}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"fill(this.r, this.g, this.b, this.alpha) — Here we have extended fill’s ability by including an alpha value for the objects transparency, by decreasing alpha in the update() function we get a nice fade out like a flame.","position":{"start":{"line":141,"column":3,"offset":12495},"end":{"line":141,"column":222,"offset":12714}}}],"position":{"start":{"line":141,"column":3,"offset":12495},"end":{"line":141,"column":222,"offset":12714}}},{"type":"text","value":"\n"}],"position":{"start":{"line":141,"column":1,"offset":12493},"end":{"line":142,"column":1,"offset":12715}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"dead() — This function allows us to keep track of which particles have disappeared as their alpha is now less than zero. We can then splice() them out of our array to ensure we’re not drawing an unbounded number of particles over time which would cause performance issues.","position":{"start":{"line":143,"column":3,"offset":12718},"end":{"line":143,"column":275,"offset":12990}}}],"position":{"start":{"line":143,"column":3,"offset":12718},"end":{"line":143,"column":275,"offset":12990}}},{"type":"text","value":"\n"}],"position":{"start":{"line":143,"column":1,"offset":12716},"end":{"line":143,"column":275,"offset":12990}}},{"type":"text","value":"\n"}],"position":{"start":{"line":139,"column":1,"offset":12299},"end":{"line":143,"column":275,"offset":12990}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As a challenge, you can also use blendMode() to make it seem even more realistic — check this ","position":{"start":{"line":145,"column":1,"offset":12992},"end":{"line":145,"column":95,"offset":13086}}},{"type":"element","tagName":"a","properties":{"href":"https://codepen.io/anon/pen/YeOaJX"},"children":[{"type":"text","value":"alteration","position":{"start":{"line":145,"column":96,"offset":13087},"end":{"line":145,"column":106,"offset":13097}}}],"position":{"start":{"line":145,"column":95,"offset":13086},"end":{"line":145,"column":143,"offset":13134}}},{"type":"text","value":" to see it in action.","position":{"start":{"line":145,"column":143,"offset":13134},"end":{"line":145,"column":164,"offset":13155}}}],"position":{"start":{"line":145,"column":1,"offset":12992},"end":{"line":145,"column":164,"offset":13155}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"With only a few concepts and the p5 library, it is incredibly straightforward to start building anything you want. Be sure to checkout what else is possible with the library. Here are few cool ideas to get you started: ","position":{"start":{"line":147,"column":1,"offset":13157},"end":{"line":147,"column":220,"offset":13376}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/examples/3d-geometries.html"},"children":[{"type":"text","value":"3D graphics","position":{"start":{"line":147,"column":221,"offset":13377},"end":{"line":147,"column":232,"offset":13388}}}],"position":{"start":{"line":147,"column":220,"offset":13376},"end":{"line":147,"column":279,"offset":13435}}},{"type":"text","value":", ","position":{"start":{"line":147,"column":279,"offset":13435},"end":{"line":147,"column":281,"offset":13437}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/examples/dom-slider.html"},"children":[{"type":"text","value":"sliders","position":{"start":{"line":147,"column":282,"offset":13438},"end":{"line":147,"column":289,"offset":13445}}}],"position":{"start":{"line":147,"column":281,"offset":13437},"end":{"line":147,"column":333,"offset":13489}}},{"type":"text","value":" and ","position":{"start":{"line":147,"column":333,"offset":13489},"end":{"line":147,"column":338,"offset":13494}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/examples/image-load-and-display-image.html"},"children":[{"type":"text","value":"images","position":{"start":{"line":147,"column":339,"offset":13495},"end":{"line":147,"column":345,"offset":13501}}}],"position":{"start":{"line":147,"column":338,"offset":13494},"end":{"line":147,"column":407,"offset":13563}}},{"type":"text","value":".","position":{"start":{"line":147,"column":407,"offset":13563},"end":{"line":147,"column":408,"offset":13564}}}],"position":{"start":{"line":147,"column":1,"offset":13157},"end":{"line":147,"column":408,"offset":13564}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":149,"column":5,"offset":13570},"end":{"line":149,"column":15,"offset":13580}}}],"position":{"start":{"line":149,"column":1,"offset":13566},"end":{"line":149,"column":15,"offset":13580}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As computers and technology become ubiquitous in our daily lives and an increasing number of professions are now relying on computer literacy, p5.js is a beautiful example of how we can ensure as many people as possible have an entry-point to the wonderful world of computer programming. It also acts as a reminder to some more experienced programmers that creativity and imagination are vital in producing meaningful code and ultimately making the tech world a better place.","position":{"start":{"line":151,"column":1,"offset":13582},"end":{"line":151,"column":476,"offset":14057}}}],"position":{"start":{"line":151,"column":1,"offset":13582},"end":{"line":151,"column":476,"offset":14057}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Hopefully this intro to p5 has convinced you of its usefulness and has encouraged you to start taking your first steps into the world of graphics programming. Here are my recommendations for where to go next:","position":{"start":{"line":153,"column":1,"offset":14059},"end":{"line":153,"column":209,"offset":14267}}}],"position":{"start":{"line":153,"column":1,"offset":14059},"end":{"line":153,"column":209,"offset":14267}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.youtube.com/user/shiffman"},"children":[{"type":"text","value":"The Coding Train","position":{"start":{"line":155,"column":4,"offset":14272},"end":{"line":155,"column":20,"offset":14288}}}],"position":{"start":{"line":155,"column":3,"offset":14271},"end":{"line":155,"column":60,"offset":14328}}},{"type":"text","value":" — A brilliant YouTube channel by Daniel Shiffman where he teaches JavaScript and p5.js amongst many other incredible things!","position":{"start":{"line":155,"column":60,"offset":14328},"end":{"line":155,"column":185,"offset":14453}}}],"position":{"start":{"line":155,"column":3,"offset":14271},"end":{"line":155,"column":185,"offset":14453}}},{"type":"text","value":"\n"}],"position":{"start":{"line":155,"column":1,"offset":14269},"end":{"line":156,"column":1,"offset":14454}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/examples/"},"children":[{"type":"text","value":"p5js.org ","position":{"start":{"line":157,"column":4,"offset":14458},"end":{"line":157,"column":13,"offset":14467}}}],"position":{"start":{"line":157,"column":3,"offset":14457},"end":{"line":157,"column":42,"offset":14496}}},{"type":"text","value":"— The examples page on this website is full of inspiring projects which you could recreate and extend further.","position":{"start":{"line":157,"column":42,"offset":14496},"end":{"line":157,"column":152,"offset":14606}}}],"position":{"start":{"line":157,"column":3,"offset":14457},"end":{"line":157,"column":152,"offset":14606}}},{"type":"text","value":"\n"}],"position":{"start":{"line":157,"column":1,"offset":14455},"end":{"line":158,"column":1,"offset":14607}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.scratchapixel.com/index.php"},"children":[{"type":"text","value":"Sratchapixel","position":{"start":{"line":159,"column":4,"offset":14611},"end":{"line":159,"column":16,"offset":14623}}}],"position":{"start":{"line":159,"column":3,"offset":14610},"end":{"line":159,"column":58,"offset":14665}}},{"type":"text","value":" — If you feel ready to delve into the deeper concepts and implementations of computer graphics then this website is an incredible resource for you to use.","position":{"start":{"line":159,"column":58,"offset":14665},"end":{"line":159,"column":213,"offset":14820}}}],"position":{"start":{"line":159,"column":3,"offset":14610},"end":{"line":159,"column":213,"offset":14820}}},{"type":"text","value":"\n"}],"position":{"start":{"line":159,"column":1,"offset":14608},"end":{"line":159,"column":213,"offset":14820}}},{"type":"text","value":"\n"}],"position":{"start":{"line":155,"column":1,"offset":14269},"end":{"line":159,"column":213,"offset":14820}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A special thanks to ","position":{"start":{"line":161,"column":1,"offset":14822},"end":{"line":161,"column":21,"offset":14842}}},{"type":"element","tagName":"a","properties":{"href":"undefined"},"children":[{"type":"text","value":"Tom Read Cutting","position":{"start":{"line":161,"column":22,"offset":14843},"end":{"line":161,"column":38,"offset":14859}}}],"position":{"start":{"line":161,"column":21,"offset":14842},"end":{"line":161,"column":50,"offset":14871}}},{"type":"text","value":" for editing this article and ","position":{"start":{"line":161,"column":50,"offset":14871},"end":{"line":161,"column":80,"offset":14901}}},{"type":"element","tagName":"a","properties":{"href":"undefined"},"children":[{"type":"text","value":"Christian Silver","position":{"start":{"line":161,"column":81,"offset":14902},"end":{"line":161,"column":97,"offset":14918}}}],"position":{"start":{"line":161,"column":80,"offset":14901},"end":{"line":161,"column":109,"offset":14930}}},{"type":"text","value":" for helping get it off the ground.","position":{"start":{"line":161,"column":109,"offset":14930},"end":{"line":161,"column":144,"offset":14965}}}],"position":{"start":{"line":161,"column":1,"offset":14822},"end":{"line":161,"column":144,"offset":14965}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":162,"column":1,"offset":14966}}}},{"id":"transformer-remark-markdown-html-ast-6de84442be590f5afaeaabc34f2549f0-gatsby-remark-imagesgatsby-remark-prismjs-","value":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/patricoferris/image/upload/v1532781201/pf2018/blogposts/28-07-2018/website_optimisation_2.png","alt":"Optimising your Website"},"children":[],"position":{"start":{"line":7,"column":1,"offset":154},"end":{"line":7,"column":149,"offset":302}}},{"type":"text","value":"\nInspired by a ","position":{"start":{"line":7,"column":149,"offset":302},"end":{"line":8,"column":15,"offset":317}}},{"type":"element","tagName":"a","properties":{"href":"https://syntax.fm/"},"children":[{"type":"text","value":"Syntax","position":{"start":{"line":8,"column":16,"offset":318},"end":{"line":8,"column":22,"offset":324}}}],"position":{"start":{"line":8,"column":15,"offset":317},"end":{"line":8,"column":43,"offset":345}}},{"type":"text","value":" podcast, I got really interested in website optimisation. It can often be an overlooked aspect in web development with more focus on design and functionality, I realised my number one priority whenever I visited a website is load speed. My attention is a website’s number one goal, lose it and they lose all potential ad revenue or possibility to give me whatever information I was looking for. ","position":{"start":{"line":8,"column":43,"offset":345},"end":{"line":8,"column":439,"offset":741}}},{"type":"element","tagName":"a","properties":{"href":"https://developers.google.com/web/fundamentals/performance/get-started/"},"children":[{"type":"text","value":"Many seem to agree. 53% of users abandon websites that take more than 3 seconds to load","position":{"start":{"line":8,"column":440,"offset":742},"end":{"line":8,"column":527,"offset":829}}}],"position":{"start":{"line":8,"column":439,"offset":741},"end":{"line":8,"column":601,"offset":903}}},{"type":"text","value":". No amount of fancy graphics or parallax scrolling that appears five seconds after someone’s clicked will hide the slow loading times.","position":{"start":{"line":8,"column":601,"offset":903},"end":{"line":8,"column":736,"offset":1038}}}],"position":{"start":{"line":7,"column":1,"offset":154},"end":{"line":8,"column":736,"offset":1038}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The aim of this article is to give a broad overview of the concepts and ideas behind optimising your website, experienced developers are likely already using things like Webpack (a module bundler) among other tools to speed-up their sites.","position":{"start":{"line":10,"column":1,"offset":1040},"end":{"line":10,"column":240,"offset":1279}}}],"position":{"start":{"line":10,"column":1,"offset":1040},"end":{"line":10,"column":240,"offset":1279}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For testing load-times I will be using the ","position":{"start":{"line":12,"column":1,"offset":1281},"end":{"line":12,"column":44,"offset":1324}}},{"type":"element","tagName":"a","properties":{"href":"https://chrome.google.com/webstore/detail/page-load-time/fploionmjgeclbkemipmkogoaohcdbig?hl=en"},"children":[{"type":"text","value":"Page Load Time ","position":{"start":{"line":12,"column":45,"offset":1325},"end":{"line":12,"column":60,"offset":1340}}}],"position":{"start":{"line":12,"column":44,"offset":1324},"end":{"line":12,"column":158,"offset":1438}}},{"type":"text","value":"Chrome extension. There are a few ways to measure website loading time including: ","position":{"start":{"line":12,"column":158,"offset":1438},"end":{"line":12,"column":240,"offset":1520}}},{"type":"element","tagName":"a","properties":{"href":"https://developers.google.com/web/tools/chrome-user-experience-report/"},"children":[{"type":"text","value":"first paint, first meaning paint, DOMContentLoaded","position":{"start":{"line":12,"column":241,"offset":1521},"end":{"line":12,"column":291,"offset":1571}}}],"position":{"start":{"line":12,"column":240,"offset":1520},"end":{"line":12,"column":364,"offset":1644}}},{"type":"text","value":" etc. For a more detailed look into what this timer measures, check out the Github repository below.\n","position":{"start":{"line":12,"column":364,"offset":1644},"end":{"line":13,"column":1,"offset":1745}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/alex-vv/chrome-load-timer"},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"alex-vv/chrome-load-timer","position":{"start":{"line":13,"column":4,"offset":1748},"end":{"line":13,"column":29,"offset":1773}}}],"position":{"start":{"line":13,"column":2,"offset":1746},"end":{"line":13,"column":31,"offset":1775}}},{"type":"text","value":"\n","position":{"start":{"line":13,"column":31,"offset":1775},"end":{"line":14,"column":1,"offset":1776}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"chrome-load-timer - Google Chrome extension to measure page load time and display it in the toolbar","position":{"start":{"line":14,"column":2,"offset":1777},"end":{"line":14,"column":101,"offset":1876}}}],"position":{"start":{"line":14,"column":1,"offset":1776},"end":{"line":14,"column":102,"offset":1877}}},{"type":"text","value":"github.com","position":{"start":{"line":14,"column":102,"offset":1877},"end":{"line":14,"column":112,"offset":1887}}}],"position":{"start":{"line":13,"column":1,"offset":1745},"end":{"line":14,"column":159,"offset":1934}}}],"position":{"start":{"line":12,"column":1,"offset":1281},"end":{"line":14,"column":159,"offset":1934}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Use Minified Stylesheets and Scripts","position":{"start":{"line":16,"column":7,"offset":1942},"end":{"line":16,"column":43,"offset":1978}}}],"position":{"start":{"line":16,"column":5,"offset":1940},"end":{"line":16,"column":45,"offset":1980}}}],"position":{"start":{"line":16,"column":1,"offset":1936},"end":{"line":16,"column":45,"offset":1980}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You would be amazed at how much performance can be gained by this simple trick. What is a minified document? When we write code it is never our job to make it optimised for the computer, instead our golden rule is to make it readable to humans. This improves readability, cuts down on debug time and makes it easier to maintain. However, to achieve this we often add extra spacing which costs us precious space. Minifying the code is trimming all this fat from what we’ve written to have code that produces the same result but is far more difficult to read and maintain. This is okay though, because a computer has no problem deciphering it. Take the following code for example.","position":{"start":{"line":18,"column":1,"offset":1982},"end":{"line":18,"column":679,"offset":2660}}}],"position":{"start":{"line":18,"column":1,"offset":1982},"end":{"line":18,"column":679,"offset":2660}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","position":{"start":{"line":20,"column":1,"offset":2662},"end":{"line":29,"column":4,"offset":2921}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Notice how, wherever possible, our line-breaks and spaces are gone. On top of that, the code in the for-loop is only one line so there’s no need for the curly braces which extends our code over three lines when it can be done in one. Does this make a difference?","position":{"start":{"line":31,"column":1,"offset":2923},"end":{"line":31,"column":263,"offset":3185}}}],"position":{"start":{"line":31,"column":1,"offset":2923},"end":{"line":31,"column":263,"offset":3185}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I tried it out on simple website that just had one ","position":{"start":{"line":33,"column":1,"offset":3187},"end":{"line":33,"column":52,"offset":3238}}},{"type":"raw","value":"<script>","position":{"start":{"line":33,"column":52,"offset":3238},"end":{"line":33,"column":60,"offset":3246}}},{"type":"text","value":" tag being loaded in for the graphics library ","position":{"start":{"line":33,"column":60,"offset":3246},"end":{"line":33,"column":106,"offset":3292}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/"},"children":[{"type":"text","value":"p5.js","position":{"start":{"line":33,"column":107,"offset":3293},"end":{"line":33,"column":112,"offset":3298}}}],"position":{"start":{"line":33,"column":106,"offset":3292},"end":{"line":33,"column":132,"offset":3318}}},{"type":"text","value":". Using the non-minified CDN link I got a load time of 0.25 seconds. Using the minified version I got a markedly improved load time of 0.08 seconds. Depending on what your website project is, there are a few ways to automatically minify code. If it is a ","position":{"start":{"line":33,"column":132,"offset":3318},"end":{"line":33,"column":386,"offset":3572}}},{"type":"element","tagName":"a","properties":{"href":"https://guide.meteor.com/build-tool.html"},"children":[{"type":"text","value":"Meteor app","position":{"start":{"line":33,"column":387,"offset":3573},"end":{"line":33,"column":397,"offset":3583}}}],"position":{"start":{"line":33,"column":386,"offset":3572},"end":{"line":33,"column":440,"offset":3626}}},{"type":"text","value":" it will be done automatically, using ","position":{"start":{"line":33,"column":440,"offset":3626},"end":{"line":33,"column":478,"offset":3664}}},{"type":"element","tagName":"a","properties":{"href":"https://webpack.js.org/guides/production/"},"children":[{"type":"text","value":"Webpack ","position":{"start":{"line":33,"column":479,"offset":3665},"end":{"line":33,"column":487,"offset":3673}}}],"position":{"start":{"line":33,"column":478,"offset":3664},"end":{"line":33,"column":531,"offset":3717}}},{"type":"text","value":"will also allow you to do this. Otherwise there are some online tools like ","position":{"start":{"line":33,"column":531,"offset":3717},"end":{"line":33,"column":606,"offset":3792}}},{"type":"element","tagName":"a","properties":{"href":"https://jscompress.com/"},"children":[{"type":"text","value":"JSCompress ","position":{"start":{"line":33,"column":607,"offset":3793},"end":{"line":33,"column":618,"offset":3804}}}],"position":{"start":{"line":33,"column":606,"offset":3792},"end":{"line":33,"column":644,"offset":3830}}},{"type":"text","value":"or ","position":{"start":{"line":33,"column":644,"offset":3830},"end":{"line":33,"column":647,"offset":3833}}},{"type":"element","tagName":"a","properties":{"href":"https://cssminifier.com/"},"children":[{"type":"text","value":"CSSMinifier ","position":{"start":{"line":33,"column":648,"offset":3834},"end":{"line":33,"column":660,"offset":3846}}}],"position":{"start":{"line":33,"column":647,"offset":3833},"end":{"line":33,"column":687,"offset":3873}}},{"type":"text","value":"that you can upload your code to.","position":{"start":{"line":33,"column":687,"offset":3873},"end":{"line":33,"column":720,"offset":3906}}}],"position":{"start":{"line":33,"column":1,"offset":3187},"end":{"line":33,"column":720,"offset":3906}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Design Versus Performance","position":{"start":{"line":35,"column":5,"offset":3912},"end":{"line":35,"column":30,"offset":3937}}}],"position":{"start":{"line":35,"column":1,"offset":3908},"end":{"line":35,"column":30,"offset":3937}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Whilst design is undoubtedly a major aspect to a website’s overall success, both developers and designers must work together to compromise and make a mutually beneficial trade-off between design and performance. The classic example is fonts. Take the two screenshots of a simple website below.","position":{"start":{"line":37,"column":1,"offset":3939},"end":{"line":37,"column":294,"offset":4232}}}],"position":{"start":{"line":37,"column":1,"offset":3939},"end":{"line":37,"column":294,"offset":4232}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/patricoferris/image/upload/v1532780050/pf2018/blogposts/28-07-2018/Helvetica.png","alt":"The example website using Helvetica Font (commonly found on many computers) — check [this](https://css-tricks.com/snippets/css/system-font-stack/) link for common system fonts"},"children":[],"position":{"start":{"line":39,"column":1,"offset":4234},"end":{"line":39,"column":288,"offset":4521}}},{"type":"text","value":"\n","position":{"start":{"line":39,"column":288,"offset":4521},"end":{"line":40,"column":1,"offset":4522}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The example website using Helvetica Font (commonly found on many computers) — check ","position":{"start":{"line":40,"column":2,"offset":4523},"end":{"line":40,"column":86,"offset":4607}}},{"type":"element","tagName":"a","properties":{"href":"https://css-tricks.com/snippets/css/system-font-stack/"},"children":[{"type":"text","value":"this","position":{"start":{"line":40,"column":87,"offset":4608},"end":{"line":40,"column":91,"offset":4612}}}],"position":{"start":{"line":40,"column":86,"offset":4607},"end":{"line":40,"column":148,"offset":4669}}},{"type":"text","value":" link for common system fonts","position":{"start":{"line":40,"column":148,"offset":4669},"end":{"line":40,"column":177,"offset":4698}}}],"position":{"start":{"line":40,"column":1,"offset":4522},"end":{"line":40,"column":178,"offset":4699}}}],"position":{"start":{"line":39,"column":1,"offset":4234},"end":{"line":40,"column":178,"offset":4699}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://cdn-images-1.medium.com/max/5760/1*8ciuJNBdqMhlLSaOpNUXow.png","alt":"The example website using Roboto Font (designed by Google and linked from [Google Fonts](https://fonts.google.com/?selection.family=Roboto))"},"children":[],"position":{"start":{"line":42,"column":1,"offset":4701},"end":{"line":42,"column":215,"offset":4915}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The example website using Roboto Font (designed by Google and linked from ","position":{"start":{"line":42,"column":216,"offset":4916},"end":{"line":42,"column":290,"offset":4990}}},{"type":"element","tagName":"a","properties":{"href":"https://fonts.google.com/?selection.family=Roboto"},"children":[{"type":"text","value":"Google Fonts","position":{"start":{"line":42,"column":291,"offset":4991},"end":{"line":42,"column":303,"offset":5003}}}],"position":{"start":{"line":42,"column":290,"offset":4990},"end":{"line":42,"column":355,"offset":5055}}},{"type":"text","value":")","position":{"start":{"line":42,"column":355,"offset":5055},"end":{"line":42,"column":356,"offset":5056}}}],"position":{"start":{"line":42,"column":215,"offset":4915},"end":{"line":42,"column":357,"offset":5057}}}],"position":{"start":{"line":42,"column":1,"offset":4701},"end":{"line":42,"column":357,"offset":5057}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Before critiquing my questionable design skills take a moment to appreciate that these two fonts are very similar — yet the loading time for a website for the Roboto font was 0.22 seconds as compared with 0.17 for Helvetica. Whilst not that significant, using lots of custom fonts will slow down your website, although using Google Fonts’ API will help keep your website optimised. As an over-the-top example, linking 20 different fonts from the Google API increased the load time to 0.87 seconds.","position":{"start":{"line":44,"column":1,"offset":5059},"end":{"line":44,"column":498,"offset":5556}}}],"position":{"start":{"line":44,"column":1,"offset":5059},"end":{"line":44,"column":498,"offset":5556}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Inlining your JavaScript and CSS","position":{"start":{"line":46,"column":5,"offset":5562},"end":{"line":46,"column":37,"offset":5594}}}],"position":{"start":{"line":46,"column":1,"offset":5558},"end":{"line":46,"column":37,"offset":5594}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For each individual document or component of your website, when the parser reaches the script tag or link tag it sends and HTTP request for that document and if not stated differently, these will be blocking actions. What this means is your machine is parsing the HTML document getting the words to display in your browser but if it hits the script tag with the attribute src='js/main.js' for example, it will block the parsing and load in that file. This is where as a developer you need to be clever about where in the document you place things.","position":{"start":{"line":48,"column":1,"offset":5596},"end":{"line":48,"column":548,"offset":6143}}}],"position":{"start":{"line":48,"column":1,"offset":5596},"end":{"line":48,"column":548,"offset":6143}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Whilst it may not ultimately affect the loading time of your website, it can affect the order in which things are loaded. Again we’ll be using the un-minified p5.js library to simulate a large JavaScript file and load it in different places to see how it affects our user experience.","position":{"start":{"line":50,"column":1,"offset":6145},"end":{"line":50,"column":284,"offset":6428}}}],"position":{"start":{"line":50,"column":1,"offset":6145},"end":{"line":50,"column":284,"offset":6428}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://cdn-images-1.medium.com/max/2780/1*h_3GogfkaahcXCO9a43CPA.gif","alt":"Refreshing website with the script tag inserted at the bottom of the body tag"},"children":[],"position":{"start":{"line":52,"column":1,"offset":6430},"end":{"line":52,"column":152,"offset":6581}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Refreshing website with the script tag inserted at the bottom of the body tag","position":{"start":{"line":52,"column":153,"offset":6582},"end":{"line":52,"column":230,"offset":6659}}}],"position":{"start":{"line":52,"column":152,"offset":6581},"end":{"line":52,"column":231,"offset":6660}}}],"position":{"start":{"line":52,"column":1,"offset":6430},"end":{"line":52,"column":231,"offset":6660}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://cdn-images-1.medium.com/max/2780/1*xLOq5r4erQAwb4Au_hB-Ww.gif","alt":"Refreshing website with the script tag inserted at the top of the body tag"},"children":[],"position":{"start":{"line":54,"column":1,"offset":6662},"end":{"line":54,"column":149,"offset":6810}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Refreshing website with the script tag inserted at the top of the body tag","position":{"start":{"line":54,"column":150,"offset":6811},"end":{"line":54,"column":224,"offset":6885}}}],"position":{"start":{"line":54,"column":149,"offset":6810},"end":{"line":54,"column":225,"offset":6886}}}],"position":{"start":{"line":54,"column":1,"offset":6662},"end":{"line":54,"column":225,"offset":6886}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Whilst the load times were similar for both cases — the user experience is far better by placing the script at the body tag allowing the HTML to be parsed before the JavaScript giving the user the website content immediately!","position":{"start":{"line":56,"column":1,"offset":6888},"end":{"line":56,"column":226,"offset":7113}}}],"position":{"start":{"line":56,"column":1,"offset":6888},"end":{"line":56,"column":226,"offset":7113}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In the same vein CSS can also be render-blocking especially because more often than not it is linked in the head tag of your HTML document before the body. But if we want our user to see the content in the quickest time we don’t want to be loading CSS for the footer of our document which the user won’t see until they’ve scrolled to the bottom. In fact, we don’t want to load any CSS in that the user can’t immediately see when the page first loads on their device.","position":{"start":{"line":58,"column":1,"offset":7115},"end":{"line":58,"column":467,"offset":7581}}}],"position":{"start":{"line":58,"column":1,"offset":7115},"end":{"line":58,"column":467,"offset":7581}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The CSS that you need is often called the ","position":{"start":{"line":60,"column":1,"offset":7583},"end":{"line":60,"column":43,"offset":7625}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Critical CSS","position":{"start":{"line":60,"column":44,"offset":7626},"end":{"line":60,"column":56,"offset":7638}}}],"position":{"start":{"line":60,"column":43,"offset":7625},"end":{"line":60,"column":57,"offset":7639}}},{"type":"text","value":". Finding it for yourself would be a headache. It will be different for different devices, meaning you would have to check manually for all possible devices. Lucky for us we have (if you’re using ","position":{"start":{"line":60,"column":57,"offset":7639},"end":{"line":60,"column":253,"offset":7835}}},{"type":"element","tagName":"a","properties":{"href":"https://nodejs.org/en/"},"children":[{"type":"text","value":"Node.js","position":{"start":{"line":60,"column":254,"offset":7836},"end":{"line":60,"column":261,"offset":7843}}}],"position":{"start":{"line":60,"column":253,"offset":7835},"end":{"line":60,"column":286,"offset":7868}}},{"type":"text","value":") ","position":{"start":{"line":60,"column":286,"offset":7868},"end":{"line":60,"column":288,"offset":7870}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/addyosmani/critical"},"children":[{"type":"text","value":"Critical","position":{"start":{"line":60,"column":289,"offset":7871},"end":{"line":60,"column":297,"offset":7879}}}],"position":{"start":{"line":60,"column":288,"offset":7870},"end":{"line":60,"column":338,"offset":7920}}},{"type":"text","value":". This helpful package does the CSS inlining for us and all we do is add some code to a Javascript file. Here’s a code snippet from the Github page.","position":{"start":{"line":60,"column":338,"offset":7920},"end":{"line":60,"column":486,"offset":8068}}}],"position":{"start":{"line":60,"column":1,"offset":7583},"end":{"line":60,"column":486,"offset":8068}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">//Normal JavaScript Code\nconst arr = [1, 2, 3, 4, 5];\nfor(let i = 0; i &lt; arr.length; i++){\n  console.log(arr[i]);\n}\n\n//Minified Code - A 22.83% Compression saving 0.02kB\nconst arr=[1,2,3,4,5];for(let a=0;a&lt;arr.length;a++)console.log(arr[a]);</code></pre>\n      </div>","position":{"start":{"line":62,"column":1,"offset":8070},"end":{"line":73,"column":4,"offset":8331}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Using the generate function, we supply it with a JavaScript object with some values defined. base is where we’re going to save our src and dest (our project folder usually). What’s great is now we just supply an array of dimensions and the code will compute the critical CSS for each and inline that code into our head tag.","position":{"start":{"line":75,"column":1,"offset":8333},"end":{"line":75,"column":324,"offset":8656}}}],"position":{"start":{"line":75,"column":1,"offset":8333},"end":{"line":75,"column":324,"offset":8656}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Async and Defer","position":{"start":{"line":77,"column":5,"offset":8662},"end":{"line":77,"column":20,"offset":8677}}}],"position":{"start":{"line":77,"column":1,"offset":8658},"end":{"line":77,"column":20,"offset":8677}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Again, we come back to this idea of render-blocking and how best we should implement this for our website. When you have a plain script tag in your HTML it blocks the HTML from loading whilst the JavaScript loads ","position":{"start":{"line":79,"column":1,"offset":8679},"end":{"line":79,"column":214,"offset":8892}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"and","position":{"start":{"line":79,"column":216,"offset":8894},"end":{"line":79,"column":219,"offset":8897}}}],"position":{"start":{"line":79,"column":214,"offset":8892},"end":{"line":79,"column":221,"offset":8899}}},{"type":"text","value":" runs. Async and defer are simple attributes that you can add to your script tags that change the way your JavaScript will be loaded.","position":{"start":{"line":79,"column":221,"offset":8899},"end":{"line":79,"column":354,"offset":9032}}}],"position":{"start":{"line":79,"column":1,"offset":8679},"end":{"line":79,"column":354,"offset":9032}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Defer essentially “defers” execution of the script until after the HTML has been parsed. A major advantage of this is that you no longer need some $(document).ready() jQuery-style function to make sure the body was loaded before you could manipulate it, which could cut out some of the dependencies on libraries like jQuery which helps reduce load-time.","position":{"start":{"line":81,"column":1,"offset":9034},"end":{"line":81,"column":354,"offset":9387}}}],"position":{"start":{"line":81,"column":1,"offset":9034},"end":{"line":81,"column":354,"offset":9387}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Async is, unsurprisingly, the asynchronous loading of JavaScript files. What does this mean? Your HTML will continue to be parsed whilst the file is loaded and then whenever its ready the file will be executed. This helps improving user experience whilst viewing your website. Imagine for example you had a JavaScript file for doing some cool graphics. You want the words around this graphic to be parsed until your graphic is ready to be executed. As soon as it is ready, it is executed and we get a more seamless loading of our webpage without missing pieces.","position":{"start":{"line":83,"column":1,"offset":9389},"end":{"line":83,"column":562,"offset":9950}}}],"position":{"start":{"line":83,"column":1,"offset":9389},"end":{"line":83,"column":562,"offset":9950}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Check this ","position":{"start":{"line":85,"column":1,"offset":9952},"end":{"line":85,"column":12,"offset":9963}}},{"type":"element","tagName":"a","properties":{"href":"http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html"},"children":[{"type":"text","value":"website","position":{"start":{"line":85,"column":13,"offset":9964},"end":{"line":85,"column":20,"offset":9971}}}],"position":{"start":{"line":85,"column":12,"offset":9963},"end":{"line":85,"column":94,"offset":10045}}},{"type":"text","value":" for a really intuitive, graphical representation of this.","position":{"start":{"line":85,"column":94,"offset":10045},"end":{"line":85,"column":152,"offset":10103}}}],"position":{"start":{"line":85,"column":1,"offset":9952},"end":{"line":85,"column":152,"offset":10103}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Image Optimisation and Media Queries","position":{"start":{"line":87,"column":5,"offset":10109},"end":{"line":87,"column":41,"offset":10145}}}],"position":{"start":{"line":87,"column":1,"offset":10105},"end":{"line":87,"column":41,"offset":10145}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The cornerstone of all website performance optimisation is the simple rule that, the less data you send to the client, the quicker and better your website will perform. With the plethora of devices on the market capable of viewing websites, there is a growing trend to optimise your website based on the device it is being viewed on.","position":{"start":{"line":89,"column":1,"offset":10147},"end":{"line":89,"column":334,"offset":10480}}}],"position":{"start":{"line":89,"column":1,"offset":10147},"end":{"line":89,"column":334,"offset":10480}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Media queries are a fairly new tool added to CSS3. With more and more content being consumed using mobile-devices there has been a shift in design thinking towards mobile first. Using media queries you can then add stylings for larger screen sizes.","position":{"start":{"line":91,"column":1,"offset":10482},"end":{"line":91,"column":249,"offset":10730}}}],"position":{"start":{"line":91,"column":1,"offset":10482},"end":{"line":91,"column":249,"offset":10730}}},{"type":"text","value":"\n"},{"type":"raw","value":"<iframe src=\"https://medium.com/media/2b53ce5004bbba6e65050bf48c9a864b\" frameborder=0></iframe>","position":{"start":{"line":93,"column":1,"offset":10732},"end":{"line":93,"column":96,"offset":10827}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The @media tag starts a new CSS rule, whilst the only keyword stops older browsers that don’t support media queries from using it. The screen keyword applies the rules to screens rather than prints. After that you add the media-feature which supports the and , or and not keywords so you can get as specific as you want. When you’re loading your image you can write code like:","position":{"start":{"line":95,"column":1,"offset":10829},"end":{"line":95,"column":377,"offset":11205}}}],"position":{"start":{"line":95,"column":1,"offset":10829},"end":{"line":95,"column":377,"offset":11205}}},{"type":"text","value":"\n"},{"type":"raw","value":"<iframe src=\"https://medium.com/media/ecbcd475236339fbe45efdd97bfcdeed\" frameborder=0></iframe>","position":{"start":{"line":97,"column":1,"offset":11207},"end":{"line":97,"column":96,"offset":11302}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This isn’t necessarily the best or optimal approach for image optimisation. Luckily we have other options. ","position":{"start":{"line":99,"column":1,"offset":11304},"end":{"line":99,"column":108,"offset":11411}}},{"type":"element","tagName":"a","properties":{"href":"https://www.imgix.com/"},"children":[{"type":"text","value":"Imgix","position":{"start":{"line":99,"column":109,"offset":11412},"end":{"line":99,"column":114,"offset":11417}}}],"position":{"start":{"line":99,"column":108,"offset":11411},"end":{"line":99,"column":139,"offset":11442}}},{"type":"text","value":" and ","position":{"start":{"line":99,"column":139,"offset":11442},"end":{"line":99,"column":144,"offset":11447}}},{"type":"element","tagName":"a","properties":{"href":"https://cloudinary.com/"},"children":[{"type":"text","value":"Cloudinary","position":{"start":{"line":99,"column":145,"offset":11448},"end":{"line":99,"column":155,"offset":11458}}}],"position":{"start":{"line":99,"column":144,"offset":11447},"end":{"line":99,"column":181,"offset":11484}}},{"type":"text","value":" are two ways you can help optimise your site for the right device. Imgix is a Content Delivery Network (CDN) for images with a lot of cool features. A CDN simply takes your files and spreads them across the globe so that someone in a different country doesn’t have to wait for your files on your server to make it all the way to them. This ","position":{"start":{"line":99,"column":181,"offset":11484},"end":{"line":99,"column":522,"offset":11825}}},{"type":"element","tagName":"a","properties":{"href":"https://docs.imgix.com/tutorials/responsive-images-srcset-imgix"},"children":[{"type":"text","value":"tutorial","position":{"start":{"line":99,"column":523,"offset":11826},"end":{"line":99,"column":531,"offset":11834}}}],"position":{"start":{"line":99,"column":522,"offset":11825},"end":{"line":99,"column":597,"offset":11900}}},{"type":"text","value":" goes through how to use Imgix for different device pixel ratios. Cloudinary is a similar service, and their ","position":{"start":{"line":99,"column":597,"offset":11900},"end":{"line":99,"column":706,"offset":12009}}},{"type":"element","tagName":"a","properties":{"href":"https://cloudinary.com/documentation/image_optimization"},"children":[{"type":"text","value":"tutorial ","position":{"start":{"line":99,"column":707,"offset":12010},"end":{"line":99,"column":716,"offset":12019}}}],"position":{"start":{"line":99,"column":706,"offset":12009},"end":{"line":99,"column":774,"offset":12077}}},{"type":"text","value":"will take you through the importance of optimisation and how to achieve it will their incredible services. Below is a small example showing how easy it is to use Cloudinary straight in the HTML markup.","position":{"start":{"line":99,"column":774,"offset":12077},"end":{"line":99,"column":975,"offset":12278}}}],"position":{"start":{"line":99,"column":1,"offset":11304},"end":{"line":99,"column":975,"offset":12278}}},{"type":"text","value":"\n"},{"type":"raw","value":"<iframe src=\"https://medium.com/media/98868354e5bf607d317496f64ddec2a2\" frameborder=0></iframe>","position":{"start":{"line":101,"column":1,"offset":12280},"end":{"line":101,"column":96,"offset":12375}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As a last point on image optimisation, the format you use can have a large impact on file size. Some files contain lots of metadata which you don’t want to be serving to your client — ","position":{"start":{"line":103,"column":1,"offset":12377},"end":{"line":103,"column":185,"offset":12561}}},{"type":"element","tagName":"a","properties":{"href":"https://www.sno.phy.queensu.ca/~phil/exiftool/"},"children":[{"type":"text","value":"ExifTool","position":{"start":{"line":103,"column":186,"offset":12562},"end":{"line":103,"column":194,"offset":12570}}}],"position":{"start":{"line":103,"column":185,"offset":12561},"end":{"line":103,"column":243,"offset":12619}}},{"type":"text","value":" is a commonly used command-line application that can help you trim down those files sizes. On top of this, Scalable Vector Graphics (SVG) are a web-standard developed by W3C that offers XML-based vector graphics. This means they have infinite resolution unlike PNG or JPG files. It also makes them highly versatile, easily editable and can even be animated. At the end of the day SVGs are just code and so the file sizes tend to be small. For more reasons to use them, check out this ","position":{"start":{"line":103,"column":243,"offset":12619},"end":{"line":103,"column":728,"offset":13104}}},{"type":"element","tagName":"a","properties":{"href":"https://watb.co.uk/5-reasons-you-should-be-using-svgs-over-pngs/"},"children":[{"type":"text","value":"article","position":{"start":{"line":103,"column":729,"offset":13105},"end":{"line":103,"column":736,"offset":13112}}}],"position":{"start":{"line":103,"column":728,"offset":13104},"end":{"line":103,"column":803,"offset":13179}}},{"type":"text","value":".","position":{"start":{"line":103,"column":803,"offset":13179},"end":{"line":103,"column":804,"offset":13180}}}],"position":{"start":{"line":103,"column":1,"offset":12377},"end":{"line":103,"column":804,"offset":13180}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":105,"column":5,"offset":13186},"end":{"line":105,"column":15,"offset":13196}}}],"position":{"start":{"line":105,"column":1,"offset":13182},"end":{"line":105,"column":15,"offset":13196}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We’ve only scratched the surface of what’s possible for website optimisation. There are many tools you can use to help you stream-line this process like ","position":{"start":{"line":107,"column":1,"offset":13198},"end":{"line":107,"column":154,"offset":13351}}},{"type":"element","tagName":"a","properties":{"href":"https://webpack.js.org/"},"children":[{"type":"text","value":"Webpack","position":{"start":{"line":107,"column":155,"offset":13352},"end":{"line":107,"column":162,"offset":13359}}}],"position":{"start":{"line":107,"column":154,"offset":13351},"end":{"line":107,"column":188,"offset":13385}}},{"type":"text","value":" for bundling or static-site generators like ","position":{"start":{"line":107,"column":188,"offset":13385},"end":{"line":107,"column":233,"offset":13430}}},{"type":"element","tagName":"a","properties":{"href":"https://www.gatsbyjs.org/"},"children":[{"type":"text","value":"Gatsby","position":{"start":{"line":107,"column":234,"offset":13431},"end":{"line":107,"column":240,"offset":13437}}}],"position":{"start":{"line":107,"column":233,"offset":13430},"end":{"line":107,"column":268,"offset":13465}}},{"type":"text","value":". ","position":{"start":{"line":107,"column":268,"offset":13465},"end":{"line":107,"column":270,"offset":13467}}},{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking"},"children":[{"type":"text","value":"Tree shaking","position":{"start":{"line":107,"column":271,"offset":13468},"end":{"line":107,"column":283,"offset":13480}}}],"position":{"start":{"line":107,"column":270,"offset":13467},"end":{"line":107,"column":348,"offset":13545}}},{"type":"text","value":" is another commonly used technique to remove excess, unused modules lying around your website.","position":{"start":{"line":107,"column":348,"offset":13545},"end":{"line":107,"column":443,"offset":13640}}}],"position":{"start":{"line":107,"column":1,"offset":13198},"end":{"line":107,"column":443,"offset":13640}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Hopefully this article has touched on some useful techniques you can use on your next site to help improve its performance. Happy coding!","position":{"start":{"line":109,"column":1,"offset":13642},"end":{"line":109,"column":138,"offset":13779}}}],"position":{"start":{"line":109,"column":1,"offset":13642},"end":{"line":109,"column":138,"offset":13779}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A big thank you to ","position":{"start":{"line":111,"column":1,"offset":13781},"end":{"line":111,"column":20,"offset":13800}}},{"type":"element","tagName":"a","properties":{"href":"undefined"},"children":[{"type":"text","value":"Christian Silver","position":{"start":{"line":111,"column":21,"offset":13801},"end":{"line":111,"column":37,"offset":13817}}}],"position":{"start":{"line":111,"column":20,"offset":13800},"end":{"line":111,"column":49,"offset":13829}}},{"type":"text","value":" and ","position":{"start":{"line":111,"column":49,"offset":13829},"end":{"line":111,"column":54,"offset":13834}}},{"type":"element","tagName":"a","properties":{"href":"undefined"},"children":[{"type":"text","value":"Charlie Crisp","position":{"start":{"line":111,"column":55,"offset":13835},"end":{"line":111,"column":68,"offset":13848}}}],"position":{"start":{"line":111,"column":54,"offset":13834},"end":{"line":111,"column":80,"offset":13860}}},{"type":"text","value":" for editing this post and providing extremely useful advice and extra content to make it even better.","position":{"start":{"line":111,"column":80,"offset":13860},"end":{"line":111,"column":182,"offset":13962}}}],"position":{"start":{"line":111,"column":1,"offset":13781},"end":{"line":111,"column":182,"offset":13962}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":112,"column":1,"offset":13963}}}},{"id":"transformer-remark-markdown-html-30717f8b5b5a89b2192ecc720cc27aaf-gatsby-remark-imagesgatsby-remark-prismjs-","value":"<h1>Machine Learning</h1>"},{"id":"transformer-remark-markdown-html-a6a996565eb9c1aa6349639fdf8b077a-gatsby-remark-imagesgatsby-remark-prismjs-","value":"<p><img src=\"graphics-and-p5/tree.png\" alt=\"Recursive Tree\"></p>\n<p>Graphics and computer programming are two dearly intertwined disciplines. The oscilloscope is often recognised as one of the first examples of “computer graphics”, the cathode-ray versions emitting a beam of electrons onto a phosphorescent screen. By using magnetic fields to change the beam’s direction, we can sweep from left to right and move up and down — the basic idea behind most CG! (I highly recommend watching this <a href=\"https://archive.org/details/introductiontothecathoderayoscilloscope\">video</a> from 1970).</p>\n<p>We’ve come a long way since then — modern day graphics is a complicated science as well as an art, and the barrier to entry is constantly increasing. Graphics programming can be so complex, that a simple program to draw a triangle can be over <a href=\"https://github.com/SaschaWillems/Vulkan/blob/master/examples/triangle/triangle.cpp\">1000 lines of code</a>! However, this article will introduce you to <a href=\"https://p5js.org/\">p5.js</a> (also known as p5). A simpler, less complex solution for people who want to start making computer graphics, but don’t want the headache of streams of boiler-plate code.</p>\n<p>Straight from the landing page of the p5.js website.</p>\n<blockquote>\n<h1>…make coding accessible for artists, designers, educators and beginners…</h1>\n</blockquote>\n<p>p5.js is the result of hard-work of the <a href=\"https://processingfoundation.org/\">Processing Foundation</a>, a group focused on spreading computer and visual literacy. It distills their <a href=\"https://en.wikipedia.org/wiki/Processing_(programming_language)\">Processing</a> language into a JavaScript library that makes creating graphics easy and accessible whilst providing an ideal platform to springboard people’s careers in computer graphics. It should be mentioned now that a lot of inspiration has been taken from <a href=\"http://shiffman.net/\">Daniel Shiffman’s</a> p5 projects (from the <a href=\"https://github.com/CodingTrain/website/tree/master/CodingChallenges/CC_03_Snake_game_p5.js\">classic snake game</a>, to a <a href=\"https://github.com/CodingTrain/website/tree/master/CodingChallenges/CC_93_DoublePendulum_p5.js\">double pendulum</a>). I can’t urge you enough to follow these projects to really improve your understanding of coding concepts and the p5 library.</p>\n<h3>Some prerequisites:</h3>\n<p>Before jumping into the p5 code I first want to make clear that there is assumed knowledge of HTML5 and JavaScript including arrays, functions, variables etc. in the rest of this article. If you have a good grasp of JavaScript then skip to the p5 code below, otherwise here are few resources to get you up to scratch.</p>\n<ul>\n<li>\n<p><a href=\"https://www.youtube.com/watch?v=spIVWmv1jnw\">HaC Intro to Programming</a> — A workshop that is being run by Hackers at Cambridge to help anyone start learning to program (which uses JavaScript).</p>\n</li>\n<li>\n<p><a href=\"https://www.codecademy.com/learn/introduction-to-javascript\">Codecademy</a> — a great resource for learning how to code with instant feedback in your browser.</p>\n</li>\n<li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript\">MDN</a> — a great resource for learning about all aspects of web development.</p>\n</li>\n<li>\n<p><a href=\"https://codepen.io/\">Codepen</a> — a brilliant online text-editor for creating cool projects in HTML, CSS and JavaScript. Equally good for getting inspiration from a lot of talented users. Another possible solution would be <a href=\"https://jsfiddle.net/\">JSFiddle</a>.</p>\n</li>\n</ul>\n<p>What follows is a series of steps that will introduce you to p5 concepts. With code examples and explanations I hope to give you enough information to understand the ideas, but to fully grasp the concepts you will have to dive into the code, experiment with it, break it and learn from it. So without further ado, let’s get coding.</p>\n<h3>Step 1: The Setup</h3>\n<high-light className='JavaScript'>\nfunction setup(){\n  //Initialisation of canvas, objects, variables etc.\n}\nfunction draw(){\n  //The drawing loop - updates at a constant rate declared in setup\n}\n</high-light>\n<p>p5 is really simple to setup once you know what to do. There are two files shown above — an index.html and a template.js. The index.html file gets the libraries for us and the template.js is the barebones structure of a p5 project and at the moment it does nothing! Within this we have two functions:</p>\n<ul>\n<li>\n<p>setup() — a function for creating what we will need for our graphic or project. Like creating a canvas, initialising some objects or arrays etc.</p>\n</li>\n<li>\n<p>draw() — a function which will be called periodically like a loop. This is where will call draw functions and update functions to make graphics and animations.</p>\n</li>\n</ul>\n<iframe height='400' scrolling='no' title='Simple Triangle Tutorial' src='//codepen.io/patricoferris/embed/dddxjr/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/dddxjr/'>Simple Triangle Tutorial</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>Let’s first look at the setup function. We used the p5 function createCanvas(width, height) which created and initialised a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API\">canvas</a> with arguments width and height. Now within our setup() and createCanvas() functions we can reference the variables width and height without ever instantiating them!</p>\n<p>Next comes the meaty, draw function. I have purposefully put extra code in here so we can learn more about what p5 has to offer. Firstly always remember that draw() is a loop that runs from top to bottom. Initially, we set the background (of our canvas) to white with background(255) which is the same as background(255, 255, 255) (maximising the red, green and blue values to give white). This may seem simple, but implicitly we are also clearing our canvas every loop… in one line of code! This will be useful for animations later as we want to redraw objects in a new location rather than have the <a href=\"https://codepen.io/patricoferris/pen/paxZaw\">build-up on the same canvas</a> (click to see it go spectacularly wrong). Next is a translate(width/2, height/2) which moves our current drawing location to the centre of our canvas. We then declare the fill colour of our triangle with fill(255, 0, 0)(making it red).</p>\n<p>We want to create an equilateral triangle with side length s. The triangle itself is a function that takes the vertex coordinates as arguments — triangle(x1, y1, x2, y2, x3, y3) and in this example starting from the centre we have one vertex at (-s/2, 0) another at (s/2, 0) giving a bottom length of s . Now comes the trickier part. A very important aspect of most computer graphics is that the coordinate system starts in the top left corner (or wherever your origin is) and x increases left to right, whilst y increases top to bottom. To move of the screen we need a negative y value. Our last coordinate is given as (0, -sin(PI/3)) (if you’re stuck, think about cutting the triangle in two and using trigonometry).</p>\n<h3>Step 2: Get Creative</h3>\n<p>We’ve learnt how to set up our canvas and start drawing. Armed with the p5 <a href=\"https://p5js.org/reference/\">reference page</a> and our creativity, we can make some truly stunning graphics. How about a bouncing ball animation?</p>\n<iframe height='400' scrolling='no' title='Bouncing Balls' src='//codepen.io/patricoferris/embed/PQpOrB/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/PQpOrB/'>Bouncing Balls</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>Let’s look at the interesting p5 aspects that we didn’t know before:</p>\n<ul>\n<li>\n<p>frameRate(20) — This enables us to specify the frame rate of our drawing loop, that is, how many times per second it redraws everything for us.</p>\n</li>\n<li>\n<p>gravity = createVector(0, 9) — p5 allows us to <a href=\"https://p5js.org/reference/#/p5.Vector\">create vector objects</a> with which we can perform vector operations like addition, multiplication, dot-product and cross-product. This is useful when we want to simulate physics like forces.</p>\n</li>\n<li>\n<p>floor(random(50)) — Here we’re using p5 math functions. floor() takes a real number and rounds it down to the nearest integer. random(arg) produces a random number as small as 0 or up to 49. In this example, we are giving it to the ellipse(x, y, w)function to create randomly sized balls by setting the width to a random number. If we gave another argument it would set the ellipse’s height, but here it infers that we want a circle.</p>\n</li>\n<li>\n<p>stroke(0) — This function sets the colour of our shape’s outline. If you don’t want any border you can add noStroke() .</p>\n</li>\n</ul>\n<p>All you need now is to add some physics to these ideas and you have yourself a bouncing ball animation.</p>\n<h3>Step 3: Experiment with p5</h3>\n<p>Hopefully now you have a good understanding of the p5 fundamentals, but we’ve barely scratched the surface. This last example will use two extra features of p5: <em>interactivity</em> and* <a href=\"http://flafla2.github.io/2014/08/09/perlinnoise.html\">Perlin Noise</a>*. Keep reading to find out more on these two concepts.</p>\n<iframe height='400' scrolling='no' title='Pixel Fire' src='//codepen.io/patricoferris/embed/XZMxmV/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/XZMxmV/'>Pixel Fire</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>In this CodePen I have created a relatively simple flame model using squares and Perlin Noise. First of all, how do we get user input? Lucky for us p5 has some functions that can help.</p>\n<high-light className='JavaScript'>\nvar touch = false;\nfunction setup(){\n  createCanvas(640, 640);\n}\nfunction draw(){\n  if(touch){\n    fill(255, 0, 0);\n    rect(mouseX, mouseY, 20, 20);\n  }\n}\nfunction touchStarted(){\n  touch = true;\n}\nfunction touchEnded(){\n  touch = false;\n}\n</high-light>\n<p>At the top of the code we have declared a boolean “flag” as to whether or not our mouse is being pressed — this allows us to do things if the mouse is being held down. The touchStarted() and touchEnded() are p5 functions that are executed whenever the mouse is pressed or released or the screen is touched and released. Lastly, in our rect() function we have the variables mouseX and mouseY which are p5 variables corresponding to the mouse’s current position. Oddly, these also refer to your <a href=\"https://github.com/processing/p5.js/issues/1705\">“touch” coordinates</a>. With all these variables and functions predefined for us we can focus on making visually stunning graphics, whilst not being hampered by having to code extra functions unrelated to the graphic we’re producing.</p>\n<p>Now for the Perlin Noise. In 1983, tired with the artificial look of computer graphics, Ken Perlin developed a type of *gradient noise. *The basic idea being you create a big grid of gradients randomly and then use the dot product to interpolate between them. In short, we get random values based on the coordinate system we’re drawing on. Great! For each of our squares we can start them at a random position near our mouse, and generate a random upward vector using their position and Perlin Noise. Let’s look at the code:</p>\n<high-light className='JavaScript'>\nfunction Particle(x, y, color){\n  this.pos = createVector(x + random(-10, 10), y + random(-10, 10));\n  this.vel = createVector(floor(random(-1, 1))*noise(this.pos.x), -noise(this.pos.y)*7);\n  this.alpha = 255;\n  this.r = random(170, 255);\n  this.g = random(10, 255);\n  this.b = random(0, 100);\n  this.update = function(){\n    this.pos.add(this.vel);\n    this.alpha -= 5;\n  }\n  this.show = function(){\n    noStroke();\n    fill(this.r, this.g, this.b, this.alpha);\n    rect(this.pos.x, this.pos.y, 5, 5);\n  }\n  this.dead = function(){\n    if(this.alpha < 0){\n      return true;\n    }else{\n      return false;\n    }\n  }\n}\n</high-light>\n<p>Some key things to notice:</p>\n<ul>\n<li>\n<p>noise(this.pos.x) — The Perlin Noise <a href=\"https://p5js.org/reference/#/p5/noise\">function</a> that gets a random number based on the square’s current x position. It returns a value between 0 and 1.</p>\n</li>\n<li>\n<p>fill(this.r, this.g, this.b, this.alpha) — Here we have extended fill’s ability by including an alpha value for the objects transparency, by decreasing alpha in the update() function we get a nice fade out like a flame.</p>\n</li>\n<li>\n<p>dead() — This function allows us to keep track of which particles have disappeared as their alpha is now less than zero. We can then splice() them out of our array to ensure we’re not drawing an unbounded number of particles over time which would cause performance issues.</p>\n</li>\n</ul>\n<p>As a challenge, you can also use blendMode() to make it seem even more realistic — check this <a href=\"https://codepen.io/anon/pen/YeOaJX\">alteration</a> to see it in action.</p>\n<p>With only a few concepts and the p5 library, it is incredibly straightforward to start building anything you want. Be sure to checkout what else is possible with the library. Here are few cool ideas to get you started: <a href=\"https://p5js.org/examples/3d-geometries.html\">3D graphics</a>, <a href=\"https://p5js.org/examples/dom-slider.html\">sliders</a> and <a href=\"https://p5js.org/examples/image-load-and-display-image.html\">images</a>.</p>\n<h3>Conclusion</h3>\n<p>As computers and technology become ubiquitous in our daily lives and an increasing number of professions are now relying on computer literacy, p5.js is a beautiful example of how we can ensure as many people as possible have an entry-point to the wonderful world of computer programming. It also acts as a reminder to some more experienced programmers that creativity and imagination are vital in producing meaningful code and ultimately making the tech world a better place.</p>\n<p>Hopefully this intro to p5 has convinced you of its usefulness and has encouraged you to start taking your first steps into the world of graphics programming. Here are my recommendations for where to go next:</p>\n<ul>\n<li>\n<p><a href=\"https://www.youtube.com/user/shiffman\">The Coding Train</a> — A brilliant YouTube channel by Daniel Shiffman where he teaches JavaScript and p5.js amongst many other incredible things!</p>\n</li>\n<li>\n<p><a href=\"https://p5js.org/examples/\">p5js.org </a>— The examples page on this website is full of inspiring projects which you could recreate and extend further.</p>\n</li>\n<li>\n<p><a href=\"https://www.scratchapixel.com/index.php\">Sratchapixel</a> — If you feel ready to delve into the deeper concepts and implementations of computer graphics then this website is an incredible resource for you to use.</p>\n</li>\n</ul>\n<p>A special thanks to <a href=\"undefined\">Tom Read Cutting</a> for editing this article and <a href=\"undefined\">Christian Silver</a> for helping get it off the ground.</p>"},{"id":"transformer-remark-markdown-html-6de84442be590f5afaeaabc34f2549f0-gatsby-remark-imagesgatsby-remark-prismjs-","value":"<p><img src=\"https://res.cloudinary.com/patricoferris/image/upload/v1532781201/pf2018/blogposts/28-07-2018/website_optimisation_2.png\" alt=\"Optimising your Website\">\nInspired by a <a href=\"https://syntax.fm/\">Syntax</a> podcast, I got really interested in website optimisation. It can often be an overlooked aspect in web development with more focus on design and functionality, I realised my number one priority whenever I visited a website is load speed. My attention is a website’s number one goal, lose it and they lose all potential ad revenue or possibility to give me whatever information I was looking for. <a href=\"https://developers.google.com/web/fundamentals/performance/get-started/\">Many seem to agree. 53% of users abandon websites that take more than 3 seconds to load</a>. No amount of fancy graphics or parallax scrolling that appears five seconds after someone’s clicked will hide the slow loading times.</p>\n<p>The aim of this article is to give a broad overview of the concepts and ideas behind optimising your website, experienced developers are likely already using things like Webpack (a module bundler) among other tools to speed-up their sites.</p>\n<p>For testing load-times I will be using the <a href=\"https://chrome.google.com/webstore/detail/page-load-time/fploionmjgeclbkemipmkogoaohcdbig?hl=en\">Page Load Time </a>Chrome extension. There are a few ways to measure website loading time including: <a href=\"https://developers.google.com/web/tools/chrome-user-experience-report/\">first paint, first meaning paint, DOMContentLoaded</a> etc. For a more detailed look into what this timer measures, check out the Github repository below.\n<a href=\"https://github.com/alex-vv/chrome-load-timer\"><strong>alex-vv/chrome-load-timer</strong>\n<em>chrome-load-timer - Google Chrome extension to measure page load time and display it in the toolbar</em>github.com</a></p>\n<h3><strong>Use Minified Stylesheets and Scripts</strong></h3>\n<p>You would be amazed at how much performance can be gained by this simple trick. What is a minified document? When we write code it is never our job to make it optimised for the computer, instead our golden rule is to make it readable to humans. This improves readability, cuts down on debug time and makes it easier to maintain. However, to achieve this we often add extra spacing which costs us precious space. Minifying the code is trimming all this fat from what we’ve written to have code that produces the same result but is far more difficult to read and maintain. This is okay though, because a computer has no problem deciphering it. Take the following code for example.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Notice how, wherever possible, our line-breaks and spaces are gone. On top of that, the code in the for-loop is only one line so there’s no need for the curly braces which extends our code over three lines when it can be done in one. Does this make a difference?</p>\n<p>I tried it out on simple website that just had one <script> tag being loaded in for the graphics library <a href=\"https://p5js.org/\">p5.js</a>. Using the non-minified CDN link I got a load time of 0.25 seconds. Using the minified version I got a markedly improved load time of 0.08 seconds. Depending on what your website project is, there are a few ways to automatically minify code. If it is a <a href=\"https://guide.meteor.com/build-tool.html\">Meteor app</a> it will be done automatically, using <a href=\"https://webpack.js.org/guides/production/\">Webpack </a>will also allow you to do this. Otherwise there are some online tools like <a href=\"https://jscompress.com/\">JSCompress </a>or <a href=\"https://cssminifier.com/\">CSSMinifier </a>that you can upload your code to.</p>\n<h3>Design Versus Performance</h3>\n<p>Whilst design is undoubtedly a major aspect to a website’s overall success, both developers and designers must work together to compromise and make a mutually beneficial trade-off between design and performance. The classic example is fonts. Take the two screenshots of a simple website below.</p>\n<p><img src=\"https://res.cloudinary.com/patricoferris/image/upload/v1532780050/pf2018/blogposts/28-07-2018/Helvetica.png\" alt=\"The example website using Helvetica Font (commonly found on many computers) — check [this](https://css-tricks.com/snippets/css/system-font-stack/) link for common system fonts\">\n<em>The example website using Helvetica Font (commonly found on many computers) — check <a href=\"https://css-tricks.com/snippets/css/system-font-stack/\">this</a> link for common system fonts</em></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/5760/1*8ciuJNBdqMhlLSaOpNUXow.png\" alt=\"The example website using Roboto Font (designed by Google and linked from [Google Fonts](https://fonts.google.com/?selection.family=Roboto))\"><em>The example website using Roboto Font (designed by Google and linked from <a href=\"https://fonts.google.com/?selection.family=Roboto\">Google Fonts</a>)</em></p>\n<p>Before critiquing my questionable design skills take a moment to appreciate that these two fonts are very similar — yet the loading time for a website for the Roboto font was 0.22 seconds as compared with 0.17 for Helvetica. Whilst not that significant, using lots of custom fonts will slow down your website, although using Google Fonts’ API will help keep your website optimised. As an over-the-top example, linking 20 different fonts from the Google API increased the load time to 0.87 seconds.</p>\n<h3>Inlining your JavaScript and CSS</h3>\n<p>For each individual document or component of your website, when the parser reaches the script tag or link tag it sends and HTTP request for that document and if not stated differently, these will be blocking actions. What this means is your machine is parsing the HTML document getting the words to display in your browser but if it hits the script tag with the attribute src='js/main.js' for example, it will block the parsing and load in that file. This is where as a developer you need to be clever about where in the document you place things.</p>\n<p>Whilst it may not ultimately affect the loading time of your website, it can affect the order in which things are loaded. Again we’ll be using the un-minified p5.js library to simulate a large JavaScript file and load it in different places to see how it affects our user experience.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2780/1*h_3GogfkaahcXCO9a43CPA.gif\" alt=\"Refreshing website with the script tag inserted at the bottom of the body tag\"><em>Refreshing website with the script tag inserted at the bottom of the body tag</em></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2780/1*xLOq5r4erQAwb4Au_hB-Ww.gif\" alt=\"Refreshing website with the script tag inserted at the top of the body tag\"><em>Refreshing website with the script tag inserted at the top of the body tag</em></p>\n<p>Whilst the load times were similar for both cases — the user experience is far better by placing the script at the body tag allowing the HTML to be parsed before the JavaScript giving the user the website content immediately!</p>\n<p>In the same vein CSS can also be render-blocking especially because more often than not it is linked in the head tag of your HTML document before the body. But if we want our user to see the content in the quickest time we don’t want to be loading CSS for the footer of our document which the user won’t see until they’ve scrolled to the bottom. In fact, we don’t want to load any CSS in that the user can’t immediately see when the page first loads on their device.</p>\n<p>The CSS that you need is often called the <em>Critical CSS</em>. Finding it for yourself would be a headache. It will be different for different devices, meaning you would have to check manually for all possible devices. Lucky for us we have (if you’re using <a href=\"https://nodejs.org/en/\">Node.js</a>) <a href=\"https://github.com/addyosmani/critical\">Critical</a>. This helpful package does the CSS inlining for us and all we do is add some code to a Javascript file. Here’s a code snippet from the Github page.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">//Normal JavaScript Code\nconst arr = [1, 2, 3, 4, 5];\nfor(let i = 0; i &lt; arr.length; i++){\n  console.log(arr[i]);\n}\n\n//Minified Code - A 22.83% Compression saving 0.02kB\nconst arr=[1,2,3,4,5];for(let a=0;a&lt;arr.length;a++)console.log(arr[a]);</code></pre>\n      </div>\n<p>Using the generate function, we supply it with a JavaScript object with some values defined. base is where we’re going to save our src and dest (our project folder usually). What’s great is now we just supply an array of dimensions and the code will compute the critical CSS for each and inline that code into our head tag.</p>\n<h3>Async and Defer</h3>\n<p>Again, we come back to this idea of render-blocking and how best we should implement this for our website. When you have a plain script tag in your HTML it blocks the HTML from loading whilst the JavaScript loads <strong>and</strong> runs. Async and defer are simple attributes that you can add to your script tags that change the way your JavaScript will be loaded.</p>\n<p>Defer essentially “defers” execution of the script until after the HTML has been parsed. A major advantage of this is that you no longer need some $(document).ready() jQuery-style function to make sure the body was loaded before you could manipulate it, which could cut out some of the dependencies on libraries like jQuery which helps reduce load-time.</p>\n<p>Async is, unsurprisingly, the asynchronous loading of JavaScript files. What does this mean? Your HTML will continue to be parsed whilst the file is loaded and then whenever its ready the file will be executed. This helps improving user experience whilst viewing your website. Imagine for example you had a JavaScript file for doing some cool graphics. You want the words around this graphic to be parsed until your graphic is ready to be executed. As soon as it is ready, it is executed and we get a more seamless loading of our webpage without missing pieces.</p>\n<p>Check this <a href=\"http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html\">website</a> for a really intuitive, graphical representation of this.</p>\n<h3>Image Optimisation and Media Queries</h3>\n<p>The cornerstone of all website performance optimisation is the simple rule that, the less data you send to the client, the quicker and better your website will perform. With the plethora of devices on the market capable of viewing websites, there is a growing trend to optimise your website based on the device it is being viewed on.</p>\n<p>Media queries are a fairly new tool added to CSS3. With more and more content being consumed using mobile-devices there has been a shift in design thinking towards mobile first. Using media queries you can then add stylings for larger screen sizes.</p>\n<iframe src=\"https://medium.com/media/2b53ce5004bbba6e65050bf48c9a864b\" frameborder=0></iframe>\n<p>The @media tag starts a new CSS rule, whilst the only keyword stops older browsers that don’t support media queries from using it. The screen keyword applies the rules to screens rather than prints. After that you add the media-feature which supports the and , or and not keywords so you can get as specific as you want. When you’re loading your image you can write code like:</p>\n<iframe src=\"https://medium.com/media/ecbcd475236339fbe45efdd97bfcdeed\" frameborder=0></iframe>\n<p>This isn’t necessarily the best or optimal approach for image optimisation. Luckily we have other options. <a href=\"https://www.imgix.com/\">Imgix</a> and <a href=\"https://cloudinary.com/\">Cloudinary</a> are two ways you can help optimise your site for the right device. Imgix is a Content Delivery Network (CDN) for images with a lot of cool features. A CDN simply takes your files and spreads them across the globe so that someone in a different country doesn’t have to wait for your files on your server to make it all the way to them. This <a href=\"https://docs.imgix.com/tutorials/responsive-images-srcset-imgix\">tutorial</a> goes through how to use Imgix for different device pixel ratios. Cloudinary is a similar service, and their <a href=\"https://cloudinary.com/documentation/image_optimization\">tutorial </a>will take you through the importance of optimisation and how to achieve it will their incredible services. Below is a small example showing how easy it is to use Cloudinary straight in the HTML markup.</p>\n<iframe src=\"https://medium.com/media/98868354e5bf607d317496f64ddec2a2\" frameborder=0></iframe>\n<p>As a last point on image optimisation, the format you use can have a large impact on file size. Some files contain lots of metadata which you don’t want to be serving to your client — <a href=\"https://www.sno.phy.queensu.ca/~phil/exiftool/\">ExifTool</a> is a commonly used command-line application that can help you trim down those files sizes. On top of this, Scalable Vector Graphics (SVG) are a web-standard developed by W3C that offers XML-based vector graphics. This means they have infinite resolution unlike PNG or JPG files. It also makes them highly versatile, easily editable and can even be animated. At the end of the day SVGs are just code and so the file sizes tend to be small. For more reasons to use them, check out this <a href=\"https://watb.co.uk/5-reasons-you-should-be-using-svgs-over-pngs/\">article</a>.</p>\n<h3>Conclusion</h3>\n<p>We’ve only scratched the surface of what’s possible for website optimisation. There are many tools you can use to help you stream-line this process like <a href=\"https://webpack.js.org/\">Webpack</a> for bundling or static-site generators like <a href=\"https://www.gatsbyjs.org/\">Gatsby</a>. <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking\">Tree shaking</a> is another commonly used technique to remove excess, unused modules lying around your website.</p>\n<p>Hopefully this article has touched on some useful techniques you can use on your next site to help improve its performance. Happy coding!</p>\n<p>A big thank you to <a href=\"undefined\">Christian Silver</a> and <a href=\"undefined\">Charlie Crisp</a> for editing this post and providing extremely useful advice and extra content to make it even better.</p>"},{"id":"transformer-remark-markdown-ast-477234db84b6a5ba92fb6d317b61cc64-gatsby-remark-imagesgatsby-remark-prismjs-","value":{"type":"root","children":[{"type":"yaml","value":"path: '/optimise-your-website'\ntitle: 'Optimising your Website'\nsubtitle: 'Tips and tricks to keep your website lean and fast'\ndate: '2018-07-28'","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":6,"column":4,"offset":153},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://res.cloudinary.com/patricoferris/image/upload/v1532781201/pf2018/blogposts/28-07-2018/website_optimisation_2.png","alt":"Optimising your Website","position":{"start":{"line":7,"column":1,"offset":154},"end":{"line":7,"column":149,"offset":302},"indent":[]}},{"type":"text","value":"\nInspired by a ","position":{"start":{"line":7,"column":149,"offset":302},"end":{"line":8,"column":15,"offset":317},"indent":[1]}},{"type":"link","title":null,"url":"https://syntax.fm/","children":[{"type":"text","value":"Syntax","position":{"start":{"line":8,"column":16,"offset":318},"end":{"line":8,"column":22,"offset":324},"indent":[]}}],"position":{"start":{"line":8,"column":15,"offset":317},"end":{"line":8,"column":43,"offset":345},"indent":[]}},{"type":"text","value":" podcast, I got really interested in website optimisation. It can often be an overlooked aspect in web development with more focus on design and functionality, I realised my number one priority whenever I visited a website is load speed. My attention is a website’s number one goal, lose it and they lose all potential ad revenue or possibility to give me whatever information I was looking for. ","position":{"start":{"line":8,"column":43,"offset":345},"end":{"line":8,"column":439,"offset":741},"indent":[]}},{"type":"link","title":null,"url":"https://developers.google.com/web/fundamentals/performance/get-started/","children":[{"type":"text","value":"Many seem to agree. 53% of users abandon websites that take more than 3 seconds to load","position":{"start":{"line":8,"column":440,"offset":742},"end":{"line":8,"column":527,"offset":829},"indent":[]}}],"position":{"start":{"line":8,"column":439,"offset":741},"end":{"line":8,"column":601,"offset":903},"indent":[]}},{"type":"text","value":". No amount of fancy graphics or parallax scrolling that appears five seconds after someone’s clicked will hide the slow loading times.","position":{"start":{"line":8,"column":601,"offset":903},"end":{"line":8,"column":736,"offset":1038},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":154},"end":{"line":8,"column":736,"offset":1038},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"The aim of this article is to give a broad overview of the concepts and ideas behind optimising your website, experienced developers are likely already using things like Webpack (a module bundler) among other tools to speed-up their sites.","position":{"start":{"line":10,"column":1,"offset":1040},"end":{"line":10,"column":240,"offset":1279},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":1040},"end":{"line":10,"column":240,"offset":1279},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For testing load-times I will be using the ","position":{"start":{"line":12,"column":1,"offset":1281},"end":{"line":12,"column":44,"offset":1324},"indent":[]}},{"type":"link","title":null,"url":"https://chrome.google.com/webstore/detail/page-load-time/fploionmjgeclbkemipmkogoaohcdbig?hl=en","children":[{"type":"text","value":"Page Load Time ","position":{"start":{"line":12,"column":45,"offset":1325},"end":{"line":12,"column":60,"offset":1340},"indent":[]}}],"position":{"start":{"line":12,"column":44,"offset":1324},"end":{"line":12,"column":158,"offset":1438},"indent":[]}},{"type":"text","value":"Chrome extension. There are a few ways to measure website loading time including: ","position":{"start":{"line":12,"column":158,"offset":1438},"end":{"line":12,"column":240,"offset":1520},"indent":[]}},{"type":"link","title":null,"url":"https://developers.google.com/web/tools/chrome-user-experience-report/","children":[{"type":"text","value":"first paint, first meaning paint, DOMContentLoaded","position":{"start":{"line":12,"column":241,"offset":1521},"end":{"line":12,"column":291,"offset":1571},"indent":[]}}],"position":{"start":{"line":12,"column":240,"offset":1520},"end":{"line":12,"column":364,"offset":1644},"indent":[]}},{"type":"text","value":" etc. For a more detailed look into what this timer measures, check out the Github repository below.\n","position":{"start":{"line":12,"column":364,"offset":1644},"end":{"line":13,"column":1,"offset":1745},"indent":[1]}},{"type":"link","title":null,"url":"https://github.com/alex-vv/chrome-load-timer","children":[{"type":"strong","children":[{"type":"text","value":"alex-vv/chrome-load-timer","position":{"start":{"line":13,"column":4,"offset":1748},"end":{"line":13,"column":29,"offset":1773},"indent":[]}}],"position":{"start":{"line":13,"column":2,"offset":1746},"end":{"line":13,"column":31,"offset":1775},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":13,"column":31,"offset":1775},"end":{"line":14,"column":1,"offset":1776},"indent":[1]}},{"type":"emphasis","children":[{"type":"text","value":"chrome-load-timer - Google Chrome extension to measure page load time and display it in the toolbar","position":{"start":{"line":14,"column":2,"offset":1777},"end":{"line":14,"column":101,"offset":1876},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":1776},"end":{"line":14,"column":102,"offset":1877},"indent":[]}},{"type":"text","value":"github.com","position":{"start":{"line":14,"column":102,"offset":1877},"end":{"line":14,"column":112,"offset":1887},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":1745},"end":{"line":14,"column":159,"offset":1934},"indent":[1]}}],"position":{"start":{"line":12,"column":1,"offset":1281},"end":{"line":14,"column":159,"offset":1934},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"strong","children":[{"type":"text","value":"Use Minified Stylesheets and Scripts","position":{"start":{"line":16,"column":7,"offset":1942},"end":{"line":16,"column":43,"offset":1978},"indent":[]}}],"position":{"start":{"line":16,"column":5,"offset":1940},"end":{"line":16,"column":45,"offset":1980},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":1936},"end":{"line":16,"column":45,"offset":1980},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You would be amazed at how much performance can be gained by this simple trick. What is a minified document? When we write code it is never our job to make it optimised for the computer, instead our golden rule is to make it readable to humans. This improves readability, cuts down on debug time and makes it easier to maintain. However, to achieve this we often add extra spacing which costs us precious space. Minifying the code is trimming all this fat from what we’ve written to have code that produces the same result but is far more difficult to read and maintain. This is okay though, because a computer has no problem deciphering it. Take the following code for example.","position":{"start":{"line":18,"column":1,"offset":1982},"end":{"line":18,"column":679,"offset":2660},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1982},"end":{"line":18,"column":679,"offset":2660},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","position":{"start":{"line":20,"column":1,"offset":2662},"end":{"line":29,"column":4,"offset":2921},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Notice how, wherever possible, our line-breaks and spaces are gone. On top of that, the code in the for-loop is only one line so there’s no need for the curly braces which extends our code over three lines when it can be done in one. Does this make a difference?","position":{"start":{"line":31,"column":1,"offset":2923},"end":{"line":31,"column":263,"offset":3185},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":2923},"end":{"line":31,"column":263,"offset":3185},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"I tried it out on simple website that just had one script tag being loaded in for the graphics library ","position":{"start":{"line":33,"column":1,"offset":3187},"end":{"line":33,"column":104,"offset":3290},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/","children":[{"type":"text","value":"p5.js","position":{"start":{"line":33,"column":105,"offset":3291},"end":{"line":33,"column":110,"offset":3296},"indent":[]}}],"position":{"start":{"line":33,"column":104,"offset":3290},"end":{"line":33,"column":130,"offset":3316},"indent":[]}},{"type":"text","value":". Using the non-minified CDN link I got a load time of 0.25 seconds. Using the minified version I got a markedly improved load time of 0.08 seconds. Depending on what your website project is, there are a few ways to automatically minify code. If it is a ","position":{"start":{"line":33,"column":130,"offset":3316},"end":{"line":33,"column":384,"offset":3570},"indent":[]}},{"type":"link","title":null,"url":"https://guide.meteor.com/build-tool.html","children":[{"type":"text","value":"Meteor app","position":{"start":{"line":33,"column":385,"offset":3571},"end":{"line":33,"column":395,"offset":3581},"indent":[]}}],"position":{"start":{"line":33,"column":384,"offset":3570},"end":{"line":33,"column":438,"offset":3624},"indent":[]}},{"type":"text","value":" it will be done automatically, using ","position":{"start":{"line":33,"column":438,"offset":3624},"end":{"line":33,"column":476,"offset":3662},"indent":[]}},{"type":"link","title":null,"url":"https://webpack.js.org/guides/production/","children":[{"type":"text","value":"Webpack ","position":{"start":{"line":33,"column":477,"offset":3663},"end":{"line":33,"column":485,"offset":3671},"indent":[]}}],"position":{"start":{"line":33,"column":476,"offset":3662},"end":{"line":33,"column":529,"offset":3715},"indent":[]}},{"type":"text","value":"will also allow you to do this. Otherwise there are some online tools like ","position":{"start":{"line":33,"column":529,"offset":3715},"end":{"line":33,"column":604,"offset":3790},"indent":[]}},{"type":"link","title":null,"url":"https://jscompress.com/","children":[{"type":"text","value":"JSCompress ","position":{"start":{"line":33,"column":605,"offset":3791},"end":{"line":33,"column":616,"offset":3802},"indent":[]}}],"position":{"start":{"line":33,"column":604,"offset":3790},"end":{"line":33,"column":642,"offset":3828},"indent":[]}},{"type":"text","value":"or ","position":{"start":{"line":33,"column":642,"offset":3828},"end":{"line":33,"column":645,"offset":3831},"indent":[]}},{"type":"link","title":null,"url":"https://cssminifier.com/","children":[{"type":"text","value":"CSSMinifier ","position":{"start":{"line":33,"column":646,"offset":3832},"end":{"line":33,"column":658,"offset":3844},"indent":[]}}],"position":{"start":{"line":33,"column":645,"offset":3831},"end":{"line":33,"column":685,"offset":3871},"indent":[]}},{"type":"text","value":"that you can upload your code to.","position":{"start":{"line":33,"column":685,"offset":3871},"end":{"line":33,"column":718,"offset":3904},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":3187},"end":{"line":33,"column":718,"offset":3904},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Design Versus Performance","position":{"start":{"line":35,"column":5,"offset":3910},"end":{"line":35,"column":30,"offset":3935},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":3906},"end":{"line":35,"column":30,"offset":3935},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Whilst design is undoubtedly a major aspect to a website’s overall success, both developers and designers must work together to compromise and make a mutually beneficial trade-off between design and performance. The classic example is fonts. Take the two screenshots of a simple website below.","position":{"start":{"line":37,"column":1,"offset":3937},"end":{"line":37,"column":294,"offset":4230},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":3937},"end":{"line":37,"column":294,"offset":4230},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://res.cloudinary.com/patricoferris/image/upload/v1532780050/pf2018/blogposts/28-07-2018/Helvetica.png","alt":"The example website using Helvetica Font (commonly found on many computers) — check [this](https://css-tricks.com/snippets/css/system-font-stack/) link for common system fonts","position":{"start":{"line":39,"column":1,"offset":4232},"end":{"line":39,"column":288,"offset":4519},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":39,"column":288,"offset":4519},"end":{"line":40,"column":1,"offset":4520},"indent":[1]}},{"type":"emphasis","children":[{"type":"text","value":"The example website using Helvetica Font (commonly found on many computers) — check ","position":{"start":{"line":40,"column":2,"offset":4521},"end":{"line":40,"column":86,"offset":4605},"indent":[]}},{"type":"link","title":null,"url":"https://css-tricks.com/snippets/css/system-font-stack/","children":[{"type":"text","value":"this","position":{"start":{"line":40,"column":87,"offset":4606},"end":{"line":40,"column":91,"offset":4610},"indent":[]}}],"position":{"start":{"line":40,"column":86,"offset":4605},"end":{"line":40,"column":148,"offset":4667},"indent":[]}},{"type":"text","value":" link for common system fonts","position":{"start":{"line":40,"column":148,"offset":4667},"end":{"line":40,"column":177,"offset":4696},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":4520},"end":{"line":40,"column":178,"offset":4697},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":4232},"end":{"line":40,"column":178,"offset":4697},"indent":[1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://cdn-images-1.medium.com/max/5760/1*8ciuJNBdqMhlLSaOpNUXow.png","alt":"The example website using Roboto Font (designed by Google and linked from [Google Fonts](https://fonts.google.com/?selection.family=Roboto))","position":{"start":{"line":42,"column":1,"offset":4699},"end":{"line":42,"column":215,"offset":4913},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"The example website using Roboto Font (designed by Google and linked from ","position":{"start":{"line":42,"column":216,"offset":4914},"end":{"line":42,"column":290,"offset":4988},"indent":[]}},{"type":"link","title":null,"url":"https://fonts.google.com/?selection.family=Roboto","children":[{"type":"text","value":"Google Fonts","position":{"start":{"line":42,"column":291,"offset":4989},"end":{"line":42,"column":303,"offset":5001},"indent":[]}}],"position":{"start":{"line":42,"column":290,"offset":4988},"end":{"line":42,"column":355,"offset":5053},"indent":[]}},{"type":"text","value":")","position":{"start":{"line":42,"column":355,"offset":5053},"end":{"line":42,"column":356,"offset":5054},"indent":[]}}],"position":{"start":{"line":42,"column":215,"offset":4913},"end":{"line":42,"column":357,"offset":5055},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":4699},"end":{"line":42,"column":357,"offset":5055},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Before critiquing my questionable design skills take a moment to appreciate that these two fonts are very similar — yet the loading time for a website for the Roboto font was 0.22 seconds as compared with 0.17 for Helvetica. Whilst not that significant, using lots of custom fonts will slow down your website, although using Google Fonts’ API will help keep your website optimised. As an over-the-top example, linking 20 different fonts from the Google API increased the load time to 0.87 seconds.","position":{"start":{"line":44,"column":1,"offset":5057},"end":{"line":44,"column":498,"offset":5554},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":5057},"end":{"line":44,"column":498,"offset":5554},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Inlining your JavaScript and CSS","position":{"start":{"line":46,"column":5,"offset":5560},"end":{"line":46,"column":37,"offset":5592},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":5556},"end":{"line":46,"column":37,"offset":5592},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For each individual document or component of your website, when the parser reaches the script tag or link tag it sends and HTTP request for that document and if not stated differently, these will be blocking actions. What this means is your machine is parsing the HTML document getting the words to display in your browser but if it hits the script tag with the attribute src='js/main.js' for example, it will block the parsing and load in that file. This is where as a developer you need to be clever about where in the document you place things.","position":{"start":{"line":48,"column":1,"offset":5594},"end":{"line":48,"column":548,"offset":6141},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":5594},"end":{"line":48,"column":548,"offset":6141},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Whilst it may not ultimately affect the loading time of your website, it can affect the order in which things are loaded. Again we’ll be using the un-minified p5.js library to simulate a large JavaScript file and load it in different places to see how it affects our user experience.","position":{"start":{"line":50,"column":1,"offset":6143},"end":{"line":50,"column":284,"offset":6426},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":6143},"end":{"line":50,"column":284,"offset":6426},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://cdn-images-1.medium.com/max/2780/1*h_3GogfkaahcXCO9a43CPA.gif","alt":"Refreshing website with the script tag inserted at the bottom of the body tag","position":{"start":{"line":52,"column":1,"offset":6428},"end":{"line":52,"column":152,"offset":6579},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Refreshing website with the script tag inserted at the bottom of the body tag","position":{"start":{"line":52,"column":153,"offset":6580},"end":{"line":52,"column":230,"offset":6657},"indent":[]}}],"position":{"start":{"line":52,"column":152,"offset":6579},"end":{"line":52,"column":231,"offset":6658},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":6428},"end":{"line":52,"column":231,"offset":6658},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://cdn-images-1.medium.com/max/2780/1*xLOq5r4erQAwb4Au_hB-Ww.gif","alt":"Refreshing website with the script tag inserted at the top of the body tag","position":{"start":{"line":54,"column":1,"offset":6660},"end":{"line":54,"column":149,"offset":6808},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Refreshing website with the script tag inserted at the top of the body tag","position":{"start":{"line":54,"column":150,"offset":6809},"end":{"line":54,"column":224,"offset":6883},"indent":[]}}],"position":{"start":{"line":54,"column":149,"offset":6808},"end":{"line":54,"column":225,"offset":6884},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":6660},"end":{"line":54,"column":225,"offset":6884},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Whilst the load times were similar for both cases — the user experience is far better by placing the script at the body tag allowing the HTML to be parsed before the JavaScript giving the user the website content immediately!","position":{"start":{"line":56,"column":1,"offset":6886},"end":{"line":56,"column":226,"offset":7111},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":6886},"end":{"line":56,"column":226,"offset":7111},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In the same vein CSS can also be render-blocking especially because more often than not it is linked in the head tag of your HTML document before the body. But if we want our user to see the content in the quickest time we don’t want to be loading CSS for the footer of our document which the user won’t see until they’ve scrolled to the bottom. In fact, we don’t want to load any CSS in that the user can’t immediately see when the page first loads on their device.","position":{"start":{"line":58,"column":1,"offset":7113},"end":{"line":58,"column":467,"offset":7579},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":7113},"end":{"line":58,"column":467,"offset":7579},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The CSS that you need is often called the ","position":{"start":{"line":60,"column":1,"offset":7581},"end":{"line":60,"column":43,"offset":7623},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Critical CSS","position":{"start":{"line":60,"column":44,"offset":7624},"end":{"line":60,"column":56,"offset":7636},"indent":[]}}],"position":{"start":{"line":60,"column":43,"offset":7623},"end":{"line":60,"column":57,"offset":7637},"indent":[]}},{"type":"text","value":". Finding it for yourself would be a headache. It will be different for different devices, meaning you would have to check manually for all possible devices. Lucky for us we have (if you’re using ","position":{"start":{"line":60,"column":57,"offset":7637},"end":{"line":60,"column":253,"offset":7833},"indent":[]}},{"type":"link","title":null,"url":"https://nodejs.org/en/","children":[{"type":"text","value":"Node.js","position":{"start":{"line":60,"column":254,"offset":7834},"end":{"line":60,"column":261,"offset":7841},"indent":[]}}],"position":{"start":{"line":60,"column":253,"offset":7833},"end":{"line":60,"column":286,"offset":7866},"indent":[]}},{"type":"text","value":") ","position":{"start":{"line":60,"column":286,"offset":7866},"end":{"line":60,"column":288,"offset":7868},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/addyosmani/critical","children":[{"type":"text","value":"Critical","position":{"start":{"line":60,"column":289,"offset":7869},"end":{"line":60,"column":297,"offset":7877},"indent":[]}}],"position":{"start":{"line":60,"column":288,"offset":7868},"end":{"line":60,"column":338,"offset":7918},"indent":[]}},{"type":"text","value":". This helpful package does the CSS inlining for us and all we do is add some code to a Javascript file. Here’s a code snippet from the Github page.","position":{"start":{"line":60,"column":338,"offset":7918},"end":{"line":60,"column":486,"offset":8066},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":7581},"end":{"line":60,"column":486,"offset":8066},"indent":[]}},{"type":"html","lang":"JavaScript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">//Normal JavaScript Code\nconst arr = [1, 2, 3, 4, 5];\nfor(let i = 0; i &lt; arr.length; i++){\n  console.log(arr[i]);\n}\n\n//Minified Code - A 22.83% Compression saving 0.02kB\nconst arr=[1,2,3,4,5];for(let a=0;a&lt;arr.length;a++)console.log(arr[a]);</code></pre>\n      </div>","position":{"start":{"line":62,"column":1,"offset":8068},"end":{"line":73,"column":4,"offset":8329},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Using the generate function, we supply it with a JavaScript object with some values defined. base is where we’re going to save our src and dest (our project folder usually). What’s great is now we just supply an array of dimensions and the code will compute the critical CSS for each and inline that code into our head tag.","position":{"start":{"line":75,"column":1,"offset":8331},"end":{"line":75,"column":324,"offset":8654},"indent":[]}}],"position":{"start":{"line":75,"column":1,"offset":8331},"end":{"line":75,"column":324,"offset":8654},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Async and Defer","position":{"start":{"line":77,"column":5,"offset":8660},"end":{"line":77,"column":20,"offset":8675},"indent":[]}}],"position":{"start":{"line":77,"column":1,"offset":8656},"end":{"line":77,"column":20,"offset":8675},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Again, we come back to this idea of render-blocking and how best we should implement this for our website. When you have a plain script tag in your HTML it blocks the HTML from loading whilst the JavaScript loads ","position":{"start":{"line":79,"column":1,"offset":8677},"end":{"line":79,"column":214,"offset":8890},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"and","position":{"start":{"line":79,"column":216,"offset":8892},"end":{"line":79,"column":219,"offset":8895},"indent":[]}}],"position":{"start":{"line":79,"column":214,"offset":8890},"end":{"line":79,"column":221,"offset":8897},"indent":[]}},{"type":"text","value":" runs. Async and defer are simple attributes that you can add to your script tags that change the way your JavaScript will be loaded.","position":{"start":{"line":79,"column":221,"offset":8897},"end":{"line":79,"column":354,"offset":9030},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":8677},"end":{"line":79,"column":354,"offset":9030},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Defer essentially “defers” execution of the script until after the HTML has been parsed. A major advantage of this is that you no longer need some $(document).ready() jQuery-style function to make sure the body was loaded before you could manipulate it, which could cut out some of the dependencies on libraries like jQuery which helps reduce load-time.","position":{"start":{"line":81,"column":1,"offset":9032},"end":{"line":81,"column":354,"offset":9385},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":9032},"end":{"line":81,"column":354,"offset":9385},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Async is, unsurprisingly, the asynchronous loading of JavaScript files. What does this mean? Your HTML will continue to be parsed whilst the file is loaded and then whenever its ready the file will be executed. This helps improving user experience whilst viewing your website. Imagine for example you had a JavaScript file for doing some cool graphics. You want the words around this graphic to be parsed until your graphic is ready to be executed. As soon as it is ready, it is executed and we get a more seamless loading of our webpage without missing pieces.","position":{"start":{"line":83,"column":1,"offset":9387},"end":{"line":83,"column":562,"offset":9948},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":9387},"end":{"line":83,"column":562,"offset":9948},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Check this ","position":{"start":{"line":85,"column":1,"offset":9950},"end":{"line":85,"column":12,"offset":9961},"indent":[]}},{"type":"link","title":null,"url":"http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html","children":[{"type":"text","value":"website","position":{"start":{"line":85,"column":13,"offset":9962},"end":{"line":85,"column":20,"offset":9969},"indent":[]}}],"position":{"start":{"line":85,"column":12,"offset":9961},"end":{"line":85,"column":94,"offset":10043},"indent":[]}},{"type":"text","value":" for a really intuitive, graphical representation of this.","position":{"start":{"line":85,"column":94,"offset":10043},"end":{"line":85,"column":152,"offset":10101},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":9950},"end":{"line":85,"column":152,"offset":10101},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Image Optimisation and Media Queries","position":{"start":{"line":87,"column":5,"offset":10107},"end":{"line":87,"column":41,"offset":10143},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":10103},"end":{"line":87,"column":41,"offset":10143},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The cornerstone of all website performance optimisation is the simple rule that, the less data you send to the client, the quicker and better your website will perform. With the plethora of devices on the market capable of viewing websites, there is a growing trend to optimise your website based on the device it is being viewed on.","position":{"start":{"line":89,"column":1,"offset":10145},"end":{"line":89,"column":334,"offset":10478},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":10145},"end":{"line":89,"column":334,"offset":10478},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Media queries are a fairly new tool added to CSS3. With more and more content being consumed using mobile-devices there has been a shift in design thinking towards mobile first. Using media queries you can then add stylings for larger screen sizes.","position":{"start":{"line":91,"column":1,"offset":10480},"end":{"line":91,"column":249,"offset":10728},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":10480},"end":{"line":91,"column":249,"offset":10728},"indent":[]}},{"type":"html","value":"<iframe src=\"https://medium.com/media/2b53ce5004bbba6e65050bf48c9a864b\" frameborder=0></iframe>","position":{"start":{"line":93,"column":1,"offset":10730},"end":{"line":93,"column":96,"offset":10825},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The @media tag starts a new CSS rule, whilst the only keyword stops older browsers that don’t support media queries from using it. The screen keyword applies the rules to screens rather than prints. After that you add the media-feature which supports the and , or and not keywords so you can get as specific as you want. When you’re loading your image you can write code like:","position":{"start":{"line":95,"column":1,"offset":10827},"end":{"line":95,"column":377,"offset":11203},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":10827},"end":{"line":95,"column":377,"offset":11203},"indent":[]}},{"type":"html","value":"<iframe src=\"https://medium.com/media/ecbcd475236339fbe45efdd97bfcdeed\" frameborder=0></iframe>","position":{"start":{"line":97,"column":1,"offset":11205},"end":{"line":97,"column":96,"offset":11300},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This isn’t necessarily the best or optimal approach for image optimisation. Luckily we have other options. ","position":{"start":{"line":99,"column":1,"offset":11302},"end":{"line":99,"column":108,"offset":11409},"indent":[]}},{"type":"link","title":null,"url":"https://www.imgix.com/","children":[{"type":"text","value":"Imgix","position":{"start":{"line":99,"column":109,"offset":11410},"end":{"line":99,"column":114,"offset":11415},"indent":[]}}],"position":{"start":{"line":99,"column":108,"offset":11409},"end":{"line":99,"column":139,"offset":11440},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":99,"column":139,"offset":11440},"end":{"line":99,"column":144,"offset":11445},"indent":[]}},{"type":"link","title":null,"url":"https://cloudinary.com/","children":[{"type":"text","value":"Cloudinary","position":{"start":{"line":99,"column":145,"offset":11446},"end":{"line":99,"column":155,"offset":11456},"indent":[]}}],"position":{"start":{"line":99,"column":144,"offset":11445},"end":{"line":99,"column":181,"offset":11482},"indent":[]}},{"type":"text","value":" are two ways you can help optimise your site for the right device. Imgix is a Content Delivery Network (CDN) for images with a lot of cool features. A CDN simply takes your files and spreads them across the globe so that someone in a different country doesn’t have to wait for your files on your server to make it all the way to them. This ","position":{"start":{"line":99,"column":181,"offset":11482},"end":{"line":99,"column":522,"offset":11823},"indent":[]}},{"type":"link","title":null,"url":"https://docs.imgix.com/tutorials/responsive-images-srcset-imgix","children":[{"type":"text","value":"tutorial","position":{"start":{"line":99,"column":523,"offset":11824},"end":{"line":99,"column":531,"offset":11832},"indent":[]}}],"position":{"start":{"line":99,"column":522,"offset":11823},"end":{"line":99,"column":597,"offset":11898},"indent":[]}},{"type":"text","value":" goes through how to use Imgix for different device pixel ratios. Cloudinary is a similar service, and their ","position":{"start":{"line":99,"column":597,"offset":11898},"end":{"line":99,"column":706,"offset":12007},"indent":[]}},{"type":"link","title":null,"url":"https://cloudinary.com/documentation/image_optimization","children":[{"type":"text","value":"tutorial ","position":{"start":{"line":99,"column":707,"offset":12008},"end":{"line":99,"column":716,"offset":12017},"indent":[]}}],"position":{"start":{"line":99,"column":706,"offset":12007},"end":{"line":99,"column":774,"offset":12075},"indent":[]}},{"type":"text","value":"will take you through the importance of optimisation and how to achieve it will their incredible services. Below is a small example showing how easy it is to use Cloudinary straight in the HTML markup.","position":{"start":{"line":99,"column":774,"offset":12075},"end":{"line":99,"column":975,"offset":12276},"indent":[]}}],"position":{"start":{"line":99,"column":1,"offset":11302},"end":{"line":99,"column":975,"offset":12276},"indent":[]}},{"type":"html","value":"<iframe src=\"https://medium.com/media/98868354e5bf607d317496f64ddec2a2\" frameborder=0></iframe>","position":{"start":{"line":101,"column":1,"offset":12278},"end":{"line":101,"column":96,"offset":12373},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As a last point on image optimisation, the format you use can have a large impact on file size. Some files contain lots of metadata which you don’t want to be serving to your client — ","position":{"start":{"line":103,"column":1,"offset":12375},"end":{"line":103,"column":185,"offset":12559},"indent":[]}},{"type":"link","title":null,"url":"https://www.sno.phy.queensu.ca/~phil/exiftool/","children":[{"type":"text","value":"ExifTool","position":{"start":{"line":103,"column":186,"offset":12560},"end":{"line":103,"column":194,"offset":12568},"indent":[]}}],"position":{"start":{"line":103,"column":185,"offset":12559},"end":{"line":103,"column":243,"offset":12617},"indent":[]}},{"type":"text","value":" is a commonly used command-line application that can help you trim down those files sizes. On top of this, Scalable Vector Graphics (SVG) are a web-standard developed by W3C that offers XML-based vector graphics. This means they have infinite resolution unlike PNG or JPG files. It also makes them highly versatile, easily editable and can even be animated. At the end of the day SVGs are just code and so the file sizes tend to be small. For more reasons to use them, check out this ","position":{"start":{"line":103,"column":243,"offset":12617},"end":{"line":103,"column":728,"offset":13102},"indent":[]}},{"type":"link","title":null,"url":"https://watb.co.uk/5-reasons-you-should-be-using-svgs-over-pngs/","children":[{"type":"text","value":"article","position":{"start":{"line":103,"column":729,"offset":13103},"end":{"line":103,"column":736,"offset":13110},"indent":[]}}],"position":{"start":{"line":103,"column":728,"offset":13102},"end":{"line":103,"column":803,"offset":13177},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":103,"column":803,"offset":13177},"end":{"line":103,"column":804,"offset":13178},"indent":[]}}],"position":{"start":{"line":103,"column":1,"offset":12375},"end":{"line":103,"column":804,"offset":13178},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":105,"column":5,"offset":13184},"end":{"line":105,"column":15,"offset":13194},"indent":[]}}],"position":{"start":{"line":105,"column":1,"offset":13180},"end":{"line":105,"column":15,"offset":13194},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We’ve only scratched the surface of what’s possible for website optimisation. There are many tools you can use to help you stream-line this process like ","position":{"start":{"line":107,"column":1,"offset":13196},"end":{"line":107,"column":154,"offset":13349},"indent":[]}},{"type":"link","title":null,"url":"https://webpack.js.org/","children":[{"type":"text","value":"Webpack","position":{"start":{"line":107,"column":155,"offset":13350},"end":{"line":107,"column":162,"offset":13357},"indent":[]}}],"position":{"start":{"line":107,"column":154,"offset":13349},"end":{"line":107,"column":188,"offset":13383},"indent":[]}},{"type":"text","value":" for bundling or static-site generators like ","position":{"start":{"line":107,"column":188,"offset":13383},"end":{"line":107,"column":233,"offset":13428},"indent":[]}},{"type":"link","title":null,"url":"https://www.gatsbyjs.org/","children":[{"type":"text","value":"Gatsby","position":{"start":{"line":107,"column":234,"offset":13429},"end":{"line":107,"column":240,"offset":13435},"indent":[]}}],"position":{"start":{"line":107,"column":233,"offset":13428},"end":{"line":107,"column":268,"offset":13463},"indent":[]}},{"type":"text","value":". ","position":{"start":{"line":107,"column":268,"offset":13463},"end":{"line":107,"column":270,"offset":13465},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking","children":[{"type":"text","value":"Tree shaking","position":{"start":{"line":107,"column":271,"offset":13466},"end":{"line":107,"column":283,"offset":13478},"indent":[]}}],"position":{"start":{"line":107,"column":270,"offset":13465},"end":{"line":107,"column":348,"offset":13543},"indent":[]}},{"type":"text","value":" is another commonly used technique to remove excess, unused modules lying around your website.","position":{"start":{"line":107,"column":348,"offset":13543},"end":{"line":107,"column":443,"offset":13638},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":13196},"end":{"line":107,"column":443,"offset":13638},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Hopefully this article has touched on some useful techniques you can use on your next site to help improve its performance. Happy coding!","position":{"start":{"line":109,"column":1,"offset":13640},"end":{"line":109,"column":138,"offset":13777},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":13640},"end":{"line":109,"column":138,"offset":13777},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A big thank you to ","position":{"start":{"line":111,"column":1,"offset":13779},"end":{"line":111,"column":20,"offset":13798},"indent":[]}},{"type":"link","title":null,"url":"undefined","children":[{"type":"text","value":"Christian Silver","position":{"start":{"line":111,"column":21,"offset":13799},"end":{"line":111,"column":37,"offset":13815},"indent":[]}}],"position":{"start":{"line":111,"column":20,"offset":13798},"end":{"line":111,"column":49,"offset":13827},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":111,"column":49,"offset":13827},"end":{"line":111,"column":54,"offset":13832},"indent":[]}},{"type":"link","title":null,"url":"undefined","children":[{"type":"text","value":"Charlie Crisp","position":{"start":{"line":111,"column":55,"offset":13833},"end":{"line":111,"column":68,"offset":13846},"indent":[]}}],"position":{"start":{"line":111,"column":54,"offset":13832},"end":{"line":111,"column":80,"offset":13858},"indent":[]}},{"type":"text","value":" for editing this post and providing extremely useful advice and extra content to make it even better.","position":{"start":{"line":111,"column":80,"offset":13858},"end":{"line":111,"column":182,"offset":13960},"indent":[]}}],"position":{"start":{"line":111,"column":1,"offset":13779},"end":{"line":111,"column":182,"offset":13960},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":112,"column":1,"offset":13961}}}},{"id":"transformer-remark-markdown-html-ast-477234db84b6a5ba92fb6d317b61cc64-gatsby-remark-imagesgatsby-remark-prismjs-","value":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/patricoferris/image/upload/v1532781201/pf2018/blogposts/28-07-2018/website_optimisation_2.png","alt":"Optimising your Website"},"children":[],"position":{"start":{"line":7,"column":1,"offset":154},"end":{"line":7,"column":149,"offset":302}}},{"type":"text","value":"\nInspired by a ","position":{"start":{"line":7,"column":149,"offset":302},"end":{"line":8,"column":15,"offset":317}}},{"type":"element","tagName":"a","properties":{"href":"https://syntax.fm/"},"children":[{"type":"text","value":"Syntax","position":{"start":{"line":8,"column":16,"offset":318},"end":{"line":8,"column":22,"offset":324}}}],"position":{"start":{"line":8,"column":15,"offset":317},"end":{"line":8,"column":43,"offset":345}}},{"type":"text","value":" podcast, I got really interested in website optimisation. It can often be an overlooked aspect in web development with more focus on design and functionality, I realised my number one priority whenever I visited a website is load speed. My attention is a website’s number one goal, lose it and they lose all potential ad revenue or possibility to give me whatever information I was looking for. ","position":{"start":{"line":8,"column":43,"offset":345},"end":{"line":8,"column":439,"offset":741}}},{"type":"element","tagName":"a","properties":{"href":"https://developers.google.com/web/fundamentals/performance/get-started/"},"children":[{"type":"text","value":"Many seem to agree. 53% of users abandon websites that take more than 3 seconds to load","position":{"start":{"line":8,"column":440,"offset":742},"end":{"line":8,"column":527,"offset":829}}}],"position":{"start":{"line":8,"column":439,"offset":741},"end":{"line":8,"column":601,"offset":903}}},{"type":"text","value":". No amount of fancy graphics or parallax scrolling that appears five seconds after someone’s clicked will hide the slow loading times.","position":{"start":{"line":8,"column":601,"offset":903},"end":{"line":8,"column":736,"offset":1038}}}],"position":{"start":{"line":7,"column":1,"offset":154},"end":{"line":8,"column":736,"offset":1038}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The aim of this article is to give a broad overview of the concepts and ideas behind optimising your website, experienced developers are likely already using things like Webpack (a module bundler) among other tools to speed-up their sites.","position":{"start":{"line":10,"column":1,"offset":1040},"end":{"line":10,"column":240,"offset":1279}}}],"position":{"start":{"line":10,"column":1,"offset":1040},"end":{"line":10,"column":240,"offset":1279}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For testing load-times I will be using the ","position":{"start":{"line":12,"column":1,"offset":1281},"end":{"line":12,"column":44,"offset":1324}}},{"type":"element","tagName":"a","properties":{"href":"https://chrome.google.com/webstore/detail/page-load-time/fploionmjgeclbkemipmkogoaohcdbig?hl=en"},"children":[{"type":"text","value":"Page Load Time ","position":{"start":{"line":12,"column":45,"offset":1325},"end":{"line":12,"column":60,"offset":1340}}}],"position":{"start":{"line":12,"column":44,"offset":1324},"end":{"line":12,"column":158,"offset":1438}}},{"type":"text","value":"Chrome extension. There are a few ways to measure website loading time including: ","position":{"start":{"line":12,"column":158,"offset":1438},"end":{"line":12,"column":240,"offset":1520}}},{"type":"element","tagName":"a","properties":{"href":"https://developers.google.com/web/tools/chrome-user-experience-report/"},"children":[{"type":"text","value":"first paint, first meaning paint, DOMContentLoaded","position":{"start":{"line":12,"column":241,"offset":1521},"end":{"line":12,"column":291,"offset":1571}}}],"position":{"start":{"line":12,"column":240,"offset":1520},"end":{"line":12,"column":364,"offset":1644}}},{"type":"text","value":" etc. For a more detailed look into what this timer measures, check out the Github repository below.\n","position":{"start":{"line":12,"column":364,"offset":1644},"end":{"line":13,"column":1,"offset":1745}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/alex-vv/chrome-load-timer"},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"alex-vv/chrome-load-timer","position":{"start":{"line":13,"column":4,"offset":1748},"end":{"line":13,"column":29,"offset":1773}}}],"position":{"start":{"line":13,"column":2,"offset":1746},"end":{"line":13,"column":31,"offset":1775}}},{"type":"text","value":"\n","position":{"start":{"line":13,"column":31,"offset":1775},"end":{"line":14,"column":1,"offset":1776}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"chrome-load-timer - Google Chrome extension to measure page load time and display it in the toolbar","position":{"start":{"line":14,"column":2,"offset":1777},"end":{"line":14,"column":101,"offset":1876}}}],"position":{"start":{"line":14,"column":1,"offset":1776},"end":{"line":14,"column":102,"offset":1877}}},{"type":"text","value":"github.com","position":{"start":{"line":14,"column":102,"offset":1877},"end":{"line":14,"column":112,"offset":1887}}}],"position":{"start":{"line":13,"column":1,"offset":1745},"end":{"line":14,"column":159,"offset":1934}}}],"position":{"start":{"line":12,"column":1,"offset":1281},"end":{"line":14,"column":159,"offset":1934}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Use Minified Stylesheets and Scripts","position":{"start":{"line":16,"column":7,"offset":1942},"end":{"line":16,"column":43,"offset":1978}}}],"position":{"start":{"line":16,"column":5,"offset":1940},"end":{"line":16,"column":45,"offset":1980}}}],"position":{"start":{"line":16,"column":1,"offset":1936},"end":{"line":16,"column":45,"offset":1980}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You would be amazed at how much performance can be gained by this simple trick. What is a minified document? When we write code it is never our job to make it optimised for the computer, instead our golden rule is to make it readable to humans. This improves readability, cuts down on debug time and makes it easier to maintain. However, to achieve this we often add extra spacing which costs us precious space. Minifying the code is trimming all this fat from what we’ve written to have code that produces the same result but is far more difficult to read and maintain. This is okay though, because a computer has no problem deciphering it. Take the following code for example.","position":{"start":{"line":18,"column":1,"offset":1982},"end":{"line":18,"column":679,"offset":2660}}}],"position":{"start":{"line":18,"column":1,"offset":1982},"end":{"line":18,"column":679,"offset":2660}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","position":{"start":{"line":20,"column":1,"offset":2662},"end":{"line":29,"column":4,"offset":2921}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Notice how, wherever possible, our line-breaks and spaces are gone. On top of that, the code in the for-loop is only one line so there’s no need for the curly braces which extends our code over three lines when it can be done in one. Does this make a difference?","position":{"start":{"line":31,"column":1,"offset":2923},"end":{"line":31,"column":263,"offset":3185}}}],"position":{"start":{"line":31,"column":1,"offset":2923},"end":{"line":31,"column":263,"offset":3185}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I tried it out on simple website that just had one script tag being loaded in for the graphics library ","position":{"start":{"line":33,"column":1,"offset":3187},"end":{"line":33,"column":104,"offset":3290}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/"},"children":[{"type":"text","value":"p5.js","position":{"start":{"line":33,"column":105,"offset":3291},"end":{"line":33,"column":110,"offset":3296}}}],"position":{"start":{"line":33,"column":104,"offset":3290},"end":{"line":33,"column":130,"offset":3316}}},{"type":"text","value":". Using the non-minified CDN link I got a load time of 0.25 seconds. Using the minified version I got a markedly improved load time of 0.08 seconds. Depending on what your website project is, there are a few ways to automatically minify code. If it is a ","position":{"start":{"line":33,"column":130,"offset":3316},"end":{"line":33,"column":384,"offset":3570}}},{"type":"element","tagName":"a","properties":{"href":"https://guide.meteor.com/build-tool.html"},"children":[{"type":"text","value":"Meteor app","position":{"start":{"line":33,"column":385,"offset":3571},"end":{"line":33,"column":395,"offset":3581}}}],"position":{"start":{"line":33,"column":384,"offset":3570},"end":{"line":33,"column":438,"offset":3624}}},{"type":"text","value":" it will be done automatically, using ","position":{"start":{"line":33,"column":438,"offset":3624},"end":{"line":33,"column":476,"offset":3662}}},{"type":"element","tagName":"a","properties":{"href":"https://webpack.js.org/guides/production/"},"children":[{"type":"text","value":"Webpack ","position":{"start":{"line":33,"column":477,"offset":3663},"end":{"line":33,"column":485,"offset":3671}}}],"position":{"start":{"line":33,"column":476,"offset":3662},"end":{"line":33,"column":529,"offset":3715}}},{"type":"text","value":"will also allow you to do this. Otherwise there are some online tools like ","position":{"start":{"line":33,"column":529,"offset":3715},"end":{"line":33,"column":604,"offset":3790}}},{"type":"element","tagName":"a","properties":{"href":"https://jscompress.com/"},"children":[{"type":"text","value":"JSCompress ","position":{"start":{"line":33,"column":605,"offset":3791},"end":{"line":33,"column":616,"offset":3802}}}],"position":{"start":{"line":33,"column":604,"offset":3790},"end":{"line":33,"column":642,"offset":3828}}},{"type":"text","value":"or ","position":{"start":{"line":33,"column":642,"offset":3828},"end":{"line":33,"column":645,"offset":3831}}},{"type":"element","tagName":"a","properties":{"href":"https://cssminifier.com/"},"children":[{"type":"text","value":"CSSMinifier ","position":{"start":{"line":33,"column":646,"offset":3832},"end":{"line":33,"column":658,"offset":3844}}}],"position":{"start":{"line":33,"column":645,"offset":3831},"end":{"line":33,"column":685,"offset":3871}}},{"type":"text","value":"that you can upload your code to.","position":{"start":{"line":33,"column":685,"offset":3871},"end":{"line":33,"column":718,"offset":3904}}}],"position":{"start":{"line":33,"column":1,"offset":3187},"end":{"line":33,"column":718,"offset":3904}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Design Versus Performance","position":{"start":{"line":35,"column":5,"offset":3910},"end":{"line":35,"column":30,"offset":3935}}}],"position":{"start":{"line":35,"column":1,"offset":3906},"end":{"line":35,"column":30,"offset":3935}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Whilst design is undoubtedly a major aspect to a website’s overall success, both developers and designers must work together to compromise and make a mutually beneficial trade-off between design and performance. The classic example is fonts. Take the two screenshots of a simple website below.","position":{"start":{"line":37,"column":1,"offset":3937},"end":{"line":37,"column":294,"offset":4230}}}],"position":{"start":{"line":37,"column":1,"offset":3937},"end":{"line":37,"column":294,"offset":4230}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/patricoferris/image/upload/v1532780050/pf2018/blogposts/28-07-2018/Helvetica.png","alt":"The example website using Helvetica Font (commonly found on many computers) — check [this](https://css-tricks.com/snippets/css/system-font-stack/) link for common system fonts"},"children":[],"position":{"start":{"line":39,"column":1,"offset":4232},"end":{"line":39,"column":288,"offset":4519}}},{"type":"text","value":"\n","position":{"start":{"line":39,"column":288,"offset":4519},"end":{"line":40,"column":1,"offset":4520}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The example website using Helvetica Font (commonly found on many computers) — check ","position":{"start":{"line":40,"column":2,"offset":4521},"end":{"line":40,"column":86,"offset":4605}}},{"type":"element","tagName":"a","properties":{"href":"https://css-tricks.com/snippets/css/system-font-stack/"},"children":[{"type":"text","value":"this","position":{"start":{"line":40,"column":87,"offset":4606},"end":{"line":40,"column":91,"offset":4610}}}],"position":{"start":{"line":40,"column":86,"offset":4605},"end":{"line":40,"column":148,"offset":4667}}},{"type":"text","value":" link for common system fonts","position":{"start":{"line":40,"column":148,"offset":4667},"end":{"line":40,"column":177,"offset":4696}}}],"position":{"start":{"line":40,"column":1,"offset":4520},"end":{"line":40,"column":178,"offset":4697}}}],"position":{"start":{"line":39,"column":1,"offset":4232},"end":{"line":40,"column":178,"offset":4697}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://cdn-images-1.medium.com/max/5760/1*8ciuJNBdqMhlLSaOpNUXow.png","alt":"The example website using Roboto Font (designed by Google and linked from [Google Fonts](https://fonts.google.com/?selection.family=Roboto))"},"children":[],"position":{"start":{"line":42,"column":1,"offset":4699},"end":{"line":42,"column":215,"offset":4913}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The example website using Roboto Font (designed by Google and linked from ","position":{"start":{"line":42,"column":216,"offset":4914},"end":{"line":42,"column":290,"offset":4988}}},{"type":"element","tagName":"a","properties":{"href":"https://fonts.google.com/?selection.family=Roboto"},"children":[{"type":"text","value":"Google Fonts","position":{"start":{"line":42,"column":291,"offset":4989},"end":{"line":42,"column":303,"offset":5001}}}],"position":{"start":{"line":42,"column":290,"offset":4988},"end":{"line":42,"column":355,"offset":5053}}},{"type":"text","value":")","position":{"start":{"line":42,"column":355,"offset":5053},"end":{"line":42,"column":356,"offset":5054}}}],"position":{"start":{"line":42,"column":215,"offset":4913},"end":{"line":42,"column":357,"offset":5055}}}],"position":{"start":{"line":42,"column":1,"offset":4699},"end":{"line":42,"column":357,"offset":5055}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Before critiquing my questionable design skills take a moment to appreciate that these two fonts are very similar — yet the loading time for a website for the Roboto font was 0.22 seconds as compared with 0.17 for Helvetica. Whilst not that significant, using lots of custom fonts will slow down your website, although using Google Fonts’ API will help keep your website optimised. As an over-the-top example, linking 20 different fonts from the Google API increased the load time to 0.87 seconds.","position":{"start":{"line":44,"column":1,"offset":5057},"end":{"line":44,"column":498,"offset":5554}}}],"position":{"start":{"line":44,"column":1,"offset":5057},"end":{"line":44,"column":498,"offset":5554}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Inlining your JavaScript and CSS","position":{"start":{"line":46,"column":5,"offset":5560},"end":{"line":46,"column":37,"offset":5592}}}],"position":{"start":{"line":46,"column":1,"offset":5556},"end":{"line":46,"column":37,"offset":5592}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For each individual document or component of your website, when the parser reaches the script tag or link tag it sends and HTTP request for that document and if not stated differently, these will be blocking actions. What this means is your machine is parsing the HTML document getting the words to display in your browser but if it hits the script tag with the attribute src='js/main.js' for example, it will block the parsing and load in that file. This is where as a developer you need to be clever about where in the document you place things.","position":{"start":{"line":48,"column":1,"offset":5594},"end":{"line":48,"column":548,"offset":6141}}}],"position":{"start":{"line":48,"column":1,"offset":5594},"end":{"line":48,"column":548,"offset":6141}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Whilst it may not ultimately affect the loading time of your website, it can affect the order in which things are loaded. Again we’ll be using the un-minified p5.js library to simulate a large JavaScript file and load it in different places to see how it affects our user experience.","position":{"start":{"line":50,"column":1,"offset":6143},"end":{"line":50,"column":284,"offset":6426}}}],"position":{"start":{"line":50,"column":1,"offset":6143},"end":{"line":50,"column":284,"offset":6426}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://cdn-images-1.medium.com/max/2780/1*h_3GogfkaahcXCO9a43CPA.gif","alt":"Refreshing website with the script tag inserted at the bottom of the body tag"},"children":[],"position":{"start":{"line":52,"column":1,"offset":6428},"end":{"line":52,"column":152,"offset":6579}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Refreshing website with the script tag inserted at the bottom of the body tag","position":{"start":{"line":52,"column":153,"offset":6580},"end":{"line":52,"column":230,"offset":6657}}}],"position":{"start":{"line":52,"column":152,"offset":6579},"end":{"line":52,"column":231,"offset":6658}}}],"position":{"start":{"line":52,"column":1,"offset":6428},"end":{"line":52,"column":231,"offset":6658}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://cdn-images-1.medium.com/max/2780/1*xLOq5r4erQAwb4Au_hB-Ww.gif","alt":"Refreshing website with the script tag inserted at the top of the body tag"},"children":[],"position":{"start":{"line":54,"column":1,"offset":6660},"end":{"line":54,"column":149,"offset":6808}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Refreshing website with the script tag inserted at the top of the body tag","position":{"start":{"line":54,"column":150,"offset":6809},"end":{"line":54,"column":224,"offset":6883}}}],"position":{"start":{"line":54,"column":149,"offset":6808},"end":{"line":54,"column":225,"offset":6884}}}],"position":{"start":{"line":54,"column":1,"offset":6660},"end":{"line":54,"column":225,"offset":6884}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Whilst the load times were similar for both cases — the user experience is far better by placing the script at the body tag allowing the HTML to be parsed before the JavaScript giving the user the website content immediately!","position":{"start":{"line":56,"column":1,"offset":6886},"end":{"line":56,"column":226,"offset":7111}}}],"position":{"start":{"line":56,"column":1,"offset":6886},"end":{"line":56,"column":226,"offset":7111}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In the same vein CSS can also be render-blocking especially because more often than not it is linked in the head tag of your HTML document before the body. But if we want our user to see the content in the quickest time we don’t want to be loading CSS for the footer of our document which the user won’t see until they’ve scrolled to the bottom. In fact, we don’t want to load any CSS in that the user can’t immediately see when the page first loads on their device.","position":{"start":{"line":58,"column":1,"offset":7113},"end":{"line":58,"column":467,"offset":7579}}}],"position":{"start":{"line":58,"column":1,"offset":7113},"end":{"line":58,"column":467,"offset":7579}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The CSS that you need is often called the ","position":{"start":{"line":60,"column":1,"offset":7581},"end":{"line":60,"column":43,"offset":7623}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Critical CSS","position":{"start":{"line":60,"column":44,"offset":7624},"end":{"line":60,"column":56,"offset":7636}}}],"position":{"start":{"line":60,"column":43,"offset":7623},"end":{"line":60,"column":57,"offset":7637}}},{"type":"text","value":". Finding it for yourself would be a headache. It will be different for different devices, meaning you would have to check manually for all possible devices. Lucky for us we have (if you’re using ","position":{"start":{"line":60,"column":57,"offset":7637},"end":{"line":60,"column":253,"offset":7833}}},{"type":"element","tagName":"a","properties":{"href":"https://nodejs.org/en/"},"children":[{"type":"text","value":"Node.js","position":{"start":{"line":60,"column":254,"offset":7834},"end":{"line":60,"column":261,"offset":7841}}}],"position":{"start":{"line":60,"column":253,"offset":7833},"end":{"line":60,"column":286,"offset":7866}}},{"type":"text","value":") ","position":{"start":{"line":60,"column":286,"offset":7866},"end":{"line":60,"column":288,"offset":7868}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/addyosmani/critical"},"children":[{"type":"text","value":"Critical","position":{"start":{"line":60,"column":289,"offset":7869},"end":{"line":60,"column":297,"offset":7877}}}],"position":{"start":{"line":60,"column":288,"offset":7868},"end":{"line":60,"column":338,"offset":7918}}},{"type":"text","value":". This helpful package does the CSS inlining for us and all we do is add some code to a Javascript file. Here’s a code snippet from the Github page.","position":{"start":{"line":60,"column":338,"offset":7918},"end":{"line":60,"column":486,"offset":8066}}}],"position":{"start":{"line":60,"column":1,"offset":7581},"end":{"line":60,"column":486,"offset":8066}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">//Normal JavaScript Code\nconst arr = [1, 2, 3, 4, 5];\nfor(let i = 0; i &lt; arr.length; i++){\n  console.log(arr[i]);\n}\n\n//Minified Code - A 22.83% Compression saving 0.02kB\nconst arr=[1,2,3,4,5];for(let a=0;a&lt;arr.length;a++)console.log(arr[a]);</code></pre>\n      </div>","position":{"start":{"line":62,"column":1,"offset":8068},"end":{"line":73,"column":4,"offset":8329}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Using the generate function, we supply it with a JavaScript object with some values defined. base is where we’re going to save our src and dest (our project folder usually). What’s great is now we just supply an array of dimensions and the code will compute the critical CSS for each and inline that code into our head tag.","position":{"start":{"line":75,"column":1,"offset":8331},"end":{"line":75,"column":324,"offset":8654}}}],"position":{"start":{"line":75,"column":1,"offset":8331},"end":{"line":75,"column":324,"offset":8654}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Async and Defer","position":{"start":{"line":77,"column":5,"offset":8660},"end":{"line":77,"column":20,"offset":8675}}}],"position":{"start":{"line":77,"column":1,"offset":8656},"end":{"line":77,"column":20,"offset":8675}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Again, we come back to this idea of render-blocking and how best we should implement this for our website. When you have a plain script tag in your HTML it blocks the HTML from loading whilst the JavaScript loads ","position":{"start":{"line":79,"column":1,"offset":8677},"end":{"line":79,"column":214,"offset":8890}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"and","position":{"start":{"line":79,"column":216,"offset":8892},"end":{"line":79,"column":219,"offset":8895}}}],"position":{"start":{"line":79,"column":214,"offset":8890},"end":{"line":79,"column":221,"offset":8897}}},{"type":"text","value":" runs. Async and defer are simple attributes that you can add to your script tags that change the way your JavaScript will be loaded.","position":{"start":{"line":79,"column":221,"offset":8897},"end":{"line":79,"column":354,"offset":9030}}}],"position":{"start":{"line":79,"column":1,"offset":8677},"end":{"line":79,"column":354,"offset":9030}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Defer essentially “defers” execution of the script until after the HTML has been parsed. A major advantage of this is that you no longer need some $(document).ready() jQuery-style function to make sure the body was loaded before you could manipulate it, which could cut out some of the dependencies on libraries like jQuery which helps reduce load-time.","position":{"start":{"line":81,"column":1,"offset":9032},"end":{"line":81,"column":354,"offset":9385}}}],"position":{"start":{"line":81,"column":1,"offset":9032},"end":{"line":81,"column":354,"offset":9385}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Async is, unsurprisingly, the asynchronous loading of JavaScript files. What does this mean? Your HTML will continue to be parsed whilst the file is loaded and then whenever its ready the file will be executed. This helps improving user experience whilst viewing your website. Imagine for example you had a JavaScript file for doing some cool graphics. You want the words around this graphic to be parsed until your graphic is ready to be executed. As soon as it is ready, it is executed and we get a more seamless loading of our webpage without missing pieces.","position":{"start":{"line":83,"column":1,"offset":9387},"end":{"line":83,"column":562,"offset":9948}}}],"position":{"start":{"line":83,"column":1,"offset":9387},"end":{"line":83,"column":562,"offset":9948}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Check this ","position":{"start":{"line":85,"column":1,"offset":9950},"end":{"line":85,"column":12,"offset":9961}}},{"type":"element","tagName":"a","properties":{"href":"http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html"},"children":[{"type":"text","value":"website","position":{"start":{"line":85,"column":13,"offset":9962},"end":{"line":85,"column":20,"offset":9969}}}],"position":{"start":{"line":85,"column":12,"offset":9961},"end":{"line":85,"column":94,"offset":10043}}},{"type":"text","value":" for a really intuitive, graphical representation of this.","position":{"start":{"line":85,"column":94,"offset":10043},"end":{"line":85,"column":152,"offset":10101}}}],"position":{"start":{"line":85,"column":1,"offset":9950},"end":{"line":85,"column":152,"offset":10101}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Image Optimisation and Media Queries","position":{"start":{"line":87,"column":5,"offset":10107},"end":{"line":87,"column":41,"offset":10143}}}],"position":{"start":{"line":87,"column":1,"offset":10103},"end":{"line":87,"column":41,"offset":10143}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The cornerstone of all website performance optimisation is the simple rule that, the less data you send to the client, the quicker and better your website will perform. With the plethora of devices on the market capable of viewing websites, there is a growing trend to optimise your website based on the device it is being viewed on.","position":{"start":{"line":89,"column":1,"offset":10145},"end":{"line":89,"column":334,"offset":10478}}}],"position":{"start":{"line":89,"column":1,"offset":10145},"end":{"line":89,"column":334,"offset":10478}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Media queries are a fairly new tool added to CSS3. With more and more content being consumed using mobile-devices there has been a shift in design thinking towards mobile first. Using media queries you can then add stylings for larger screen sizes.","position":{"start":{"line":91,"column":1,"offset":10480},"end":{"line":91,"column":249,"offset":10728}}}],"position":{"start":{"line":91,"column":1,"offset":10480},"end":{"line":91,"column":249,"offset":10728}}},{"type":"text","value":"\n"},{"type":"raw","value":"<iframe src=\"https://medium.com/media/2b53ce5004bbba6e65050bf48c9a864b\" frameborder=0></iframe>","position":{"start":{"line":93,"column":1,"offset":10730},"end":{"line":93,"column":96,"offset":10825}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The @media tag starts a new CSS rule, whilst the only keyword stops older browsers that don’t support media queries from using it. The screen keyword applies the rules to screens rather than prints. After that you add the media-feature which supports the and , or and not keywords so you can get as specific as you want. When you’re loading your image you can write code like:","position":{"start":{"line":95,"column":1,"offset":10827},"end":{"line":95,"column":377,"offset":11203}}}],"position":{"start":{"line":95,"column":1,"offset":10827},"end":{"line":95,"column":377,"offset":11203}}},{"type":"text","value":"\n"},{"type":"raw","value":"<iframe src=\"https://medium.com/media/ecbcd475236339fbe45efdd97bfcdeed\" frameborder=0></iframe>","position":{"start":{"line":97,"column":1,"offset":11205},"end":{"line":97,"column":96,"offset":11300}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This isn’t necessarily the best or optimal approach for image optimisation. Luckily we have other options. ","position":{"start":{"line":99,"column":1,"offset":11302},"end":{"line":99,"column":108,"offset":11409}}},{"type":"element","tagName":"a","properties":{"href":"https://www.imgix.com/"},"children":[{"type":"text","value":"Imgix","position":{"start":{"line":99,"column":109,"offset":11410},"end":{"line":99,"column":114,"offset":11415}}}],"position":{"start":{"line":99,"column":108,"offset":11409},"end":{"line":99,"column":139,"offset":11440}}},{"type":"text","value":" and ","position":{"start":{"line":99,"column":139,"offset":11440},"end":{"line":99,"column":144,"offset":11445}}},{"type":"element","tagName":"a","properties":{"href":"https://cloudinary.com/"},"children":[{"type":"text","value":"Cloudinary","position":{"start":{"line":99,"column":145,"offset":11446},"end":{"line":99,"column":155,"offset":11456}}}],"position":{"start":{"line":99,"column":144,"offset":11445},"end":{"line":99,"column":181,"offset":11482}}},{"type":"text","value":" are two ways you can help optimise your site for the right device. Imgix is a Content Delivery Network (CDN) for images with a lot of cool features. A CDN simply takes your files and spreads them across the globe so that someone in a different country doesn’t have to wait for your files on your server to make it all the way to them. This ","position":{"start":{"line":99,"column":181,"offset":11482},"end":{"line":99,"column":522,"offset":11823}}},{"type":"element","tagName":"a","properties":{"href":"https://docs.imgix.com/tutorials/responsive-images-srcset-imgix"},"children":[{"type":"text","value":"tutorial","position":{"start":{"line":99,"column":523,"offset":11824},"end":{"line":99,"column":531,"offset":11832}}}],"position":{"start":{"line":99,"column":522,"offset":11823},"end":{"line":99,"column":597,"offset":11898}}},{"type":"text","value":" goes through how to use Imgix for different device pixel ratios. Cloudinary is a similar service, and their ","position":{"start":{"line":99,"column":597,"offset":11898},"end":{"line":99,"column":706,"offset":12007}}},{"type":"element","tagName":"a","properties":{"href":"https://cloudinary.com/documentation/image_optimization"},"children":[{"type":"text","value":"tutorial ","position":{"start":{"line":99,"column":707,"offset":12008},"end":{"line":99,"column":716,"offset":12017}}}],"position":{"start":{"line":99,"column":706,"offset":12007},"end":{"line":99,"column":774,"offset":12075}}},{"type":"text","value":"will take you through the importance of optimisation and how to achieve it will their incredible services. Below is a small example showing how easy it is to use Cloudinary straight in the HTML markup.","position":{"start":{"line":99,"column":774,"offset":12075},"end":{"line":99,"column":975,"offset":12276}}}],"position":{"start":{"line":99,"column":1,"offset":11302},"end":{"line":99,"column":975,"offset":12276}}},{"type":"text","value":"\n"},{"type":"raw","value":"<iframe src=\"https://medium.com/media/98868354e5bf607d317496f64ddec2a2\" frameborder=0></iframe>","position":{"start":{"line":101,"column":1,"offset":12278},"end":{"line":101,"column":96,"offset":12373}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As a last point on image optimisation, the format you use can have a large impact on file size. Some files contain lots of metadata which you don’t want to be serving to your client — ","position":{"start":{"line":103,"column":1,"offset":12375},"end":{"line":103,"column":185,"offset":12559}}},{"type":"element","tagName":"a","properties":{"href":"https://www.sno.phy.queensu.ca/~phil/exiftool/"},"children":[{"type":"text","value":"ExifTool","position":{"start":{"line":103,"column":186,"offset":12560},"end":{"line":103,"column":194,"offset":12568}}}],"position":{"start":{"line":103,"column":185,"offset":12559},"end":{"line":103,"column":243,"offset":12617}}},{"type":"text","value":" is a commonly used command-line application that can help you trim down those files sizes. On top of this, Scalable Vector Graphics (SVG) are a web-standard developed by W3C that offers XML-based vector graphics. This means they have infinite resolution unlike PNG or JPG files. It also makes them highly versatile, easily editable and can even be animated. At the end of the day SVGs are just code and so the file sizes tend to be small. For more reasons to use them, check out this ","position":{"start":{"line":103,"column":243,"offset":12617},"end":{"line":103,"column":728,"offset":13102}}},{"type":"element","tagName":"a","properties":{"href":"https://watb.co.uk/5-reasons-you-should-be-using-svgs-over-pngs/"},"children":[{"type":"text","value":"article","position":{"start":{"line":103,"column":729,"offset":13103},"end":{"line":103,"column":736,"offset":13110}}}],"position":{"start":{"line":103,"column":728,"offset":13102},"end":{"line":103,"column":803,"offset":13177}}},{"type":"text","value":".","position":{"start":{"line":103,"column":803,"offset":13177},"end":{"line":103,"column":804,"offset":13178}}}],"position":{"start":{"line":103,"column":1,"offset":12375},"end":{"line":103,"column":804,"offset":13178}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":105,"column":5,"offset":13184},"end":{"line":105,"column":15,"offset":13194}}}],"position":{"start":{"line":105,"column":1,"offset":13180},"end":{"line":105,"column":15,"offset":13194}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We’ve only scratched the surface of what’s possible for website optimisation. There are many tools you can use to help you stream-line this process like ","position":{"start":{"line":107,"column":1,"offset":13196},"end":{"line":107,"column":154,"offset":13349}}},{"type":"element","tagName":"a","properties":{"href":"https://webpack.js.org/"},"children":[{"type":"text","value":"Webpack","position":{"start":{"line":107,"column":155,"offset":13350},"end":{"line":107,"column":162,"offset":13357}}}],"position":{"start":{"line":107,"column":154,"offset":13349},"end":{"line":107,"column":188,"offset":13383}}},{"type":"text","value":" for bundling or static-site generators like ","position":{"start":{"line":107,"column":188,"offset":13383},"end":{"line":107,"column":233,"offset":13428}}},{"type":"element","tagName":"a","properties":{"href":"https://www.gatsbyjs.org/"},"children":[{"type":"text","value":"Gatsby","position":{"start":{"line":107,"column":234,"offset":13429},"end":{"line":107,"column":240,"offset":13435}}}],"position":{"start":{"line":107,"column":233,"offset":13428},"end":{"line":107,"column":268,"offset":13463}}},{"type":"text","value":". ","position":{"start":{"line":107,"column":268,"offset":13463},"end":{"line":107,"column":270,"offset":13465}}},{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking"},"children":[{"type":"text","value":"Tree shaking","position":{"start":{"line":107,"column":271,"offset":13466},"end":{"line":107,"column":283,"offset":13478}}}],"position":{"start":{"line":107,"column":270,"offset":13465},"end":{"line":107,"column":348,"offset":13543}}},{"type":"text","value":" is another commonly used technique to remove excess, unused modules lying around your website.","position":{"start":{"line":107,"column":348,"offset":13543},"end":{"line":107,"column":443,"offset":13638}}}],"position":{"start":{"line":107,"column":1,"offset":13196},"end":{"line":107,"column":443,"offset":13638}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Hopefully this article has touched on some useful techniques you can use on your next site to help improve its performance. Happy coding!","position":{"start":{"line":109,"column":1,"offset":13640},"end":{"line":109,"column":138,"offset":13777}}}],"position":{"start":{"line":109,"column":1,"offset":13640},"end":{"line":109,"column":138,"offset":13777}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A big thank you to ","position":{"start":{"line":111,"column":1,"offset":13779},"end":{"line":111,"column":20,"offset":13798}}},{"type":"element","tagName":"a","properties":{"href":"undefined"},"children":[{"type":"text","value":"Christian Silver","position":{"start":{"line":111,"column":21,"offset":13799},"end":{"line":111,"column":37,"offset":13815}}}],"position":{"start":{"line":111,"column":20,"offset":13798},"end":{"line":111,"column":49,"offset":13827}}},{"type":"text","value":" and ","position":{"start":{"line":111,"column":49,"offset":13827},"end":{"line":111,"column":54,"offset":13832}}},{"type":"element","tagName":"a","properties":{"href":"undefined"},"children":[{"type":"text","value":"Charlie Crisp","position":{"start":{"line":111,"column":55,"offset":13833},"end":{"line":111,"column":68,"offset":13846}}}],"position":{"start":{"line":111,"column":54,"offset":13832},"end":{"line":111,"column":80,"offset":13858}}},{"type":"text","value":" for editing this post and providing extremely useful advice and extra content to make it even better.","position":{"start":{"line":111,"column":80,"offset":13858},"end":{"line":111,"column":182,"offset":13960}}}],"position":{"start":{"line":111,"column":1,"offset":13779},"end":{"line":111,"column":182,"offset":13960}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":112,"column":1,"offset":13961}}}},{"id":"transformer-remark-markdown-html-477234db84b6a5ba92fb6d317b61cc64-gatsby-remark-imagesgatsby-remark-prismjs-","value":"<p><img src=\"https://res.cloudinary.com/patricoferris/image/upload/v1532781201/pf2018/blogposts/28-07-2018/website_optimisation_2.png\" alt=\"Optimising your Website\">\nInspired by a <a href=\"https://syntax.fm/\">Syntax</a> podcast, I got really interested in website optimisation. It can often be an overlooked aspect in web development with more focus on design and functionality, I realised my number one priority whenever I visited a website is load speed. My attention is a website’s number one goal, lose it and they lose all potential ad revenue or possibility to give me whatever information I was looking for. <a href=\"https://developers.google.com/web/fundamentals/performance/get-started/\">Many seem to agree. 53% of users abandon websites that take more than 3 seconds to load</a>. No amount of fancy graphics or parallax scrolling that appears five seconds after someone’s clicked will hide the slow loading times.</p>\n<p>The aim of this article is to give a broad overview of the concepts and ideas behind optimising your website, experienced developers are likely already using things like Webpack (a module bundler) among other tools to speed-up their sites.</p>\n<p>For testing load-times I will be using the <a href=\"https://chrome.google.com/webstore/detail/page-load-time/fploionmjgeclbkemipmkogoaohcdbig?hl=en\">Page Load Time </a>Chrome extension. There are a few ways to measure website loading time including: <a href=\"https://developers.google.com/web/tools/chrome-user-experience-report/\">first paint, first meaning paint, DOMContentLoaded</a> etc. For a more detailed look into what this timer measures, check out the Github repository below.\n<a href=\"https://github.com/alex-vv/chrome-load-timer\"><strong>alex-vv/chrome-load-timer</strong>\n<em>chrome-load-timer - Google Chrome extension to measure page load time and display it in the toolbar</em>github.com</a></p>\n<h3><strong>Use Minified Stylesheets and Scripts</strong></h3>\n<p>You would be amazed at how much performance can be gained by this simple trick. What is a minified document? When we write code it is never our job to make it optimised for the computer, instead our golden rule is to make it readable to humans. This improves readability, cuts down on debug time and makes it easier to maintain. However, to achieve this we often add extra spacing which costs us precious space. Minifying the code is trimming all this fat from what we’ve written to have code that produces the same result but is far more difficult to read and maintain. This is okay though, because a computer has no problem deciphering it. Take the following code for example.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Notice how, wherever possible, our line-breaks and spaces are gone. On top of that, the code in the for-loop is only one line so there’s no need for the curly braces which extends our code over three lines when it can be done in one. Does this make a difference?</p>\n<p>I tried it out on simple website that just had one script tag being loaded in for the graphics library <a href=\"https://p5js.org/\">p5.js</a>. Using the non-minified CDN link I got a load time of 0.25 seconds. Using the minified version I got a markedly improved load time of 0.08 seconds. Depending on what your website project is, there are a few ways to automatically minify code. If it is a <a href=\"https://guide.meteor.com/build-tool.html\">Meteor app</a> it will be done automatically, using <a href=\"https://webpack.js.org/guides/production/\">Webpack </a>will also allow you to do this. Otherwise there are some online tools like <a href=\"https://jscompress.com/\">JSCompress </a>or <a href=\"https://cssminifier.com/\">CSSMinifier </a>that you can upload your code to.</p>\n<h3>Design Versus Performance</h3>\n<p>Whilst design is undoubtedly a major aspect to a website’s overall success, both developers and designers must work together to compromise and make a mutually beneficial trade-off between design and performance. The classic example is fonts. Take the two screenshots of a simple website below.</p>\n<p><img src=\"https://res.cloudinary.com/patricoferris/image/upload/v1532780050/pf2018/blogposts/28-07-2018/Helvetica.png\" alt=\"The example website using Helvetica Font (commonly found on many computers) — check [this](https://css-tricks.com/snippets/css/system-font-stack/) link for common system fonts\">\n<em>The example website using Helvetica Font (commonly found on many computers) — check <a href=\"https://css-tricks.com/snippets/css/system-font-stack/\">this</a> link for common system fonts</em></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/5760/1*8ciuJNBdqMhlLSaOpNUXow.png\" alt=\"The example website using Roboto Font (designed by Google and linked from [Google Fonts](https://fonts.google.com/?selection.family=Roboto))\"><em>The example website using Roboto Font (designed by Google and linked from <a href=\"https://fonts.google.com/?selection.family=Roboto\">Google Fonts</a>)</em></p>\n<p>Before critiquing my questionable design skills take a moment to appreciate that these two fonts are very similar — yet the loading time for a website for the Roboto font was 0.22 seconds as compared with 0.17 for Helvetica. Whilst not that significant, using lots of custom fonts will slow down your website, although using Google Fonts’ API will help keep your website optimised. As an over-the-top example, linking 20 different fonts from the Google API increased the load time to 0.87 seconds.</p>\n<h3>Inlining your JavaScript and CSS</h3>\n<p>For each individual document or component of your website, when the parser reaches the script tag or link tag it sends and HTTP request for that document and if not stated differently, these will be blocking actions. What this means is your machine is parsing the HTML document getting the words to display in your browser but if it hits the script tag with the attribute src='js/main.js' for example, it will block the parsing and load in that file. This is where as a developer you need to be clever about where in the document you place things.</p>\n<p>Whilst it may not ultimately affect the loading time of your website, it can affect the order in which things are loaded. Again we’ll be using the un-minified p5.js library to simulate a large JavaScript file and load it in different places to see how it affects our user experience.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2780/1*h_3GogfkaahcXCO9a43CPA.gif\" alt=\"Refreshing website with the script tag inserted at the bottom of the body tag\"><em>Refreshing website with the script tag inserted at the bottom of the body tag</em></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2780/1*xLOq5r4erQAwb4Au_hB-Ww.gif\" alt=\"Refreshing website with the script tag inserted at the top of the body tag\"><em>Refreshing website with the script tag inserted at the top of the body tag</em></p>\n<p>Whilst the load times were similar for both cases — the user experience is far better by placing the script at the body tag allowing the HTML to be parsed before the JavaScript giving the user the website content immediately!</p>\n<p>In the same vein CSS can also be render-blocking especially because more often than not it is linked in the head tag of your HTML document before the body. But if we want our user to see the content in the quickest time we don’t want to be loading CSS for the footer of our document which the user won’t see until they’ve scrolled to the bottom. In fact, we don’t want to load any CSS in that the user can’t immediately see when the page first loads on their device.</p>\n<p>The CSS that you need is often called the <em>Critical CSS</em>. Finding it for yourself would be a headache. It will be different for different devices, meaning you would have to check manually for all possible devices. Lucky for us we have (if you’re using <a href=\"https://nodejs.org/en/\">Node.js</a>) <a href=\"https://github.com/addyosmani/critical\">Critical</a>. This helpful package does the CSS inlining for us and all we do is add some code to a Javascript file. Here’s a code snippet from the Github page.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">//Normal JavaScript Code\nconst arr = [1, 2, 3, 4, 5];\nfor(let i = 0; i &lt; arr.length; i++){\n  console.log(arr[i]);\n}\n\n//Minified Code - A 22.83% Compression saving 0.02kB\nconst arr=[1,2,3,4,5];for(let a=0;a&lt;arr.length;a++)console.log(arr[a]);</code></pre>\n      </div>\n<p>Using the generate function, we supply it with a JavaScript object with some values defined. base is where we’re going to save our src and dest (our project folder usually). What’s great is now we just supply an array of dimensions and the code will compute the critical CSS for each and inline that code into our head tag.</p>\n<h3>Async and Defer</h3>\n<p>Again, we come back to this idea of render-blocking and how best we should implement this for our website. When you have a plain script tag in your HTML it blocks the HTML from loading whilst the JavaScript loads <strong>and</strong> runs. Async and defer are simple attributes that you can add to your script tags that change the way your JavaScript will be loaded.</p>\n<p>Defer essentially “defers” execution of the script until after the HTML has been parsed. A major advantage of this is that you no longer need some $(document).ready() jQuery-style function to make sure the body was loaded before you could manipulate it, which could cut out some of the dependencies on libraries like jQuery which helps reduce load-time.</p>\n<p>Async is, unsurprisingly, the asynchronous loading of JavaScript files. What does this mean? Your HTML will continue to be parsed whilst the file is loaded and then whenever its ready the file will be executed. This helps improving user experience whilst viewing your website. Imagine for example you had a JavaScript file for doing some cool graphics. You want the words around this graphic to be parsed until your graphic is ready to be executed. As soon as it is ready, it is executed and we get a more seamless loading of our webpage without missing pieces.</p>\n<p>Check this <a href=\"http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html\">website</a> for a really intuitive, graphical representation of this.</p>\n<h3>Image Optimisation and Media Queries</h3>\n<p>The cornerstone of all website performance optimisation is the simple rule that, the less data you send to the client, the quicker and better your website will perform. With the plethora of devices on the market capable of viewing websites, there is a growing trend to optimise your website based on the device it is being viewed on.</p>\n<p>Media queries are a fairly new tool added to CSS3. With more and more content being consumed using mobile-devices there has been a shift in design thinking towards mobile first. Using media queries you can then add stylings for larger screen sizes.</p>\n<iframe src=\"https://medium.com/media/2b53ce5004bbba6e65050bf48c9a864b\" frameborder=0></iframe>\n<p>The @media tag starts a new CSS rule, whilst the only keyword stops older browsers that don’t support media queries from using it. The screen keyword applies the rules to screens rather than prints. After that you add the media-feature which supports the and , or and not keywords so you can get as specific as you want. When you’re loading your image you can write code like:</p>\n<iframe src=\"https://medium.com/media/ecbcd475236339fbe45efdd97bfcdeed\" frameborder=0></iframe>\n<p>This isn’t necessarily the best or optimal approach for image optimisation. Luckily we have other options. <a href=\"https://www.imgix.com/\">Imgix</a> and <a href=\"https://cloudinary.com/\">Cloudinary</a> are two ways you can help optimise your site for the right device. Imgix is a Content Delivery Network (CDN) for images with a lot of cool features. A CDN simply takes your files and spreads them across the globe so that someone in a different country doesn’t have to wait for your files on your server to make it all the way to them. This <a href=\"https://docs.imgix.com/tutorials/responsive-images-srcset-imgix\">tutorial</a> goes through how to use Imgix for different device pixel ratios. Cloudinary is a similar service, and their <a href=\"https://cloudinary.com/documentation/image_optimization\">tutorial </a>will take you through the importance of optimisation and how to achieve it will their incredible services. Below is a small example showing how easy it is to use Cloudinary straight in the HTML markup.</p>\n<iframe src=\"https://medium.com/media/98868354e5bf607d317496f64ddec2a2\" frameborder=0></iframe>\n<p>As a last point on image optimisation, the format you use can have a large impact on file size. Some files contain lots of metadata which you don’t want to be serving to your client — <a href=\"https://www.sno.phy.queensu.ca/~phil/exiftool/\">ExifTool</a> is a commonly used command-line application that can help you trim down those files sizes. On top of this, Scalable Vector Graphics (SVG) are a web-standard developed by W3C that offers XML-based vector graphics. This means they have infinite resolution unlike PNG or JPG files. It also makes them highly versatile, easily editable and can even be animated. At the end of the day SVGs are just code and so the file sizes tend to be small. For more reasons to use them, check out this <a href=\"https://watb.co.uk/5-reasons-you-should-be-using-svgs-over-pngs/\">article</a>.</p>\n<h3>Conclusion</h3>\n<p>We’ve only scratched the surface of what’s possible for website optimisation. There are many tools you can use to help you stream-line this process like <a href=\"https://webpack.js.org/\">Webpack</a> for bundling or static-site generators like <a href=\"https://www.gatsbyjs.org/\">Gatsby</a>. <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking\">Tree shaking</a> is another commonly used technique to remove excess, unused modules lying around your website.</p>\n<p>Hopefully this article has touched on some useful techniques you can use on your next site to help improve its performance. Happy coding!</p>\n<p>A big thank you to <a href=\"undefined\">Christian Silver</a> and <a href=\"undefined\">Charlie Crisp</a> for editing this post and providing extremely useful advice and extra content to make it even better.</p>"},{"id":"transformer-remark-markdown-ast-0d9ad13af90e293f82d070271bc8c166-gatsby-remark-imagesgatsby-remark-prismjs-","value":{"type":"root","children":[{"type":"yaml","value":"path: '/optimise-your-website'\ntitle: 'Optimising your Website'\nsubtitle: 'Tips and tricks to keep your website lean and fast'\ndate: '2018-07-28'","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":6,"column":4,"offset":153},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://res.cloudinary.com/patricoferris/image/upload/v1532781201/pf2018/blogposts/28-07-2018/website_optimisation_2.png","alt":"Optimising your Website","position":{"start":{"line":7,"column":1,"offset":154},"end":{"line":7,"column":149,"offset":302},"indent":[]}},{"type":"text","value":"\nInspired by a ","position":{"start":{"line":7,"column":149,"offset":302},"end":{"line":8,"column":15,"offset":317},"indent":[1]}},{"type":"link","title":null,"url":"https://syntax.fm/","children":[{"type":"text","value":"Syntax","position":{"start":{"line":8,"column":16,"offset":318},"end":{"line":8,"column":22,"offset":324},"indent":[]}}],"position":{"start":{"line":8,"column":15,"offset":317},"end":{"line":8,"column":43,"offset":345},"indent":[]}},{"type":"text","value":" podcast, I got really interested in website optimisation. It can often be an overlooked aspect in web development with more focus on design and functionality, I realised my number one priority whenever I visited a website is load speed. My attention is a website’s number one goal, lose it and they lose all potential ad revenue or possibility to give me whatever information I was looking for. ","position":{"start":{"line":8,"column":43,"offset":345},"end":{"line":8,"column":439,"offset":741},"indent":[]}},{"type":"link","title":null,"url":"https://developers.google.com/web/fundamentals/performance/get-started/","children":[{"type":"text","value":"Many seem to agree. 53% of users abandon websites that take more than 3 seconds to load","position":{"start":{"line":8,"column":440,"offset":742},"end":{"line":8,"column":527,"offset":829},"indent":[]}}],"position":{"start":{"line":8,"column":439,"offset":741},"end":{"line":8,"column":601,"offset":903},"indent":[]}},{"type":"text","value":". No amount of fancy graphics or parallax scrolling that appears five seconds after someone’s clicked will hide the slow loading times.","position":{"start":{"line":8,"column":601,"offset":903},"end":{"line":8,"column":736,"offset":1038},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":154},"end":{"line":8,"column":736,"offset":1038},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"The aim of this article is to give a broad overview of the concepts and ideas behind optimising your website, experienced developers are likely already using things like Webpack (a module bundler) among other tools to speed-up their sites.","position":{"start":{"line":10,"column":1,"offset":1040},"end":{"line":10,"column":240,"offset":1279},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":1040},"end":{"line":10,"column":240,"offset":1279},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For testing load-times I will be using the ","position":{"start":{"line":12,"column":1,"offset":1281},"end":{"line":12,"column":44,"offset":1324},"indent":[]}},{"type":"link","title":null,"url":"https://chrome.google.com/webstore/detail/page-load-time/fploionmjgeclbkemipmkogoaohcdbig?hl=en","children":[{"type":"text","value":"Page Load Time ","position":{"start":{"line":12,"column":45,"offset":1325},"end":{"line":12,"column":60,"offset":1340},"indent":[]}}],"position":{"start":{"line":12,"column":44,"offset":1324},"end":{"line":12,"column":158,"offset":1438},"indent":[]}},{"type":"text","value":"Chrome extension. There are a few ways to measure website loading time including: ","position":{"start":{"line":12,"column":158,"offset":1438},"end":{"line":12,"column":240,"offset":1520},"indent":[]}},{"type":"link","title":null,"url":"https://developers.google.com/web/tools/chrome-user-experience-report/","children":[{"type":"text","value":"first paint, first meaning paint, DOMContentLoaded","position":{"start":{"line":12,"column":241,"offset":1521},"end":{"line":12,"column":291,"offset":1571},"indent":[]}}],"position":{"start":{"line":12,"column":240,"offset":1520},"end":{"line":12,"column":364,"offset":1644},"indent":[]}},{"type":"text","value":" etc. For a more detailed look into what this timer measures, check out the Github repository below.\n","position":{"start":{"line":12,"column":364,"offset":1644},"end":{"line":13,"column":1,"offset":1745},"indent":[1]}},{"type":"link","title":null,"url":"https://github.com/alex-vv/chrome-load-timer","children":[{"type":"strong","children":[{"type":"text","value":"alex-vv/chrome-load-timer","position":{"start":{"line":13,"column":4,"offset":1748},"end":{"line":13,"column":29,"offset":1773},"indent":[]}}],"position":{"start":{"line":13,"column":2,"offset":1746},"end":{"line":13,"column":31,"offset":1775},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":13,"column":31,"offset":1775},"end":{"line":14,"column":1,"offset":1776},"indent":[1]}},{"type":"emphasis","children":[{"type":"text","value":"chrome-load-timer - Google Chrome extension to measure page load time and display it in the toolbar","position":{"start":{"line":14,"column":2,"offset":1777},"end":{"line":14,"column":101,"offset":1876},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":1776},"end":{"line":14,"column":102,"offset":1877},"indent":[]}},{"type":"text","value":"github.com","position":{"start":{"line":14,"column":102,"offset":1877},"end":{"line":14,"column":112,"offset":1887},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":1745},"end":{"line":14,"column":159,"offset":1934},"indent":[1]}}],"position":{"start":{"line":12,"column":1,"offset":1281},"end":{"line":14,"column":159,"offset":1934},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"strong","children":[{"type":"text","value":"Use Minified Stylesheets and Scripts","position":{"start":{"line":16,"column":7,"offset":1942},"end":{"line":16,"column":43,"offset":1978},"indent":[]}}],"position":{"start":{"line":16,"column":5,"offset":1940},"end":{"line":16,"column":45,"offset":1980},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":1936},"end":{"line":16,"column":45,"offset":1980},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You would be amazed at how much performance can be gained by this simple trick. What is a minified document? When we write code it is never our job to make it optimised for the computer, instead our golden rule is to make it readable to humans. This improves readability, cuts down on debug time and makes it easier to maintain. However, to achieve this we often add extra spacing which costs us precious space. Minifying the code is trimming all this fat from what we’ve written to have code that produces the same result but is far more difficult to read and maintain. This is okay though, because a computer has no problem deciphering it. Take the following code for example.","position":{"start":{"line":18,"column":1,"offset":1982},"end":{"line":18,"column":679,"offset":2660},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1982},"end":{"line":18,"column":679,"offset":2660},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","position":{"start":{"line":20,"column":1,"offset":2662},"end":{"line":29,"column":4,"offset":2921},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Notice how, wherever possible, our line-breaks and spaces are gone. On top of that, the code in the for-loop is only one line so there’s no need for the curly braces which extends our code over three lines when it can be done in one. Does this make a difference?","position":{"start":{"line":31,"column":1,"offset":2923},"end":{"line":31,"column":263,"offset":3185},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":2923},"end":{"line":31,"column":263,"offset":3185},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"I tried it out on simple website that just had one script tag being loaded in for the graphics library ","position":{"start":{"line":33,"column":1,"offset":3187},"end":{"line":33,"column":104,"offset":3290},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/","children":[{"type":"text","value":"p5.js","position":{"start":{"line":33,"column":105,"offset":3291},"end":{"line":33,"column":110,"offset":3296},"indent":[]}}],"position":{"start":{"line":33,"column":104,"offset":3290},"end":{"line":33,"column":130,"offset":3316},"indent":[]}},{"type":"text","value":". Using the non-minified CDN link I got a load time of 0.25 seconds. Using the minified version I got a markedly improved load time of 0.08 seconds. Depending on what your website project is, there are a few ways to automatically minify code. If it is a ","position":{"start":{"line":33,"column":130,"offset":3316},"end":{"line":33,"column":384,"offset":3570},"indent":[]}},{"type":"link","title":null,"url":"https://guide.meteor.com/build-tool.html","children":[{"type":"text","value":"Meteor app","position":{"start":{"line":33,"column":385,"offset":3571},"end":{"line":33,"column":395,"offset":3581},"indent":[]}}],"position":{"start":{"line":33,"column":384,"offset":3570},"end":{"line":33,"column":438,"offset":3624},"indent":[]}},{"type":"text","value":" it will be done automatically, using ","position":{"start":{"line":33,"column":438,"offset":3624},"end":{"line":33,"column":476,"offset":3662},"indent":[]}},{"type":"link","title":null,"url":"https://webpack.js.org/guides/production/","children":[{"type":"text","value":"Webpack ","position":{"start":{"line":33,"column":477,"offset":3663},"end":{"line":33,"column":485,"offset":3671},"indent":[]}}],"position":{"start":{"line":33,"column":476,"offset":3662},"end":{"line":33,"column":529,"offset":3715},"indent":[]}},{"type":"text","value":"will also allow you to do this. Otherwise there are some online tools like ","position":{"start":{"line":33,"column":529,"offset":3715},"end":{"line":33,"column":604,"offset":3790},"indent":[]}},{"type":"link","title":null,"url":"https://jscompress.com/","children":[{"type":"text","value":"JSCompress ","position":{"start":{"line":33,"column":605,"offset":3791},"end":{"line":33,"column":616,"offset":3802},"indent":[]}}],"position":{"start":{"line":33,"column":604,"offset":3790},"end":{"line":33,"column":642,"offset":3828},"indent":[]}},{"type":"text","value":"or ","position":{"start":{"line":33,"column":642,"offset":3828},"end":{"line":33,"column":645,"offset":3831},"indent":[]}},{"type":"link","title":null,"url":"https://cssminifier.com/","children":[{"type":"text","value":"CSSMinifier ","position":{"start":{"line":33,"column":646,"offset":3832},"end":{"line":33,"column":658,"offset":3844},"indent":[]}}],"position":{"start":{"line":33,"column":645,"offset":3831},"end":{"line":33,"column":685,"offset":3871},"indent":[]}},{"type":"text","value":"that you can upload your code to.","position":{"start":{"line":33,"column":685,"offset":3871},"end":{"line":33,"column":718,"offset":3904},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":3187},"end":{"line":33,"column":718,"offset":3904},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Design Versus Performance","position":{"start":{"line":35,"column":5,"offset":3910},"end":{"line":35,"column":30,"offset":3935},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":3906},"end":{"line":35,"column":30,"offset":3935},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Whilst design is undoubtedly a major aspect to a website’s overall success, both developers and designers must work together to compromise and make a mutually beneficial trade-off between design and performance. The classic example is fonts. Take the two screenshots of a simple website below.","position":{"start":{"line":37,"column":1,"offset":3937},"end":{"line":37,"column":294,"offset":4230},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":3937},"end":{"line":37,"column":294,"offset":4230},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://res.cloudinary.com/patricoferris/image/upload/v1532780050/pf2018/blogposts/28-07-2018/Helvetica.png","alt":"The example website using Helvetica Font (commonly found on many computers) — check [this](https://css-tricks.com/snippets/css/system-font-stack/) link for common system fonts","position":{"start":{"line":39,"column":1,"offset":4232},"end":{"line":39,"column":288,"offset":4519},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":39,"column":288,"offset":4519},"end":{"line":40,"column":1,"offset":4520},"indent":[1]}},{"type":"emphasis","children":[{"type":"text","value":"The example website using Helvetica Font (commonly found on many computers) — check ","position":{"start":{"line":40,"column":2,"offset":4521},"end":{"line":40,"column":86,"offset":4605},"indent":[]}},{"type":"link","title":null,"url":"https://css-tricks.com/snippets/css/system-font-stack/","children":[{"type":"text","value":"this","position":{"start":{"line":40,"column":87,"offset":4606},"end":{"line":40,"column":91,"offset":4610},"indent":[]}}],"position":{"start":{"line":40,"column":86,"offset":4605},"end":{"line":40,"column":148,"offset":4667},"indent":[]}},{"type":"text","value":" link for common system fonts","position":{"start":{"line":40,"column":148,"offset":4667},"end":{"line":40,"column":177,"offset":4696},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":4520},"end":{"line":40,"column":178,"offset":4697},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":4232},"end":{"line":40,"column":178,"offset":4697},"indent":[1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://cdn-images-1.medium.com/max/5760/1*8ciuJNBdqMhlLSaOpNUXow.png","alt":"The example website using Roboto Font (designed by Google and linked from [Google Fonts](https://fonts.google.com/?selection.family=Roboto))","position":{"start":{"line":42,"column":1,"offset":4699},"end":{"line":42,"column":215,"offset":4913},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"The example website using Roboto Font (designed by Google and linked from ","position":{"start":{"line":42,"column":216,"offset":4914},"end":{"line":42,"column":290,"offset":4988},"indent":[]}},{"type":"link","title":null,"url":"https://fonts.google.com/?selection.family=Roboto","children":[{"type":"text","value":"Google Fonts","position":{"start":{"line":42,"column":291,"offset":4989},"end":{"line":42,"column":303,"offset":5001},"indent":[]}}],"position":{"start":{"line":42,"column":290,"offset":4988},"end":{"line":42,"column":355,"offset":5053},"indent":[]}},{"type":"text","value":")","position":{"start":{"line":42,"column":355,"offset":5053},"end":{"line":42,"column":356,"offset":5054},"indent":[]}}],"position":{"start":{"line":42,"column":215,"offset":4913},"end":{"line":42,"column":357,"offset":5055},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":4699},"end":{"line":42,"column":357,"offset":5055},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Before critiquing my questionable design skills take a moment to appreciate that these two fonts are very similar — yet the loading time for a website for the Roboto font was 0.22 seconds as compared with 0.17 for Helvetica. Whilst not that significant, using lots of custom fonts will slow down your website, although using Google Fonts’ API will help keep your website optimised. As an over-the-top example, linking 20 different fonts from the Google API increased the load time to 0.87 seconds.","position":{"start":{"line":44,"column":1,"offset":5057},"end":{"line":44,"column":498,"offset":5554},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":5057},"end":{"line":44,"column":498,"offset":5554},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Inlining your JavaScript and CSS","position":{"start":{"line":46,"column":5,"offset":5560},"end":{"line":46,"column":37,"offset":5592},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":5556},"end":{"line":46,"column":37,"offset":5592},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For each individual document or component of your website, when the parser reaches the script tag or link tag it sends and HTTP request for that document and if not stated differently, these will be blocking actions. What this means is your machine is parsing the HTML document getting the words to display in your browser but if it hits the script tag with the attribute src='js/main.js' for example, it will block the parsing and load in that file. This is where as a developer you need to be clever about where in the document you place things.","position":{"start":{"line":48,"column":1,"offset":5594},"end":{"line":48,"column":548,"offset":6141},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":5594},"end":{"line":48,"column":548,"offset":6141},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Whilst it may not ultimately affect the loading time of your website, it can affect the order in which things are loaded. Again we’ll be using the un-minified p5.js library to simulate a large JavaScript file and load it in different places to see how it affects our user experience.","position":{"start":{"line":50,"column":1,"offset":6143},"end":{"line":50,"column":284,"offset":6426},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":6143},"end":{"line":50,"column":284,"offset":6426},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://cdn-images-1.medium.com/max/2780/1*h_3GogfkaahcXCO9a43CPA.gif","alt":"Refreshing website with the script tag inserted at the bottom of the body tag","position":{"start":{"line":52,"column":1,"offset":6428},"end":{"line":52,"column":152,"offset":6579},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Refreshing website with the script tag inserted at the bottom of the body tag","position":{"start":{"line":52,"column":153,"offset":6580},"end":{"line":52,"column":230,"offset":6657},"indent":[]}}],"position":{"start":{"line":52,"column":152,"offset":6579},"end":{"line":52,"column":231,"offset":6658},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":6428},"end":{"line":52,"column":231,"offset":6658},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://cdn-images-1.medium.com/max/2780/1*xLOq5r4erQAwb4Au_hB-Ww.gif","alt":"Refreshing website with the script tag inserted at the top of the body tag","position":{"start":{"line":54,"column":1,"offset":6660},"end":{"line":54,"column":149,"offset":6808},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Refreshing website with the script tag inserted at the top of the body tag","position":{"start":{"line":54,"column":150,"offset":6809},"end":{"line":54,"column":224,"offset":6883},"indent":[]}}],"position":{"start":{"line":54,"column":149,"offset":6808},"end":{"line":54,"column":225,"offset":6884},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":6660},"end":{"line":54,"column":225,"offset":6884},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Whilst the load times were similar for both cases — the user experience is far better by placing the script at the body tag allowing the HTML to be parsed before the JavaScript giving the user the website content immediately!","position":{"start":{"line":56,"column":1,"offset":6886},"end":{"line":56,"column":226,"offset":7111},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":6886},"end":{"line":56,"column":226,"offset":7111},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In the same vein CSS can also be render-blocking especially because more often than not it is linked in the head tag of your HTML document before the body. But if we want our user to see the content in the quickest time we don’t want to be loading CSS for the footer of our document which the user won’t see until they’ve scrolled to the bottom. In fact, we don’t want to load any CSS in that the user can’t immediately see when the page first loads on their device.","position":{"start":{"line":58,"column":1,"offset":7113},"end":{"line":58,"column":467,"offset":7579},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":7113},"end":{"line":58,"column":467,"offset":7579},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The CSS that you need is often called the ","position":{"start":{"line":60,"column":1,"offset":7581},"end":{"line":60,"column":43,"offset":7623},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Critical CSS","position":{"start":{"line":60,"column":44,"offset":7624},"end":{"line":60,"column":56,"offset":7636},"indent":[]}}],"position":{"start":{"line":60,"column":43,"offset":7623},"end":{"line":60,"column":57,"offset":7637},"indent":[]}},{"type":"text","value":". Finding it for yourself would be a headache. It will be different for different devices, meaning you would have to check manually for all possible devices. Lucky for us we have (if you’re using ","position":{"start":{"line":60,"column":57,"offset":7637},"end":{"line":60,"column":253,"offset":7833},"indent":[]}},{"type":"link","title":null,"url":"https://nodejs.org/en/","children":[{"type":"text","value":"Node.js","position":{"start":{"line":60,"column":254,"offset":7834},"end":{"line":60,"column":261,"offset":7841},"indent":[]}}],"position":{"start":{"line":60,"column":253,"offset":7833},"end":{"line":60,"column":286,"offset":7866},"indent":[]}},{"type":"text","value":") ","position":{"start":{"line":60,"column":286,"offset":7866},"end":{"line":60,"column":288,"offset":7868},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/addyosmani/critical","children":[{"type":"text","value":"Critical","position":{"start":{"line":60,"column":289,"offset":7869},"end":{"line":60,"column":297,"offset":7877},"indent":[]}}],"position":{"start":{"line":60,"column":288,"offset":7868},"end":{"line":60,"column":338,"offset":7918},"indent":[]}},{"type":"text","value":". This helpful package does the CSS inlining for us and all we do is add some code to a Javascript file. Here’s a code snippet from the Github page.","position":{"start":{"line":60,"column":338,"offset":7918},"end":{"line":60,"column":486,"offset":8066},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":7581},"end":{"line":60,"column":486,"offset":8066},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","position":{"start":{"line":62,"column":1,"offset":8068},"end":{"line":73,"column":4,"offset":8329},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Using the generate function, we supply it with a JavaScript object with some values defined. base is where we’re going to save our src and dest (our project folder usually). What’s great is now we just supply an array of dimensions and the code will compute the critical CSS for each and inline that code into our head tag.","position":{"start":{"line":75,"column":1,"offset":8331},"end":{"line":75,"column":324,"offset":8654},"indent":[]}}],"position":{"start":{"line":75,"column":1,"offset":8331},"end":{"line":75,"column":324,"offset":8654},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Async and Defer","position":{"start":{"line":77,"column":5,"offset":8660},"end":{"line":77,"column":20,"offset":8675},"indent":[]}}],"position":{"start":{"line":77,"column":1,"offset":8656},"end":{"line":77,"column":20,"offset":8675},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Again, we come back to this idea of render-blocking and how best we should implement this for our website. When you have a plain script tag in your HTML it blocks the HTML from loading whilst the JavaScript loads ","position":{"start":{"line":79,"column":1,"offset":8677},"end":{"line":79,"column":214,"offset":8890},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"and","position":{"start":{"line":79,"column":216,"offset":8892},"end":{"line":79,"column":219,"offset":8895},"indent":[]}}],"position":{"start":{"line":79,"column":214,"offset":8890},"end":{"line":79,"column":221,"offset":8897},"indent":[]}},{"type":"text","value":" runs. Async and defer are simple attributes that you can add to your script tags that change the way your JavaScript will be loaded.","position":{"start":{"line":79,"column":221,"offset":8897},"end":{"line":79,"column":354,"offset":9030},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":8677},"end":{"line":79,"column":354,"offset":9030},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Defer essentially “defers” execution of the script until after the HTML has been parsed. A major advantage of this is that you no longer need some $(document).ready() jQuery-style function to make sure the body was loaded before you could manipulate it, which could cut out some of the dependencies on libraries like jQuery which helps reduce load-time.","position":{"start":{"line":81,"column":1,"offset":9032},"end":{"line":81,"column":354,"offset":9385},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":9032},"end":{"line":81,"column":354,"offset":9385},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Async is, unsurprisingly, the asynchronous loading of JavaScript files. What does this mean? Your HTML will continue to be parsed whilst the file is loaded and then whenever its ready the file will be executed. This helps improving user experience whilst viewing your website. Imagine for example you had a JavaScript file for doing some cool graphics. You want the words around this graphic to be parsed until your graphic is ready to be executed. As soon as it is ready, it is executed and we get a more seamless loading of our webpage without missing pieces.","position":{"start":{"line":83,"column":1,"offset":9387},"end":{"line":83,"column":562,"offset":9948},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":9387},"end":{"line":83,"column":562,"offset":9948},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Check this ","position":{"start":{"line":85,"column":1,"offset":9950},"end":{"line":85,"column":12,"offset":9961},"indent":[]}},{"type":"link","title":null,"url":"http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html","children":[{"type":"text","value":"website","position":{"start":{"line":85,"column":13,"offset":9962},"end":{"line":85,"column":20,"offset":9969},"indent":[]}}],"position":{"start":{"line":85,"column":12,"offset":9961},"end":{"line":85,"column":94,"offset":10043},"indent":[]}},{"type":"text","value":" for a really intuitive, graphical representation of this.","position":{"start":{"line":85,"column":94,"offset":10043},"end":{"line":85,"column":152,"offset":10101},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":9950},"end":{"line":85,"column":152,"offset":10101},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Image Optimisation and Media Queries","position":{"start":{"line":87,"column":5,"offset":10107},"end":{"line":87,"column":41,"offset":10143},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":10103},"end":{"line":87,"column":41,"offset":10143},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The cornerstone of all website performance optimisation is the simple rule that, the less data you send to the client, the quicker and better your website will perform. With the plethora of devices on the market capable of viewing websites, there is a growing trend to optimise your website based on the device it is being viewed on.","position":{"start":{"line":89,"column":1,"offset":10145},"end":{"line":89,"column":334,"offset":10478},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":10145},"end":{"line":89,"column":334,"offset":10478},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Media queries are a fairly new tool added to CSS3. With more and more content being consumed using mobile-devices there has been a shift in design thinking towards mobile first. Using media queries you can then add stylings for larger screen sizes.","position":{"start":{"line":91,"column":1,"offset":10480},"end":{"line":91,"column":249,"offset":10728},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":10480},"end":{"line":91,"column":249,"offset":10728},"indent":[]}},{"type":"html","value":"<iframe src=\"https://medium.com/media/2b53ce5004bbba6e65050bf48c9a864b\" frameborder=0></iframe>","position":{"start":{"line":93,"column":1,"offset":10730},"end":{"line":93,"column":96,"offset":10825},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The @media tag starts a new CSS rule, whilst the only keyword stops older browsers that don’t support media queries from using it. The screen keyword applies the rules to screens rather than prints. After that you add the media-feature which supports the and , or and not keywords so you can get as specific as you want. When you’re loading your image you can write code like:","position":{"start":{"line":95,"column":1,"offset":10827},"end":{"line":95,"column":377,"offset":11203},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":10827},"end":{"line":95,"column":377,"offset":11203},"indent":[]}},{"type":"html","value":"<iframe src=\"https://medium.com/media/ecbcd475236339fbe45efdd97bfcdeed\" frameborder=0></iframe>","position":{"start":{"line":97,"column":1,"offset":11205},"end":{"line":97,"column":96,"offset":11300},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This isn’t necessarily the best or optimal approach for image optimisation. Luckily we have other options. ","position":{"start":{"line":99,"column":1,"offset":11302},"end":{"line":99,"column":108,"offset":11409},"indent":[]}},{"type":"link","title":null,"url":"https://www.imgix.com/","children":[{"type":"text","value":"Imgix","position":{"start":{"line":99,"column":109,"offset":11410},"end":{"line":99,"column":114,"offset":11415},"indent":[]}}],"position":{"start":{"line":99,"column":108,"offset":11409},"end":{"line":99,"column":139,"offset":11440},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":99,"column":139,"offset":11440},"end":{"line":99,"column":144,"offset":11445},"indent":[]}},{"type":"link","title":null,"url":"https://cloudinary.com/","children":[{"type":"text","value":"Cloudinary","position":{"start":{"line":99,"column":145,"offset":11446},"end":{"line":99,"column":155,"offset":11456},"indent":[]}}],"position":{"start":{"line":99,"column":144,"offset":11445},"end":{"line":99,"column":181,"offset":11482},"indent":[]}},{"type":"text","value":" are two ways you can help optimise your site for the right device. Imgix is a Content Delivery Network (CDN) for images with a lot of cool features. A CDN simply takes your files and spreads them across the globe so that someone in a different country doesn’t have to wait for your files on your server to make it all the way to them. This ","position":{"start":{"line":99,"column":181,"offset":11482},"end":{"line":99,"column":522,"offset":11823},"indent":[]}},{"type":"link","title":null,"url":"https://docs.imgix.com/tutorials/responsive-images-srcset-imgix","children":[{"type":"text","value":"tutorial","position":{"start":{"line":99,"column":523,"offset":11824},"end":{"line":99,"column":531,"offset":11832},"indent":[]}}],"position":{"start":{"line":99,"column":522,"offset":11823},"end":{"line":99,"column":597,"offset":11898},"indent":[]}},{"type":"text","value":" goes through how to use Imgix for different device pixel ratios. Cloudinary is a similar service, and their ","position":{"start":{"line":99,"column":597,"offset":11898},"end":{"line":99,"column":706,"offset":12007},"indent":[]}},{"type":"link","title":null,"url":"https://cloudinary.com/documentation/image_optimization","children":[{"type":"text","value":"tutorial ","position":{"start":{"line":99,"column":707,"offset":12008},"end":{"line":99,"column":716,"offset":12017},"indent":[]}}],"position":{"start":{"line":99,"column":706,"offset":12007},"end":{"line":99,"column":774,"offset":12075},"indent":[]}},{"type":"text","value":"will take you through the importance of optimisation and how to achieve it will their incredible services. Below is a small example showing how easy it is to use Cloudinary straight in the HTML markup.","position":{"start":{"line":99,"column":774,"offset":12075},"end":{"line":99,"column":975,"offset":12276},"indent":[]}}],"position":{"start":{"line":99,"column":1,"offset":11302},"end":{"line":99,"column":975,"offset":12276},"indent":[]}},{"type":"html","value":"<iframe src=\"https://medium.com/media/98868354e5bf607d317496f64ddec2a2\" frameborder=0></iframe>","position":{"start":{"line":101,"column":1,"offset":12278},"end":{"line":101,"column":96,"offset":12373},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As a last point on image optimisation, the format you use can have a large impact on file size. Some files contain lots of metadata which you don’t want to be serving to your client — ","position":{"start":{"line":103,"column":1,"offset":12375},"end":{"line":103,"column":185,"offset":12559},"indent":[]}},{"type":"link","title":null,"url":"https://www.sno.phy.queensu.ca/~phil/exiftool/","children":[{"type":"text","value":"ExifTool","position":{"start":{"line":103,"column":186,"offset":12560},"end":{"line":103,"column":194,"offset":12568},"indent":[]}}],"position":{"start":{"line":103,"column":185,"offset":12559},"end":{"line":103,"column":243,"offset":12617},"indent":[]}},{"type":"text","value":" is a commonly used command-line application that can help you trim down those files sizes. On top of this, Scalable Vector Graphics (SVG) are a web-standard developed by W3C that offers XML-based vector graphics. This means they have infinite resolution unlike PNG or JPG files. It also makes them highly versatile, easily editable and can even be animated. At the end of the day SVGs are just code and so the file sizes tend to be small. For more reasons to use them, check out this ","position":{"start":{"line":103,"column":243,"offset":12617},"end":{"line":103,"column":728,"offset":13102},"indent":[]}},{"type":"link","title":null,"url":"https://watb.co.uk/5-reasons-you-should-be-using-svgs-over-pngs/","children":[{"type":"text","value":"article","position":{"start":{"line":103,"column":729,"offset":13103},"end":{"line":103,"column":736,"offset":13110},"indent":[]}}],"position":{"start":{"line":103,"column":728,"offset":13102},"end":{"line":103,"column":803,"offset":13177},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":103,"column":803,"offset":13177},"end":{"line":103,"column":804,"offset":13178},"indent":[]}}],"position":{"start":{"line":103,"column":1,"offset":12375},"end":{"line":103,"column":804,"offset":13178},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":105,"column":5,"offset":13184},"end":{"line":105,"column":15,"offset":13194},"indent":[]}}],"position":{"start":{"line":105,"column":1,"offset":13180},"end":{"line":105,"column":15,"offset":13194},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We’ve only scratched the surface of what’s possible for website optimisation. There are many tools you can use to help you stream-line this process like ","position":{"start":{"line":107,"column":1,"offset":13196},"end":{"line":107,"column":154,"offset":13349},"indent":[]}},{"type":"link","title":null,"url":"https://webpack.js.org/","children":[{"type":"text","value":"Webpack","position":{"start":{"line":107,"column":155,"offset":13350},"end":{"line":107,"column":162,"offset":13357},"indent":[]}}],"position":{"start":{"line":107,"column":154,"offset":13349},"end":{"line":107,"column":188,"offset":13383},"indent":[]}},{"type":"text","value":" for bundling or static-site generators like ","position":{"start":{"line":107,"column":188,"offset":13383},"end":{"line":107,"column":233,"offset":13428},"indent":[]}},{"type":"link","title":null,"url":"https://www.gatsbyjs.org/","children":[{"type":"text","value":"Gatsby","position":{"start":{"line":107,"column":234,"offset":13429},"end":{"line":107,"column":240,"offset":13435},"indent":[]}}],"position":{"start":{"line":107,"column":233,"offset":13428},"end":{"line":107,"column":268,"offset":13463},"indent":[]}},{"type":"text","value":". ","position":{"start":{"line":107,"column":268,"offset":13463},"end":{"line":107,"column":270,"offset":13465},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking","children":[{"type":"text","value":"Tree shaking","position":{"start":{"line":107,"column":271,"offset":13466},"end":{"line":107,"column":283,"offset":13478},"indent":[]}}],"position":{"start":{"line":107,"column":270,"offset":13465},"end":{"line":107,"column":348,"offset":13543},"indent":[]}},{"type":"text","value":" is another commonly used technique to remove excess, unused modules lying around your website.","position":{"start":{"line":107,"column":348,"offset":13543},"end":{"line":107,"column":443,"offset":13638},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":13196},"end":{"line":107,"column":443,"offset":13638},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Hopefully this article has touched on some useful techniques you can use on your next site to help improve its performance. Happy coding!","position":{"start":{"line":109,"column":1,"offset":13640},"end":{"line":109,"column":138,"offset":13777},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":13640},"end":{"line":109,"column":138,"offset":13777},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A big thank you to ","position":{"start":{"line":111,"column":1,"offset":13779},"end":{"line":111,"column":20,"offset":13798},"indent":[]}},{"type":"link","title":null,"url":"undefined","children":[{"type":"text","value":"Christian Silver","position":{"start":{"line":111,"column":21,"offset":13799},"end":{"line":111,"column":37,"offset":13815},"indent":[]}}],"position":{"start":{"line":111,"column":20,"offset":13798},"end":{"line":111,"column":49,"offset":13827},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":111,"column":49,"offset":13827},"end":{"line":111,"column":54,"offset":13832},"indent":[]}},{"type":"link","title":null,"url":"undefined","children":[{"type":"text","value":"Charlie Crisp","position":{"start":{"line":111,"column":55,"offset":13833},"end":{"line":111,"column":68,"offset":13846},"indent":[]}}],"position":{"start":{"line":111,"column":54,"offset":13832},"end":{"line":111,"column":80,"offset":13858},"indent":[]}},{"type":"text","value":" for editing this post and providing extremely useful advice and extra content to make it even better.","position":{"start":{"line":111,"column":80,"offset":13858},"end":{"line":111,"column":182,"offset":13960},"indent":[]}}],"position":{"start":{"line":111,"column":1,"offset":13779},"end":{"line":111,"column":182,"offset":13960},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":112,"column":1,"offset":13961}}}},{"id":"transformer-remark-markdown-html-ast-0d9ad13af90e293f82d070271bc8c166-gatsby-remark-imagesgatsby-remark-prismjs-","value":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/patricoferris/image/upload/v1532781201/pf2018/blogposts/28-07-2018/website_optimisation_2.png","alt":"Optimising your Website"},"children":[],"position":{"start":{"line":7,"column":1,"offset":154},"end":{"line":7,"column":149,"offset":302}}},{"type":"text","value":"\nInspired by a ","position":{"start":{"line":7,"column":149,"offset":302},"end":{"line":8,"column":15,"offset":317}}},{"type":"element","tagName":"a","properties":{"href":"https://syntax.fm/"},"children":[{"type":"text","value":"Syntax","position":{"start":{"line":8,"column":16,"offset":318},"end":{"line":8,"column":22,"offset":324}}}],"position":{"start":{"line":8,"column":15,"offset":317},"end":{"line":8,"column":43,"offset":345}}},{"type":"text","value":" podcast, I got really interested in website optimisation. It can often be an overlooked aspect in web development with more focus on design and functionality, I realised my number one priority whenever I visited a website is load speed. My attention is a website’s number one goal, lose it and they lose all potential ad revenue or possibility to give me whatever information I was looking for. ","position":{"start":{"line":8,"column":43,"offset":345},"end":{"line":8,"column":439,"offset":741}}},{"type":"element","tagName":"a","properties":{"href":"https://developers.google.com/web/fundamentals/performance/get-started/"},"children":[{"type":"text","value":"Many seem to agree. 53% of users abandon websites that take more than 3 seconds to load","position":{"start":{"line":8,"column":440,"offset":742},"end":{"line":8,"column":527,"offset":829}}}],"position":{"start":{"line":8,"column":439,"offset":741},"end":{"line":8,"column":601,"offset":903}}},{"type":"text","value":". No amount of fancy graphics or parallax scrolling that appears five seconds after someone’s clicked will hide the slow loading times.","position":{"start":{"line":8,"column":601,"offset":903},"end":{"line":8,"column":736,"offset":1038}}}],"position":{"start":{"line":7,"column":1,"offset":154},"end":{"line":8,"column":736,"offset":1038}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The aim of this article is to give a broad overview of the concepts and ideas behind optimising your website, experienced developers are likely already using things like Webpack (a module bundler) among other tools to speed-up their sites.","position":{"start":{"line":10,"column":1,"offset":1040},"end":{"line":10,"column":240,"offset":1279}}}],"position":{"start":{"line":10,"column":1,"offset":1040},"end":{"line":10,"column":240,"offset":1279}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For testing load-times I will be using the ","position":{"start":{"line":12,"column":1,"offset":1281},"end":{"line":12,"column":44,"offset":1324}}},{"type":"element","tagName":"a","properties":{"href":"https://chrome.google.com/webstore/detail/page-load-time/fploionmjgeclbkemipmkogoaohcdbig?hl=en"},"children":[{"type":"text","value":"Page Load Time ","position":{"start":{"line":12,"column":45,"offset":1325},"end":{"line":12,"column":60,"offset":1340}}}],"position":{"start":{"line":12,"column":44,"offset":1324},"end":{"line":12,"column":158,"offset":1438}}},{"type":"text","value":"Chrome extension. There are a few ways to measure website loading time including: ","position":{"start":{"line":12,"column":158,"offset":1438},"end":{"line":12,"column":240,"offset":1520}}},{"type":"element","tagName":"a","properties":{"href":"https://developers.google.com/web/tools/chrome-user-experience-report/"},"children":[{"type":"text","value":"first paint, first meaning paint, DOMContentLoaded","position":{"start":{"line":12,"column":241,"offset":1521},"end":{"line":12,"column":291,"offset":1571}}}],"position":{"start":{"line":12,"column":240,"offset":1520},"end":{"line":12,"column":364,"offset":1644}}},{"type":"text","value":" etc. For a more detailed look into what this timer measures, check out the Github repository below.\n","position":{"start":{"line":12,"column":364,"offset":1644},"end":{"line":13,"column":1,"offset":1745}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/alex-vv/chrome-load-timer"},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"alex-vv/chrome-load-timer","position":{"start":{"line":13,"column":4,"offset":1748},"end":{"line":13,"column":29,"offset":1773}}}],"position":{"start":{"line":13,"column":2,"offset":1746},"end":{"line":13,"column":31,"offset":1775}}},{"type":"text","value":"\n","position":{"start":{"line":13,"column":31,"offset":1775},"end":{"line":14,"column":1,"offset":1776}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"chrome-load-timer - Google Chrome extension to measure page load time and display it in the toolbar","position":{"start":{"line":14,"column":2,"offset":1777},"end":{"line":14,"column":101,"offset":1876}}}],"position":{"start":{"line":14,"column":1,"offset":1776},"end":{"line":14,"column":102,"offset":1877}}},{"type":"text","value":"github.com","position":{"start":{"line":14,"column":102,"offset":1877},"end":{"line":14,"column":112,"offset":1887}}}],"position":{"start":{"line":13,"column":1,"offset":1745},"end":{"line":14,"column":159,"offset":1934}}}],"position":{"start":{"line":12,"column":1,"offset":1281},"end":{"line":14,"column":159,"offset":1934}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Use Minified Stylesheets and Scripts","position":{"start":{"line":16,"column":7,"offset":1942},"end":{"line":16,"column":43,"offset":1978}}}],"position":{"start":{"line":16,"column":5,"offset":1940},"end":{"line":16,"column":45,"offset":1980}}}],"position":{"start":{"line":16,"column":1,"offset":1936},"end":{"line":16,"column":45,"offset":1980}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You would be amazed at how much performance can be gained by this simple trick. What is a minified document? When we write code it is never our job to make it optimised for the computer, instead our golden rule is to make it readable to humans. This improves readability, cuts down on debug time and makes it easier to maintain. However, to achieve this we often add extra spacing which costs us precious space. Minifying the code is trimming all this fat from what we’ve written to have code that produces the same result but is far more difficult to read and maintain. This is okay though, because a computer has no problem deciphering it. Take the following code for example.","position":{"start":{"line":18,"column":1,"offset":1982},"end":{"line":18,"column":679,"offset":2660}}}],"position":{"start":{"line":18,"column":1,"offset":1982},"end":{"line":18,"column":679,"offset":2660}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","position":{"start":{"line":20,"column":1,"offset":2662},"end":{"line":29,"column":4,"offset":2921}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Notice how, wherever possible, our line-breaks and spaces are gone. On top of that, the code in the for-loop is only one line so there’s no need for the curly braces which extends our code over three lines when it can be done in one. Does this make a difference?","position":{"start":{"line":31,"column":1,"offset":2923},"end":{"line":31,"column":263,"offset":3185}}}],"position":{"start":{"line":31,"column":1,"offset":2923},"end":{"line":31,"column":263,"offset":3185}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I tried it out on simple website that just had one script tag being loaded in for the graphics library ","position":{"start":{"line":33,"column":1,"offset":3187},"end":{"line":33,"column":104,"offset":3290}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/"},"children":[{"type":"text","value":"p5.js","position":{"start":{"line":33,"column":105,"offset":3291},"end":{"line":33,"column":110,"offset":3296}}}],"position":{"start":{"line":33,"column":104,"offset":3290},"end":{"line":33,"column":130,"offset":3316}}},{"type":"text","value":". Using the non-minified CDN link I got a load time of 0.25 seconds. Using the minified version I got a markedly improved load time of 0.08 seconds. Depending on what your website project is, there are a few ways to automatically minify code. If it is a ","position":{"start":{"line":33,"column":130,"offset":3316},"end":{"line":33,"column":384,"offset":3570}}},{"type":"element","tagName":"a","properties":{"href":"https://guide.meteor.com/build-tool.html"},"children":[{"type":"text","value":"Meteor app","position":{"start":{"line":33,"column":385,"offset":3571},"end":{"line":33,"column":395,"offset":3581}}}],"position":{"start":{"line":33,"column":384,"offset":3570},"end":{"line":33,"column":438,"offset":3624}}},{"type":"text","value":" it will be done automatically, using ","position":{"start":{"line":33,"column":438,"offset":3624},"end":{"line":33,"column":476,"offset":3662}}},{"type":"element","tagName":"a","properties":{"href":"https://webpack.js.org/guides/production/"},"children":[{"type":"text","value":"Webpack ","position":{"start":{"line":33,"column":477,"offset":3663},"end":{"line":33,"column":485,"offset":3671}}}],"position":{"start":{"line":33,"column":476,"offset":3662},"end":{"line":33,"column":529,"offset":3715}}},{"type":"text","value":"will also allow you to do this. Otherwise there are some online tools like ","position":{"start":{"line":33,"column":529,"offset":3715},"end":{"line":33,"column":604,"offset":3790}}},{"type":"element","tagName":"a","properties":{"href":"https://jscompress.com/"},"children":[{"type":"text","value":"JSCompress ","position":{"start":{"line":33,"column":605,"offset":3791},"end":{"line":33,"column":616,"offset":3802}}}],"position":{"start":{"line":33,"column":604,"offset":3790},"end":{"line":33,"column":642,"offset":3828}}},{"type":"text","value":"or ","position":{"start":{"line":33,"column":642,"offset":3828},"end":{"line":33,"column":645,"offset":3831}}},{"type":"element","tagName":"a","properties":{"href":"https://cssminifier.com/"},"children":[{"type":"text","value":"CSSMinifier ","position":{"start":{"line":33,"column":646,"offset":3832},"end":{"line":33,"column":658,"offset":3844}}}],"position":{"start":{"line":33,"column":645,"offset":3831},"end":{"line":33,"column":685,"offset":3871}}},{"type":"text","value":"that you can upload your code to.","position":{"start":{"line":33,"column":685,"offset":3871},"end":{"line":33,"column":718,"offset":3904}}}],"position":{"start":{"line":33,"column":1,"offset":3187},"end":{"line":33,"column":718,"offset":3904}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Design Versus Performance","position":{"start":{"line":35,"column":5,"offset":3910},"end":{"line":35,"column":30,"offset":3935}}}],"position":{"start":{"line":35,"column":1,"offset":3906},"end":{"line":35,"column":30,"offset":3935}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Whilst design is undoubtedly a major aspect to a website’s overall success, both developers and designers must work together to compromise and make a mutually beneficial trade-off between design and performance. The classic example is fonts. Take the two screenshots of a simple website below.","position":{"start":{"line":37,"column":1,"offset":3937},"end":{"line":37,"column":294,"offset":4230}}}],"position":{"start":{"line":37,"column":1,"offset":3937},"end":{"line":37,"column":294,"offset":4230}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/patricoferris/image/upload/v1532780050/pf2018/blogposts/28-07-2018/Helvetica.png","alt":"The example website using Helvetica Font (commonly found on many computers) — check [this](https://css-tricks.com/snippets/css/system-font-stack/) link for common system fonts"},"children":[],"position":{"start":{"line":39,"column":1,"offset":4232},"end":{"line":39,"column":288,"offset":4519}}},{"type":"text","value":"\n","position":{"start":{"line":39,"column":288,"offset":4519},"end":{"line":40,"column":1,"offset":4520}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The example website using Helvetica Font (commonly found on many computers) — check ","position":{"start":{"line":40,"column":2,"offset":4521},"end":{"line":40,"column":86,"offset":4605}}},{"type":"element","tagName":"a","properties":{"href":"https://css-tricks.com/snippets/css/system-font-stack/"},"children":[{"type":"text","value":"this","position":{"start":{"line":40,"column":87,"offset":4606},"end":{"line":40,"column":91,"offset":4610}}}],"position":{"start":{"line":40,"column":86,"offset":4605},"end":{"line":40,"column":148,"offset":4667}}},{"type":"text","value":" link for common system fonts","position":{"start":{"line":40,"column":148,"offset":4667},"end":{"line":40,"column":177,"offset":4696}}}],"position":{"start":{"line":40,"column":1,"offset":4520},"end":{"line":40,"column":178,"offset":4697}}}],"position":{"start":{"line":39,"column":1,"offset":4232},"end":{"line":40,"column":178,"offset":4697}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://cdn-images-1.medium.com/max/5760/1*8ciuJNBdqMhlLSaOpNUXow.png","alt":"The example website using Roboto Font (designed by Google and linked from [Google Fonts](https://fonts.google.com/?selection.family=Roboto))"},"children":[],"position":{"start":{"line":42,"column":1,"offset":4699},"end":{"line":42,"column":215,"offset":4913}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The example website using Roboto Font (designed by Google and linked from ","position":{"start":{"line":42,"column":216,"offset":4914},"end":{"line":42,"column":290,"offset":4988}}},{"type":"element","tagName":"a","properties":{"href":"https://fonts.google.com/?selection.family=Roboto"},"children":[{"type":"text","value":"Google Fonts","position":{"start":{"line":42,"column":291,"offset":4989},"end":{"line":42,"column":303,"offset":5001}}}],"position":{"start":{"line":42,"column":290,"offset":4988},"end":{"line":42,"column":355,"offset":5053}}},{"type":"text","value":")","position":{"start":{"line":42,"column":355,"offset":5053},"end":{"line":42,"column":356,"offset":5054}}}],"position":{"start":{"line":42,"column":215,"offset":4913},"end":{"line":42,"column":357,"offset":5055}}}],"position":{"start":{"line":42,"column":1,"offset":4699},"end":{"line":42,"column":357,"offset":5055}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Before critiquing my questionable design skills take a moment to appreciate that these two fonts are very similar — yet the loading time for a website for the Roboto font was 0.22 seconds as compared with 0.17 for Helvetica. Whilst not that significant, using lots of custom fonts will slow down your website, although using Google Fonts’ API will help keep your website optimised. As an over-the-top example, linking 20 different fonts from the Google API increased the load time to 0.87 seconds.","position":{"start":{"line":44,"column":1,"offset":5057},"end":{"line":44,"column":498,"offset":5554}}}],"position":{"start":{"line":44,"column":1,"offset":5057},"end":{"line":44,"column":498,"offset":5554}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Inlining your JavaScript and CSS","position":{"start":{"line":46,"column":5,"offset":5560},"end":{"line":46,"column":37,"offset":5592}}}],"position":{"start":{"line":46,"column":1,"offset":5556},"end":{"line":46,"column":37,"offset":5592}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For each individual document or component of your website, when the parser reaches the script tag or link tag it sends and HTTP request for that document and if not stated differently, these will be blocking actions. What this means is your machine is parsing the HTML document getting the words to display in your browser but if it hits the script tag with the attribute src='js/main.js' for example, it will block the parsing and load in that file. This is where as a developer you need to be clever about where in the document you place things.","position":{"start":{"line":48,"column":1,"offset":5594},"end":{"line":48,"column":548,"offset":6141}}}],"position":{"start":{"line":48,"column":1,"offset":5594},"end":{"line":48,"column":548,"offset":6141}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Whilst it may not ultimately affect the loading time of your website, it can affect the order in which things are loaded. Again we’ll be using the un-minified p5.js library to simulate a large JavaScript file and load it in different places to see how it affects our user experience.","position":{"start":{"line":50,"column":1,"offset":6143},"end":{"line":50,"column":284,"offset":6426}}}],"position":{"start":{"line":50,"column":1,"offset":6143},"end":{"line":50,"column":284,"offset":6426}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://cdn-images-1.medium.com/max/2780/1*h_3GogfkaahcXCO9a43CPA.gif","alt":"Refreshing website with the script tag inserted at the bottom of the body tag"},"children":[],"position":{"start":{"line":52,"column":1,"offset":6428},"end":{"line":52,"column":152,"offset":6579}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Refreshing website with the script tag inserted at the bottom of the body tag","position":{"start":{"line":52,"column":153,"offset":6580},"end":{"line":52,"column":230,"offset":6657}}}],"position":{"start":{"line":52,"column":152,"offset":6579},"end":{"line":52,"column":231,"offset":6658}}}],"position":{"start":{"line":52,"column":1,"offset":6428},"end":{"line":52,"column":231,"offset":6658}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://cdn-images-1.medium.com/max/2780/1*xLOq5r4erQAwb4Au_hB-Ww.gif","alt":"Refreshing website with the script tag inserted at the top of the body tag"},"children":[],"position":{"start":{"line":54,"column":1,"offset":6660},"end":{"line":54,"column":149,"offset":6808}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Refreshing website with the script tag inserted at the top of the body tag","position":{"start":{"line":54,"column":150,"offset":6809},"end":{"line":54,"column":224,"offset":6883}}}],"position":{"start":{"line":54,"column":149,"offset":6808},"end":{"line":54,"column":225,"offset":6884}}}],"position":{"start":{"line":54,"column":1,"offset":6660},"end":{"line":54,"column":225,"offset":6884}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Whilst the load times were similar for both cases — the user experience is far better by placing the script at the body tag allowing the HTML to be parsed before the JavaScript giving the user the website content immediately!","position":{"start":{"line":56,"column":1,"offset":6886},"end":{"line":56,"column":226,"offset":7111}}}],"position":{"start":{"line":56,"column":1,"offset":6886},"end":{"line":56,"column":226,"offset":7111}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In the same vein CSS can also be render-blocking especially because more often than not it is linked in the head tag of your HTML document before the body. But if we want our user to see the content in the quickest time we don’t want to be loading CSS for the footer of our document which the user won’t see until they’ve scrolled to the bottom. In fact, we don’t want to load any CSS in that the user can’t immediately see when the page first loads on their device.","position":{"start":{"line":58,"column":1,"offset":7113},"end":{"line":58,"column":467,"offset":7579}}}],"position":{"start":{"line":58,"column":1,"offset":7113},"end":{"line":58,"column":467,"offset":7579}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The CSS that you need is often called the ","position":{"start":{"line":60,"column":1,"offset":7581},"end":{"line":60,"column":43,"offset":7623}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Critical CSS","position":{"start":{"line":60,"column":44,"offset":7624},"end":{"line":60,"column":56,"offset":7636}}}],"position":{"start":{"line":60,"column":43,"offset":7623},"end":{"line":60,"column":57,"offset":7637}}},{"type":"text","value":". Finding it for yourself would be a headache. It will be different for different devices, meaning you would have to check manually for all possible devices. Lucky for us we have (if you’re using ","position":{"start":{"line":60,"column":57,"offset":7637},"end":{"line":60,"column":253,"offset":7833}}},{"type":"element","tagName":"a","properties":{"href":"https://nodejs.org/en/"},"children":[{"type":"text","value":"Node.js","position":{"start":{"line":60,"column":254,"offset":7834},"end":{"line":60,"column":261,"offset":7841}}}],"position":{"start":{"line":60,"column":253,"offset":7833},"end":{"line":60,"column":286,"offset":7866}}},{"type":"text","value":") ","position":{"start":{"line":60,"column":286,"offset":7866},"end":{"line":60,"column":288,"offset":7868}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/addyosmani/critical"},"children":[{"type":"text","value":"Critical","position":{"start":{"line":60,"column":289,"offset":7869},"end":{"line":60,"column":297,"offset":7877}}}],"position":{"start":{"line":60,"column":288,"offset":7868},"end":{"line":60,"column":338,"offset":7918}}},{"type":"text","value":". This helpful package does the CSS inlining for us and all we do is add some code to a Javascript file. Here’s a code snippet from the Github page.","position":{"start":{"line":60,"column":338,"offset":7918},"end":{"line":60,"column":486,"offset":8066}}}],"position":{"start":{"line":60,"column":1,"offset":7581},"end":{"line":60,"column":486,"offset":8066}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","position":{"start":{"line":62,"column":1,"offset":8068},"end":{"line":73,"column":4,"offset":8329}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Using the generate function, we supply it with a JavaScript object with some values defined. base is where we’re going to save our src and dest (our project folder usually). What’s great is now we just supply an array of dimensions and the code will compute the critical CSS for each and inline that code into our head tag.","position":{"start":{"line":75,"column":1,"offset":8331},"end":{"line":75,"column":324,"offset":8654}}}],"position":{"start":{"line":75,"column":1,"offset":8331},"end":{"line":75,"column":324,"offset":8654}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Async and Defer","position":{"start":{"line":77,"column":5,"offset":8660},"end":{"line":77,"column":20,"offset":8675}}}],"position":{"start":{"line":77,"column":1,"offset":8656},"end":{"line":77,"column":20,"offset":8675}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Again, we come back to this idea of render-blocking and how best we should implement this for our website. When you have a plain script tag in your HTML it blocks the HTML from loading whilst the JavaScript loads ","position":{"start":{"line":79,"column":1,"offset":8677},"end":{"line":79,"column":214,"offset":8890}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"and","position":{"start":{"line":79,"column":216,"offset":8892},"end":{"line":79,"column":219,"offset":8895}}}],"position":{"start":{"line":79,"column":214,"offset":8890},"end":{"line":79,"column":221,"offset":8897}}},{"type":"text","value":" runs. Async and defer are simple attributes that you can add to your script tags that change the way your JavaScript will be loaded.","position":{"start":{"line":79,"column":221,"offset":8897},"end":{"line":79,"column":354,"offset":9030}}}],"position":{"start":{"line":79,"column":1,"offset":8677},"end":{"line":79,"column":354,"offset":9030}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Defer essentially “defers” execution of the script until after the HTML has been parsed. A major advantage of this is that you no longer need some $(document).ready() jQuery-style function to make sure the body was loaded before you could manipulate it, which could cut out some of the dependencies on libraries like jQuery which helps reduce load-time.","position":{"start":{"line":81,"column":1,"offset":9032},"end":{"line":81,"column":354,"offset":9385}}}],"position":{"start":{"line":81,"column":1,"offset":9032},"end":{"line":81,"column":354,"offset":9385}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Async is, unsurprisingly, the asynchronous loading of JavaScript files. What does this mean? Your HTML will continue to be parsed whilst the file is loaded and then whenever its ready the file will be executed. This helps improving user experience whilst viewing your website. Imagine for example you had a JavaScript file for doing some cool graphics. You want the words around this graphic to be parsed until your graphic is ready to be executed. As soon as it is ready, it is executed and we get a more seamless loading of our webpage without missing pieces.","position":{"start":{"line":83,"column":1,"offset":9387},"end":{"line":83,"column":562,"offset":9948}}}],"position":{"start":{"line":83,"column":1,"offset":9387},"end":{"line":83,"column":562,"offset":9948}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Check this ","position":{"start":{"line":85,"column":1,"offset":9950},"end":{"line":85,"column":12,"offset":9961}}},{"type":"element","tagName":"a","properties":{"href":"http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html"},"children":[{"type":"text","value":"website","position":{"start":{"line":85,"column":13,"offset":9962},"end":{"line":85,"column":20,"offset":9969}}}],"position":{"start":{"line":85,"column":12,"offset":9961},"end":{"line":85,"column":94,"offset":10043}}},{"type":"text","value":" for a really intuitive, graphical representation of this.","position":{"start":{"line":85,"column":94,"offset":10043},"end":{"line":85,"column":152,"offset":10101}}}],"position":{"start":{"line":85,"column":1,"offset":9950},"end":{"line":85,"column":152,"offset":10101}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Image Optimisation and Media Queries","position":{"start":{"line":87,"column":5,"offset":10107},"end":{"line":87,"column":41,"offset":10143}}}],"position":{"start":{"line":87,"column":1,"offset":10103},"end":{"line":87,"column":41,"offset":10143}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The cornerstone of all website performance optimisation is the simple rule that, the less data you send to the client, the quicker and better your website will perform. With the plethora of devices on the market capable of viewing websites, there is a growing trend to optimise your website based on the device it is being viewed on.","position":{"start":{"line":89,"column":1,"offset":10145},"end":{"line":89,"column":334,"offset":10478}}}],"position":{"start":{"line":89,"column":1,"offset":10145},"end":{"line":89,"column":334,"offset":10478}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Media queries are a fairly new tool added to CSS3. With more and more content being consumed using mobile-devices there has been a shift in design thinking towards mobile first. Using media queries you can then add stylings for larger screen sizes.","position":{"start":{"line":91,"column":1,"offset":10480},"end":{"line":91,"column":249,"offset":10728}}}],"position":{"start":{"line":91,"column":1,"offset":10480},"end":{"line":91,"column":249,"offset":10728}}},{"type":"text","value":"\n"},{"type":"raw","value":"<iframe src=\"https://medium.com/media/2b53ce5004bbba6e65050bf48c9a864b\" frameborder=0></iframe>","position":{"start":{"line":93,"column":1,"offset":10730},"end":{"line":93,"column":96,"offset":10825}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The @media tag starts a new CSS rule, whilst the only keyword stops older browsers that don’t support media queries from using it. The screen keyword applies the rules to screens rather than prints. After that you add the media-feature which supports the and , or and not keywords so you can get as specific as you want. When you’re loading your image you can write code like:","position":{"start":{"line":95,"column":1,"offset":10827},"end":{"line":95,"column":377,"offset":11203}}}],"position":{"start":{"line":95,"column":1,"offset":10827},"end":{"line":95,"column":377,"offset":11203}}},{"type":"text","value":"\n"},{"type":"raw","value":"<iframe src=\"https://medium.com/media/ecbcd475236339fbe45efdd97bfcdeed\" frameborder=0></iframe>","position":{"start":{"line":97,"column":1,"offset":11205},"end":{"line":97,"column":96,"offset":11300}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This isn’t necessarily the best or optimal approach for image optimisation. Luckily we have other options. ","position":{"start":{"line":99,"column":1,"offset":11302},"end":{"line":99,"column":108,"offset":11409}}},{"type":"element","tagName":"a","properties":{"href":"https://www.imgix.com/"},"children":[{"type":"text","value":"Imgix","position":{"start":{"line":99,"column":109,"offset":11410},"end":{"line":99,"column":114,"offset":11415}}}],"position":{"start":{"line":99,"column":108,"offset":11409},"end":{"line":99,"column":139,"offset":11440}}},{"type":"text","value":" and ","position":{"start":{"line":99,"column":139,"offset":11440},"end":{"line":99,"column":144,"offset":11445}}},{"type":"element","tagName":"a","properties":{"href":"https://cloudinary.com/"},"children":[{"type":"text","value":"Cloudinary","position":{"start":{"line":99,"column":145,"offset":11446},"end":{"line":99,"column":155,"offset":11456}}}],"position":{"start":{"line":99,"column":144,"offset":11445},"end":{"line":99,"column":181,"offset":11482}}},{"type":"text","value":" are two ways you can help optimise your site for the right device. Imgix is a Content Delivery Network (CDN) for images with a lot of cool features. A CDN simply takes your files and spreads them across the globe so that someone in a different country doesn’t have to wait for your files on your server to make it all the way to them. This ","position":{"start":{"line":99,"column":181,"offset":11482},"end":{"line":99,"column":522,"offset":11823}}},{"type":"element","tagName":"a","properties":{"href":"https://docs.imgix.com/tutorials/responsive-images-srcset-imgix"},"children":[{"type":"text","value":"tutorial","position":{"start":{"line":99,"column":523,"offset":11824},"end":{"line":99,"column":531,"offset":11832}}}],"position":{"start":{"line":99,"column":522,"offset":11823},"end":{"line":99,"column":597,"offset":11898}}},{"type":"text","value":" goes through how to use Imgix for different device pixel ratios. Cloudinary is a similar service, and their ","position":{"start":{"line":99,"column":597,"offset":11898},"end":{"line":99,"column":706,"offset":12007}}},{"type":"element","tagName":"a","properties":{"href":"https://cloudinary.com/documentation/image_optimization"},"children":[{"type":"text","value":"tutorial ","position":{"start":{"line":99,"column":707,"offset":12008},"end":{"line":99,"column":716,"offset":12017}}}],"position":{"start":{"line":99,"column":706,"offset":12007},"end":{"line":99,"column":774,"offset":12075}}},{"type":"text","value":"will take you through the importance of optimisation and how to achieve it will their incredible services. Below is a small example showing how easy it is to use Cloudinary straight in the HTML markup.","position":{"start":{"line":99,"column":774,"offset":12075},"end":{"line":99,"column":975,"offset":12276}}}],"position":{"start":{"line":99,"column":1,"offset":11302},"end":{"line":99,"column":975,"offset":12276}}},{"type":"text","value":"\n"},{"type":"raw","value":"<iframe src=\"https://medium.com/media/98868354e5bf607d317496f64ddec2a2\" frameborder=0></iframe>","position":{"start":{"line":101,"column":1,"offset":12278},"end":{"line":101,"column":96,"offset":12373}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As a last point on image optimisation, the format you use can have a large impact on file size. Some files contain lots of metadata which you don’t want to be serving to your client — ","position":{"start":{"line":103,"column":1,"offset":12375},"end":{"line":103,"column":185,"offset":12559}}},{"type":"element","tagName":"a","properties":{"href":"https://www.sno.phy.queensu.ca/~phil/exiftool/"},"children":[{"type":"text","value":"ExifTool","position":{"start":{"line":103,"column":186,"offset":12560},"end":{"line":103,"column":194,"offset":12568}}}],"position":{"start":{"line":103,"column":185,"offset":12559},"end":{"line":103,"column":243,"offset":12617}}},{"type":"text","value":" is a commonly used command-line application that can help you trim down those files sizes. On top of this, Scalable Vector Graphics (SVG) are a web-standard developed by W3C that offers XML-based vector graphics. This means they have infinite resolution unlike PNG or JPG files. It also makes them highly versatile, easily editable and can even be animated. At the end of the day SVGs are just code and so the file sizes tend to be small. For more reasons to use them, check out this ","position":{"start":{"line":103,"column":243,"offset":12617},"end":{"line":103,"column":728,"offset":13102}}},{"type":"element","tagName":"a","properties":{"href":"https://watb.co.uk/5-reasons-you-should-be-using-svgs-over-pngs/"},"children":[{"type":"text","value":"article","position":{"start":{"line":103,"column":729,"offset":13103},"end":{"line":103,"column":736,"offset":13110}}}],"position":{"start":{"line":103,"column":728,"offset":13102},"end":{"line":103,"column":803,"offset":13177}}},{"type":"text","value":".","position":{"start":{"line":103,"column":803,"offset":13177},"end":{"line":103,"column":804,"offset":13178}}}],"position":{"start":{"line":103,"column":1,"offset":12375},"end":{"line":103,"column":804,"offset":13178}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":105,"column":5,"offset":13184},"end":{"line":105,"column":15,"offset":13194}}}],"position":{"start":{"line":105,"column":1,"offset":13180},"end":{"line":105,"column":15,"offset":13194}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We’ve only scratched the surface of what’s possible for website optimisation. There are many tools you can use to help you stream-line this process like ","position":{"start":{"line":107,"column":1,"offset":13196},"end":{"line":107,"column":154,"offset":13349}}},{"type":"element","tagName":"a","properties":{"href":"https://webpack.js.org/"},"children":[{"type":"text","value":"Webpack","position":{"start":{"line":107,"column":155,"offset":13350},"end":{"line":107,"column":162,"offset":13357}}}],"position":{"start":{"line":107,"column":154,"offset":13349},"end":{"line":107,"column":188,"offset":13383}}},{"type":"text","value":" for bundling or static-site generators like ","position":{"start":{"line":107,"column":188,"offset":13383},"end":{"line":107,"column":233,"offset":13428}}},{"type":"element","tagName":"a","properties":{"href":"https://www.gatsbyjs.org/"},"children":[{"type":"text","value":"Gatsby","position":{"start":{"line":107,"column":234,"offset":13429},"end":{"line":107,"column":240,"offset":13435}}}],"position":{"start":{"line":107,"column":233,"offset":13428},"end":{"line":107,"column":268,"offset":13463}}},{"type":"text","value":". ","position":{"start":{"line":107,"column":268,"offset":13463},"end":{"line":107,"column":270,"offset":13465}}},{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking"},"children":[{"type":"text","value":"Tree shaking","position":{"start":{"line":107,"column":271,"offset":13466},"end":{"line":107,"column":283,"offset":13478}}}],"position":{"start":{"line":107,"column":270,"offset":13465},"end":{"line":107,"column":348,"offset":13543}}},{"type":"text","value":" is another commonly used technique to remove excess, unused modules lying around your website.","position":{"start":{"line":107,"column":348,"offset":13543},"end":{"line":107,"column":443,"offset":13638}}}],"position":{"start":{"line":107,"column":1,"offset":13196},"end":{"line":107,"column":443,"offset":13638}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Hopefully this article has touched on some useful techniques you can use on your next site to help improve its performance. Happy coding!","position":{"start":{"line":109,"column":1,"offset":13640},"end":{"line":109,"column":138,"offset":13777}}}],"position":{"start":{"line":109,"column":1,"offset":13640},"end":{"line":109,"column":138,"offset":13777}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A big thank you to ","position":{"start":{"line":111,"column":1,"offset":13779},"end":{"line":111,"column":20,"offset":13798}}},{"type":"element","tagName":"a","properties":{"href":"undefined"},"children":[{"type":"text","value":"Christian Silver","position":{"start":{"line":111,"column":21,"offset":13799},"end":{"line":111,"column":37,"offset":13815}}}],"position":{"start":{"line":111,"column":20,"offset":13798},"end":{"line":111,"column":49,"offset":13827}}},{"type":"text","value":" and ","position":{"start":{"line":111,"column":49,"offset":13827},"end":{"line":111,"column":54,"offset":13832}}},{"type":"element","tagName":"a","properties":{"href":"undefined"},"children":[{"type":"text","value":"Charlie Crisp","position":{"start":{"line":111,"column":55,"offset":13833},"end":{"line":111,"column":68,"offset":13846}}}],"position":{"start":{"line":111,"column":54,"offset":13832},"end":{"line":111,"column":80,"offset":13858}}},{"type":"text","value":" for editing this post and providing extremely useful advice and extra content to make it even better.","position":{"start":{"line":111,"column":80,"offset":13858},"end":{"line":111,"column":182,"offset":13960}}}],"position":{"start":{"line":111,"column":1,"offset":13779},"end":{"line":111,"column":182,"offset":13960}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":112,"column":1,"offset":13961}}}},{"id":"transformer-remark-markdown-html-0d9ad13af90e293f82d070271bc8c166-gatsby-remark-imagesgatsby-remark-prismjs-","value":"<p><img src=\"https://res.cloudinary.com/patricoferris/image/upload/v1532781201/pf2018/blogposts/28-07-2018/website_optimisation_2.png\" alt=\"Optimising your Website\">\nInspired by a <a href=\"https://syntax.fm/\">Syntax</a> podcast, I got really interested in website optimisation. It can often be an overlooked aspect in web development with more focus on design and functionality, I realised my number one priority whenever I visited a website is load speed. My attention is a website’s number one goal, lose it and they lose all potential ad revenue or possibility to give me whatever information I was looking for. <a href=\"https://developers.google.com/web/fundamentals/performance/get-started/\">Many seem to agree. 53% of users abandon websites that take more than 3 seconds to load</a>. No amount of fancy graphics or parallax scrolling that appears five seconds after someone’s clicked will hide the slow loading times.</p>\n<p>The aim of this article is to give a broad overview of the concepts and ideas behind optimising your website, experienced developers are likely already using things like Webpack (a module bundler) among other tools to speed-up their sites.</p>\n<p>For testing load-times I will be using the <a href=\"https://chrome.google.com/webstore/detail/page-load-time/fploionmjgeclbkemipmkogoaohcdbig?hl=en\">Page Load Time </a>Chrome extension. There are a few ways to measure website loading time including: <a href=\"https://developers.google.com/web/tools/chrome-user-experience-report/\">first paint, first meaning paint, DOMContentLoaded</a> etc. For a more detailed look into what this timer measures, check out the Github repository below.\n<a href=\"https://github.com/alex-vv/chrome-load-timer\"><strong>alex-vv/chrome-load-timer</strong>\n<em>chrome-load-timer - Google Chrome extension to measure page load time and display it in the toolbar</em>github.com</a></p>\n<h3><strong>Use Minified Stylesheets and Scripts</strong></h3>\n<p>You would be amazed at how much performance can be gained by this simple trick. What is a minified document? When we write code it is never our job to make it optimised for the computer, instead our golden rule is to make it readable to humans. This improves readability, cuts down on debug time and makes it easier to maintain. However, to achieve this we often add extra spacing which costs us precious space. Minifying the code is trimming all this fat from what we’ve written to have code that produces the same result but is far more difficult to read and maintain. This is okay though, because a computer has no problem deciphering it. Take the following code for example.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Notice how, wherever possible, our line-breaks and spaces are gone. On top of that, the code in the for-loop is only one line so there’s no need for the curly braces which extends our code over three lines when it can be done in one. Does this make a difference?</p>\n<p>I tried it out on simple website that just had one script tag being loaded in for the graphics library <a href=\"https://p5js.org/\">p5.js</a>. Using the non-minified CDN link I got a load time of 0.25 seconds. Using the minified version I got a markedly improved load time of 0.08 seconds. Depending on what your website project is, there are a few ways to automatically minify code. If it is a <a href=\"https://guide.meteor.com/build-tool.html\">Meteor app</a> it will be done automatically, using <a href=\"https://webpack.js.org/guides/production/\">Webpack </a>will also allow you to do this. Otherwise there are some online tools like <a href=\"https://jscompress.com/\">JSCompress </a>or <a href=\"https://cssminifier.com/\">CSSMinifier </a>that you can upload your code to.</p>\n<h3>Design Versus Performance</h3>\n<p>Whilst design is undoubtedly a major aspect to a website’s overall success, both developers and designers must work together to compromise and make a mutually beneficial trade-off between design and performance. The classic example is fonts. Take the two screenshots of a simple website below.</p>\n<p><img src=\"https://res.cloudinary.com/patricoferris/image/upload/v1532780050/pf2018/blogposts/28-07-2018/Helvetica.png\" alt=\"The example website using Helvetica Font (commonly found on many computers) — check [this](https://css-tricks.com/snippets/css/system-font-stack/) link for common system fonts\">\n<em>The example website using Helvetica Font (commonly found on many computers) — check <a href=\"https://css-tricks.com/snippets/css/system-font-stack/\">this</a> link for common system fonts</em></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/5760/1*8ciuJNBdqMhlLSaOpNUXow.png\" alt=\"The example website using Roboto Font (designed by Google and linked from [Google Fonts](https://fonts.google.com/?selection.family=Roboto))\"><em>The example website using Roboto Font (designed by Google and linked from <a href=\"https://fonts.google.com/?selection.family=Roboto\">Google Fonts</a>)</em></p>\n<p>Before critiquing my questionable design skills take a moment to appreciate that these two fonts are very similar — yet the loading time for a website for the Roboto font was 0.22 seconds as compared with 0.17 for Helvetica. Whilst not that significant, using lots of custom fonts will slow down your website, although using Google Fonts’ API will help keep your website optimised. As an over-the-top example, linking 20 different fonts from the Google API increased the load time to 0.87 seconds.</p>\n<h3>Inlining your JavaScript and CSS</h3>\n<p>For each individual document or component of your website, when the parser reaches the script tag or link tag it sends and HTTP request for that document and if not stated differently, these will be blocking actions. What this means is your machine is parsing the HTML document getting the words to display in your browser but if it hits the script tag with the attribute src='js/main.js' for example, it will block the parsing and load in that file. This is where as a developer you need to be clever about where in the document you place things.</p>\n<p>Whilst it may not ultimately affect the loading time of your website, it can affect the order in which things are loaded. Again we’ll be using the un-minified p5.js library to simulate a large JavaScript file and load it in different places to see how it affects our user experience.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2780/1*h_3GogfkaahcXCO9a43CPA.gif\" alt=\"Refreshing website with the script tag inserted at the bottom of the body tag\"><em>Refreshing website with the script tag inserted at the bottom of the body tag</em></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2780/1*xLOq5r4erQAwb4Au_hB-Ww.gif\" alt=\"Refreshing website with the script tag inserted at the top of the body tag\"><em>Refreshing website with the script tag inserted at the top of the body tag</em></p>\n<p>Whilst the load times were similar for both cases — the user experience is far better by placing the script at the body tag allowing the HTML to be parsed before the JavaScript giving the user the website content immediately!</p>\n<p>In the same vein CSS can also be render-blocking especially because more often than not it is linked in the head tag of your HTML document before the body. But if we want our user to see the content in the quickest time we don’t want to be loading CSS for the footer of our document which the user won’t see until they’ve scrolled to the bottom. In fact, we don’t want to load any CSS in that the user can’t immediately see when the page first loads on their device.</p>\n<p>The CSS that you need is often called the <em>Critical CSS</em>. Finding it for yourself would be a headache. It will be different for different devices, meaning you would have to check manually for all possible devices. Lucky for us we have (if you’re using <a href=\"https://nodejs.org/en/\">Node.js</a>) <a href=\"https://github.com/addyosmani/critical\">Critical</a>. This helpful package does the CSS inlining for us and all we do is add some code to a Javascript file. Here’s a code snippet from the Github page.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Using the generate function, we supply it with a JavaScript object with some values defined. base is where we’re going to save our src and dest (our project folder usually). What’s great is now we just supply an array of dimensions and the code will compute the critical CSS for each and inline that code into our head tag.</p>\n<h3>Async and Defer</h3>\n<p>Again, we come back to this idea of render-blocking and how best we should implement this for our website. When you have a plain script tag in your HTML it blocks the HTML from loading whilst the JavaScript loads <strong>and</strong> runs. Async and defer are simple attributes that you can add to your script tags that change the way your JavaScript will be loaded.</p>\n<p>Defer essentially “defers” execution of the script until after the HTML has been parsed. A major advantage of this is that you no longer need some $(document).ready() jQuery-style function to make sure the body was loaded before you could manipulate it, which could cut out some of the dependencies on libraries like jQuery which helps reduce load-time.</p>\n<p>Async is, unsurprisingly, the asynchronous loading of JavaScript files. What does this mean? Your HTML will continue to be parsed whilst the file is loaded and then whenever its ready the file will be executed. This helps improving user experience whilst viewing your website. Imagine for example you had a JavaScript file for doing some cool graphics. You want the words around this graphic to be parsed until your graphic is ready to be executed. As soon as it is ready, it is executed and we get a more seamless loading of our webpage without missing pieces.</p>\n<p>Check this <a href=\"http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html\">website</a> for a really intuitive, graphical representation of this.</p>\n<h3>Image Optimisation and Media Queries</h3>\n<p>The cornerstone of all website performance optimisation is the simple rule that, the less data you send to the client, the quicker and better your website will perform. With the plethora of devices on the market capable of viewing websites, there is a growing trend to optimise your website based on the device it is being viewed on.</p>\n<p>Media queries are a fairly new tool added to CSS3. With more and more content being consumed using mobile-devices there has been a shift in design thinking towards mobile first. Using media queries you can then add stylings for larger screen sizes.</p>\n<iframe src=\"https://medium.com/media/2b53ce5004bbba6e65050bf48c9a864b\" frameborder=0></iframe>\n<p>The @media tag starts a new CSS rule, whilst the only keyword stops older browsers that don’t support media queries from using it. The screen keyword applies the rules to screens rather than prints. After that you add the media-feature which supports the and , or and not keywords so you can get as specific as you want. When you’re loading your image you can write code like:</p>\n<iframe src=\"https://medium.com/media/ecbcd475236339fbe45efdd97bfcdeed\" frameborder=0></iframe>\n<p>This isn’t necessarily the best or optimal approach for image optimisation. Luckily we have other options. <a href=\"https://www.imgix.com/\">Imgix</a> and <a href=\"https://cloudinary.com/\">Cloudinary</a> are two ways you can help optimise your site for the right device. Imgix is a Content Delivery Network (CDN) for images with a lot of cool features. A CDN simply takes your files and spreads them across the globe so that someone in a different country doesn’t have to wait for your files on your server to make it all the way to them. This <a href=\"https://docs.imgix.com/tutorials/responsive-images-srcset-imgix\">tutorial</a> goes through how to use Imgix for different device pixel ratios. Cloudinary is a similar service, and their <a href=\"https://cloudinary.com/documentation/image_optimization\">tutorial </a>will take you through the importance of optimisation and how to achieve it will their incredible services. Below is a small example showing how easy it is to use Cloudinary straight in the HTML markup.</p>\n<iframe src=\"https://medium.com/media/98868354e5bf607d317496f64ddec2a2\" frameborder=0></iframe>\n<p>As a last point on image optimisation, the format you use can have a large impact on file size. Some files contain lots of metadata which you don’t want to be serving to your client — <a href=\"https://www.sno.phy.queensu.ca/~phil/exiftool/\">ExifTool</a> is a commonly used command-line application that can help you trim down those files sizes. On top of this, Scalable Vector Graphics (SVG) are a web-standard developed by W3C that offers XML-based vector graphics. This means they have infinite resolution unlike PNG or JPG files. It also makes them highly versatile, easily editable and can even be animated. At the end of the day SVGs are just code and so the file sizes tend to be small. For more reasons to use them, check out this <a href=\"https://watb.co.uk/5-reasons-you-should-be-using-svgs-over-pngs/\">article</a>.</p>\n<h3>Conclusion</h3>\n<p>We’ve only scratched the surface of what’s possible for website optimisation. There are many tools you can use to help you stream-line this process like <a href=\"https://webpack.js.org/\">Webpack</a> for bundling or static-site generators like <a href=\"https://www.gatsbyjs.org/\">Gatsby</a>. <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking\">Tree shaking</a> is another commonly used technique to remove excess, unused modules lying around your website.</p>\n<p>Hopefully this article has touched on some useful techniques you can use on your next site to help improve its performance. Happy coding!</p>\n<p>A big thank you to <a href=\"undefined\">Christian Silver</a> and <a href=\"undefined\">Charlie Crisp</a> for editing this post and providing extremely useful advice and extra content to make it even better.</p>"},{"id":"transformer-remark-markdown-ast-9d0d77971f9875c023af116cde8edf96-gatsby-remark-imagesgatsby-remark-prismjs-","value":{"type":"root","children":[{"type":"yaml","value":"path: '/optimise-your-website'\ntitle: 'Optimising your Website'\nsubtitle: 'Tips and tricks to keep your website lean and fast'\ndate: '2018-07-28'","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":6,"column":4,"offset":153},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://res.cloudinary.com/patricoferris/image/upload/v1532781201/pf2018/blogposts/28-07-2018/website_optimisation_2.png","alt":"Optimising your Website","position":{"start":{"line":7,"column":1,"offset":154},"end":{"line":7,"column":149,"offset":302},"indent":[]}},{"type":"text","value":"\nInspired by a ","position":{"start":{"line":7,"column":149,"offset":302},"end":{"line":8,"column":15,"offset":317},"indent":[1]}},{"type":"link","title":null,"url":"https://syntax.fm/","children":[{"type":"text","value":"Syntax","position":{"start":{"line":8,"column":16,"offset":318},"end":{"line":8,"column":22,"offset":324},"indent":[]}}],"position":{"start":{"line":8,"column":15,"offset":317},"end":{"line":8,"column":43,"offset":345},"indent":[]}},{"type":"text","value":" podcast, I got really interested in website optimisation. It can often be an overlooked aspect in web development with more focus on design and functionality, I realised my number one priority whenever I visited a website is load speed. My attention is a website’s number one goal, lose it and they lose all potential ad revenue or possibility to give me whatever information I was looking for. ","position":{"start":{"line":8,"column":43,"offset":345},"end":{"line":8,"column":439,"offset":741},"indent":[]}},{"type":"link","title":null,"url":"https://developers.google.com/web/fundamentals/performance/get-started/","children":[{"type":"text","value":"Many seem to agree. 53% of users abandon websites that take more than 3 seconds to load","position":{"start":{"line":8,"column":440,"offset":742},"end":{"line":8,"column":527,"offset":829},"indent":[]}}],"position":{"start":{"line":8,"column":439,"offset":741},"end":{"line":8,"column":601,"offset":903},"indent":[]}},{"type":"text","value":". No amount of fancy graphics or parallax scrolling that appears five seconds after someone’s clicked will hide the slow loading times.","position":{"start":{"line":8,"column":601,"offset":903},"end":{"line":8,"column":736,"offset":1038},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":154},"end":{"line":8,"column":736,"offset":1038},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"The aim of this article is to give a broad overview of the concepts and ideas behind optimising your website, experienced developers are likely already using things like Webpack (a module bundler) among other tools to speed-up their sites.","position":{"start":{"line":10,"column":1,"offset":1040},"end":{"line":10,"column":240,"offset":1279},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":1040},"end":{"line":10,"column":240,"offset":1279},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For testing load-times I will be using the ","position":{"start":{"line":12,"column":1,"offset":1281},"end":{"line":12,"column":44,"offset":1324},"indent":[]}},{"type":"link","title":null,"url":"https://chrome.google.com/webstore/detail/page-load-time/fploionmjgeclbkemipmkogoaohcdbig?hl=en","children":[{"type":"text","value":"Page Load Time ","position":{"start":{"line":12,"column":45,"offset":1325},"end":{"line":12,"column":60,"offset":1340},"indent":[]}}],"position":{"start":{"line":12,"column":44,"offset":1324},"end":{"line":12,"column":158,"offset":1438},"indent":[]}},{"type":"text","value":"Chrome extension. There are a few ways to measure website loading time including: ","position":{"start":{"line":12,"column":158,"offset":1438},"end":{"line":12,"column":240,"offset":1520},"indent":[]}},{"type":"link","title":null,"url":"https://developers.google.com/web/tools/chrome-user-experience-report/","children":[{"type":"text","value":"first paint, first meaning paint, DOMContentLoaded","position":{"start":{"line":12,"column":241,"offset":1521},"end":{"line":12,"column":291,"offset":1571},"indent":[]}}],"position":{"start":{"line":12,"column":240,"offset":1520},"end":{"line":12,"column":364,"offset":1644},"indent":[]}},{"type":"text","value":" etc. For a more detailed look into what this timer measures, check out the Github repository below.\n","position":{"start":{"line":12,"column":364,"offset":1644},"end":{"line":13,"column":1,"offset":1745},"indent":[1]}},{"type":"link","title":null,"url":"https://github.com/alex-vv/chrome-load-timer","children":[{"type":"strong","children":[{"type":"text","value":"alex-vv/chrome-load-timer","position":{"start":{"line":13,"column":4,"offset":1748},"end":{"line":13,"column":29,"offset":1773},"indent":[]}}],"position":{"start":{"line":13,"column":2,"offset":1746},"end":{"line":13,"column":31,"offset":1775},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":13,"column":31,"offset":1775},"end":{"line":14,"column":1,"offset":1776},"indent":[1]}},{"type":"emphasis","children":[{"type":"text","value":"chrome-load-timer - Google Chrome extension to measure page load time and display it in the toolbar","position":{"start":{"line":14,"column":2,"offset":1777},"end":{"line":14,"column":101,"offset":1876},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":1776},"end":{"line":14,"column":102,"offset":1877},"indent":[]}},{"type":"text","value":"github.com","position":{"start":{"line":14,"column":102,"offset":1877},"end":{"line":14,"column":112,"offset":1887},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":1745},"end":{"line":14,"column":159,"offset":1934},"indent":[1]}}],"position":{"start":{"line":12,"column":1,"offset":1281},"end":{"line":14,"column":159,"offset":1934},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"strong","children":[{"type":"text","value":"Use Minified Stylesheets and Scripts","position":{"start":{"line":16,"column":7,"offset":1942},"end":{"line":16,"column":43,"offset":1978},"indent":[]}}],"position":{"start":{"line":16,"column":5,"offset":1940},"end":{"line":16,"column":45,"offset":1980},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":1936},"end":{"line":16,"column":45,"offset":1980},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You would be amazed at how much performance can be gained by this simple trick. What is a minified document? When we write code it is never our job to make it optimised for the computer, instead our golden rule is to make it readable to humans. This improves readability, cuts down on debug time and makes it easier to maintain. However, to achieve this we often add extra spacing which costs us precious space. Minifying the code is trimming all this fat from what we’ve written to have code that produces the same result but is far more difficult to read and maintain. This is okay though, because a computer has no problem deciphering it. Take the following code for example.","position":{"start":{"line":18,"column":1,"offset":1982},"end":{"line":18,"column":679,"offset":2660},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1982},"end":{"line":18,"column":679,"offset":2660},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","position":{"start":{"line":20,"column":1,"offset":2662},"end":{"line":29,"column":4,"offset":2921},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Notice how, wherever possible, our line-breaks and spaces are gone. On top of that, the code in the for-loop is only one line so there’s no need for the curly braces which extends our code over three lines when it can be done in one. Does this make a difference?","position":{"start":{"line":31,"column":1,"offset":2923},"end":{"line":31,"column":263,"offset":3185},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":2923},"end":{"line":31,"column":263,"offset":3185},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"I tried it out on simple website that just had one script tag being loaded in for the graphics library ","position":{"start":{"line":33,"column":1,"offset":3187},"end":{"line":33,"column":104,"offset":3290},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/","children":[{"type":"text","value":"p5.js","position":{"start":{"line":33,"column":105,"offset":3291},"end":{"line":33,"column":110,"offset":3296},"indent":[]}}],"position":{"start":{"line":33,"column":104,"offset":3290},"end":{"line":33,"column":130,"offset":3316},"indent":[]}},{"type":"text","value":". Using the non-minified CDN link I got a load time of 0.25 seconds. Using the minified version I got a markedly improved load time of 0.08 seconds. Depending on what your website project is, there are a few ways to automatically minify code. If it is a ","position":{"start":{"line":33,"column":130,"offset":3316},"end":{"line":33,"column":384,"offset":3570},"indent":[]}},{"type":"link","title":null,"url":"https://guide.meteor.com/build-tool.html","children":[{"type":"text","value":"Meteor app","position":{"start":{"line":33,"column":385,"offset":3571},"end":{"line":33,"column":395,"offset":3581},"indent":[]}}],"position":{"start":{"line":33,"column":384,"offset":3570},"end":{"line":33,"column":438,"offset":3624},"indent":[]}},{"type":"text","value":" it will be done automatically, using ","position":{"start":{"line":33,"column":438,"offset":3624},"end":{"line":33,"column":476,"offset":3662},"indent":[]}},{"type":"link","title":null,"url":"https://webpack.js.org/guides/production/","children":[{"type":"text","value":"Webpack ","position":{"start":{"line":33,"column":477,"offset":3663},"end":{"line":33,"column":485,"offset":3671},"indent":[]}}],"position":{"start":{"line":33,"column":476,"offset":3662},"end":{"line":33,"column":529,"offset":3715},"indent":[]}},{"type":"text","value":"will also allow you to do this. Otherwise there are some online tools like ","position":{"start":{"line":33,"column":529,"offset":3715},"end":{"line":33,"column":604,"offset":3790},"indent":[]}},{"type":"link","title":null,"url":"https://jscompress.com/","children":[{"type":"text","value":"JSCompress ","position":{"start":{"line":33,"column":605,"offset":3791},"end":{"line":33,"column":616,"offset":3802},"indent":[]}}],"position":{"start":{"line":33,"column":604,"offset":3790},"end":{"line":33,"column":642,"offset":3828},"indent":[]}},{"type":"text","value":"or ","position":{"start":{"line":33,"column":642,"offset":3828},"end":{"line":33,"column":645,"offset":3831},"indent":[]}},{"type":"link","title":null,"url":"https://cssminifier.com/","children":[{"type":"text","value":"CSSMinifier ","position":{"start":{"line":33,"column":646,"offset":3832},"end":{"line":33,"column":658,"offset":3844},"indent":[]}}],"position":{"start":{"line":33,"column":645,"offset":3831},"end":{"line":33,"column":685,"offset":3871},"indent":[]}},{"type":"text","value":"that you can upload your code to.","position":{"start":{"line":33,"column":685,"offset":3871},"end":{"line":33,"column":718,"offset":3904},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":3187},"end":{"line":33,"column":718,"offset":3904},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Design Versus Performance","position":{"start":{"line":35,"column":5,"offset":3910},"end":{"line":35,"column":30,"offset":3935},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":3906},"end":{"line":35,"column":30,"offset":3935},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Whilst design is undoubtedly a major aspect to a website’s overall success, both developers and designers must work together to compromise and make a mutually beneficial trade-off between design and performance. The classic example is fonts. Take the two screenshots of a simple website below.","position":{"start":{"line":37,"column":1,"offset":3937},"end":{"line":37,"column":294,"offset":4230},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":3937},"end":{"line":37,"column":294,"offset":4230},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://res.cloudinary.com/patricoferris/image/upload/v1532780050/pf2018/blogposts/28-07-2018/Helvetica.png","alt":"The example website using Helvetica Font (commonly found on many computers) — check [this](https://css-tricks.com/snippets/css/system-font-stack/) link for common system fonts","position":{"start":{"line":39,"column":1,"offset":4232},"end":{"line":39,"column":288,"offset":4519},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":39,"column":288,"offset":4519},"end":{"line":40,"column":1,"offset":4520},"indent":[1]}},{"type":"emphasis","children":[{"type":"text","value":"The example website using Helvetica Font (commonly found on many computers) — check ","position":{"start":{"line":40,"column":2,"offset":4521},"end":{"line":40,"column":86,"offset":4605},"indent":[]}},{"type":"link","title":null,"url":"https://css-tricks.com/snippets/css/system-font-stack/","children":[{"type":"text","value":"this","position":{"start":{"line":40,"column":87,"offset":4606},"end":{"line":40,"column":91,"offset":4610},"indent":[]}}],"position":{"start":{"line":40,"column":86,"offset":4605},"end":{"line":40,"column":148,"offset":4667},"indent":[]}},{"type":"text","value":" link for common system fonts","position":{"start":{"line":40,"column":148,"offset":4667},"end":{"line":40,"column":177,"offset":4696},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":4520},"end":{"line":40,"column":178,"offset":4697},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":4232},"end":{"line":40,"column":178,"offset":4697},"indent":[1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://cdn-images-1.medium.com/max/5760/1*8ciuJNBdqMhlLSaOpNUXow.png","alt":"The example website using Roboto Font (designed by Google and linked from [Google Fonts](https://fonts.google.com/?selection.family=Roboto))","position":{"start":{"line":42,"column":1,"offset":4699},"end":{"line":42,"column":215,"offset":4913},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"The example website using Roboto Font (designed by Google and linked from ","position":{"start":{"line":42,"column":216,"offset":4914},"end":{"line":42,"column":290,"offset":4988},"indent":[]}},{"type":"link","title":null,"url":"https://fonts.google.com/?selection.family=Roboto","children":[{"type":"text","value":"Google Fonts","position":{"start":{"line":42,"column":291,"offset":4989},"end":{"line":42,"column":303,"offset":5001},"indent":[]}}],"position":{"start":{"line":42,"column":290,"offset":4988},"end":{"line":42,"column":355,"offset":5053},"indent":[]}},{"type":"text","value":")","position":{"start":{"line":42,"column":355,"offset":5053},"end":{"line":42,"column":356,"offset":5054},"indent":[]}}],"position":{"start":{"line":42,"column":215,"offset":4913},"end":{"line":42,"column":357,"offset":5055},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":4699},"end":{"line":42,"column":357,"offset":5055},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Before critiquing my questionable design skills take a moment to appreciate that these two fonts are very similar — yet the loading time for a website for the Roboto font was 0.22 seconds as compared with 0.17 for Helvetica. Whilst not that significant, using lots of custom fonts will slow down your website, although using Google Fonts’ API will help keep your website optimised. As an over-the-top example, linking 20 different fonts from the Google API increased the load time to 0.87 seconds.","position":{"start":{"line":44,"column":1,"offset":5057},"end":{"line":44,"column":498,"offset":5554},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":5057},"end":{"line":44,"column":498,"offset":5554},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Inlining your JavaScript and CSS","position":{"start":{"line":46,"column":5,"offset":5560},"end":{"line":46,"column":37,"offset":5592},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":5556},"end":{"line":46,"column":37,"offset":5592},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For each individual document or component of your website, when the parser reaches the script tag or link tag it sends and HTTP request for that document and if not stated differently, these will be blocking actions. What this means is your machine is parsing the HTML document getting the words to display in your browser but if it hits the script tag with the attribute src='js/main.js' for example, it will block the parsing and load in that file. This is where as a developer you need to be clever about where in the document you place things.","position":{"start":{"line":48,"column":1,"offset":5594},"end":{"line":48,"column":548,"offset":6141},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":5594},"end":{"line":48,"column":548,"offset":6141},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Whilst it may not ultimately affect the loading time of your website, it can affect the order in which things are loaded. Again we’ll be using the un-minified p5.js library to simulate a large JavaScript file and load it in different places to see how it affects our user experience.","position":{"start":{"line":50,"column":1,"offset":6143},"end":{"line":50,"column":284,"offset":6426},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":6143},"end":{"line":50,"column":284,"offset":6426},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://cdn-images-1.medium.com/max/2780/1*h_3GogfkaahcXCO9a43CPA.gif","alt":"Refreshing website with the script tag inserted at the bottom of the body tag","position":{"start":{"line":52,"column":1,"offset":6428},"end":{"line":52,"column":152,"offset":6579},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Refreshing website with the script tag inserted at the bottom of the body tag","position":{"start":{"line":52,"column":153,"offset":6580},"end":{"line":52,"column":230,"offset":6657},"indent":[]}}],"position":{"start":{"line":52,"column":152,"offset":6579},"end":{"line":52,"column":231,"offset":6658},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":6428},"end":{"line":52,"column":231,"offset":6658},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://cdn-images-1.medium.com/max/2780/1*xLOq5r4erQAwb4Au_hB-Ww.gif","alt":"Refreshing website with the script tag inserted at the top of the body tag","position":{"start":{"line":54,"column":1,"offset":6660},"end":{"line":54,"column":149,"offset":6808},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Refreshing website with the script tag inserted at the top of the body tag","position":{"start":{"line":54,"column":150,"offset":6809},"end":{"line":54,"column":224,"offset":6883},"indent":[]}}],"position":{"start":{"line":54,"column":149,"offset":6808},"end":{"line":54,"column":225,"offset":6884},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":6660},"end":{"line":54,"column":225,"offset":6884},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Whilst the load times were similar for both cases — the user experience is far better by placing the script at the body tag allowing the HTML to be parsed before the JavaScript giving the user the website content immediately!","position":{"start":{"line":56,"column":1,"offset":6886},"end":{"line":56,"column":226,"offset":7111},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":6886},"end":{"line":56,"column":226,"offset":7111},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In the same vein CSS can also be render-blocking especially because more often than not it is linked in the head tag of your HTML document before the body. But if we want our user to see the content in the quickest time we don’t want to be loading CSS for the footer of our document which the user won’t see until they’ve scrolled to the bottom. In fact, we don’t want to load any CSS in that the user can’t immediately see when the page first loads on their device.","position":{"start":{"line":58,"column":1,"offset":7113},"end":{"line":58,"column":467,"offset":7579},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":7113},"end":{"line":58,"column":467,"offset":7579},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The CSS that you need is often called the ","position":{"start":{"line":60,"column":1,"offset":7581},"end":{"line":60,"column":43,"offset":7623},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Critical CSS","position":{"start":{"line":60,"column":44,"offset":7624},"end":{"line":60,"column":56,"offset":7636},"indent":[]}}],"position":{"start":{"line":60,"column":43,"offset":7623},"end":{"line":60,"column":57,"offset":7637},"indent":[]}},{"type":"text","value":". Finding it for yourself would be a headache. It will be different for different devices, meaning you would have to check manually for all possible devices. Lucky for us we have (if you’re using ","position":{"start":{"line":60,"column":57,"offset":7637},"end":{"line":60,"column":253,"offset":7833},"indent":[]}},{"type":"link","title":null,"url":"https://nodejs.org/en/","children":[{"type":"text","value":"Node.js","position":{"start":{"line":60,"column":254,"offset":7834},"end":{"line":60,"column":261,"offset":7841},"indent":[]}}],"position":{"start":{"line":60,"column":253,"offset":7833},"end":{"line":60,"column":286,"offset":7866},"indent":[]}},{"type":"text","value":") ","position":{"start":{"line":60,"column":286,"offset":7866},"end":{"line":60,"column":288,"offset":7868},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/addyosmani/critical","children":[{"type":"text","value":"Critical","position":{"start":{"line":60,"column":289,"offset":7869},"end":{"line":60,"column":297,"offset":7877},"indent":[]}}],"position":{"start":{"line":60,"column":288,"offset":7868},"end":{"line":60,"column":338,"offset":7918},"indent":[]}},{"type":"text","value":". This helpful package does the CSS inlining for us and all we do is add some code to a Javascript file. Here’s a code snippet from the Github page.","position":{"start":{"line":60,"column":338,"offset":7918},"end":{"line":60,"column":486,"offset":8066},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":7581},"end":{"line":60,"column":486,"offset":8066},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","position":{"start":{"line":62,"column":1,"offset":8068},"end":{"line":73,"column":4,"offset":8329},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Using the generate function, we supply it with a JavaScript object with some values defined. base is where we’re going to save our src and dest (our project folder usually). What’s great is now we just supply an array of dimensions and the code will compute the critical CSS for each and inline that code into our head tag.","position":{"start":{"line":75,"column":1,"offset":8331},"end":{"line":75,"column":324,"offset":8654},"indent":[]}}],"position":{"start":{"line":75,"column":1,"offset":8331},"end":{"line":75,"column":324,"offset":8654},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Async and Defer","position":{"start":{"line":77,"column":5,"offset":8660},"end":{"line":77,"column":20,"offset":8675},"indent":[]}}],"position":{"start":{"line":77,"column":1,"offset":8656},"end":{"line":77,"column":20,"offset":8675},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Again, we come back to this idea of render-blocking and how best we should implement this for our website. When you have a plain script tag in your HTML it blocks the HTML from loading whilst the JavaScript loads ","position":{"start":{"line":79,"column":1,"offset":8677},"end":{"line":79,"column":214,"offset":8890},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"and","position":{"start":{"line":79,"column":216,"offset":8892},"end":{"line":79,"column":219,"offset":8895},"indent":[]}}],"position":{"start":{"line":79,"column":214,"offset":8890},"end":{"line":79,"column":221,"offset":8897},"indent":[]}},{"type":"text","value":" runs. Async and defer are simple attributes that you can add to your script tags that change the way your JavaScript will be loaded.","position":{"start":{"line":79,"column":221,"offset":8897},"end":{"line":79,"column":354,"offset":9030},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":8677},"end":{"line":79,"column":354,"offset":9030},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Defer essentially “defers” execution of the script until after the HTML has been parsed. A major advantage of this is that you no longer need some $(document).ready() jQuery-style function to make sure the body was loaded before you could manipulate it, which could cut out some of the dependencies on libraries like jQuery which helps reduce load-time.","position":{"start":{"line":81,"column":1,"offset":9032},"end":{"line":81,"column":354,"offset":9385},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":9032},"end":{"line":81,"column":354,"offset":9385},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Async is, unsurprisingly, the asynchronous loading of JavaScript files. What does this mean? Your HTML will continue to be parsed whilst the file is loaded and then whenever its ready the file will be executed. This helps improving user experience whilst viewing your website. Imagine for example you had a JavaScript file for doing some cool graphics. You want the words around this graphic to be parsed until your graphic is ready to be executed. As soon as it is ready, it is executed and we get a more seamless loading of our webpage without missing pieces.","position":{"start":{"line":83,"column":1,"offset":9387},"end":{"line":83,"column":562,"offset":9948},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":9387},"end":{"line":83,"column":562,"offset":9948},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Check this ","position":{"start":{"line":85,"column":1,"offset":9950},"end":{"line":85,"column":12,"offset":9961},"indent":[]}},{"type":"link","title":null,"url":"http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html","children":[{"type":"text","value":"website","position":{"start":{"line":85,"column":13,"offset":9962},"end":{"line":85,"column":20,"offset":9969},"indent":[]}}],"position":{"start":{"line":85,"column":12,"offset":9961},"end":{"line":85,"column":94,"offset":10043},"indent":[]}},{"type":"text","value":" for a really intuitive, graphical representation of this.","position":{"start":{"line":85,"column":94,"offset":10043},"end":{"line":85,"column":152,"offset":10101},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":9950},"end":{"line":85,"column":152,"offset":10101},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Image Optimisation and Media Queries","position":{"start":{"line":87,"column":5,"offset":10107},"end":{"line":87,"column":41,"offset":10143},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":10103},"end":{"line":87,"column":41,"offset":10143},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The cornerstone of all website performance optimisation is the simple rule that, the less data you send to the client, the quicker and better your website will perform. With the plethora of devices on the market capable of viewing websites, there is a growing trend to optimise your website based on the device it is being viewed on.","position":{"start":{"line":89,"column":1,"offset":10145},"end":{"line":89,"column":334,"offset":10478},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":10145},"end":{"line":89,"column":334,"offset":10478},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Media queries are a fairly new tool added to CSS3. With more and more content being consumed using mobile-devices there has been a shift in design thinking towards mobile first. Using media queries you can then add stylings for larger screen sizes.","position":{"start":{"line":91,"column":1,"offset":10480},"end":{"line":91,"column":249,"offset":10728},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":10480},"end":{"line":91,"column":249,"offset":10728},"indent":[]}},{"type":"html","value":"<iframe src=\"https://medium.com/media/2b53ce5004bbba6e65050bf48c9a864b\" frameborder=0></iframe>","position":{"start":{"line":93,"column":1,"offset":10730},"end":{"line":93,"column":96,"offset":10825},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The @media tag starts a new CSS rule, whilst the only keyword stops older browsers that don’t support media queries from using it. The screen keyword applies the rules to screens rather than prints. After that you add the media-feature which supports the and , or and not keywords so you can get as specific as you want. When you’re loading your image you can write code like:","position":{"start":{"line":95,"column":1,"offset":10827},"end":{"line":95,"column":377,"offset":11203},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":10827},"end":{"line":95,"column":377,"offset":11203},"indent":[]}},{"type":"html","lang":"css","value":"<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"></code></pre>\n      </div>","position":{"start":{"line":97,"column":1,"offset":11205},"end":{"line":99,"column":4,"offset":11216},"indent":[1,1]}},{"type":"html","value":"<iframe src=\"https://medium.com/media/ecbcd475236339fbe45efdd97bfcdeed\" frameborder=0></iframe>","position":{"start":{"line":100,"column":1,"offset":11217},"end":{"line":100,"column":96,"offset":11312},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This isn’t necessarily the best or optimal approach for image optimisation. Luckily we have other options. ","position":{"start":{"line":102,"column":1,"offset":11314},"end":{"line":102,"column":108,"offset":11421},"indent":[]}},{"type":"link","title":null,"url":"https://www.imgix.com/","children":[{"type":"text","value":"Imgix","position":{"start":{"line":102,"column":109,"offset":11422},"end":{"line":102,"column":114,"offset":11427},"indent":[]}}],"position":{"start":{"line":102,"column":108,"offset":11421},"end":{"line":102,"column":139,"offset":11452},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":102,"column":139,"offset":11452},"end":{"line":102,"column":144,"offset":11457},"indent":[]}},{"type":"link","title":null,"url":"https://cloudinary.com/","children":[{"type":"text","value":"Cloudinary","position":{"start":{"line":102,"column":145,"offset":11458},"end":{"line":102,"column":155,"offset":11468},"indent":[]}}],"position":{"start":{"line":102,"column":144,"offset":11457},"end":{"line":102,"column":181,"offset":11494},"indent":[]}},{"type":"text","value":" are two ways you can help optimise your site for the right device. Imgix is a Content Delivery Network (CDN) for images with a lot of cool features. A CDN simply takes your files and spreads them across the globe so that someone in a different country doesn’t have to wait for your files on your server to make it all the way to them. This ","position":{"start":{"line":102,"column":181,"offset":11494},"end":{"line":102,"column":522,"offset":11835},"indent":[]}},{"type":"link","title":null,"url":"https://docs.imgix.com/tutorials/responsive-images-srcset-imgix","children":[{"type":"text","value":"tutorial","position":{"start":{"line":102,"column":523,"offset":11836},"end":{"line":102,"column":531,"offset":11844},"indent":[]}}],"position":{"start":{"line":102,"column":522,"offset":11835},"end":{"line":102,"column":597,"offset":11910},"indent":[]}},{"type":"text","value":" goes through how to use Imgix for different device pixel ratios. Cloudinary is a similar service, and their ","position":{"start":{"line":102,"column":597,"offset":11910},"end":{"line":102,"column":706,"offset":12019},"indent":[]}},{"type":"link","title":null,"url":"https://cloudinary.com/documentation/image_optimization","children":[{"type":"text","value":"tutorial ","position":{"start":{"line":102,"column":707,"offset":12020},"end":{"line":102,"column":716,"offset":12029},"indent":[]}}],"position":{"start":{"line":102,"column":706,"offset":12019},"end":{"line":102,"column":774,"offset":12087},"indent":[]}},{"type":"text","value":"will take you through the importance of optimisation and how to achieve it will their incredible services. Below is a small example showing how easy it is to use Cloudinary straight in the HTML markup.","position":{"start":{"line":102,"column":774,"offset":12087},"end":{"line":102,"column":975,"offset":12288},"indent":[]}}],"position":{"start":{"line":102,"column":1,"offset":11314},"end":{"line":102,"column":975,"offset":12288},"indent":[]}},{"type":"html","value":"<iframe src=\"https://medium.com/media/98868354e5bf607d317496f64ddec2a2\" frameborder=0></iframe>","position":{"start":{"line":104,"column":1,"offset":12290},"end":{"line":104,"column":96,"offset":12385},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As a last point on image optimisation, the format you use can have a large impact on file size. Some files contain lots of metadata which you don’t want to be serving to your client — ","position":{"start":{"line":106,"column":1,"offset":12387},"end":{"line":106,"column":185,"offset":12571},"indent":[]}},{"type":"link","title":null,"url":"https://www.sno.phy.queensu.ca/~phil/exiftool/","children":[{"type":"text","value":"ExifTool","position":{"start":{"line":106,"column":186,"offset":12572},"end":{"line":106,"column":194,"offset":12580},"indent":[]}}],"position":{"start":{"line":106,"column":185,"offset":12571},"end":{"line":106,"column":243,"offset":12629},"indent":[]}},{"type":"text","value":" is a commonly used command-line application that can help you trim down those files sizes. On top of this, Scalable Vector Graphics (SVG) are a web-standard developed by W3C that offers XML-based vector graphics. This means they have infinite resolution unlike PNG or JPG files. It also makes them highly versatile, easily editable and can even be animated. At the end of the day SVGs are just code and so the file sizes tend to be small. For more reasons to use them, check out this ","position":{"start":{"line":106,"column":243,"offset":12629},"end":{"line":106,"column":728,"offset":13114},"indent":[]}},{"type":"link","title":null,"url":"https://watb.co.uk/5-reasons-you-should-be-using-svgs-over-pngs/","children":[{"type":"text","value":"article","position":{"start":{"line":106,"column":729,"offset":13115},"end":{"line":106,"column":736,"offset":13122},"indent":[]}}],"position":{"start":{"line":106,"column":728,"offset":13114},"end":{"line":106,"column":803,"offset":13189},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":106,"column":803,"offset":13189},"end":{"line":106,"column":804,"offset":13190},"indent":[]}}],"position":{"start":{"line":106,"column":1,"offset":12387},"end":{"line":106,"column":804,"offset":13190},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":108,"column":5,"offset":13196},"end":{"line":108,"column":15,"offset":13206},"indent":[]}}],"position":{"start":{"line":108,"column":1,"offset":13192},"end":{"line":108,"column":15,"offset":13206},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We’ve only scratched the surface of what’s possible for website optimisation. There are many tools you can use to help you stream-line this process like ","position":{"start":{"line":110,"column":1,"offset":13208},"end":{"line":110,"column":154,"offset":13361},"indent":[]}},{"type":"link","title":null,"url":"https://webpack.js.org/","children":[{"type":"text","value":"Webpack","position":{"start":{"line":110,"column":155,"offset":13362},"end":{"line":110,"column":162,"offset":13369},"indent":[]}}],"position":{"start":{"line":110,"column":154,"offset":13361},"end":{"line":110,"column":188,"offset":13395},"indent":[]}},{"type":"text","value":" for bundling or static-site generators like ","position":{"start":{"line":110,"column":188,"offset":13395},"end":{"line":110,"column":233,"offset":13440},"indent":[]}},{"type":"link","title":null,"url":"https://www.gatsbyjs.org/","children":[{"type":"text","value":"Gatsby","position":{"start":{"line":110,"column":234,"offset":13441},"end":{"line":110,"column":240,"offset":13447},"indent":[]}}],"position":{"start":{"line":110,"column":233,"offset":13440},"end":{"line":110,"column":268,"offset":13475},"indent":[]}},{"type":"text","value":". ","position":{"start":{"line":110,"column":268,"offset":13475},"end":{"line":110,"column":270,"offset":13477},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking","children":[{"type":"text","value":"Tree shaking","position":{"start":{"line":110,"column":271,"offset":13478},"end":{"line":110,"column":283,"offset":13490},"indent":[]}}],"position":{"start":{"line":110,"column":270,"offset":13477},"end":{"line":110,"column":348,"offset":13555},"indent":[]}},{"type":"text","value":" is another commonly used technique to remove excess, unused modules lying around your website.","position":{"start":{"line":110,"column":348,"offset":13555},"end":{"line":110,"column":443,"offset":13650},"indent":[]}}],"position":{"start":{"line":110,"column":1,"offset":13208},"end":{"line":110,"column":443,"offset":13650},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Hopefully this article has touched on some useful techniques you can use on your next site to help improve its performance. Happy coding!","position":{"start":{"line":112,"column":1,"offset":13652},"end":{"line":112,"column":138,"offset":13789},"indent":[]}}],"position":{"start":{"line":112,"column":1,"offset":13652},"end":{"line":112,"column":138,"offset":13789},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A big thank you to ","position":{"start":{"line":114,"column":1,"offset":13791},"end":{"line":114,"column":20,"offset":13810},"indent":[]}},{"type":"link","title":null,"url":"undefined","children":[{"type":"text","value":"Christian Silver","position":{"start":{"line":114,"column":21,"offset":13811},"end":{"line":114,"column":37,"offset":13827},"indent":[]}}],"position":{"start":{"line":114,"column":20,"offset":13810},"end":{"line":114,"column":49,"offset":13839},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":114,"column":49,"offset":13839},"end":{"line":114,"column":54,"offset":13844},"indent":[]}},{"type":"link","title":null,"url":"undefined","children":[{"type":"text","value":"Charlie Crisp","position":{"start":{"line":114,"column":55,"offset":13845},"end":{"line":114,"column":68,"offset":13858},"indent":[]}}],"position":{"start":{"line":114,"column":54,"offset":13844},"end":{"line":114,"column":80,"offset":13870},"indent":[]}},{"type":"text","value":" for editing this post and providing extremely useful advice and extra content to make it even better.","position":{"start":{"line":114,"column":80,"offset":13870},"end":{"line":114,"column":182,"offset":13972},"indent":[]}}],"position":{"start":{"line":114,"column":1,"offset":13791},"end":{"line":114,"column":182,"offset":13972},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":115,"column":1,"offset":13973}}}},{"id":"transformer-remark-markdown-html-ast-9d0d77971f9875c023af116cde8edf96-gatsby-remark-imagesgatsby-remark-prismjs-","value":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/patricoferris/image/upload/v1532781201/pf2018/blogposts/28-07-2018/website_optimisation_2.png","alt":"Optimising your Website"},"children":[],"position":{"start":{"line":7,"column":1,"offset":154},"end":{"line":7,"column":149,"offset":302}}},{"type":"text","value":"\nInspired by a ","position":{"start":{"line":7,"column":149,"offset":302},"end":{"line":8,"column":15,"offset":317}}},{"type":"element","tagName":"a","properties":{"href":"https://syntax.fm/"},"children":[{"type":"text","value":"Syntax","position":{"start":{"line":8,"column":16,"offset":318},"end":{"line":8,"column":22,"offset":324}}}],"position":{"start":{"line":8,"column":15,"offset":317},"end":{"line":8,"column":43,"offset":345}}},{"type":"text","value":" podcast, I got really interested in website optimisation. It can often be an overlooked aspect in web development with more focus on design and functionality, I realised my number one priority whenever I visited a website is load speed. My attention is a website’s number one goal, lose it and they lose all potential ad revenue or possibility to give me whatever information I was looking for. ","position":{"start":{"line":8,"column":43,"offset":345},"end":{"line":8,"column":439,"offset":741}}},{"type":"element","tagName":"a","properties":{"href":"https://developers.google.com/web/fundamentals/performance/get-started/"},"children":[{"type":"text","value":"Many seem to agree. 53% of users abandon websites that take more than 3 seconds to load","position":{"start":{"line":8,"column":440,"offset":742},"end":{"line":8,"column":527,"offset":829}}}],"position":{"start":{"line":8,"column":439,"offset":741},"end":{"line":8,"column":601,"offset":903}}},{"type":"text","value":". No amount of fancy graphics or parallax scrolling that appears five seconds after someone’s clicked will hide the slow loading times.","position":{"start":{"line":8,"column":601,"offset":903},"end":{"line":8,"column":736,"offset":1038}}}],"position":{"start":{"line":7,"column":1,"offset":154},"end":{"line":8,"column":736,"offset":1038}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The aim of this article is to give a broad overview of the concepts and ideas behind optimising your website, experienced developers are likely already using things like Webpack (a module bundler) among other tools to speed-up their sites.","position":{"start":{"line":10,"column":1,"offset":1040},"end":{"line":10,"column":240,"offset":1279}}}],"position":{"start":{"line":10,"column":1,"offset":1040},"end":{"line":10,"column":240,"offset":1279}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For testing load-times I will be using the ","position":{"start":{"line":12,"column":1,"offset":1281},"end":{"line":12,"column":44,"offset":1324}}},{"type":"element","tagName":"a","properties":{"href":"https://chrome.google.com/webstore/detail/page-load-time/fploionmjgeclbkemipmkogoaohcdbig?hl=en"},"children":[{"type":"text","value":"Page Load Time ","position":{"start":{"line":12,"column":45,"offset":1325},"end":{"line":12,"column":60,"offset":1340}}}],"position":{"start":{"line":12,"column":44,"offset":1324},"end":{"line":12,"column":158,"offset":1438}}},{"type":"text","value":"Chrome extension. There are a few ways to measure website loading time including: ","position":{"start":{"line":12,"column":158,"offset":1438},"end":{"line":12,"column":240,"offset":1520}}},{"type":"element","tagName":"a","properties":{"href":"https://developers.google.com/web/tools/chrome-user-experience-report/"},"children":[{"type":"text","value":"first paint, first meaning paint, DOMContentLoaded","position":{"start":{"line":12,"column":241,"offset":1521},"end":{"line":12,"column":291,"offset":1571}}}],"position":{"start":{"line":12,"column":240,"offset":1520},"end":{"line":12,"column":364,"offset":1644}}},{"type":"text","value":" etc. For a more detailed look into what this timer measures, check out the Github repository below.\n","position":{"start":{"line":12,"column":364,"offset":1644},"end":{"line":13,"column":1,"offset":1745}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/alex-vv/chrome-load-timer"},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"alex-vv/chrome-load-timer","position":{"start":{"line":13,"column":4,"offset":1748},"end":{"line":13,"column":29,"offset":1773}}}],"position":{"start":{"line":13,"column":2,"offset":1746},"end":{"line":13,"column":31,"offset":1775}}},{"type":"text","value":"\n","position":{"start":{"line":13,"column":31,"offset":1775},"end":{"line":14,"column":1,"offset":1776}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"chrome-load-timer - Google Chrome extension to measure page load time and display it in the toolbar","position":{"start":{"line":14,"column":2,"offset":1777},"end":{"line":14,"column":101,"offset":1876}}}],"position":{"start":{"line":14,"column":1,"offset":1776},"end":{"line":14,"column":102,"offset":1877}}},{"type":"text","value":"github.com","position":{"start":{"line":14,"column":102,"offset":1877},"end":{"line":14,"column":112,"offset":1887}}}],"position":{"start":{"line":13,"column":1,"offset":1745},"end":{"line":14,"column":159,"offset":1934}}}],"position":{"start":{"line":12,"column":1,"offset":1281},"end":{"line":14,"column":159,"offset":1934}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Use Minified Stylesheets and Scripts","position":{"start":{"line":16,"column":7,"offset":1942},"end":{"line":16,"column":43,"offset":1978}}}],"position":{"start":{"line":16,"column":5,"offset":1940},"end":{"line":16,"column":45,"offset":1980}}}],"position":{"start":{"line":16,"column":1,"offset":1936},"end":{"line":16,"column":45,"offset":1980}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You would be amazed at how much performance can be gained by this simple trick. What is a minified document? When we write code it is never our job to make it optimised for the computer, instead our golden rule is to make it readable to humans. This improves readability, cuts down on debug time and makes it easier to maintain. However, to achieve this we often add extra spacing which costs us precious space. Minifying the code is trimming all this fat from what we’ve written to have code that produces the same result but is far more difficult to read and maintain. This is okay though, because a computer has no problem deciphering it. Take the following code for example.","position":{"start":{"line":18,"column":1,"offset":1982},"end":{"line":18,"column":679,"offset":2660}}}],"position":{"start":{"line":18,"column":1,"offset":1982},"end":{"line":18,"column":679,"offset":2660}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","position":{"start":{"line":20,"column":1,"offset":2662},"end":{"line":29,"column":4,"offset":2921}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Notice how, wherever possible, our line-breaks and spaces are gone. On top of that, the code in the for-loop is only one line so there’s no need for the curly braces which extends our code over three lines when it can be done in one. Does this make a difference?","position":{"start":{"line":31,"column":1,"offset":2923},"end":{"line":31,"column":263,"offset":3185}}}],"position":{"start":{"line":31,"column":1,"offset":2923},"end":{"line":31,"column":263,"offset":3185}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I tried it out on simple website that just had one script tag being loaded in for the graphics library ","position":{"start":{"line":33,"column":1,"offset":3187},"end":{"line":33,"column":104,"offset":3290}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/"},"children":[{"type":"text","value":"p5.js","position":{"start":{"line":33,"column":105,"offset":3291},"end":{"line":33,"column":110,"offset":3296}}}],"position":{"start":{"line":33,"column":104,"offset":3290},"end":{"line":33,"column":130,"offset":3316}}},{"type":"text","value":". Using the non-minified CDN link I got a load time of 0.25 seconds. Using the minified version I got a markedly improved load time of 0.08 seconds. Depending on what your website project is, there are a few ways to automatically minify code. If it is a ","position":{"start":{"line":33,"column":130,"offset":3316},"end":{"line":33,"column":384,"offset":3570}}},{"type":"element","tagName":"a","properties":{"href":"https://guide.meteor.com/build-tool.html"},"children":[{"type":"text","value":"Meteor app","position":{"start":{"line":33,"column":385,"offset":3571},"end":{"line":33,"column":395,"offset":3581}}}],"position":{"start":{"line":33,"column":384,"offset":3570},"end":{"line":33,"column":438,"offset":3624}}},{"type":"text","value":" it will be done automatically, using ","position":{"start":{"line":33,"column":438,"offset":3624},"end":{"line":33,"column":476,"offset":3662}}},{"type":"element","tagName":"a","properties":{"href":"https://webpack.js.org/guides/production/"},"children":[{"type":"text","value":"Webpack ","position":{"start":{"line":33,"column":477,"offset":3663},"end":{"line":33,"column":485,"offset":3671}}}],"position":{"start":{"line":33,"column":476,"offset":3662},"end":{"line":33,"column":529,"offset":3715}}},{"type":"text","value":"will also allow you to do this. Otherwise there are some online tools like ","position":{"start":{"line":33,"column":529,"offset":3715},"end":{"line":33,"column":604,"offset":3790}}},{"type":"element","tagName":"a","properties":{"href":"https://jscompress.com/"},"children":[{"type":"text","value":"JSCompress ","position":{"start":{"line":33,"column":605,"offset":3791},"end":{"line":33,"column":616,"offset":3802}}}],"position":{"start":{"line":33,"column":604,"offset":3790},"end":{"line":33,"column":642,"offset":3828}}},{"type":"text","value":"or ","position":{"start":{"line":33,"column":642,"offset":3828},"end":{"line":33,"column":645,"offset":3831}}},{"type":"element","tagName":"a","properties":{"href":"https://cssminifier.com/"},"children":[{"type":"text","value":"CSSMinifier ","position":{"start":{"line":33,"column":646,"offset":3832},"end":{"line":33,"column":658,"offset":3844}}}],"position":{"start":{"line":33,"column":645,"offset":3831},"end":{"line":33,"column":685,"offset":3871}}},{"type":"text","value":"that you can upload your code to.","position":{"start":{"line":33,"column":685,"offset":3871},"end":{"line":33,"column":718,"offset":3904}}}],"position":{"start":{"line":33,"column":1,"offset":3187},"end":{"line":33,"column":718,"offset":3904}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Design Versus Performance","position":{"start":{"line":35,"column":5,"offset":3910},"end":{"line":35,"column":30,"offset":3935}}}],"position":{"start":{"line":35,"column":1,"offset":3906},"end":{"line":35,"column":30,"offset":3935}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Whilst design is undoubtedly a major aspect to a website’s overall success, both developers and designers must work together to compromise and make a mutually beneficial trade-off between design and performance. The classic example is fonts. Take the two screenshots of a simple website below.","position":{"start":{"line":37,"column":1,"offset":3937},"end":{"line":37,"column":294,"offset":4230}}}],"position":{"start":{"line":37,"column":1,"offset":3937},"end":{"line":37,"column":294,"offset":4230}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/patricoferris/image/upload/v1532780050/pf2018/blogposts/28-07-2018/Helvetica.png","alt":"The example website using Helvetica Font (commonly found on many computers) — check [this](https://css-tricks.com/snippets/css/system-font-stack/) link for common system fonts"},"children":[],"position":{"start":{"line":39,"column":1,"offset":4232},"end":{"line":39,"column":288,"offset":4519}}},{"type":"text","value":"\n","position":{"start":{"line":39,"column":288,"offset":4519},"end":{"line":40,"column":1,"offset":4520}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The example website using Helvetica Font (commonly found on many computers) — check ","position":{"start":{"line":40,"column":2,"offset":4521},"end":{"line":40,"column":86,"offset":4605}}},{"type":"element","tagName":"a","properties":{"href":"https://css-tricks.com/snippets/css/system-font-stack/"},"children":[{"type":"text","value":"this","position":{"start":{"line":40,"column":87,"offset":4606},"end":{"line":40,"column":91,"offset":4610}}}],"position":{"start":{"line":40,"column":86,"offset":4605},"end":{"line":40,"column":148,"offset":4667}}},{"type":"text","value":" link for common system fonts","position":{"start":{"line":40,"column":148,"offset":4667},"end":{"line":40,"column":177,"offset":4696}}}],"position":{"start":{"line":40,"column":1,"offset":4520},"end":{"line":40,"column":178,"offset":4697}}}],"position":{"start":{"line":39,"column":1,"offset":4232},"end":{"line":40,"column":178,"offset":4697}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://cdn-images-1.medium.com/max/5760/1*8ciuJNBdqMhlLSaOpNUXow.png","alt":"The example website using Roboto Font (designed by Google and linked from [Google Fonts](https://fonts.google.com/?selection.family=Roboto))"},"children":[],"position":{"start":{"line":42,"column":1,"offset":4699},"end":{"line":42,"column":215,"offset":4913}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The example website using Roboto Font (designed by Google and linked from ","position":{"start":{"line":42,"column":216,"offset":4914},"end":{"line":42,"column":290,"offset":4988}}},{"type":"element","tagName":"a","properties":{"href":"https://fonts.google.com/?selection.family=Roboto"},"children":[{"type":"text","value":"Google Fonts","position":{"start":{"line":42,"column":291,"offset":4989},"end":{"line":42,"column":303,"offset":5001}}}],"position":{"start":{"line":42,"column":290,"offset":4988},"end":{"line":42,"column":355,"offset":5053}}},{"type":"text","value":")","position":{"start":{"line":42,"column":355,"offset":5053},"end":{"line":42,"column":356,"offset":5054}}}],"position":{"start":{"line":42,"column":215,"offset":4913},"end":{"line":42,"column":357,"offset":5055}}}],"position":{"start":{"line":42,"column":1,"offset":4699},"end":{"line":42,"column":357,"offset":5055}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Before critiquing my questionable design skills take a moment to appreciate that these two fonts are very similar — yet the loading time for a website for the Roboto font was 0.22 seconds as compared with 0.17 for Helvetica. Whilst not that significant, using lots of custom fonts will slow down your website, although using Google Fonts’ API will help keep your website optimised. As an over-the-top example, linking 20 different fonts from the Google API increased the load time to 0.87 seconds.","position":{"start":{"line":44,"column":1,"offset":5057},"end":{"line":44,"column":498,"offset":5554}}}],"position":{"start":{"line":44,"column":1,"offset":5057},"end":{"line":44,"column":498,"offset":5554}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Inlining your JavaScript and CSS","position":{"start":{"line":46,"column":5,"offset":5560},"end":{"line":46,"column":37,"offset":5592}}}],"position":{"start":{"line":46,"column":1,"offset":5556},"end":{"line":46,"column":37,"offset":5592}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For each individual document or component of your website, when the parser reaches the script tag or link tag it sends and HTTP request for that document and if not stated differently, these will be blocking actions. What this means is your machine is parsing the HTML document getting the words to display in your browser but if it hits the script tag with the attribute src='js/main.js' for example, it will block the parsing and load in that file. This is where as a developer you need to be clever about where in the document you place things.","position":{"start":{"line":48,"column":1,"offset":5594},"end":{"line":48,"column":548,"offset":6141}}}],"position":{"start":{"line":48,"column":1,"offset":5594},"end":{"line":48,"column":548,"offset":6141}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Whilst it may not ultimately affect the loading time of your website, it can affect the order in which things are loaded. Again we’ll be using the un-minified p5.js library to simulate a large JavaScript file and load it in different places to see how it affects our user experience.","position":{"start":{"line":50,"column":1,"offset":6143},"end":{"line":50,"column":284,"offset":6426}}}],"position":{"start":{"line":50,"column":1,"offset":6143},"end":{"line":50,"column":284,"offset":6426}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://cdn-images-1.medium.com/max/2780/1*h_3GogfkaahcXCO9a43CPA.gif","alt":"Refreshing website with the script tag inserted at the bottom of the body tag"},"children":[],"position":{"start":{"line":52,"column":1,"offset":6428},"end":{"line":52,"column":152,"offset":6579}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Refreshing website with the script tag inserted at the bottom of the body tag","position":{"start":{"line":52,"column":153,"offset":6580},"end":{"line":52,"column":230,"offset":6657}}}],"position":{"start":{"line":52,"column":152,"offset":6579},"end":{"line":52,"column":231,"offset":6658}}}],"position":{"start":{"line":52,"column":1,"offset":6428},"end":{"line":52,"column":231,"offset":6658}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://cdn-images-1.medium.com/max/2780/1*xLOq5r4erQAwb4Au_hB-Ww.gif","alt":"Refreshing website with the script tag inserted at the top of the body tag"},"children":[],"position":{"start":{"line":54,"column":1,"offset":6660},"end":{"line":54,"column":149,"offset":6808}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Refreshing website with the script tag inserted at the top of the body tag","position":{"start":{"line":54,"column":150,"offset":6809},"end":{"line":54,"column":224,"offset":6883}}}],"position":{"start":{"line":54,"column":149,"offset":6808},"end":{"line":54,"column":225,"offset":6884}}}],"position":{"start":{"line":54,"column":1,"offset":6660},"end":{"line":54,"column":225,"offset":6884}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Whilst the load times were similar for both cases — the user experience is far better by placing the script at the body tag allowing the HTML to be parsed before the JavaScript giving the user the website content immediately!","position":{"start":{"line":56,"column":1,"offset":6886},"end":{"line":56,"column":226,"offset":7111}}}],"position":{"start":{"line":56,"column":1,"offset":6886},"end":{"line":56,"column":226,"offset":7111}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In the same vein CSS can also be render-blocking especially because more often than not it is linked in the head tag of your HTML document before the body. But if we want our user to see the content in the quickest time we don’t want to be loading CSS for the footer of our document which the user won’t see until they’ve scrolled to the bottom. In fact, we don’t want to load any CSS in that the user can’t immediately see when the page first loads on their device.","position":{"start":{"line":58,"column":1,"offset":7113},"end":{"line":58,"column":467,"offset":7579}}}],"position":{"start":{"line":58,"column":1,"offset":7113},"end":{"line":58,"column":467,"offset":7579}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The CSS that you need is often called the ","position":{"start":{"line":60,"column":1,"offset":7581},"end":{"line":60,"column":43,"offset":7623}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Critical CSS","position":{"start":{"line":60,"column":44,"offset":7624},"end":{"line":60,"column":56,"offset":7636}}}],"position":{"start":{"line":60,"column":43,"offset":7623},"end":{"line":60,"column":57,"offset":7637}}},{"type":"text","value":". Finding it for yourself would be a headache. It will be different for different devices, meaning you would have to check manually for all possible devices. Lucky for us we have (if you’re using ","position":{"start":{"line":60,"column":57,"offset":7637},"end":{"line":60,"column":253,"offset":7833}}},{"type":"element","tagName":"a","properties":{"href":"https://nodejs.org/en/"},"children":[{"type":"text","value":"Node.js","position":{"start":{"line":60,"column":254,"offset":7834},"end":{"line":60,"column":261,"offset":7841}}}],"position":{"start":{"line":60,"column":253,"offset":7833},"end":{"line":60,"column":286,"offset":7866}}},{"type":"text","value":") ","position":{"start":{"line":60,"column":286,"offset":7866},"end":{"line":60,"column":288,"offset":7868}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/addyosmani/critical"},"children":[{"type":"text","value":"Critical","position":{"start":{"line":60,"column":289,"offset":7869},"end":{"line":60,"column":297,"offset":7877}}}],"position":{"start":{"line":60,"column":288,"offset":7868},"end":{"line":60,"column":338,"offset":7918}}},{"type":"text","value":". This helpful package does the CSS inlining for us and all we do is add some code to a Javascript file. Here’s a code snippet from the Github page.","position":{"start":{"line":60,"column":338,"offset":7918},"end":{"line":60,"column":486,"offset":8066}}}],"position":{"start":{"line":60,"column":1,"offset":7581},"end":{"line":60,"column":486,"offset":8066}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","position":{"start":{"line":62,"column":1,"offset":8068},"end":{"line":73,"column":4,"offset":8329}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Using the generate function, we supply it with a JavaScript object with some values defined. base is where we’re going to save our src and dest (our project folder usually). What’s great is now we just supply an array of dimensions and the code will compute the critical CSS for each and inline that code into our head tag.","position":{"start":{"line":75,"column":1,"offset":8331},"end":{"line":75,"column":324,"offset":8654}}}],"position":{"start":{"line":75,"column":1,"offset":8331},"end":{"line":75,"column":324,"offset":8654}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Async and Defer","position":{"start":{"line":77,"column":5,"offset":8660},"end":{"line":77,"column":20,"offset":8675}}}],"position":{"start":{"line":77,"column":1,"offset":8656},"end":{"line":77,"column":20,"offset":8675}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Again, we come back to this idea of render-blocking and how best we should implement this for our website. When you have a plain script tag in your HTML it blocks the HTML from loading whilst the JavaScript loads ","position":{"start":{"line":79,"column":1,"offset":8677},"end":{"line":79,"column":214,"offset":8890}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"and","position":{"start":{"line":79,"column":216,"offset":8892},"end":{"line":79,"column":219,"offset":8895}}}],"position":{"start":{"line":79,"column":214,"offset":8890},"end":{"line":79,"column":221,"offset":8897}}},{"type":"text","value":" runs. Async and defer are simple attributes that you can add to your script tags that change the way your JavaScript will be loaded.","position":{"start":{"line":79,"column":221,"offset":8897},"end":{"line":79,"column":354,"offset":9030}}}],"position":{"start":{"line":79,"column":1,"offset":8677},"end":{"line":79,"column":354,"offset":9030}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Defer essentially “defers” execution of the script until after the HTML has been parsed. A major advantage of this is that you no longer need some $(document).ready() jQuery-style function to make sure the body was loaded before you could manipulate it, which could cut out some of the dependencies on libraries like jQuery which helps reduce load-time.","position":{"start":{"line":81,"column":1,"offset":9032},"end":{"line":81,"column":354,"offset":9385}}}],"position":{"start":{"line":81,"column":1,"offset":9032},"end":{"line":81,"column":354,"offset":9385}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Async is, unsurprisingly, the asynchronous loading of JavaScript files. What does this mean? Your HTML will continue to be parsed whilst the file is loaded and then whenever its ready the file will be executed. This helps improving user experience whilst viewing your website. Imagine for example you had a JavaScript file for doing some cool graphics. You want the words around this graphic to be parsed until your graphic is ready to be executed. As soon as it is ready, it is executed and we get a more seamless loading of our webpage without missing pieces.","position":{"start":{"line":83,"column":1,"offset":9387},"end":{"line":83,"column":562,"offset":9948}}}],"position":{"start":{"line":83,"column":1,"offset":9387},"end":{"line":83,"column":562,"offset":9948}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Check this ","position":{"start":{"line":85,"column":1,"offset":9950},"end":{"line":85,"column":12,"offset":9961}}},{"type":"element","tagName":"a","properties":{"href":"http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html"},"children":[{"type":"text","value":"website","position":{"start":{"line":85,"column":13,"offset":9962},"end":{"line":85,"column":20,"offset":9969}}}],"position":{"start":{"line":85,"column":12,"offset":9961},"end":{"line":85,"column":94,"offset":10043}}},{"type":"text","value":" for a really intuitive, graphical representation of this.","position":{"start":{"line":85,"column":94,"offset":10043},"end":{"line":85,"column":152,"offset":10101}}}],"position":{"start":{"line":85,"column":1,"offset":9950},"end":{"line":85,"column":152,"offset":10101}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Image Optimisation and Media Queries","position":{"start":{"line":87,"column":5,"offset":10107},"end":{"line":87,"column":41,"offset":10143}}}],"position":{"start":{"line":87,"column":1,"offset":10103},"end":{"line":87,"column":41,"offset":10143}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The cornerstone of all website performance optimisation is the simple rule that, the less data you send to the client, the quicker and better your website will perform. With the plethora of devices on the market capable of viewing websites, there is a growing trend to optimise your website based on the device it is being viewed on.","position":{"start":{"line":89,"column":1,"offset":10145},"end":{"line":89,"column":334,"offset":10478}}}],"position":{"start":{"line":89,"column":1,"offset":10145},"end":{"line":89,"column":334,"offset":10478}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Media queries are a fairly new tool added to CSS3. With more and more content being consumed using mobile-devices there has been a shift in design thinking towards mobile first. Using media queries you can then add stylings for larger screen sizes.","position":{"start":{"line":91,"column":1,"offset":10480},"end":{"line":91,"column":249,"offset":10728}}}],"position":{"start":{"line":91,"column":1,"offset":10480},"end":{"line":91,"column":249,"offset":10728}}},{"type":"text","value":"\n"},{"type":"raw","value":"<iframe src=\"https://medium.com/media/2b53ce5004bbba6e65050bf48c9a864b\" frameborder=0></iframe>","position":{"start":{"line":93,"column":1,"offset":10730},"end":{"line":93,"column":96,"offset":10825}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The @media tag starts a new CSS rule, whilst the only keyword stops older browsers that don’t support media queries from using it. The screen keyword applies the rules to screens rather than prints. After that you add the media-feature which supports the and , or and not keywords so you can get as specific as you want. When you’re loading your image you can write code like:","position":{"start":{"line":95,"column":1,"offset":10827},"end":{"line":95,"column":377,"offset":11203}}}],"position":{"start":{"line":95,"column":1,"offset":10827},"end":{"line":95,"column":377,"offset":11203}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"></code></pre>\n      </div>","position":{"start":{"line":97,"column":1,"offset":11205},"end":{"line":99,"column":4,"offset":11216}}},{"type":"text","value":"\n"},{"type":"raw","value":"<iframe src=\"https://medium.com/media/ecbcd475236339fbe45efdd97bfcdeed\" frameborder=0></iframe>","position":{"start":{"line":100,"column":1,"offset":11217},"end":{"line":100,"column":96,"offset":11312}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This isn’t necessarily the best or optimal approach for image optimisation. Luckily we have other options. ","position":{"start":{"line":102,"column":1,"offset":11314},"end":{"line":102,"column":108,"offset":11421}}},{"type":"element","tagName":"a","properties":{"href":"https://www.imgix.com/"},"children":[{"type":"text","value":"Imgix","position":{"start":{"line":102,"column":109,"offset":11422},"end":{"line":102,"column":114,"offset":11427}}}],"position":{"start":{"line":102,"column":108,"offset":11421},"end":{"line":102,"column":139,"offset":11452}}},{"type":"text","value":" and ","position":{"start":{"line":102,"column":139,"offset":11452},"end":{"line":102,"column":144,"offset":11457}}},{"type":"element","tagName":"a","properties":{"href":"https://cloudinary.com/"},"children":[{"type":"text","value":"Cloudinary","position":{"start":{"line":102,"column":145,"offset":11458},"end":{"line":102,"column":155,"offset":11468}}}],"position":{"start":{"line":102,"column":144,"offset":11457},"end":{"line":102,"column":181,"offset":11494}}},{"type":"text","value":" are two ways you can help optimise your site for the right device. Imgix is a Content Delivery Network (CDN) for images with a lot of cool features. A CDN simply takes your files and spreads them across the globe so that someone in a different country doesn’t have to wait for your files on your server to make it all the way to them. This ","position":{"start":{"line":102,"column":181,"offset":11494},"end":{"line":102,"column":522,"offset":11835}}},{"type":"element","tagName":"a","properties":{"href":"https://docs.imgix.com/tutorials/responsive-images-srcset-imgix"},"children":[{"type":"text","value":"tutorial","position":{"start":{"line":102,"column":523,"offset":11836},"end":{"line":102,"column":531,"offset":11844}}}],"position":{"start":{"line":102,"column":522,"offset":11835},"end":{"line":102,"column":597,"offset":11910}}},{"type":"text","value":" goes through how to use Imgix for different device pixel ratios. Cloudinary is a similar service, and their ","position":{"start":{"line":102,"column":597,"offset":11910},"end":{"line":102,"column":706,"offset":12019}}},{"type":"element","tagName":"a","properties":{"href":"https://cloudinary.com/documentation/image_optimization"},"children":[{"type":"text","value":"tutorial ","position":{"start":{"line":102,"column":707,"offset":12020},"end":{"line":102,"column":716,"offset":12029}}}],"position":{"start":{"line":102,"column":706,"offset":12019},"end":{"line":102,"column":774,"offset":12087}}},{"type":"text","value":"will take you through the importance of optimisation and how to achieve it will their incredible services. Below is a small example showing how easy it is to use Cloudinary straight in the HTML markup.","position":{"start":{"line":102,"column":774,"offset":12087},"end":{"line":102,"column":975,"offset":12288}}}],"position":{"start":{"line":102,"column":1,"offset":11314},"end":{"line":102,"column":975,"offset":12288}}},{"type":"text","value":"\n"},{"type":"raw","value":"<iframe src=\"https://medium.com/media/98868354e5bf607d317496f64ddec2a2\" frameborder=0></iframe>","position":{"start":{"line":104,"column":1,"offset":12290},"end":{"line":104,"column":96,"offset":12385}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As a last point on image optimisation, the format you use can have a large impact on file size. Some files contain lots of metadata which you don’t want to be serving to your client — ","position":{"start":{"line":106,"column":1,"offset":12387},"end":{"line":106,"column":185,"offset":12571}}},{"type":"element","tagName":"a","properties":{"href":"https://www.sno.phy.queensu.ca/~phil/exiftool/"},"children":[{"type":"text","value":"ExifTool","position":{"start":{"line":106,"column":186,"offset":12572},"end":{"line":106,"column":194,"offset":12580}}}],"position":{"start":{"line":106,"column":185,"offset":12571},"end":{"line":106,"column":243,"offset":12629}}},{"type":"text","value":" is a commonly used command-line application that can help you trim down those files sizes. On top of this, Scalable Vector Graphics (SVG) are a web-standard developed by W3C that offers XML-based vector graphics. This means they have infinite resolution unlike PNG or JPG files. It also makes them highly versatile, easily editable and can even be animated. At the end of the day SVGs are just code and so the file sizes tend to be small. For more reasons to use them, check out this ","position":{"start":{"line":106,"column":243,"offset":12629},"end":{"line":106,"column":728,"offset":13114}}},{"type":"element","tagName":"a","properties":{"href":"https://watb.co.uk/5-reasons-you-should-be-using-svgs-over-pngs/"},"children":[{"type":"text","value":"article","position":{"start":{"line":106,"column":729,"offset":13115},"end":{"line":106,"column":736,"offset":13122}}}],"position":{"start":{"line":106,"column":728,"offset":13114},"end":{"line":106,"column":803,"offset":13189}}},{"type":"text","value":".","position":{"start":{"line":106,"column":803,"offset":13189},"end":{"line":106,"column":804,"offset":13190}}}],"position":{"start":{"line":106,"column":1,"offset":12387},"end":{"line":106,"column":804,"offset":13190}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":108,"column":5,"offset":13196},"end":{"line":108,"column":15,"offset":13206}}}],"position":{"start":{"line":108,"column":1,"offset":13192},"end":{"line":108,"column":15,"offset":13206}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We’ve only scratched the surface of what’s possible for website optimisation. There are many tools you can use to help you stream-line this process like ","position":{"start":{"line":110,"column":1,"offset":13208},"end":{"line":110,"column":154,"offset":13361}}},{"type":"element","tagName":"a","properties":{"href":"https://webpack.js.org/"},"children":[{"type":"text","value":"Webpack","position":{"start":{"line":110,"column":155,"offset":13362},"end":{"line":110,"column":162,"offset":13369}}}],"position":{"start":{"line":110,"column":154,"offset":13361},"end":{"line":110,"column":188,"offset":13395}}},{"type":"text","value":" for bundling or static-site generators like ","position":{"start":{"line":110,"column":188,"offset":13395},"end":{"line":110,"column":233,"offset":13440}}},{"type":"element","tagName":"a","properties":{"href":"https://www.gatsbyjs.org/"},"children":[{"type":"text","value":"Gatsby","position":{"start":{"line":110,"column":234,"offset":13441},"end":{"line":110,"column":240,"offset":13447}}}],"position":{"start":{"line":110,"column":233,"offset":13440},"end":{"line":110,"column":268,"offset":13475}}},{"type":"text","value":". ","position":{"start":{"line":110,"column":268,"offset":13475},"end":{"line":110,"column":270,"offset":13477}}},{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking"},"children":[{"type":"text","value":"Tree shaking","position":{"start":{"line":110,"column":271,"offset":13478},"end":{"line":110,"column":283,"offset":13490}}}],"position":{"start":{"line":110,"column":270,"offset":13477},"end":{"line":110,"column":348,"offset":13555}}},{"type":"text","value":" is another commonly used technique to remove excess, unused modules lying around your website.","position":{"start":{"line":110,"column":348,"offset":13555},"end":{"line":110,"column":443,"offset":13650}}}],"position":{"start":{"line":110,"column":1,"offset":13208},"end":{"line":110,"column":443,"offset":13650}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Hopefully this article has touched on some useful techniques you can use on your next site to help improve its performance. Happy coding!","position":{"start":{"line":112,"column":1,"offset":13652},"end":{"line":112,"column":138,"offset":13789}}}],"position":{"start":{"line":112,"column":1,"offset":13652},"end":{"line":112,"column":138,"offset":13789}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A big thank you to ","position":{"start":{"line":114,"column":1,"offset":13791},"end":{"line":114,"column":20,"offset":13810}}},{"type":"element","tagName":"a","properties":{"href":"undefined"},"children":[{"type":"text","value":"Christian Silver","position":{"start":{"line":114,"column":21,"offset":13811},"end":{"line":114,"column":37,"offset":13827}}}],"position":{"start":{"line":114,"column":20,"offset":13810},"end":{"line":114,"column":49,"offset":13839}}},{"type":"text","value":" and ","position":{"start":{"line":114,"column":49,"offset":13839},"end":{"line":114,"column":54,"offset":13844}}},{"type":"element","tagName":"a","properties":{"href":"undefined"},"children":[{"type":"text","value":"Charlie Crisp","position":{"start":{"line":114,"column":55,"offset":13845},"end":{"line":114,"column":68,"offset":13858}}}],"position":{"start":{"line":114,"column":54,"offset":13844},"end":{"line":114,"column":80,"offset":13870}}},{"type":"text","value":" for editing this post and providing extremely useful advice and extra content to make it even better.","position":{"start":{"line":114,"column":80,"offset":13870},"end":{"line":114,"column":182,"offset":13972}}}],"position":{"start":{"line":114,"column":1,"offset":13791},"end":{"line":114,"column":182,"offset":13972}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":115,"column":1,"offset":13973}}}},{"id":"transformer-remark-markdown-html-9d0d77971f9875c023af116cde8edf96-gatsby-remark-imagesgatsby-remark-prismjs-","value":"<p><img src=\"https://res.cloudinary.com/patricoferris/image/upload/v1532781201/pf2018/blogposts/28-07-2018/website_optimisation_2.png\" alt=\"Optimising your Website\">\nInspired by a <a href=\"https://syntax.fm/\">Syntax</a> podcast, I got really interested in website optimisation. It can often be an overlooked aspect in web development with more focus on design and functionality, I realised my number one priority whenever I visited a website is load speed. My attention is a website’s number one goal, lose it and they lose all potential ad revenue or possibility to give me whatever information I was looking for. <a href=\"https://developers.google.com/web/fundamentals/performance/get-started/\">Many seem to agree. 53% of users abandon websites that take more than 3 seconds to load</a>. No amount of fancy graphics or parallax scrolling that appears five seconds after someone’s clicked will hide the slow loading times.</p>\n<p>The aim of this article is to give a broad overview of the concepts and ideas behind optimising your website, experienced developers are likely already using things like Webpack (a module bundler) among other tools to speed-up their sites.</p>\n<p>For testing load-times I will be using the <a href=\"https://chrome.google.com/webstore/detail/page-load-time/fploionmjgeclbkemipmkogoaohcdbig?hl=en\">Page Load Time </a>Chrome extension. There are a few ways to measure website loading time including: <a href=\"https://developers.google.com/web/tools/chrome-user-experience-report/\">first paint, first meaning paint, DOMContentLoaded</a> etc. For a more detailed look into what this timer measures, check out the Github repository below.\n<a href=\"https://github.com/alex-vv/chrome-load-timer\"><strong>alex-vv/chrome-load-timer</strong>\n<em>chrome-load-timer - Google Chrome extension to measure page load time and display it in the toolbar</em>github.com</a></p>\n<h3><strong>Use Minified Stylesheets and Scripts</strong></h3>\n<p>You would be amazed at how much performance can be gained by this simple trick. What is a minified document? When we write code it is never our job to make it optimised for the computer, instead our golden rule is to make it readable to humans. This improves readability, cuts down on debug time and makes it easier to maintain. However, to achieve this we often add extra spacing which costs us precious space. Minifying the code is trimming all this fat from what we’ve written to have code that produces the same result but is far more difficult to read and maintain. This is okay though, because a computer has no problem deciphering it. Take the following code for example.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Notice how, wherever possible, our line-breaks and spaces are gone. On top of that, the code in the for-loop is only one line so there’s no need for the curly braces which extends our code over three lines when it can be done in one. Does this make a difference?</p>\n<p>I tried it out on simple website that just had one script tag being loaded in for the graphics library <a href=\"https://p5js.org/\">p5.js</a>. Using the non-minified CDN link I got a load time of 0.25 seconds. Using the minified version I got a markedly improved load time of 0.08 seconds. Depending on what your website project is, there are a few ways to automatically minify code. If it is a <a href=\"https://guide.meteor.com/build-tool.html\">Meteor app</a> it will be done automatically, using <a href=\"https://webpack.js.org/guides/production/\">Webpack </a>will also allow you to do this. Otherwise there are some online tools like <a href=\"https://jscompress.com/\">JSCompress </a>or <a href=\"https://cssminifier.com/\">CSSMinifier </a>that you can upload your code to.</p>\n<h3>Design Versus Performance</h3>\n<p>Whilst design is undoubtedly a major aspect to a website’s overall success, both developers and designers must work together to compromise and make a mutually beneficial trade-off between design and performance. The classic example is fonts. Take the two screenshots of a simple website below.</p>\n<p><img src=\"https://res.cloudinary.com/patricoferris/image/upload/v1532780050/pf2018/blogposts/28-07-2018/Helvetica.png\" alt=\"The example website using Helvetica Font (commonly found on many computers) — check [this](https://css-tricks.com/snippets/css/system-font-stack/) link for common system fonts\">\n<em>The example website using Helvetica Font (commonly found on many computers) — check <a href=\"https://css-tricks.com/snippets/css/system-font-stack/\">this</a> link for common system fonts</em></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/5760/1*8ciuJNBdqMhlLSaOpNUXow.png\" alt=\"The example website using Roboto Font (designed by Google and linked from [Google Fonts](https://fonts.google.com/?selection.family=Roboto))\"><em>The example website using Roboto Font (designed by Google and linked from <a href=\"https://fonts.google.com/?selection.family=Roboto\">Google Fonts</a>)</em></p>\n<p>Before critiquing my questionable design skills take a moment to appreciate that these two fonts are very similar — yet the loading time for a website for the Roboto font was 0.22 seconds as compared with 0.17 for Helvetica. Whilst not that significant, using lots of custom fonts will slow down your website, although using Google Fonts’ API will help keep your website optimised. As an over-the-top example, linking 20 different fonts from the Google API increased the load time to 0.87 seconds.</p>\n<h3>Inlining your JavaScript and CSS</h3>\n<p>For each individual document or component of your website, when the parser reaches the script tag or link tag it sends and HTTP request for that document and if not stated differently, these will be blocking actions. What this means is your machine is parsing the HTML document getting the words to display in your browser but if it hits the script tag with the attribute src='js/main.js' for example, it will block the parsing and load in that file. This is where as a developer you need to be clever about where in the document you place things.</p>\n<p>Whilst it may not ultimately affect the loading time of your website, it can affect the order in which things are loaded. Again we’ll be using the un-minified p5.js library to simulate a large JavaScript file and load it in different places to see how it affects our user experience.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2780/1*h_3GogfkaahcXCO9a43CPA.gif\" alt=\"Refreshing website with the script tag inserted at the bottom of the body tag\"><em>Refreshing website with the script tag inserted at the bottom of the body tag</em></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2780/1*xLOq5r4erQAwb4Au_hB-Ww.gif\" alt=\"Refreshing website with the script tag inserted at the top of the body tag\"><em>Refreshing website with the script tag inserted at the top of the body tag</em></p>\n<p>Whilst the load times were similar for both cases — the user experience is far better by placing the script at the body tag allowing the HTML to be parsed before the JavaScript giving the user the website content immediately!</p>\n<p>In the same vein CSS can also be render-blocking especially because more often than not it is linked in the head tag of your HTML document before the body. But if we want our user to see the content in the quickest time we don’t want to be loading CSS for the footer of our document which the user won’t see until they’ve scrolled to the bottom. In fact, we don’t want to load any CSS in that the user can’t immediately see when the page first loads on their device.</p>\n<p>The CSS that you need is often called the <em>Critical CSS</em>. Finding it for yourself would be a headache. It will be different for different devices, meaning you would have to check manually for all possible devices. Lucky for us we have (if you’re using <a href=\"https://nodejs.org/en/\">Node.js</a>) <a href=\"https://github.com/addyosmani/critical\">Critical</a>. This helpful package does the CSS inlining for us and all we do is add some code to a Javascript file. Here’s a code snippet from the Github page.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Using the generate function, we supply it with a JavaScript object with some values defined. base is where we’re going to save our src and dest (our project folder usually). What’s great is now we just supply an array of dimensions and the code will compute the critical CSS for each and inline that code into our head tag.</p>\n<h3>Async and Defer</h3>\n<p>Again, we come back to this idea of render-blocking and how best we should implement this for our website. When you have a plain script tag in your HTML it blocks the HTML from loading whilst the JavaScript loads <strong>and</strong> runs. Async and defer are simple attributes that you can add to your script tags that change the way your JavaScript will be loaded.</p>\n<p>Defer essentially “defers” execution of the script until after the HTML has been parsed. A major advantage of this is that you no longer need some $(document).ready() jQuery-style function to make sure the body was loaded before you could manipulate it, which could cut out some of the dependencies on libraries like jQuery which helps reduce load-time.</p>\n<p>Async is, unsurprisingly, the asynchronous loading of JavaScript files. What does this mean? Your HTML will continue to be parsed whilst the file is loaded and then whenever its ready the file will be executed. This helps improving user experience whilst viewing your website. Imagine for example you had a JavaScript file for doing some cool graphics. You want the words around this graphic to be parsed until your graphic is ready to be executed. As soon as it is ready, it is executed and we get a more seamless loading of our webpage without missing pieces.</p>\n<p>Check this <a href=\"http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html\">website</a> for a really intuitive, graphical representation of this.</p>\n<h3>Image Optimisation and Media Queries</h3>\n<p>The cornerstone of all website performance optimisation is the simple rule that, the less data you send to the client, the quicker and better your website will perform. With the plethora of devices on the market capable of viewing websites, there is a growing trend to optimise your website based on the device it is being viewed on.</p>\n<p>Media queries are a fairly new tool added to CSS3. With more and more content being consumed using mobile-devices there has been a shift in design thinking towards mobile first. Using media queries you can then add stylings for larger screen sizes.</p>\n<iframe src=\"https://medium.com/media/2b53ce5004bbba6e65050bf48c9a864b\" frameborder=0></iframe>\n<p>The @media tag starts a new CSS rule, whilst the only keyword stops older browsers that don’t support media queries from using it. The screen keyword applies the rules to screens rather than prints. After that you add the media-feature which supports the and , or and not keywords so you can get as specific as you want. When you’re loading your image you can write code like:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"></code></pre>\n      </div>\n<iframe src=\"https://medium.com/media/ecbcd475236339fbe45efdd97bfcdeed\" frameborder=0></iframe>\n<p>This isn’t necessarily the best or optimal approach for image optimisation. Luckily we have other options. <a href=\"https://www.imgix.com/\">Imgix</a> and <a href=\"https://cloudinary.com/\">Cloudinary</a> are two ways you can help optimise your site for the right device. Imgix is a Content Delivery Network (CDN) for images with a lot of cool features. A CDN simply takes your files and spreads them across the globe so that someone in a different country doesn’t have to wait for your files on your server to make it all the way to them. This <a href=\"https://docs.imgix.com/tutorials/responsive-images-srcset-imgix\">tutorial</a> goes through how to use Imgix for different device pixel ratios. Cloudinary is a similar service, and their <a href=\"https://cloudinary.com/documentation/image_optimization\">tutorial </a>will take you through the importance of optimisation and how to achieve it will their incredible services. Below is a small example showing how easy it is to use Cloudinary straight in the HTML markup.</p>\n<iframe src=\"https://medium.com/media/98868354e5bf607d317496f64ddec2a2\" frameborder=0></iframe>\n<p>As a last point on image optimisation, the format you use can have a large impact on file size. Some files contain lots of metadata which you don’t want to be serving to your client — <a href=\"https://www.sno.phy.queensu.ca/~phil/exiftool/\">ExifTool</a> is a commonly used command-line application that can help you trim down those files sizes. On top of this, Scalable Vector Graphics (SVG) are a web-standard developed by W3C that offers XML-based vector graphics. This means they have infinite resolution unlike PNG or JPG files. It also makes them highly versatile, easily editable and can even be animated. At the end of the day SVGs are just code and so the file sizes tend to be small. For more reasons to use them, check out this <a href=\"https://watb.co.uk/5-reasons-you-should-be-using-svgs-over-pngs/\">article</a>.</p>\n<h3>Conclusion</h3>\n<p>We’ve only scratched the surface of what’s possible for website optimisation. There are many tools you can use to help you stream-line this process like <a href=\"https://webpack.js.org/\">Webpack</a> for bundling or static-site generators like <a href=\"https://www.gatsbyjs.org/\">Gatsby</a>. <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking\">Tree shaking</a> is another commonly used technique to remove excess, unused modules lying around your website.</p>\n<p>Hopefully this article has touched on some useful techniques you can use on your next site to help improve its performance. Happy coding!</p>\n<p>A big thank you to <a href=\"undefined\">Christian Silver</a> and <a href=\"undefined\">Charlie Crisp</a> for editing this post and providing extremely useful advice and extra content to make it even better.</p>"},{"id":"transformer-remark-markdown-ast-7bf703c86403e4b69b69662b87a0be43-gatsby-remark-imagesgatsby-remark-prismjs-","value":{"type":"root","children":[{"type":"yaml","value":"path: '/optimise-your-website'\ntitle: 'Optimising your Website'\nsubtitle: 'Tips and tricks to keep your website lean and fast'\ndate: '2018-07-28'","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":6,"column":4,"offset":153},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://res.cloudinary.com/patricoferris/image/upload/v1532781201/pf2018/blogposts/28-07-2018/website_optimisation_2.png","alt":"Optimising your Website","position":{"start":{"line":7,"column":1,"offset":154},"end":{"line":7,"column":149,"offset":302},"indent":[]}},{"type":"text","value":"\nInspired by a ","position":{"start":{"line":7,"column":149,"offset":302},"end":{"line":8,"column":15,"offset":317},"indent":[1]}},{"type":"link","title":null,"url":"https://syntax.fm/","children":[{"type":"text","value":"Syntax","position":{"start":{"line":8,"column":16,"offset":318},"end":{"line":8,"column":22,"offset":324},"indent":[]}}],"position":{"start":{"line":8,"column":15,"offset":317},"end":{"line":8,"column":43,"offset":345},"indent":[]}},{"type":"text","value":" podcast, I got really interested in website optimisation. It can often be an overlooked aspect in web development with more focus on design and functionality, I realised my number one priority whenever I visited a website is load speed. My attention is a website’s number one goal, lose it and they lose all potential ad revenue or possibility to give me whatever information I was looking for. ","position":{"start":{"line":8,"column":43,"offset":345},"end":{"line":8,"column":439,"offset":741},"indent":[]}},{"type":"link","title":null,"url":"https://developers.google.com/web/fundamentals/performance/get-started/","children":[{"type":"text","value":"Many seem to agree. 53% of users abandon websites that take more than 3 seconds to load","position":{"start":{"line":8,"column":440,"offset":742},"end":{"line":8,"column":527,"offset":829},"indent":[]}}],"position":{"start":{"line":8,"column":439,"offset":741},"end":{"line":8,"column":601,"offset":903},"indent":[]}},{"type":"text","value":". No amount of fancy graphics or parallax scrolling that appears five seconds after someone’s clicked will hide the slow loading times.","position":{"start":{"line":8,"column":601,"offset":903},"end":{"line":8,"column":736,"offset":1038},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":154},"end":{"line":8,"column":736,"offset":1038},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"The aim of this article is to give a broad overview of the concepts and ideas behind optimising your website, experienced developers are likely already using things like Webpack (a module bundler) among other tools to speed-up their sites.","position":{"start":{"line":10,"column":1,"offset":1040},"end":{"line":10,"column":240,"offset":1279},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":1040},"end":{"line":10,"column":240,"offset":1279},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For testing load-times I will be using the ","position":{"start":{"line":12,"column":1,"offset":1281},"end":{"line":12,"column":44,"offset":1324},"indent":[]}},{"type":"link","title":null,"url":"https://chrome.google.com/webstore/detail/page-load-time/fploionmjgeclbkemipmkogoaohcdbig?hl=en","children":[{"type":"text","value":"Page Load Time ","position":{"start":{"line":12,"column":45,"offset":1325},"end":{"line":12,"column":60,"offset":1340},"indent":[]}}],"position":{"start":{"line":12,"column":44,"offset":1324},"end":{"line":12,"column":158,"offset":1438},"indent":[]}},{"type":"text","value":"Chrome extension. There are a few ways to measure website loading time including: ","position":{"start":{"line":12,"column":158,"offset":1438},"end":{"line":12,"column":240,"offset":1520},"indent":[]}},{"type":"link","title":null,"url":"https://developers.google.com/web/tools/chrome-user-experience-report/","children":[{"type":"text","value":"first paint, first meaning paint, DOMContentLoaded","position":{"start":{"line":12,"column":241,"offset":1521},"end":{"line":12,"column":291,"offset":1571},"indent":[]}}],"position":{"start":{"line":12,"column":240,"offset":1520},"end":{"line":12,"column":364,"offset":1644},"indent":[]}},{"type":"text","value":" etc. For a more detailed look into what this timer measures, check out the Github repository below.\n","position":{"start":{"line":12,"column":364,"offset":1644},"end":{"line":13,"column":1,"offset":1745},"indent":[1]}},{"type":"link","title":null,"url":"https://github.com/alex-vv/chrome-load-timer","children":[{"type":"strong","children":[{"type":"text","value":"alex-vv/chrome-load-timer","position":{"start":{"line":13,"column":4,"offset":1748},"end":{"line":13,"column":29,"offset":1773},"indent":[]}}],"position":{"start":{"line":13,"column":2,"offset":1746},"end":{"line":13,"column":31,"offset":1775},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":13,"column":31,"offset":1775},"end":{"line":14,"column":1,"offset":1776},"indent":[1]}},{"type":"emphasis","children":[{"type":"text","value":"chrome-load-timer - Google Chrome extension to measure page load time and display it in the toolbar","position":{"start":{"line":14,"column":2,"offset":1777},"end":{"line":14,"column":101,"offset":1876},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":1776},"end":{"line":14,"column":102,"offset":1877},"indent":[]}},{"type":"text","value":"github.com","position":{"start":{"line":14,"column":102,"offset":1877},"end":{"line":14,"column":112,"offset":1887},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":1745},"end":{"line":14,"column":159,"offset":1934},"indent":[1]}}],"position":{"start":{"line":12,"column":1,"offset":1281},"end":{"line":14,"column":159,"offset":1934},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"strong","children":[{"type":"text","value":"Use Minified Stylesheets and Scripts","position":{"start":{"line":16,"column":7,"offset":1942},"end":{"line":16,"column":43,"offset":1978},"indent":[]}}],"position":{"start":{"line":16,"column":5,"offset":1940},"end":{"line":16,"column":45,"offset":1980},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":1936},"end":{"line":16,"column":45,"offset":1980},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You would be amazed at how much performance can be gained by this simple trick. What is a minified document? When we write code it is never our job to make it optimised for the computer, instead our golden rule is to make it readable to humans. This improves readability, cuts down on debug time and makes it easier to maintain. However, to achieve this we often add extra spacing which costs us precious space. Minifying the code is trimming all this fat from what we’ve written to have code that produces the same result but is far more difficult to read and maintain. This is okay though, because a computer has no problem deciphering it. Take the following code for example.","position":{"start":{"line":18,"column":1,"offset":1982},"end":{"line":18,"column":679,"offset":2660},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1982},"end":{"line":18,"column":679,"offset":2660},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","position":{"start":{"line":20,"column":1,"offset":2662},"end":{"line":29,"column":4,"offset":2921},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Notice how, wherever possible, our line-breaks and spaces are gone. On top of that, the code in the for-loop is only one line so there’s no need for the curly braces which extends our code over three lines when it can be done in one. Does this make a difference?","position":{"start":{"line":31,"column":1,"offset":2923},"end":{"line":31,"column":263,"offset":3185},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":2923},"end":{"line":31,"column":263,"offset":3185},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"I tried it out on simple website that just had one script tag being loaded in for the graphics library ","position":{"start":{"line":33,"column":1,"offset":3187},"end":{"line":33,"column":104,"offset":3290},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/","children":[{"type":"text","value":"p5.js","position":{"start":{"line":33,"column":105,"offset":3291},"end":{"line":33,"column":110,"offset":3296},"indent":[]}}],"position":{"start":{"line":33,"column":104,"offset":3290},"end":{"line":33,"column":130,"offset":3316},"indent":[]}},{"type":"text","value":". Using the non-minified CDN link I got a load time of 0.25 seconds. Using the minified version I got a markedly improved load time of 0.08 seconds. Depending on what your website project is, there are a few ways to automatically minify code. If it is a ","position":{"start":{"line":33,"column":130,"offset":3316},"end":{"line":33,"column":384,"offset":3570},"indent":[]}},{"type":"link","title":null,"url":"https://guide.meteor.com/build-tool.html","children":[{"type":"text","value":"Meteor app","position":{"start":{"line":33,"column":385,"offset":3571},"end":{"line":33,"column":395,"offset":3581},"indent":[]}}],"position":{"start":{"line":33,"column":384,"offset":3570},"end":{"line":33,"column":438,"offset":3624},"indent":[]}},{"type":"text","value":" it will be done automatically, using ","position":{"start":{"line":33,"column":438,"offset":3624},"end":{"line":33,"column":476,"offset":3662},"indent":[]}},{"type":"link","title":null,"url":"https://webpack.js.org/guides/production/","children":[{"type":"text","value":"Webpack ","position":{"start":{"line":33,"column":477,"offset":3663},"end":{"line":33,"column":485,"offset":3671},"indent":[]}}],"position":{"start":{"line":33,"column":476,"offset":3662},"end":{"line":33,"column":529,"offset":3715},"indent":[]}},{"type":"text","value":"will also allow you to do this. Otherwise there are some online tools like ","position":{"start":{"line":33,"column":529,"offset":3715},"end":{"line":33,"column":604,"offset":3790},"indent":[]}},{"type":"link","title":null,"url":"https://jscompress.com/","children":[{"type":"text","value":"JSCompress ","position":{"start":{"line":33,"column":605,"offset":3791},"end":{"line":33,"column":616,"offset":3802},"indent":[]}}],"position":{"start":{"line":33,"column":604,"offset":3790},"end":{"line":33,"column":642,"offset":3828},"indent":[]}},{"type":"text","value":"or ","position":{"start":{"line":33,"column":642,"offset":3828},"end":{"line":33,"column":645,"offset":3831},"indent":[]}},{"type":"link","title":null,"url":"https://cssminifier.com/","children":[{"type":"text","value":"CSSMinifier ","position":{"start":{"line":33,"column":646,"offset":3832},"end":{"line":33,"column":658,"offset":3844},"indent":[]}}],"position":{"start":{"line":33,"column":645,"offset":3831},"end":{"line":33,"column":685,"offset":3871},"indent":[]}},{"type":"text","value":"that you can upload your code to.","position":{"start":{"line":33,"column":685,"offset":3871},"end":{"line":33,"column":718,"offset":3904},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":3187},"end":{"line":33,"column":718,"offset":3904},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Design Versus Performance","position":{"start":{"line":35,"column":5,"offset":3910},"end":{"line":35,"column":30,"offset":3935},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":3906},"end":{"line":35,"column":30,"offset":3935},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Whilst design is undoubtedly a major aspect to a website’s overall success, both developers and designers must work together to compromise and make a mutually beneficial trade-off between design and performance. The classic example is fonts. Take the two screenshots of a simple website below.","position":{"start":{"line":37,"column":1,"offset":3937},"end":{"line":37,"column":294,"offset":4230},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":3937},"end":{"line":37,"column":294,"offset":4230},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://res.cloudinary.com/patricoferris/image/upload/v1532780050/pf2018/blogposts/28-07-2018/Helvetica.png","alt":"The example website using Helvetica Font (commonly found on many computers) — check [this](https://css-tricks.com/snippets/css/system-font-stack/) link for common system fonts","position":{"start":{"line":39,"column":1,"offset":4232},"end":{"line":39,"column":288,"offset":4519},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":39,"column":288,"offset":4519},"end":{"line":40,"column":1,"offset":4520},"indent":[1]}},{"type":"emphasis","children":[{"type":"text","value":"The example website using Helvetica Font (commonly found on many computers) — check ","position":{"start":{"line":40,"column":2,"offset":4521},"end":{"line":40,"column":86,"offset":4605},"indent":[]}},{"type":"link","title":null,"url":"https://css-tricks.com/snippets/css/system-font-stack/","children":[{"type":"text","value":"this","position":{"start":{"line":40,"column":87,"offset":4606},"end":{"line":40,"column":91,"offset":4610},"indent":[]}}],"position":{"start":{"line":40,"column":86,"offset":4605},"end":{"line":40,"column":148,"offset":4667},"indent":[]}},{"type":"text","value":" link for common system fonts","position":{"start":{"line":40,"column":148,"offset":4667},"end":{"line":40,"column":177,"offset":4696},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":4520},"end":{"line":40,"column":178,"offset":4697},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":4232},"end":{"line":40,"column":178,"offset":4697},"indent":[1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://cdn-images-1.medium.com/max/5760/1*8ciuJNBdqMhlLSaOpNUXow.png","alt":"The example website using Roboto Font (designed by Google and linked from [Google Fonts](https://fonts.google.com/?selection.family=Roboto))","position":{"start":{"line":42,"column":1,"offset":4699},"end":{"line":42,"column":215,"offset":4913},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"The example website using Roboto Font (designed by Google and linked from ","position":{"start":{"line":42,"column":216,"offset":4914},"end":{"line":42,"column":290,"offset":4988},"indent":[]}},{"type":"link","title":null,"url":"https://fonts.google.com/?selection.family=Roboto","children":[{"type":"text","value":"Google Fonts","position":{"start":{"line":42,"column":291,"offset":4989},"end":{"line":42,"column":303,"offset":5001},"indent":[]}}],"position":{"start":{"line":42,"column":290,"offset":4988},"end":{"line":42,"column":355,"offset":5053},"indent":[]}},{"type":"text","value":")","position":{"start":{"line":42,"column":355,"offset":5053},"end":{"line":42,"column":356,"offset":5054},"indent":[]}}],"position":{"start":{"line":42,"column":215,"offset":4913},"end":{"line":42,"column":357,"offset":5055},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":4699},"end":{"line":42,"column":357,"offset":5055},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Before critiquing my questionable design skills take a moment to appreciate that these two fonts are very similar — yet the loading time for a website for the Roboto font was 0.22 seconds as compared with 0.17 for Helvetica. Whilst not that significant, using lots of custom fonts will slow down your website, although using Google Fonts’ API will help keep your website optimised. As an over-the-top example, linking 20 different fonts from the Google API increased the load time to 0.87 seconds.","position":{"start":{"line":44,"column":1,"offset":5057},"end":{"line":44,"column":498,"offset":5554},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":5057},"end":{"line":44,"column":498,"offset":5554},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Inlining your JavaScript and CSS","position":{"start":{"line":46,"column":5,"offset":5560},"end":{"line":46,"column":37,"offset":5592},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":5556},"end":{"line":46,"column":37,"offset":5592},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For each individual document or component of your website, when the parser reaches the script tag or link tag it sends and HTTP request for that document and if not stated differently, these will be blocking actions. What this means is your machine is parsing the HTML document getting the words to display in your browser but if it hits the script tag with the attribute src='js/main.js' for example, it will block the parsing and load in that file. This is where as a developer you need to be clever about where in the document you place things.","position":{"start":{"line":48,"column":1,"offset":5594},"end":{"line":48,"column":548,"offset":6141},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":5594},"end":{"line":48,"column":548,"offset":6141},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Whilst it may not ultimately affect the loading time of your website, it can affect the order in which things are loaded. Again we’ll be using the un-minified p5.js library to simulate a large JavaScript file and load it in different places to see how it affects our user experience.","position":{"start":{"line":50,"column":1,"offset":6143},"end":{"line":50,"column":284,"offset":6426},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":6143},"end":{"line":50,"column":284,"offset":6426},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://cdn-images-1.medium.com/max/2780/1*h_3GogfkaahcXCO9a43CPA.gif","alt":"Refreshing website with the script tag inserted at the bottom of the body tag","position":{"start":{"line":52,"column":1,"offset":6428},"end":{"line":52,"column":152,"offset":6579},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Refreshing website with the script tag inserted at the bottom of the body tag","position":{"start":{"line":52,"column":153,"offset":6580},"end":{"line":52,"column":230,"offset":6657},"indent":[]}}],"position":{"start":{"line":52,"column":152,"offset":6579},"end":{"line":52,"column":231,"offset":6658},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":6428},"end":{"line":52,"column":231,"offset":6658},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://cdn-images-1.medium.com/max/2780/1*xLOq5r4erQAwb4Au_hB-Ww.gif","alt":"Refreshing website with the script tag inserted at the top of the body tag","position":{"start":{"line":54,"column":1,"offset":6660},"end":{"line":54,"column":149,"offset":6808},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Refreshing website with the script tag inserted at the top of the body tag","position":{"start":{"line":54,"column":150,"offset":6809},"end":{"line":54,"column":224,"offset":6883},"indent":[]}}],"position":{"start":{"line":54,"column":149,"offset":6808},"end":{"line":54,"column":225,"offset":6884},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":6660},"end":{"line":54,"column":225,"offset":6884},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Whilst the load times were similar for both cases — the user experience is far better by placing the script at the body tag allowing the HTML to be parsed before the JavaScript giving the user the website content immediately!","position":{"start":{"line":56,"column":1,"offset":6886},"end":{"line":56,"column":226,"offset":7111},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":6886},"end":{"line":56,"column":226,"offset":7111},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In the same vein CSS can also be render-blocking especially because more often than not it is linked in the head tag of your HTML document before the body. But if we want our user to see the content in the quickest time we don’t want to be loading CSS for the footer of our document which the user won’t see until they’ve scrolled to the bottom. In fact, we don’t want to load any CSS in that the user can’t immediately see when the page first loads on their device.","position":{"start":{"line":58,"column":1,"offset":7113},"end":{"line":58,"column":467,"offset":7579},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":7113},"end":{"line":58,"column":467,"offset":7579},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The CSS that you need is often called the ","position":{"start":{"line":60,"column":1,"offset":7581},"end":{"line":60,"column":43,"offset":7623},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Critical CSS","position":{"start":{"line":60,"column":44,"offset":7624},"end":{"line":60,"column":56,"offset":7636},"indent":[]}}],"position":{"start":{"line":60,"column":43,"offset":7623},"end":{"line":60,"column":57,"offset":7637},"indent":[]}},{"type":"text","value":". Finding it for yourself would be a headache. It will be different for different devices, meaning you would have to check manually for all possible devices. Lucky for us we have (if you’re using ","position":{"start":{"line":60,"column":57,"offset":7637},"end":{"line":60,"column":253,"offset":7833},"indent":[]}},{"type":"link","title":null,"url":"https://nodejs.org/en/","children":[{"type":"text","value":"Node.js","position":{"start":{"line":60,"column":254,"offset":7834},"end":{"line":60,"column":261,"offset":7841},"indent":[]}}],"position":{"start":{"line":60,"column":253,"offset":7833},"end":{"line":60,"column":286,"offset":7866},"indent":[]}},{"type":"text","value":") ","position":{"start":{"line":60,"column":286,"offset":7866},"end":{"line":60,"column":288,"offset":7868},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/addyosmani/critical","children":[{"type":"text","value":"Critical","position":{"start":{"line":60,"column":289,"offset":7869},"end":{"line":60,"column":297,"offset":7877},"indent":[]}}],"position":{"start":{"line":60,"column":288,"offset":7868},"end":{"line":60,"column":338,"offset":7918},"indent":[]}},{"type":"text","value":". This helpful package does the CSS inlining for us and all we do is add some code to a Javascript file. Here’s a code snippet from the Github page.","position":{"start":{"line":60,"column":338,"offset":7918},"end":{"line":60,"column":486,"offset":8066},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":7581},"end":{"line":60,"column":486,"offset":8066},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","position":{"start":{"line":62,"column":1,"offset":8068},"end":{"line":73,"column":4,"offset":8329},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Using the generate function, we supply it with a JavaScript object with some values defined. base is where we’re going to save our src and dest (our project folder usually). What’s great is now we just supply an array of dimensions and the code will compute the critical CSS for each and inline that code into our head tag.","position":{"start":{"line":75,"column":1,"offset":8331},"end":{"line":75,"column":324,"offset":8654},"indent":[]}}],"position":{"start":{"line":75,"column":1,"offset":8331},"end":{"line":75,"column":324,"offset":8654},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Async and Defer","position":{"start":{"line":77,"column":5,"offset":8660},"end":{"line":77,"column":20,"offset":8675},"indent":[]}}],"position":{"start":{"line":77,"column":1,"offset":8656},"end":{"line":77,"column":20,"offset":8675},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Again, we come back to this idea of render-blocking and how best we should implement this for our website. When you have a plain script tag in your HTML it blocks the HTML from loading whilst the JavaScript loads ","position":{"start":{"line":79,"column":1,"offset":8677},"end":{"line":79,"column":214,"offset":8890},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"and","position":{"start":{"line":79,"column":216,"offset":8892},"end":{"line":79,"column":219,"offset":8895},"indent":[]}}],"position":{"start":{"line":79,"column":214,"offset":8890},"end":{"line":79,"column":221,"offset":8897},"indent":[]}},{"type":"text","value":" runs. Async and defer are simple attributes that you can add to your script tags that change the way your JavaScript will be loaded.","position":{"start":{"line":79,"column":221,"offset":8897},"end":{"line":79,"column":354,"offset":9030},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":8677},"end":{"line":79,"column":354,"offset":9030},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Defer essentially “defers” execution of the script until after the HTML has been parsed. A major advantage of this is that you no longer need some $(document).ready() jQuery-style function to make sure the body was loaded before you could manipulate it, which could cut out some of the dependencies on libraries like jQuery which helps reduce load-time.","position":{"start":{"line":81,"column":1,"offset":9032},"end":{"line":81,"column":354,"offset":9385},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":9032},"end":{"line":81,"column":354,"offset":9385},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Async is, unsurprisingly, the asynchronous loading of JavaScript files. What does this mean? Your HTML will continue to be parsed whilst the file is loaded and then whenever its ready the file will be executed. This helps improving user experience whilst viewing your website. Imagine for example you had a JavaScript file for doing some cool graphics. You want the words around this graphic to be parsed until your graphic is ready to be executed. As soon as it is ready, it is executed and we get a more seamless loading of our webpage without missing pieces.","position":{"start":{"line":83,"column":1,"offset":9387},"end":{"line":83,"column":562,"offset":9948},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":9387},"end":{"line":83,"column":562,"offset":9948},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Check this ","position":{"start":{"line":85,"column":1,"offset":9950},"end":{"line":85,"column":12,"offset":9961},"indent":[]}},{"type":"link","title":null,"url":"http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html","children":[{"type":"text","value":"website","position":{"start":{"line":85,"column":13,"offset":9962},"end":{"line":85,"column":20,"offset":9969},"indent":[]}}],"position":{"start":{"line":85,"column":12,"offset":9961},"end":{"line":85,"column":94,"offset":10043},"indent":[]}},{"type":"text","value":" for a really intuitive, graphical representation of this.","position":{"start":{"line":85,"column":94,"offset":10043},"end":{"line":85,"column":152,"offset":10101},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":9950},"end":{"line":85,"column":152,"offset":10101},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Image Optimisation and Media Queries","position":{"start":{"line":87,"column":5,"offset":10107},"end":{"line":87,"column":41,"offset":10143},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":10103},"end":{"line":87,"column":41,"offset":10143},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The cornerstone of all website performance optimisation is the simple rule that, the less data you send to the client, the quicker and better your website will perform. With the plethora of devices on the market capable of viewing websites, there is a growing trend to optimise your website based on the device it is being viewed on.","position":{"start":{"line":89,"column":1,"offset":10145},"end":{"line":89,"column":334,"offset":10478},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":10145},"end":{"line":89,"column":334,"offset":10478},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Media queries are a fairly new tool added to CSS3. With more and more content being consumed using mobile-devices there has been a shift in design thinking towards mobile first. Using media queries you can then add stylings for larger screen sizes.","position":{"start":{"line":91,"column":1,"offset":10480},"end":{"line":91,"column":249,"offset":10728},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":10480},"end":{"line":91,"column":249,"offset":10728},"indent":[]}},{"type":"html","value":"<iframe src=\"https://medium.com/media/2b53ce5004bbba6e65050bf48c9a864b\" frameborder=0></iframe>","position":{"start":{"line":93,"column":1,"offset":10730},"end":{"line":93,"column":96,"offset":10825},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The @media tag starts a new CSS rule, whilst the only keyword stops older browsers that don’t support media queries from using it. The screen keyword applies the rules to screens rather than prints. After that you add the media-feature which supports the and , or and not keywords so you can get as specific as you want. When you’re loading your image you can write code like:","position":{"start":{"line":95,"column":1,"offset":10827},"end":{"line":95,"column":377,"offset":11203},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":10827},"end":{"line":95,"column":377,"offset":11203},"indent":[]}},{"type":"html","lang":"css","value":"<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-small.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-big.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":97,"column":1,"offset":11205},"end":{"line":105,"column":4,"offset":11424},"indent":[1,1,1,1,1,1,1,1]}},{"type":"html","value":"<iframe src=\"https://medium.com/media/ecbcd475236339fbe45efdd97bfcdeed\" frameborder=0></iframe>","position":{"start":{"line":106,"column":1,"offset":11425},"end":{"line":106,"column":96,"offset":11520},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This isn’t necessarily the best or optimal approach for image optimisation. Luckily we have other options. ","position":{"start":{"line":108,"column":1,"offset":11522},"end":{"line":108,"column":108,"offset":11629},"indent":[]}},{"type":"link","title":null,"url":"https://www.imgix.com/","children":[{"type":"text","value":"Imgix","position":{"start":{"line":108,"column":109,"offset":11630},"end":{"line":108,"column":114,"offset":11635},"indent":[]}}],"position":{"start":{"line":108,"column":108,"offset":11629},"end":{"line":108,"column":139,"offset":11660},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":108,"column":139,"offset":11660},"end":{"line":108,"column":144,"offset":11665},"indent":[]}},{"type":"link","title":null,"url":"https://cloudinary.com/","children":[{"type":"text","value":"Cloudinary","position":{"start":{"line":108,"column":145,"offset":11666},"end":{"line":108,"column":155,"offset":11676},"indent":[]}}],"position":{"start":{"line":108,"column":144,"offset":11665},"end":{"line":108,"column":181,"offset":11702},"indent":[]}},{"type":"text","value":" are two ways you can help optimise your site for the right device. Imgix is a Content Delivery Network (CDN) for images with a lot of cool features. A CDN simply takes your files and spreads them across the globe so that someone in a different country doesn’t have to wait for your files on your server to make it all the way to them. This ","position":{"start":{"line":108,"column":181,"offset":11702},"end":{"line":108,"column":522,"offset":12043},"indent":[]}},{"type":"link","title":null,"url":"https://docs.imgix.com/tutorials/responsive-images-srcset-imgix","children":[{"type":"text","value":"tutorial","position":{"start":{"line":108,"column":523,"offset":12044},"end":{"line":108,"column":531,"offset":12052},"indent":[]}}],"position":{"start":{"line":108,"column":522,"offset":12043},"end":{"line":108,"column":597,"offset":12118},"indent":[]}},{"type":"text","value":" goes through how to use Imgix for different device pixel ratios. Cloudinary is a similar service, and their ","position":{"start":{"line":108,"column":597,"offset":12118},"end":{"line":108,"column":706,"offset":12227},"indent":[]}},{"type":"link","title":null,"url":"https://cloudinary.com/documentation/image_optimization","children":[{"type":"text","value":"tutorial ","position":{"start":{"line":108,"column":707,"offset":12228},"end":{"line":108,"column":716,"offset":12237},"indent":[]}}],"position":{"start":{"line":108,"column":706,"offset":12227},"end":{"line":108,"column":774,"offset":12295},"indent":[]}},{"type":"text","value":"will take you through the importance of optimisation and how to achieve it will their incredible services. Below is a small example showing how easy it is to use Cloudinary straight in the HTML markup.","position":{"start":{"line":108,"column":774,"offset":12295},"end":{"line":108,"column":975,"offset":12496},"indent":[]}}],"position":{"start":{"line":108,"column":1,"offset":11522},"end":{"line":108,"column":975,"offset":12496},"indent":[]}},{"type":"html","value":"<iframe src=\"https://medium.com/media/98868354e5bf607d317496f64ddec2a2\" frameborder=0></iframe>","position":{"start":{"line":110,"column":1,"offset":12498},"end":{"line":110,"column":96,"offset":12593},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As a last point on image optimisation, the format you use can have a large impact on file size. Some files contain lots of metadata which you don’t want to be serving to your client — ","position":{"start":{"line":112,"column":1,"offset":12595},"end":{"line":112,"column":185,"offset":12779},"indent":[]}},{"type":"link","title":null,"url":"https://www.sno.phy.queensu.ca/~phil/exiftool/","children":[{"type":"text","value":"ExifTool","position":{"start":{"line":112,"column":186,"offset":12780},"end":{"line":112,"column":194,"offset":12788},"indent":[]}}],"position":{"start":{"line":112,"column":185,"offset":12779},"end":{"line":112,"column":243,"offset":12837},"indent":[]}},{"type":"text","value":" is a commonly used command-line application that can help you trim down those files sizes. On top of this, Scalable Vector Graphics (SVG) are a web-standard developed by W3C that offers XML-based vector graphics. This means they have infinite resolution unlike PNG or JPG files. It also makes them highly versatile, easily editable and can even be animated. At the end of the day SVGs are just code and so the file sizes tend to be small. For more reasons to use them, check out this ","position":{"start":{"line":112,"column":243,"offset":12837},"end":{"line":112,"column":728,"offset":13322},"indent":[]}},{"type":"link","title":null,"url":"https://watb.co.uk/5-reasons-you-should-be-using-svgs-over-pngs/","children":[{"type":"text","value":"article","position":{"start":{"line":112,"column":729,"offset":13323},"end":{"line":112,"column":736,"offset":13330},"indent":[]}}],"position":{"start":{"line":112,"column":728,"offset":13322},"end":{"line":112,"column":803,"offset":13397},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":112,"column":803,"offset":13397},"end":{"line":112,"column":804,"offset":13398},"indent":[]}}],"position":{"start":{"line":112,"column":1,"offset":12595},"end":{"line":112,"column":804,"offset":13398},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":114,"column":5,"offset":13404},"end":{"line":114,"column":15,"offset":13414},"indent":[]}}],"position":{"start":{"line":114,"column":1,"offset":13400},"end":{"line":114,"column":15,"offset":13414},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We’ve only scratched the surface of what’s possible for website optimisation. There are many tools you can use to help you stream-line this process like ","position":{"start":{"line":116,"column":1,"offset":13416},"end":{"line":116,"column":154,"offset":13569},"indent":[]}},{"type":"link","title":null,"url":"https://webpack.js.org/","children":[{"type":"text","value":"Webpack","position":{"start":{"line":116,"column":155,"offset":13570},"end":{"line":116,"column":162,"offset":13577},"indent":[]}}],"position":{"start":{"line":116,"column":154,"offset":13569},"end":{"line":116,"column":188,"offset":13603},"indent":[]}},{"type":"text","value":" for bundling or static-site generators like ","position":{"start":{"line":116,"column":188,"offset":13603},"end":{"line":116,"column":233,"offset":13648},"indent":[]}},{"type":"link","title":null,"url":"https://www.gatsbyjs.org/","children":[{"type":"text","value":"Gatsby","position":{"start":{"line":116,"column":234,"offset":13649},"end":{"line":116,"column":240,"offset":13655},"indent":[]}}],"position":{"start":{"line":116,"column":233,"offset":13648},"end":{"line":116,"column":268,"offset":13683},"indent":[]}},{"type":"text","value":". ","position":{"start":{"line":116,"column":268,"offset":13683},"end":{"line":116,"column":270,"offset":13685},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking","children":[{"type":"text","value":"Tree shaking","position":{"start":{"line":116,"column":271,"offset":13686},"end":{"line":116,"column":283,"offset":13698},"indent":[]}}],"position":{"start":{"line":116,"column":270,"offset":13685},"end":{"line":116,"column":348,"offset":13763},"indent":[]}},{"type":"text","value":" is another commonly used technique to remove excess, unused modules lying around your website.","position":{"start":{"line":116,"column":348,"offset":13763},"end":{"line":116,"column":443,"offset":13858},"indent":[]}}],"position":{"start":{"line":116,"column":1,"offset":13416},"end":{"line":116,"column":443,"offset":13858},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Hopefully this article has touched on some useful techniques you can use on your next site to help improve its performance. Happy coding!","position":{"start":{"line":118,"column":1,"offset":13860},"end":{"line":118,"column":138,"offset":13997},"indent":[]}}],"position":{"start":{"line":118,"column":1,"offset":13860},"end":{"line":118,"column":138,"offset":13997},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A big thank you to ","position":{"start":{"line":120,"column":1,"offset":13999},"end":{"line":120,"column":20,"offset":14018},"indent":[]}},{"type":"link","title":null,"url":"undefined","children":[{"type":"text","value":"Christian Silver","position":{"start":{"line":120,"column":21,"offset":14019},"end":{"line":120,"column":37,"offset":14035},"indent":[]}}],"position":{"start":{"line":120,"column":20,"offset":14018},"end":{"line":120,"column":49,"offset":14047},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":120,"column":49,"offset":14047},"end":{"line":120,"column":54,"offset":14052},"indent":[]}},{"type":"link","title":null,"url":"undefined","children":[{"type":"text","value":"Charlie Crisp","position":{"start":{"line":120,"column":55,"offset":14053},"end":{"line":120,"column":68,"offset":14066},"indent":[]}}],"position":{"start":{"line":120,"column":54,"offset":14052},"end":{"line":120,"column":80,"offset":14078},"indent":[]}},{"type":"text","value":" for editing this post and providing extremely useful advice and extra content to make it even better.","position":{"start":{"line":120,"column":80,"offset":14078},"end":{"line":120,"column":182,"offset":14180},"indent":[]}}],"position":{"start":{"line":120,"column":1,"offset":13999},"end":{"line":120,"column":182,"offset":14180},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":121,"column":1,"offset":14181}}}},{"id":"transformer-remark-markdown-html-ast-7bf703c86403e4b69b69662b87a0be43-gatsby-remark-imagesgatsby-remark-prismjs-","value":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/patricoferris/image/upload/v1532781201/pf2018/blogposts/28-07-2018/website_optimisation_2.png","alt":"Optimising your Website"},"children":[],"position":{"start":{"line":7,"column":1,"offset":154},"end":{"line":7,"column":149,"offset":302}}},{"type":"text","value":"\nInspired by a ","position":{"start":{"line":7,"column":149,"offset":302},"end":{"line":8,"column":15,"offset":317}}},{"type":"element","tagName":"a","properties":{"href":"https://syntax.fm/"},"children":[{"type":"text","value":"Syntax","position":{"start":{"line":8,"column":16,"offset":318},"end":{"line":8,"column":22,"offset":324}}}],"position":{"start":{"line":8,"column":15,"offset":317},"end":{"line":8,"column":43,"offset":345}}},{"type":"text","value":" podcast, I got really interested in website optimisation. It can often be an overlooked aspect in web development with more focus on design and functionality, I realised my number one priority whenever I visited a website is load speed. My attention is a website’s number one goal, lose it and they lose all potential ad revenue or possibility to give me whatever information I was looking for. ","position":{"start":{"line":8,"column":43,"offset":345},"end":{"line":8,"column":439,"offset":741}}},{"type":"element","tagName":"a","properties":{"href":"https://developers.google.com/web/fundamentals/performance/get-started/"},"children":[{"type":"text","value":"Many seem to agree. 53% of users abandon websites that take more than 3 seconds to load","position":{"start":{"line":8,"column":440,"offset":742},"end":{"line":8,"column":527,"offset":829}}}],"position":{"start":{"line":8,"column":439,"offset":741},"end":{"line":8,"column":601,"offset":903}}},{"type":"text","value":". No amount of fancy graphics or parallax scrolling that appears five seconds after someone’s clicked will hide the slow loading times.","position":{"start":{"line":8,"column":601,"offset":903},"end":{"line":8,"column":736,"offset":1038}}}],"position":{"start":{"line":7,"column":1,"offset":154},"end":{"line":8,"column":736,"offset":1038}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The aim of this article is to give a broad overview of the concepts and ideas behind optimising your website, experienced developers are likely already using things like Webpack (a module bundler) among other tools to speed-up their sites.","position":{"start":{"line":10,"column":1,"offset":1040},"end":{"line":10,"column":240,"offset":1279}}}],"position":{"start":{"line":10,"column":1,"offset":1040},"end":{"line":10,"column":240,"offset":1279}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For testing load-times I will be using the ","position":{"start":{"line":12,"column":1,"offset":1281},"end":{"line":12,"column":44,"offset":1324}}},{"type":"element","tagName":"a","properties":{"href":"https://chrome.google.com/webstore/detail/page-load-time/fploionmjgeclbkemipmkogoaohcdbig?hl=en"},"children":[{"type":"text","value":"Page Load Time ","position":{"start":{"line":12,"column":45,"offset":1325},"end":{"line":12,"column":60,"offset":1340}}}],"position":{"start":{"line":12,"column":44,"offset":1324},"end":{"line":12,"column":158,"offset":1438}}},{"type":"text","value":"Chrome extension. There are a few ways to measure website loading time including: ","position":{"start":{"line":12,"column":158,"offset":1438},"end":{"line":12,"column":240,"offset":1520}}},{"type":"element","tagName":"a","properties":{"href":"https://developers.google.com/web/tools/chrome-user-experience-report/"},"children":[{"type":"text","value":"first paint, first meaning paint, DOMContentLoaded","position":{"start":{"line":12,"column":241,"offset":1521},"end":{"line":12,"column":291,"offset":1571}}}],"position":{"start":{"line":12,"column":240,"offset":1520},"end":{"line":12,"column":364,"offset":1644}}},{"type":"text","value":" etc. For a more detailed look into what this timer measures, check out the Github repository below.\n","position":{"start":{"line":12,"column":364,"offset":1644},"end":{"line":13,"column":1,"offset":1745}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/alex-vv/chrome-load-timer"},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"alex-vv/chrome-load-timer","position":{"start":{"line":13,"column":4,"offset":1748},"end":{"line":13,"column":29,"offset":1773}}}],"position":{"start":{"line":13,"column":2,"offset":1746},"end":{"line":13,"column":31,"offset":1775}}},{"type":"text","value":"\n","position":{"start":{"line":13,"column":31,"offset":1775},"end":{"line":14,"column":1,"offset":1776}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"chrome-load-timer - Google Chrome extension to measure page load time and display it in the toolbar","position":{"start":{"line":14,"column":2,"offset":1777},"end":{"line":14,"column":101,"offset":1876}}}],"position":{"start":{"line":14,"column":1,"offset":1776},"end":{"line":14,"column":102,"offset":1877}}},{"type":"text","value":"github.com","position":{"start":{"line":14,"column":102,"offset":1877},"end":{"line":14,"column":112,"offset":1887}}}],"position":{"start":{"line":13,"column":1,"offset":1745},"end":{"line":14,"column":159,"offset":1934}}}],"position":{"start":{"line":12,"column":1,"offset":1281},"end":{"line":14,"column":159,"offset":1934}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Use Minified Stylesheets and Scripts","position":{"start":{"line":16,"column":7,"offset":1942},"end":{"line":16,"column":43,"offset":1978}}}],"position":{"start":{"line":16,"column":5,"offset":1940},"end":{"line":16,"column":45,"offset":1980}}}],"position":{"start":{"line":16,"column":1,"offset":1936},"end":{"line":16,"column":45,"offset":1980}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You would be amazed at how much performance can be gained by this simple trick. What is a minified document? When we write code it is never our job to make it optimised for the computer, instead our golden rule is to make it readable to humans. This improves readability, cuts down on debug time and makes it easier to maintain. However, to achieve this we often add extra spacing which costs us precious space. Minifying the code is trimming all this fat from what we’ve written to have code that produces the same result but is far more difficult to read and maintain. This is okay though, because a computer has no problem deciphering it. Take the following code for example.","position":{"start":{"line":18,"column":1,"offset":1982},"end":{"line":18,"column":679,"offset":2660}}}],"position":{"start":{"line":18,"column":1,"offset":1982},"end":{"line":18,"column":679,"offset":2660}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","position":{"start":{"line":20,"column":1,"offset":2662},"end":{"line":29,"column":4,"offset":2921}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Notice how, wherever possible, our line-breaks and spaces are gone. On top of that, the code in the for-loop is only one line so there’s no need for the curly braces which extends our code over three lines when it can be done in one. Does this make a difference?","position":{"start":{"line":31,"column":1,"offset":2923},"end":{"line":31,"column":263,"offset":3185}}}],"position":{"start":{"line":31,"column":1,"offset":2923},"end":{"line":31,"column":263,"offset":3185}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I tried it out on simple website that just had one script tag being loaded in for the graphics library ","position":{"start":{"line":33,"column":1,"offset":3187},"end":{"line":33,"column":104,"offset":3290}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/"},"children":[{"type":"text","value":"p5.js","position":{"start":{"line":33,"column":105,"offset":3291},"end":{"line":33,"column":110,"offset":3296}}}],"position":{"start":{"line":33,"column":104,"offset":3290},"end":{"line":33,"column":130,"offset":3316}}},{"type":"text","value":". Using the non-minified CDN link I got a load time of 0.25 seconds. Using the minified version I got a markedly improved load time of 0.08 seconds. Depending on what your website project is, there are a few ways to automatically minify code. If it is a ","position":{"start":{"line":33,"column":130,"offset":3316},"end":{"line":33,"column":384,"offset":3570}}},{"type":"element","tagName":"a","properties":{"href":"https://guide.meteor.com/build-tool.html"},"children":[{"type":"text","value":"Meteor app","position":{"start":{"line":33,"column":385,"offset":3571},"end":{"line":33,"column":395,"offset":3581}}}],"position":{"start":{"line":33,"column":384,"offset":3570},"end":{"line":33,"column":438,"offset":3624}}},{"type":"text","value":" it will be done automatically, using ","position":{"start":{"line":33,"column":438,"offset":3624},"end":{"line":33,"column":476,"offset":3662}}},{"type":"element","tagName":"a","properties":{"href":"https://webpack.js.org/guides/production/"},"children":[{"type":"text","value":"Webpack ","position":{"start":{"line":33,"column":477,"offset":3663},"end":{"line":33,"column":485,"offset":3671}}}],"position":{"start":{"line":33,"column":476,"offset":3662},"end":{"line":33,"column":529,"offset":3715}}},{"type":"text","value":"will also allow you to do this. Otherwise there are some online tools like ","position":{"start":{"line":33,"column":529,"offset":3715},"end":{"line":33,"column":604,"offset":3790}}},{"type":"element","tagName":"a","properties":{"href":"https://jscompress.com/"},"children":[{"type":"text","value":"JSCompress ","position":{"start":{"line":33,"column":605,"offset":3791},"end":{"line":33,"column":616,"offset":3802}}}],"position":{"start":{"line":33,"column":604,"offset":3790},"end":{"line":33,"column":642,"offset":3828}}},{"type":"text","value":"or ","position":{"start":{"line":33,"column":642,"offset":3828},"end":{"line":33,"column":645,"offset":3831}}},{"type":"element","tagName":"a","properties":{"href":"https://cssminifier.com/"},"children":[{"type":"text","value":"CSSMinifier ","position":{"start":{"line":33,"column":646,"offset":3832},"end":{"line":33,"column":658,"offset":3844}}}],"position":{"start":{"line":33,"column":645,"offset":3831},"end":{"line":33,"column":685,"offset":3871}}},{"type":"text","value":"that you can upload your code to.","position":{"start":{"line":33,"column":685,"offset":3871},"end":{"line":33,"column":718,"offset":3904}}}],"position":{"start":{"line":33,"column":1,"offset":3187},"end":{"line":33,"column":718,"offset":3904}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Design Versus Performance","position":{"start":{"line":35,"column":5,"offset":3910},"end":{"line":35,"column":30,"offset":3935}}}],"position":{"start":{"line":35,"column":1,"offset":3906},"end":{"line":35,"column":30,"offset":3935}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Whilst design is undoubtedly a major aspect to a website’s overall success, both developers and designers must work together to compromise and make a mutually beneficial trade-off between design and performance. The classic example is fonts. Take the two screenshots of a simple website below.","position":{"start":{"line":37,"column":1,"offset":3937},"end":{"line":37,"column":294,"offset":4230}}}],"position":{"start":{"line":37,"column":1,"offset":3937},"end":{"line":37,"column":294,"offset":4230}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/patricoferris/image/upload/v1532780050/pf2018/blogposts/28-07-2018/Helvetica.png","alt":"The example website using Helvetica Font (commonly found on many computers) — check [this](https://css-tricks.com/snippets/css/system-font-stack/) link for common system fonts"},"children":[],"position":{"start":{"line":39,"column":1,"offset":4232},"end":{"line":39,"column":288,"offset":4519}}},{"type":"text","value":"\n","position":{"start":{"line":39,"column":288,"offset":4519},"end":{"line":40,"column":1,"offset":4520}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The example website using Helvetica Font (commonly found on many computers) — check ","position":{"start":{"line":40,"column":2,"offset":4521},"end":{"line":40,"column":86,"offset":4605}}},{"type":"element","tagName":"a","properties":{"href":"https://css-tricks.com/snippets/css/system-font-stack/"},"children":[{"type":"text","value":"this","position":{"start":{"line":40,"column":87,"offset":4606},"end":{"line":40,"column":91,"offset":4610}}}],"position":{"start":{"line":40,"column":86,"offset":4605},"end":{"line":40,"column":148,"offset":4667}}},{"type":"text","value":" link for common system fonts","position":{"start":{"line":40,"column":148,"offset":4667},"end":{"line":40,"column":177,"offset":4696}}}],"position":{"start":{"line":40,"column":1,"offset":4520},"end":{"line":40,"column":178,"offset":4697}}}],"position":{"start":{"line":39,"column":1,"offset":4232},"end":{"line":40,"column":178,"offset":4697}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://cdn-images-1.medium.com/max/5760/1*8ciuJNBdqMhlLSaOpNUXow.png","alt":"The example website using Roboto Font (designed by Google and linked from [Google Fonts](https://fonts.google.com/?selection.family=Roboto))"},"children":[],"position":{"start":{"line":42,"column":1,"offset":4699},"end":{"line":42,"column":215,"offset":4913}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The example website using Roboto Font (designed by Google and linked from ","position":{"start":{"line":42,"column":216,"offset":4914},"end":{"line":42,"column":290,"offset":4988}}},{"type":"element","tagName":"a","properties":{"href":"https://fonts.google.com/?selection.family=Roboto"},"children":[{"type":"text","value":"Google Fonts","position":{"start":{"line":42,"column":291,"offset":4989},"end":{"line":42,"column":303,"offset":5001}}}],"position":{"start":{"line":42,"column":290,"offset":4988},"end":{"line":42,"column":355,"offset":5053}}},{"type":"text","value":")","position":{"start":{"line":42,"column":355,"offset":5053},"end":{"line":42,"column":356,"offset":5054}}}],"position":{"start":{"line":42,"column":215,"offset":4913},"end":{"line":42,"column":357,"offset":5055}}}],"position":{"start":{"line":42,"column":1,"offset":4699},"end":{"line":42,"column":357,"offset":5055}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Before critiquing my questionable design skills take a moment to appreciate that these two fonts are very similar — yet the loading time for a website for the Roboto font was 0.22 seconds as compared with 0.17 for Helvetica. Whilst not that significant, using lots of custom fonts will slow down your website, although using Google Fonts’ API will help keep your website optimised. As an over-the-top example, linking 20 different fonts from the Google API increased the load time to 0.87 seconds.","position":{"start":{"line":44,"column":1,"offset":5057},"end":{"line":44,"column":498,"offset":5554}}}],"position":{"start":{"line":44,"column":1,"offset":5057},"end":{"line":44,"column":498,"offset":5554}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Inlining your JavaScript and CSS","position":{"start":{"line":46,"column":5,"offset":5560},"end":{"line":46,"column":37,"offset":5592}}}],"position":{"start":{"line":46,"column":1,"offset":5556},"end":{"line":46,"column":37,"offset":5592}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For each individual document or component of your website, when the parser reaches the script tag or link tag it sends and HTTP request for that document and if not stated differently, these will be blocking actions. What this means is your machine is parsing the HTML document getting the words to display in your browser but if it hits the script tag with the attribute src='js/main.js' for example, it will block the parsing and load in that file. This is where as a developer you need to be clever about where in the document you place things.","position":{"start":{"line":48,"column":1,"offset":5594},"end":{"line":48,"column":548,"offset":6141}}}],"position":{"start":{"line":48,"column":1,"offset":5594},"end":{"line":48,"column":548,"offset":6141}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Whilst it may not ultimately affect the loading time of your website, it can affect the order in which things are loaded. Again we’ll be using the un-minified p5.js library to simulate a large JavaScript file and load it in different places to see how it affects our user experience.","position":{"start":{"line":50,"column":1,"offset":6143},"end":{"line":50,"column":284,"offset":6426}}}],"position":{"start":{"line":50,"column":1,"offset":6143},"end":{"line":50,"column":284,"offset":6426}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://cdn-images-1.medium.com/max/2780/1*h_3GogfkaahcXCO9a43CPA.gif","alt":"Refreshing website with the script tag inserted at the bottom of the body tag"},"children":[],"position":{"start":{"line":52,"column":1,"offset":6428},"end":{"line":52,"column":152,"offset":6579}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Refreshing website with the script tag inserted at the bottom of the body tag","position":{"start":{"line":52,"column":153,"offset":6580},"end":{"line":52,"column":230,"offset":6657}}}],"position":{"start":{"line":52,"column":152,"offset":6579},"end":{"line":52,"column":231,"offset":6658}}}],"position":{"start":{"line":52,"column":1,"offset":6428},"end":{"line":52,"column":231,"offset":6658}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://cdn-images-1.medium.com/max/2780/1*xLOq5r4erQAwb4Au_hB-Ww.gif","alt":"Refreshing website with the script tag inserted at the top of the body tag"},"children":[],"position":{"start":{"line":54,"column":1,"offset":6660},"end":{"line":54,"column":149,"offset":6808}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Refreshing website with the script tag inserted at the top of the body tag","position":{"start":{"line":54,"column":150,"offset":6809},"end":{"line":54,"column":224,"offset":6883}}}],"position":{"start":{"line":54,"column":149,"offset":6808},"end":{"line":54,"column":225,"offset":6884}}}],"position":{"start":{"line":54,"column":1,"offset":6660},"end":{"line":54,"column":225,"offset":6884}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Whilst the load times were similar for both cases — the user experience is far better by placing the script at the body tag allowing the HTML to be parsed before the JavaScript giving the user the website content immediately!","position":{"start":{"line":56,"column":1,"offset":6886},"end":{"line":56,"column":226,"offset":7111}}}],"position":{"start":{"line":56,"column":1,"offset":6886},"end":{"line":56,"column":226,"offset":7111}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In the same vein CSS can also be render-blocking especially because more often than not it is linked in the head tag of your HTML document before the body. But if we want our user to see the content in the quickest time we don’t want to be loading CSS for the footer of our document which the user won’t see until they’ve scrolled to the bottom. In fact, we don’t want to load any CSS in that the user can’t immediately see when the page first loads on their device.","position":{"start":{"line":58,"column":1,"offset":7113},"end":{"line":58,"column":467,"offset":7579}}}],"position":{"start":{"line":58,"column":1,"offset":7113},"end":{"line":58,"column":467,"offset":7579}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The CSS that you need is often called the ","position":{"start":{"line":60,"column":1,"offset":7581},"end":{"line":60,"column":43,"offset":7623}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Critical CSS","position":{"start":{"line":60,"column":44,"offset":7624},"end":{"line":60,"column":56,"offset":7636}}}],"position":{"start":{"line":60,"column":43,"offset":7623},"end":{"line":60,"column":57,"offset":7637}}},{"type":"text","value":". Finding it for yourself would be a headache. It will be different for different devices, meaning you would have to check manually for all possible devices. Lucky for us we have (if you’re using ","position":{"start":{"line":60,"column":57,"offset":7637},"end":{"line":60,"column":253,"offset":7833}}},{"type":"element","tagName":"a","properties":{"href":"https://nodejs.org/en/"},"children":[{"type":"text","value":"Node.js","position":{"start":{"line":60,"column":254,"offset":7834},"end":{"line":60,"column":261,"offset":7841}}}],"position":{"start":{"line":60,"column":253,"offset":7833},"end":{"line":60,"column":286,"offset":7866}}},{"type":"text","value":") ","position":{"start":{"line":60,"column":286,"offset":7866},"end":{"line":60,"column":288,"offset":7868}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/addyosmani/critical"},"children":[{"type":"text","value":"Critical","position":{"start":{"line":60,"column":289,"offset":7869},"end":{"line":60,"column":297,"offset":7877}}}],"position":{"start":{"line":60,"column":288,"offset":7868},"end":{"line":60,"column":338,"offset":7918}}},{"type":"text","value":". This helpful package does the CSS inlining for us and all we do is add some code to a Javascript file. Here’s a code snippet from the Github page.","position":{"start":{"line":60,"column":338,"offset":7918},"end":{"line":60,"column":486,"offset":8066}}}],"position":{"start":{"line":60,"column":1,"offset":7581},"end":{"line":60,"column":486,"offset":8066}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","position":{"start":{"line":62,"column":1,"offset":8068},"end":{"line":73,"column":4,"offset":8329}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Using the generate function, we supply it with a JavaScript object with some values defined. base is where we’re going to save our src and dest (our project folder usually). What’s great is now we just supply an array of dimensions and the code will compute the critical CSS for each and inline that code into our head tag.","position":{"start":{"line":75,"column":1,"offset":8331},"end":{"line":75,"column":324,"offset":8654}}}],"position":{"start":{"line":75,"column":1,"offset":8331},"end":{"line":75,"column":324,"offset":8654}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Async and Defer","position":{"start":{"line":77,"column":5,"offset":8660},"end":{"line":77,"column":20,"offset":8675}}}],"position":{"start":{"line":77,"column":1,"offset":8656},"end":{"line":77,"column":20,"offset":8675}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Again, we come back to this idea of render-blocking and how best we should implement this for our website. When you have a plain script tag in your HTML it blocks the HTML from loading whilst the JavaScript loads ","position":{"start":{"line":79,"column":1,"offset":8677},"end":{"line":79,"column":214,"offset":8890}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"and","position":{"start":{"line":79,"column":216,"offset":8892},"end":{"line":79,"column":219,"offset":8895}}}],"position":{"start":{"line":79,"column":214,"offset":8890},"end":{"line":79,"column":221,"offset":8897}}},{"type":"text","value":" runs. Async and defer are simple attributes that you can add to your script tags that change the way your JavaScript will be loaded.","position":{"start":{"line":79,"column":221,"offset":8897},"end":{"line":79,"column":354,"offset":9030}}}],"position":{"start":{"line":79,"column":1,"offset":8677},"end":{"line":79,"column":354,"offset":9030}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Defer essentially “defers” execution of the script until after the HTML has been parsed. A major advantage of this is that you no longer need some $(document).ready() jQuery-style function to make sure the body was loaded before you could manipulate it, which could cut out some of the dependencies on libraries like jQuery which helps reduce load-time.","position":{"start":{"line":81,"column":1,"offset":9032},"end":{"line":81,"column":354,"offset":9385}}}],"position":{"start":{"line":81,"column":1,"offset":9032},"end":{"line":81,"column":354,"offset":9385}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Async is, unsurprisingly, the asynchronous loading of JavaScript files. What does this mean? Your HTML will continue to be parsed whilst the file is loaded and then whenever its ready the file will be executed. This helps improving user experience whilst viewing your website. Imagine for example you had a JavaScript file for doing some cool graphics. You want the words around this graphic to be parsed until your graphic is ready to be executed. As soon as it is ready, it is executed and we get a more seamless loading of our webpage without missing pieces.","position":{"start":{"line":83,"column":1,"offset":9387},"end":{"line":83,"column":562,"offset":9948}}}],"position":{"start":{"line":83,"column":1,"offset":9387},"end":{"line":83,"column":562,"offset":9948}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Check this ","position":{"start":{"line":85,"column":1,"offset":9950},"end":{"line":85,"column":12,"offset":9961}}},{"type":"element","tagName":"a","properties":{"href":"http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html"},"children":[{"type":"text","value":"website","position":{"start":{"line":85,"column":13,"offset":9962},"end":{"line":85,"column":20,"offset":9969}}}],"position":{"start":{"line":85,"column":12,"offset":9961},"end":{"line":85,"column":94,"offset":10043}}},{"type":"text","value":" for a really intuitive, graphical representation of this.","position":{"start":{"line":85,"column":94,"offset":10043},"end":{"line":85,"column":152,"offset":10101}}}],"position":{"start":{"line":85,"column":1,"offset":9950},"end":{"line":85,"column":152,"offset":10101}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Image Optimisation and Media Queries","position":{"start":{"line":87,"column":5,"offset":10107},"end":{"line":87,"column":41,"offset":10143}}}],"position":{"start":{"line":87,"column":1,"offset":10103},"end":{"line":87,"column":41,"offset":10143}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The cornerstone of all website performance optimisation is the simple rule that, the less data you send to the client, the quicker and better your website will perform. With the plethora of devices on the market capable of viewing websites, there is a growing trend to optimise your website based on the device it is being viewed on.","position":{"start":{"line":89,"column":1,"offset":10145},"end":{"line":89,"column":334,"offset":10478}}}],"position":{"start":{"line":89,"column":1,"offset":10145},"end":{"line":89,"column":334,"offset":10478}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Media queries are a fairly new tool added to CSS3. With more and more content being consumed using mobile-devices there has been a shift in design thinking towards mobile first. Using media queries you can then add stylings for larger screen sizes.","position":{"start":{"line":91,"column":1,"offset":10480},"end":{"line":91,"column":249,"offset":10728}}}],"position":{"start":{"line":91,"column":1,"offset":10480},"end":{"line":91,"column":249,"offset":10728}}},{"type":"text","value":"\n"},{"type":"raw","value":"<iframe src=\"https://medium.com/media/2b53ce5004bbba6e65050bf48c9a864b\" frameborder=0></iframe>","position":{"start":{"line":93,"column":1,"offset":10730},"end":{"line":93,"column":96,"offset":10825}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The @media tag starts a new CSS rule, whilst the only keyword stops older browsers that don’t support media queries from using it. The screen keyword applies the rules to screens rather than prints. After that you add the media-feature which supports the and , or and not keywords so you can get as specific as you want. When you’re loading your image you can write code like:","position":{"start":{"line":95,"column":1,"offset":10827},"end":{"line":95,"column":377,"offset":11203}}}],"position":{"start":{"line":95,"column":1,"offset":10827},"end":{"line":95,"column":377,"offset":11203}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-small.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-big.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":97,"column":1,"offset":11205},"end":{"line":105,"column":4,"offset":11424}}},{"type":"text","value":"\n"},{"type":"raw","value":"<iframe src=\"https://medium.com/media/ecbcd475236339fbe45efdd97bfcdeed\" frameborder=0></iframe>","position":{"start":{"line":106,"column":1,"offset":11425},"end":{"line":106,"column":96,"offset":11520}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This isn’t necessarily the best or optimal approach for image optimisation. Luckily we have other options. ","position":{"start":{"line":108,"column":1,"offset":11522},"end":{"line":108,"column":108,"offset":11629}}},{"type":"element","tagName":"a","properties":{"href":"https://www.imgix.com/"},"children":[{"type":"text","value":"Imgix","position":{"start":{"line":108,"column":109,"offset":11630},"end":{"line":108,"column":114,"offset":11635}}}],"position":{"start":{"line":108,"column":108,"offset":11629},"end":{"line":108,"column":139,"offset":11660}}},{"type":"text","value":" and ","position":{"start":{"line":108,"column":139,"offset":11660},"end":{"line":108,"column":144,"offset":11665}}},{"type":"element","tagName":"a","properties":{"href":"https://cloudinary.com/"},"children":[{"type":"text","value":"Cloudinary","position":{"start":{"line":108,"column":145,"offset":11666},"end":{"line":108,"column":155,"offset":11676}}}],"position":{"start":{"line":108,"column":144,"offset":11665},"end":{"line":108,"column":181,"offset":11702}}},{"type":"text","value":" are two ways you can help optimise your site for the right device. Imgix is a Content Delivery Network (CDN) for images with a lot of cool features. A CDN simply takes your files and spreads them across the globe so that someone in a different country doesn’t have to wait for your files on your server to make it all the way to them. This ","position":{"start":{"line":108,"column":181,"offset":11702},"end":{"line":108,"column":522,"offset":12043}}},{"type":"element","tagName":"a","properties":{"href":"https://docs.imgix.com/tutorials/responsive-images-srcset-imgix"},"children":[{"type":"text","value":"tutorial","position":{"start":{"line":108,"column":523,"offset":12044},"end":{"line":108,"column":531,"offset":12052}}}],"position":{"start":{"line":108,"column":522,"offset":12043},"end":{"line":108,"column":597,"offset":12118}}},{"type":"text","value":" goes through how to use Imgix for different device pixel ratios. Cloudinary is a similar service, and their ","position":{"start":{"line":108,"column":597,"offset":12118},"end":{"line":108,"column":706,"offset":12227}}},{"type":"element","tagName":"a","properties":{"href":"https://cloudinary.com/documentation/image_optimization"},"children":[{"type":"text","value":"tutorial ","position":{"start":{"line":108,"column":707,"offset":12228},"end":{"line":108,"column":716,"offset":12237}}}],"position":{"start":{"line":108,"column":706,"offset":12227},"end":{"line":108,"column":774,"offset":12295}}},{"type":"text","value":"will take you through the importance of optimisation and how to achieve it will their incredible services. Below is a small example showing how easy it is to use Cloudinary straight in the HTML markup.","position":{"start":{"line":108,"column":774,"offset":12295},"end":{"line":108,"column":975,"offset":12496}}}],"position":{"start":{"line":108,"column":1,"offset":11522},"end":{"line":108,"column":975,"offset":12496}}},{"type":"text","value":"\n"},{"type":"raw","value":"<iframe src=\"https://medium.com/media/98868354e5bf607d317496f64ddec2a2\" frameborder=0></iframe>","position":{"start":{"line":110,"column":1,"offset":12498},"end":{"line":110,"column":96,"offset":12593}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As a last point on image optimisation, the format you use can have a large impact on file size. Some files contain lots of metadata which you don’t want to be serving to your client — ","position":{"start":{"line":112,"column":1,"offset":12595},"end":{"line":112,"column":185,"offset":12779}}},{"type":"element","tagName":"a","properties":{"href":"https://www.sno.phy.queensu.ca/~phil/exiftool/"},"children":[{"type":"text","value":"ExifTool","position":{"start":{"line":112,"column":186,"offset":12780},"end":{"line":112,"column":194,"offset":12788}}}],"position":{"start":{"line":112,"column":185,"offset":12779},"end":{"line":112,"column":243,"offset":12837}}},{"type":"text","value":" is a commonly used command-line application that can help you trim down those files sizes. On top of this, Scalable Vector Graphics (SVG) are a web-standard developed by W3C that offers XML-based vector graphics. This means they have infinite resolution unlike PNG or JPG files. It also makes them highly versatile, easily editable and can even be animated. At the end of the day SVGs are just code and so the file sizes tend to be small. For more reasons to use them, check out this ","position":{"start":{"line":112,"column":243,"offset":12837},"end":{"line":112,"column":728,"offset":13322}}},{"type":"element","tagName":"a","properties":{"href":"https://watb.co.uk/5-reasons-you-should-be-using-svgs-over-pngs/"},"children":[{"type":"text","value":"article","position":{"start":{"line":112,"column":729,"offset":13323},"end":{"line":112,"column":736,"offset":13330}}}],"position":{"start":{"line":112,"column":728,"offset":13322},"end":{"line":112,"column":803,"offset":13397}}},{"type":"text","value":".","position":{"start":{"line":112,"column":803,"offset":13397},"end":{"line":112,"column":804,"offset":13398}}}],"position":{"start":{"line":112,"column":1,"offset":12595},"end":{"line":112,"column":804,"offset":13398}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":114,"column":5,"offset":13404},"end":{"line":114,"column":15,"offset":13414}}}],"position":{"start":{"line":114,"column":1,"offset":13400},"end":{"line":114,"column":15,"offset":13414}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We’ve only scratched the surface of what’s possible for website optimisation. There are many tools you can use to help you stream-line this process like ","position":{"start":{"line":116,"column":1,"offset":13416},"end":{"line":116,"column":154,"offset":13569}}},{"type":"element","tagName":"a","properties":{"href":"https://webpack.js.org/"},"children":[{"type":"text","value":"Webpack","position":{"start":{"line":116,"column":155,"offset":13570},"end":{"line":116,"column":162,"offset":13577}}}],"position":{"start":{"line":116,"column":154,"offset":13569},"end":{"line":116,"column":188,"offset":13603}}},{"type":"text","value":" for bundling or static-site generators like ","position":{"start":{"line":116,"column":188,"offset":13603},"end":{"line":116,"column":233,"offset":13648}}},{"type":"element","tagName":"a","properties":{"href":"https://www.gatsbyjs.org/"},"children":[{"type":"text","value":"Gatsby","position":{"start":{"line":116,"column":234,"offset":13649},"end":{"line":116,"column":240,"offset":13655}}}],"position":{"start":{"line":116,"column":233,"offset":13648},"end":{"line":116,"column":268,"offset":13683}}},{"type":"text","value":". ","position":{"start":{"line":116,"column":268,"offset":13683},"end":{"line":116,"column":270,"offset":13685}}},{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking"},"children":[{"type":"text","value":"Tree shaking","position":{"start":{"line":116,"column":271,"offset":13686},"end":{"line":116,"column":283,"offset":13698}}}],"position":{"start":{"line":116,"column":270,"offset":13685},"end":{"line":116,"column":348,"offset":13763}}},{"type":"text","value":" is another commonly used technique to remove excess, unused modules lying around your website.","position":{"start":{"line":116,"column":348,"offset":13763},"end":{"line":116,"column":443,"offset":13858}}}],"position":{"start":{"line":116,"column":1,"offset":13416},"end":{"line":116,"column":443,"offset":13858}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Hopefully this article has touched on some useful techniques you can use on your next site to help improve its performance. Happy coding!","position":{"start":{"line":118,"column":1,"offset":13860},"end":{"line":118,"column":138,"offset":13997}}}],"position":{"start":{"line":118,"column":1,"offset":13860},"end":{"line":118,"column":138,"offset":13997}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A big thank you to ","position":{"start":{"line":120,"column":1,"offset":13999},"end":{"line":120,"column":20,"offset":14018}}},{"type":"element","tagName":"a","properties":{"href":"undefined"},"children":[{"type":"text","value":"Christian Silver","position":{"start":{"line":120,"column":21,"offset":14019},"end":{"line":120,"column":37,"offset":14035}}}],"position":{"start":{"line":120,"column":20,"offset":14018},"end":{"line":120,"column":49,"offset":14047}}},{"type":"text","value":" and ","position":{"start":{"line":120,"column":49,"offset":14047},"end":{"line":120,"column":54,"offset":14052}}},{"type":"element","tagName":"a","properties":{"href":"undefined"},"children":[{"type":"text","value":"Charlie Crisp","position":{"start":{"line":120,"column":55,"offset":14053},"end":{"line":120,"column":68,"offset":14066}}}],"position":{"start":{"line":120,"column":54,"offset":14052},"end":{"line":120,"column":80,"offset":14078}}},{"type":"text","value":" for editing this post and providing extremely useful advice and extra content to make it even better.","position":{"start":{"line":120,"column":80,"offset":14078},"end":{"line":120,"column":182,"offset":14180}}}],"position":{"start":{"line":120,"column":1,"offset":13999},"end":{"line":120,"column":182,"offset":14180}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":121,"column":1,"offset":14181}}}},{"id":"transformer-remark-markdown-html-7bf703c86403e4b69b69662b87a0be43-gatsby-remark-imagesgatsby-remark-prismjs-","value":"<p><img src=\"https://res.cloudinary.com/patricoferris/image/upload/v1532781201/pf2018/blogposts/28-07-2018/website_optimisation_2.png\" alt=\"Optimising your Website\">\nInspired by a <a href=\"https://syntax.fm/\">Syntax</a> podcast, I got really interested in website optimisation. It can often be an overlooked aspect in web development with more focus on design and functionality, I realised my number one priority whenever I visited a website is load speed. My attention is a website’s number one goal, lose it and they lose all potential ad revenue or possibility to give me whatever information I was looking for. <a href=\"https://developers.google.com/web/fundamentals/performance/get-started/\">Many seem to agree. 53% of users abandon websites that take more than 3 seconds to load</a>. No amount of fancy graphics or parallax scrolling that appears five seconds after someone’s clicked will hide the slow loading times.</p>\n<p>The aim of this article is to give a broad overview of the concepts and ideas behind optimising your website, experienced developers are likely already using things like Webpack (a module bundler) among other tools to speed-up their sites.</p>\n<p>For testing load-times I will be using the <a href=\"https://chrome.google.com/webstore/detail/page-load-time/fploionmjgeclbkemipmkogoaohcdbig?hl=en\">Page Load Time </a>Chrome extension. There are a few ways to measure website loading time including: <a href=\"https://developers.google.com/web/tools/chrome-user-experience-report/\">first paint, first meaning paint, DOMContentLoaded</a> etc. For a more detailed look into what this timer measures, check out the Github repository below.\n<a href=\"https://github.com/alex-vv/chrome-load-timer\"><strong>alex-vv/chrome-load-timer</strong>\n<em>chrome-load-timer - Google Chrome extension to measure page load time and display it in the toolbar</em>github.com</a></p>\n<h3><strong>Use Minified Stylesheets and Scripts</strong></h3>\n<p>You would be amazed at how much performance can be gained by this simple trick. What is a minified document? When we write code it is never our job to make it optimised for the computer, instead our golden rule is to make it readable to humans. This improves readability, cuts down on debug time and makes it easier to maintain. However, to achieve this we often add extra spacing which costs us precious space. Minifying the code is trimming all this fat from what we’ve written to have code that produces the same result but is far more difficult to read and maintain. This is okay though, because a computer has no problem deciphering it. Take the following code for example.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Notice how, wherever possible, our line-breaks and spaces are gone. On top of that, the code in the for-loop is only one line so there’s no need for the curly braces which extends our code over three lines when it can be done in one. Does this make a difference?</p>\n<p>I tried it out on simple website that just had one script tag being loaded in for the graphics library <a href=\"https://p5js.org/\">p5.js</a>. Using the non-minified CDN link I got a load time of 0.25 seconds. Using the minified version I got a markedly improved load time of 0.08 seconds. Depending on what your website project is, there are a few ways to automatically minify code. If it is a <a href=\"https://guide.meteor.com/build-tool.html\">Meteor app</a> it will be done automatically, using <a href=\"https://webpack.js.org/guides/production/\">Webpack </a>will also allow you to do this. Otherwise there are some online tools like <a href=\"https://jscompress.com/\">JSCompress </a>or <a href=\"https://cssminifier.com/\">CSSMinifier </a>that you can upload your code to.</p>\n<h3>Design Versus Performance</h3>\n<p>Whilst design is undoubtedly a major aspect to a website’s overall success, both developers and designers must work together to compromise and make a mutually beneficial trade-off between design and performance. The classic example is fonts. Take the two screenshots of a simple website below.</p>\n<p><img src=\"https://res.cloudinary.com/patricoferris/image/upload/v1532780050/pf2018/blogposts/28-07-2018/Helvetica.png\" alt=\"The example website using Helvetica Font (commonly found on many computers) — check [this](https://css-tricks.com/snippets/css/system-font-stack/) link for common system fonts\">\n<em>The example website using Helvetica Font (commonly found on many computers) — check <a href=\"https://css-tricks.com/snippets/css/system-font-stack/\">this</a> link for common system fonts</em></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/5760/1*8ciuJNBdqMhlLSaOpNUXow.png\" alt=\"The example website using Roboto Font (designed by Google and linked from [Google Fonts](https://fonts.google.com/?selection.family=Roboto))\"><em>The example website using Roboto Font (designed by Google and linked from <a href=\"https://fonts.google.com/?selection.family=Roboto\">Google Fonts</a>)</em></p>\n<p>Before critiquing my questionable design skills take a moment to appreciate that these two fonts are very similar — yet the loading time for a website for the Roboto font was 0.22 seconds as compared with 0.17 for Helvetica. Whilst not that significant, using lots of custom fonts will slow down your website, although using Google Fonts’ API will help keep your website optimised. As an over-the-top example, linking 20 different fonts from the Google API increased the load time to 0.87 seconds.</p>\n<h3>Inlining your JavaScript and CSS</h3>\n<p>For each individual document or component of your website, when the parser reaches the script tag or link tag it sends and HTTP request for that document and if not stated differently, these will be blocking actions. What this means is your machine is parsing the HTML document getting the words to display in your browser but if it hits the script tag with the attribute src='js/main.js' for example, it will block the parsing and load in that file. This is where as a developer you need to be clever about where in the document you place things.</p>\n<p>Whilst it may not ultimately affect the loading time of your website, it can affect the order in which things are loaded. Again we’ll be using the un-minified p5.js library to simulate a large JavaScript file and load it in different places to see how it affects our user experience.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2780/1*h_3GogfkaahcXCO9a43CPA.gif\" alt=\"Refreshing website with the script tag inserted at the bottom of the body tag\"><em>Refreshing website with the script tag inserted at the bottom of the body tag</em></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2780/1*xLOq5r4erQAwb4Au_hB-Ww.gif\" alt=\"Refreshing website with the script tag inserted at the top of the body tag\"><em>Refreshing website with the script tag inserted at the top of the body tag</em></p>\n<p>Whilst the load times were similar for both cases — the user experience is far better by placing the script at the body tag allowing the HTML to be parsed before the JavaScript giving the user the website content immediately!</p>\n<p>In the same vein CSS can also be render-blocking especially because more often than not it is linked in the head tag of your HTML document before the body. But if we want our user to see the content in the quickest time we don’t want to be loading CSS for the footer of our document which the user won’t see until they’ve scrolled to the bottom. In fact, we don’t want to load any CSS in that the user can’t immediately see when the page first loads on their device.</p>\n<p>The CSS that you need is often called the <em>Critical CSS</em>. Finding it for yourself would be a headache. It will be different for different devices, meaning you would have to check manually for all possible devices. Lucky for us we have (if you’re using <a href=\"https://nodejs.org/en/\">Node.js</a>) <a href=\"https://github.com/addyosmani/critical\">Critical</a>. This helpful package does the CSS inlining for us and all we do is add some code to a Javascript file. Here’s a code snippet from the Github page.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Using the generate function, we supply it with a JavaScript object with some values defined. base is where we’re going to save our src and dest (our project folder usually). What’s great is now we just supply an array of dimensions and the code will compute the critical CSS for each and inline that code into our head tag.</p>\n<h3>Async and Defer</h3>\n<p>Again, we come back to this idea of render-blocking and how best we should implement this for our website. When you have a plain script tag in your HTML it blocks the HTML from loading whilst the JavaScript loads <strong>and</strong> runs. Async and defer are simple attributes that you can add to your script tags that change the way your JavaScript will be loaded.</p>\n<p>Defer essentially “defers” execution of the script until after the HTML has been parsed. A major advantage of this is that you no longer need some $(document).ready() jQuery-style function to make sure the body was loaded before you could manipulate it, which could cut out some of the dependencies on libraries like jQuery which helps reduce load-time.</p>\n<p>Async is, unsurprisingly, the asynchronous loading of JavaScript files. What does this mean? Your HTML will continue to be parsed whilst the file is loaded and then whenever its ready the file will be executed. This helps improving user experience whilst viewing your website. Imagine for example you had a JavaScript file for doing some cool graphics. You want the words around this graphic to be parsed until your graphic is ready to be executed. As soon as it is ready, it is executed and we get a more seamless loading of our webpage without missing pieces.</p>\n<p>Check this <a href=\"http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html\">website</a> for a really intuitive, graphical representation of this.</p>\n<h3>Image Optimisation and Media Queries</h3>\n<p>The cornerstone of all website performance optimisation is the simple rule that, the less data you send to the client, the quicker and better your website will perform. With the plethora of devices on the market capable of viewing websites, there is a growing trend to optimise your website based on the device it is being viewed on.</p>\n<p>Media queries are a fairly new tool added to CSS3. With more and more content being consumed using mobile-devices there has been a shift in design thinking towards mobile first. Using media queries you can then add stylings for larger screen sizes.</p>\n<iframe src=\"https://medium.com/media/2b53ce5004bbba6e65050bf48c9a864b\" frameborder=0></iframe>\n<p>The @media tag starts a new CSS rule, whilst the only keyword stops older browsers that don’t support media queries from using it. The screen keyword applies the rules to screens rather than prints. After that you add the media-feature which supports the and , or and not keywords so you can get as specific as you want. When you’re loading your image you can write code like:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-small.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-big.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<iframe src=\"https://medium.com/media/ecbcd475236339fbe45efdd97bfcdeed\" frameborder=0></iframe>\n<p>This isn’t necessarily the best or optimal approach for image optimisation. Luckily we have other options. <a href=\"https://www.imgix.com/\">Imgix</a> and <a href=\"https://cloudinary.com/\">Cloudinary</a> are two ways you can help optimise your site for the right device. Imgix is a Content Delivery Network (CDN) for images with a lot of cool features. A CDN simply takes your files and spreads them across the globe so that someone in a different country doesn’t have to wait for your files on your server to make it all the way to them. This <a href=\"https://docs.imgix.com/tutorials/responsive-images-srcset-imgix\">tutorial</a> goes through how to use Imgix for different device pixel ratios. Cloudinary is a similar service, and their <a href=\"https://cloudinary.com/documentation/image_optimization\">tutorial </a>will take you through the importance of optimisation and how to achieve it will their incredible services. Below is a small example showing how easy it is to use Cloudinary straight in the HTML markup.</p>\n<iframe src=\"https://medium.com/media/98868354e5bf607d317496f64ddec2a2\" frameborder=0></iframe>\n<p>As a last point on image optimisation, the format you use can have a large impact on file size. Some files contain lots of metadata which you don’t want to be serving to your client — <a href=\"https://www.sno.phy.queensu.ca/~phil/exiftool/\">ExifTool</a> is a commonly used command-line application that can help you trim down those files sizes. On top of this, Scalable Vector Graphics (SVG) are a web-standard developed by W3C that offers XML-based vector graphics. This means they have infinite resolution unlike PNG or JPG files. It also makes them highly versatile, easily editable and can even be animated. At the end of the day SVGs are just code and so the file sizes tend to be small. For more reasons to use them, check out this <a href=\"https://watb.co.uk/5-reasons-you-should-be-using-svgs-over-pngs/\">article</a>.</p>\n<h3>Conclusion</h3>\n<p>We’ve only scratched the surface of what’s possible for website optimisation. There are many tools you can use to help you stream-line this process like <a href=\"https://webpack.js.org/\">Webpack</a> for bundling or static-site generators like <a href=\"https://www.gatsbyjs.org/\">Gatsby</a>. <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking\">Tree shaking</a> is another commonly used technique to remove excess, unused modules lying around your website.</p>\n<p>Hopefully this article has touched on some useful techniques you can use on your next site to help improve its performance. Happy coding!</p>\n<p>A big thank you to <a href=\"undefined\">Christian Silver</a> and <a href=\"undefined\">Charlie Crisp</a> for editing this post and providing extremely useful advice and extra content to make it even better.</p>"},{"id":"transformer-remark-markdown-ast-b8bb1c4e6d1a49e8240486f3aee1c37f-gatsby-remark-imagesgatsby-remark-prismjs-","value":{"type":"root","children":[{"type":"yaml","value":"path: '/optimise-your-website'\ntitle: 'Optimising your Website'\nsubtitle: 'Tips and tricks to keep your website lean and fast'\ndate: '2018-07-28'","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":6,"column":4,"offset":153},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://res.cloudinary.com/patricoferris/image/upload/v1532781201/pf2018/blogposts/28-07-2018/website_optimisation_2.png","alt":"Optimising your Website","position":{"start":{"line":7,"column":1,"offset":154},"end":{"line":7,"column":149,"offset":302},"indent":[]}},{"type":"text","value":"\nInspired by a ","position":{"start":{"line":7,"column":149,"offset":302},"end":{"line":8,"column":15,"offset":317},"indent":[1]}},{"type":"link","title":null,"url":"https://syntax.fm/","children":[{"type":"text","value":"Syntax","position":{"start":{"line":8,"column":16,"offset":318},"end":{"line":8,"column":22,"offset":324},"indent":[]}}],"position":{"start":{"line":8,"column":15,"offset":317},"end":{"line":8,"column":43,"offset":345},"indent":[]}},{"type":"text","value":" podcast, I got really interested in website optimisation. It can often be an overlooked aspect in web development with more focus on design and functionality, I realised my number one priority whenever I visited a website is load speed. My attention is a website’s number one goal, lose it and they lose all potential ad revenue or possibility to give me whatever information I was looking for. ","position":{"start":{"line":8,"column":43,"offset":345},"end":{"line":8,"column":439,"offset":741},"indent":[]}},{"type":"link","title":null,"url":"https://developers.google.com/web/fundamentals/performance/get-started/","children":[{"type":"text","value":"Many seem to agree. 53% of users abandon websites that take more than 3 seconds to load","position":{"start":{"line":8,"column":440,"offset":742},"end":{"line":8,"column":527,"offset":829},"indent":[]}}],"position":{"start":{"line":8,"column":439,"offset":741},"end":{"line":8,"column":601,"offset":903},"indent":[]}},{"type":"text","value":". No amount of fancy graphics or parallax scrolling that appears five seconds after someone’s clicked will hide the slow loading times.","position":{"start":{"line":8,"column":601,"offset":903},"end":{"line":8,"column":736,"offset":1038},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":154},"end":{"line":8,"column":736,"offset":1038},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"The aim of this article is to give a broad overview of the concepts and ideas behind optimising your website, experienced developers are likely already using things like Webpack (a module bundler) among other tools to speed-up their sites.","position":{"start":{"line":10,"column":1,"offset":1040},"end":{"line":10,"column":240,"offset":1279},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":1040},"end":{"line":10,"column":240,"offset":1279},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For testing load-times I will be using the ","position":{"start":{"line":12,"column":1,"offset":1281},"end":{"line":12,"column":44,"offset":1324},"indent":[]}},{"type":"link","title":null,"url":"https://chrome.google.com/webstore/detail/page-load-time/fploionmjgeclbkemipmkogoaohcdbig?hl=en","children":[{"type":"text","value":"Page Load Time ","position":{"start":{"line":12,"column":45,"offset":1325},"end":{"line":12,"column":60,"offset":1340},"indent":[]}}],"position":{"start":{"line":12,"column":44,"offset":1324},"end":{"line":12,"column":158,"offset":1438},"indent":[]}},{"type":"text","value":"Chrome extension. There are a few ways to measure website loading time including: ","position":{"start":{"line":12,"column":158,"offset":1438},"end":{"line":12,"column":240,"offset":1520},"indent":[]}},{"type":"link","title":null,"url":"https://developers.google.com/web/tools/chrome-user-experience-report/","children":[{"type":"text","value":"first paint, first meaning paint, DOMContentLoaded","position":{"start":{"line":12,"column":241,"offset":1521},"end":{"line":12,"column":291,"offset":1571},"indent":[]}}],"position":{"start":{"line":12,"column":240,"offset":1520},"end":{"line":12,"column":364,"offset":1644},"indent":[]}},{"type":"text","value":" etc. For a more detailed look into what this timer measures, check out the Github repository below.\n","position":{"start":{"line":12,"column":364,"offset":1644},"end":{"line":13,"column":1,"offset":1745},"indent":[1]}},{"type":"link","title":null,"url":"https://github.com/alex-vv/chrome-load-timer","children":[{"type":"strong","children":[{"type":"text","value":"alex-vv/chrome-load-timer","position":{"start":{"line":13,"column":4,"offset":1748},"end":{"line":13,"column":29,"offset":1773},"indent":[]}}],"position":{"start":{"line":13,"column":2,"offset":1746},"end":{"line":13,"column":31,"offset":1775},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":13,"column":31,"offset":1775},"end":{"line":14,"column":1,"offset":1776},"indent":[1]}},{"type":"emphasis","children":[{"type":"text","value":"chrome-load-timer - Google Chrome extension to measure page load time and display it in the toolbar","position":{"start":{"line":14,"column":2,"offset":1777},"end":{"line":14,"column":101,"offset":1876},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":1776},"end":{"line":14,"column":102,"offset":1877},"indent":[]}},{"type":"text","value":"github.com","position":{"start":{"line":14,"column":102,"offset":1877},"end":{"line":14,"column":112,"offset":1887},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":1745},"end":{"line":14,"column":159,"offset":1934},"indent":[1]}}],"position":{"start":{"line":12,"column":1,"offset":1281},"end":{"line":14,"column":159,"offset":1934},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"strong","children":[{"type":"text","value":"Use Minified Stylesheets and Scripts","position":{"start":{"line":16,"column":7,"offset":1942},"end":{"line":16,"column":43,"offset":1978},"indent":[]}}],"position":{"start":{"line":16,"column":5,"offset":1940},"end":{"line":16,"column":45,"offset":1980},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":1936},"end":{"line":16,"column":45,"offset":1980},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You would be amazed at how much performance can be gained by this simple trick. What is a minified document? When we write code it is never our job to make it optimised for the computer, instead our golden rule is to make it readable to humans. This improves readability, cuts down on debug time and makes it easier to maintain. However, to achieve this we often add extra spacing which costs us precious space. Minifying the code is trimming all this fat from what we’ve written to have code that produces the same result but is far more difficult to read and maintain. This is okay though, because a computer has no problem deciphering it. Take the following code for example.","position":{"start":{"line":18,"column":1,"offset":1982},"end":{"line":18,"column":679,"offset":2660},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1982},"end":{"line":18,"column":679,"offset":2660},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","position":{"start":{"line":20,"column":1,"offset":2662},"end":{"line":29,"column":4,"offset":2921},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Notice how, wherever possible, our line-breaks and spaces are gone. On top of that, the code in the for-loop is only one line so there’s no need for the curly braces which extends our code over three lines when it can be done in one. Does this make a difference?","position":{"start":{"line":31,"column":1,"offset":2923},"end":{"line":31,"column":263,"offset":3185},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":2923},"end":{"line":31,"column":263,"offset":3185},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"I tried it out on simple website that just had one script tag being loaded in for the graphics library ","position":{"start":{"line":33,"column":1,"offset":3187},"end":{"line":33,"column":104,"offset":3290},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/","children":[{"type":"text","value":"p5.js","position":{"start":{"line":33,"column":105,"offset":3291},"end":{"line":33,"column":110,"offset":3296},"indent":[]}}],"position":{"start":{"line":33,"column":104,"offset":3290},"end":{"line":33,"column":130,"offset":3316},"indent":[]}},{"type":"text","value":". Using the non-minified CDN link I got a load time of 0.25 seconds. Using the minified version I got a markedly improved load time of 0.08 seconds. Depending on what your website project is, there are a few ways to automatically minify code. If it is a ","position":{"start":{"line":33,"column":130,"offset":3316},"end":{"line":33,"column":384,"offset":3570},"indent":[]}},{"type":"link","title":null,"url":"https://guide.meteor.com/build-tool.html","children":[{"type":"text","value":"Meteor app","position":{"start":{"line":33,"column":385,"offset":3571},"end":{"line":33,"column":395,"offset":3581},"indent":[]}}],"position":{"start":{"line":33,"column":384,"offset":3570},"end":{"line":33,"column":438,"offset":3624},"indent":[]}},{"type":"text","value":" it will be done automatically, using ","position":{"start":{"line":33,"column":438,"offset":3624},"end":{"line":33,"column":476,"offset":3662},"indent":[]}},{"type":"link","title":null,"url":"https://webpack.js.org/guides/production/","children":[{"type":"text","value":"Webpack ","position":{"start":{"line":33,"column":477,"offset":3663},"end":{"line":33,"column":485,"offset":3671},"indent":[]}}],"position":{"start":{"line":33,"column":476,"offset":3662},"end":{"line":33,"column":529,"offset":3715},"indent":[]}},{"type":"text","value":"will also allow you to do this. Otherwise there are some online tools like ","position":{"start":{"line":33,"column":529,"offset":3715},"end":{"line":33,"column":604,"offset":3790},"indent":[]}},{"type":"link","title":null,"url":"https://jscompress.com/","children":[{"type":"text","value":"JSCompress ","position":{"start":{"line":33,"column":605,"offset":3791},"end":{"line":33,"column":616,"offset":3802},"indent":[]}}],"position":{"start":{"line":33,"column":604,"offset":3790},"end":{"line":33,"column":642,"offset":3828},"indent":[]}},{"type":"text","value":"or ","position":{"start":{"line":33,"column":642,"offset":3828},"end":{"line":33,"column":645,"offset":3831},"indent":[]}},{"type":"link","title":null,"url":"https://cssminifier.com/","children":[{"type":"text","value":"CSSMinifier ","position":{"start":{"line":33,"column":646,"offset":3832},"end":{"line":33,"column":658,"offset":3844},"indent":[]}}],"position":{"start":{"line":33,"column":645,"offset":3831},"end":{"line":33,"column":685,"offset":3871},"indent":[]}},{"type":"text","value":"that you can upload your code to.","position":{"start":{"line":33,"column":685,"offset":3871},"end":{"line":33,"column":718,"offset":3904},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":3187},"end":{"line":33,"column":718,"offset":3904},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Design Versus Performance","position":{"start":{"line":35,"column":5,"offset":3910},"end":{"line":35,"column":30,"offset":3935},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":3906},"end":{"line":35,"column":30,"offset":3935},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Whilst design is undoubtedly a major aspect to a website’s overall success, both developers and designers must work together to compromise and make a mutually beneficial trade-off between design and performance. The classic example is fonts. Take the two screenshots of a simple website below.","position":{"start":{"line":37,"column":1,"offset":3937},"end":{"line":37,"column":294,"offset":4230},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":3937},"end":{"line":37,"column":294,"offset":4230},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://res.cloudinary.com/patricoferris/image/upload/v1532780050/pf2018/blogposts/28-07-2018/Helvetica.png","alt":"The example website using Helvetica Font (commonly found on many computers) — check [this](https://css-tricks.com/snippets/css/system-font-stack/) link for common system fonts","position":{"start":{"line":39,"column":1,"offset":4232},"end":{"line":39,"column":288,"offset":4519},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":39,"column":288,"offset":4519},"end":{"line":40,"column":1,"offset":4520},"indent":[1]}},{"type":"emphasis","children":[{"type":"text","value":"The example website using Helvetica Font (commonly found on many computers) — check ","position":{"start":{"line":40,"column":2,"offset":4521},"end":{"line":40,"column":86,"offset":4605},"indent":[]}},{"type":"link","title":null,"url":"https://css-tricks.com/snippets/css/system-font-stack/","children":[{"type":"text","value":"this","position":{"start":{"line":40,"column":87,"offset":4606},"end":{"line":40,"column":91,"offset":4610},"indent":[]}}],"position":{"start":{"line":40,"column":86,"offset":4605},"end":{"line":40,"column":148,"offset":4667},"indent":[]}},{"type":"text","value":" link for common system fonts","position":{"start":{"line":40,"column":148,"offset":4667},"end":{"line":40,"column":177,"offset":4696},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":4520},"end":{"line":40,"column":178,"offset":4697},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":4232},"end":{"line":40,"column":178,"offset":4697},"indent":[1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://cdn-images-1.medium.com/max/5760/1*8ciuJNBdqMhlLSaOpNUXow.png","alt":"The example website using Roboto Font (designed by Google and linked from [Google Fonts](https://fonts.google.com/?selection.family=Roboto))","position":{"start":{"line":42,"column":1,"offset":4699},"end":{"line":42,"column":215,"offset":4913},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"The example website using Roboto Font (designed by Google and linked from ","position":{"start":{"line":42,"column":216,"offset":4914},"end":{"line":42,"column":290,"offset":4988},"indent":[]}},{"type":"link","title":null,"url":"https://fonts.google.com/?selection.family=Roboto","children":[{"type":"text","value":"Google Fonts","position":{"start":{"line":42,"column":291,"offset":4989},"end":{"line":42,"column":303,"offset":5001},"indent":[]}}],"position":{"start":{"line":42,"column":290,"offset":4988},"end":{"line":42,"column":355,"offset":5053},"indent":[]}},{"type":"text","value":")","position":{"start":{"line":42,"column":355,"offset":5053},"end":{"line":42,"column":356,"offset":5054},"indent":[]}}],"position":{"start":{"line":42,"column":215,"offset":4913},"end":{"line":42,"column":357,"offset":5055},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":4699},"end":{"line":42,"column":357,"offset":5055},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Before critiquing my questionable design skills take a moment to appreciate that these two fonts are very similar — yet the loading time for a website for the Roboto font was 0.22 seconds as compared with 0.17 for Helvetica. Whilst not that significant, using lots of custom fonts will slow down your website, although using Google Fonts’ API will help keep your website optimised. As an over-the-top example, linking 20 different fonts from the Google API increased the load time to 0.87 seconds.","position":{"start":{"line":44,"column":1,"offset":5057},"end":{"line":44,"column":498,"offset":5554},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":5057},"end":{"line":44,"column":498,"offset":5554},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Inlining your JavaScript and CSS","position":{"start":{"line":46,"column":5,"offset":5560},"end":{"line":46,"column":37,"offset":5592},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":5556},"end":{"line":46,"column":37,"offset":5592},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For each individual document or component of your website, when the parser reaches the script tag or link tag it sends and HTTP request for that document and if not stated differently, these will be blocking actions. What this means is your machine is parsing the HTML document getting the words to display in your browser but if it hits the script tag with the attribute src='js/main.js' for example, it will block the parsing and load in that file. This is where as a developer you need to be clever about where in the document you place things.","position":{"start":{"line":48,"column":1,"offset":5594},"end":{"line":48,"column":548,"offset":6141},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":5594},"end":{"line":48,"column":548,"offset":6141},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Whilst it may not ultimately affect the loading time of your website, it can affect the order in which things are loaded. Again we’ll be using the un-minified p5.js library to simulate a large JavaScript file and load it in different places to see how it affects our user experience.","position":{"start":{"line":50,"column":1,"offset":6143},"end":{"line":50,"column":284,"offset":6426},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":6143},"end":{"line":50,"column":284,"offset":6426},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://cdn-images-1.medium.com/max/2780/1*h_3GogfkaahcXCO9a43CPA.gif","alt":"Refreshing website with the script tag inserted at the bottom of the body tag","position":{"start":{"line":52,"column":1,"offset":6428},"end":{"line":52,"column":152,"offset":6579},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Refreshing website with the script tag inserted at the bottom of the body tag","position":{"start":{"line":52,"column":153,"offset":6580},"end":{"line":52,"column":230,"offset":6657},"indent":[]}}],"position":{"start":{"line":52,"column":152,"offset":6579},"end":{"line":52,"column":231,"offset":6658},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":6428},"end":{"line":52,"column":231,"offset":6658},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://cdn-images-1.medium.com/max/2780/1*xLOq5r4erQAwb4Au_hB-Ww.gif","alt":"Refreshing website with the script tag inserted at the top of the body tag","position":{"start":{"line":54,"column":1,"offset":6660},"end":{"line":54,"column":149,"offset":6808},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Refreshing website with the script tag inserted at the top of the body tag","position":{"start":{"line":54,"column":150,"offset":6809},"end":{"line":54,"column":224,"offset":6883},"indent":[]}}],"position":{"start":{"line":54,"column":149,"offset":6808},"end":{"line":54,"column":225,"offset":6884},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":6660},"end":{"line":54,"column":225,"offset":6884},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Whilst the load times were similar for both cases — the user experience is far better by placing the script at the body tag allowing the HTML to be parsed before the JavaScript giving the user the website content immediately!","position":{"start":{"line":56,"column":1,"offset":6886},"end":{"line":56,"column":226,"offset":7111},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":6886},"end":{"line":56,"column":226,"offset":7111},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In the same vein CSS can also be render-blocking especially because more often than not it is linked in the head tag of your HTML document before the body. But if we want our user to see the content in the quickest time we don’t want to be loading CSS for the footer of our document which the user won’t see until they’ve scrolled to the bottom. In fact, we don’t want to load any CSS in that the user can’t immediately see when the page first loads on their device.","position":{"start":{"line":58,"column":1,"offset":7113},"end":{"line":58,"column":467,"offset":7579},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":7113},"end":{"line":58,"column":467,"offset":7579},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The CSS that you need is often called the ","position":{"start":{"line":60,"column":1,"offset":7581},"end":{"line":60,"column":43,"offset":7623},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Critical CSS","position":{"start":{"line":60,"column":44,"offset":7624},"end":{"line":60,"column":56,"offset":7636},"indent":[]}}],"position":{"start":{"line":60,"column":43,"offset":7623},"end":{"line":60,"column":57,"offset":7637},"indent":[]}},{"type":"text","value":". Finding it for yourself would be a headache. It will be different for different devices, meaning you would have to check manually for all possible devices. Lucky for us we have (if you’re using ","position":{"start":{"line":60,"column":57,"offset":7637},"end":{"line":60,"column":253,"offset":7833},"indent":[]}},{"type":"link","title":null,"url":"https://nodejs.org/en/","children":[{"type":"text","value":"Node.js","position":{"start":{"line":60,"column":254,"offset":7834},"end":{"line":60,"column":261,"offset":7841},"indent":[]}}],"position":{"start":{"line":60,"column":253,"offset":7833},"end":{"line":60,"column":286,"offset":7866},"indent":[]}},{"type":"text","value":") ","position":{"start":{"line":60,"column":286,"offset":7866},"end":{"line":60,"column":288,"offset":7868},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/addyosmani/critical","children":[{"type":"text","value":"Critical","position":{"start":{"line":60,"column":289,"offset":7869},"end":{"line":60,"column":297,"offset":7877},"indent":[]}}],"position":{"start":{"line":60,"column":288,"offset":7868},"end":{"line":60,"column":338,"offset":7918},"indent":[]}},{"type":"text","value":". This helpful package does the CSS inlining for us and all we do is add some code to a Javascript file. Here’s a code snippet from the Github page.","position":{"start":{"line":60,"column":338,"offset":7918},"end":{"line":60,"column":486,"offset":8066},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":7581},"end":{"line":60,"column":486,"offset":8066},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","position":{"start":{"line":62,"column":1,"offset":8068},"end":{"line":73,"column":4,"offset":8329},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Using the generate function, we supply it with a JavaScript object with some values defined. base is where we’re going to save our src and dest (our project folder usually). What’s great is now we just supply an array of dimensions and the code will compute the critical CSS for each and inline that code into our head tag.","position":{"start":{"line":75,"column":1,"offset":8331},"end":{"line":75,"column":324,"offset":8654},"indent":[]}}],"position":{"start":{"line":75,"column":1,"offset":8331},"end":{"line":75,"column":324,"offset":8654},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Async and Defer","position":{"start":{"line":77,"column":5,"offset":8660},"end":{"line":77,"column":20,"offset":8675},"indent":[]}}],"position":{"start":{"line":77,"column":1,"offset":8656},"end":{"line":77,"column":20,"offset":8675},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Again, we come back to this idea of render-blocking and how best we should implement this for our website. When you have a plain script tag in your HTML it blocks the HTML from loading whilst the JavaScript loads ","position":{"start":{"line":79,"column":1,"offset":8677},"end":{"line":79,"column":214,"offset":8890},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"and","position":{"start":{"line":79,"column":216,"offset":8892},"end":{"line":79,"column":219,"offset":8895},"indent":[]}}],"position":{"start":{"line":79,"column":214,"offset":8890},"end":{"line":79,"column":221,"offset":8897},"indent":[]}},{"type":"text","value":" runs. Async and defer are simple attributes that you can add to your script tags that change the way your JavaScript will be loaded.","position":{"start":{"line":79,"column":221,"offset":8897},"end":{"line":79,"column":354,"offset":9030},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":8677},"end":{"line":79,"column":354,"offset":9030},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Defer essentially “defers” execution of the script until after the HTML has been parsed. A major advantage of this is that you no longer need some $(document).ready() jQuery-style function to make sure the body was loaded before you could manipulate it, which could cut out some of the dependencies on libraries like jQuery which helps reduce load-time.","position":{"start":{"line":81,"column":1,"offset":9032},"end":{"line":81,"column":354,"offset":9385},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":9032},"end":{"line":81,"column":354,"offset":9385},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Async is, unsurprisingly, the asynchronous loading of JavaScript files. What does this mean? Your HTML will continue to be parsed whilst the file is loaded and then whenever its ready the file will be executed. This helps improving user experience whilst viewing your website. Imagine for example you had a JavaScript file for doing some cool graphics. You want the words around this graphic to be parsed until your graphic is ready to be executed. As soon as it is ready, it is executed and we get a more seamless loading of our webpage without missing pieces.","position":{"start":{"line":83,"column":1,"offset":9387},"end":{"line":83,"column":562,"offset":9948},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":9387},"end":{"line":83,"column":562,"offset":9948},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Check this ","position":{"start":{"line":85,"column":1,"offset":9950},"end":{"line":85,"column":12,"offset":9961},"indent":[]}},{"type":"link","title":null,"url":"http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html","children":[{"type":"text","value":"website","position":{"start":{"line":85,"column":13,"offset":9962},"end":{"line":85,"column":20,"offset":9969},"indent":[]}}],"position":{"start":{"line":85,"column":12,"offset":9961},"end":{"line":85,"column":94,"offset":10043},"indent":[]}},{"type":"text","value":" for a really intuitive, graphical representation of this.","position":{"start":{"line":85,"column":94,"offset":10043},"end":{"line":85,"column":152,"offset":10101},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":9950},"end":{"line":85,"column":152,"offset":10101},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Image Optimisation and Media Queries","position":{"start":{"line":87,"column":5,"offset":10107},"end":{"line":87,"column":41,"offset":10143},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":10103},"end":{"line":87,"column":41,"offset":10143},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The cornerstone of all website performance optimisation is the simple rule that, the less data you send to the client, the quicker and better your website will perform. With the plethora of devices on the market capable of viewing websites, there is a growing trend to optimise your website based on the device it is being viewed on.","position":{"start":{"line":89,"column":1,"offset":10145},"end":{"line":89,"column":334,"offset":10478},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":10145},"end":{"line":89,"column":334,"offset":10478},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Media queries are a fairly new tool added to CSS3. With more and more content being consumed using mobile-devices there has been a shift in design thinking towards mobile first. Using media queries you can then add stylings for larger screen sizes.","position":{"start":{"line":91,"column":1,"offset":10480},"end":{"line":91,"column":249,"offset":10728},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":10480},"end":{"line":91,"column":249,"offset":10728},"indent":[]}},{"type":"html","lang":"css","value":"<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/* Some CSS for screen sizes bigger than 600px but smaller than 992px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/*  Some CSS for screen sizes bigger than 992px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">orientation</span><span class=\"token punctuation\">:</span> landscape<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* Some CSS for landscape-oriented devices */</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":93,"column":1,"offset":10730},"end":{"line":105,"column":4,"offset":11060},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The @media tag starts a new CSS rule, whilst the only keyword stops older browsers that don’t support media queries from using it. The screen keyword applies the rules to screens rather than prints. After that you add the media-feature which supports the and , or and not keywords so you can get as specific as you want. When you’re loading your image you can write code like:","position":{"start":{"line":107,"column":1,"offset":11062},"end":{"line":107,"column":377,"offset":11438},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":11062},"end":{"line":107,"column":377,"offset":11438},"indent":[]}},{"type":"html","lang":"css","value":"<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-small.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-big.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":109,"column":1,"offset":11440},"end":{"line":117,"column":4,"offset":11659},"indent":[1,1,1,1,1,1,1,1]}},{"type":"html","value":"<iframe src=\"https://medium.com/media/ecbcd475236339fbe45efdd97bfcdeed\" frameborder=0></iframe>","position":{"start":{"line":118,"column":1,"offset":11660},"end":{"line":118,"column":96,"offset":11755},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This isn’t necessarily the best or optimal approach for image optimisation. Luckily we have other options. ","position":{"start":{"line":120,"column":1,"offset":11757},"end":{"line":120,"column":108,"offset":11864},"indent":[]}},{"type":"link","title":null,"url":"https://www.imgix.com/","children":[{"type":"text","value":"Imgix","position":{"start":{"line":120,"column":109,"offset":11865},"end":{"line":120,"column":114,"offset":11870},"indent":[]}}],"position":{"start":{"line":120,"column":108,"offset":11864},"end":{"line":120,"column":139,"offset":11895},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":120,"column":139,"offset":11895},"end":{"line":120,"column":144,"offset":11900},"indent":[]}},{"type":"link","title":null,"url":"https://cloudinary.com/","children":[{"type":"text","value":"Cloudinary","position":{"start":{"line":120,"column":145,"offset":11901},"end":{"line":120,"column":155,"offset":11911},"indent":[]}}],"position":{"start":{"line":120,"column":144,"offset":11900},"end":{"line":120,"column":181,"offset":11937},"indent":[]}},{"type":"text","value":" are two ways you can help optimise your site for the right device. Imgix is a Content Delivery Network (CDN) for images with a lot of cool features. A CDN simply takes your files and spreads them across the globe so that someone in a different country doesn’t have to wait for your files on your server to make it all the way to them. This ","position":{"start":{"line":120,"column":181,"offset":11937},"end":{"line":120,"column":522,"offset":12278},"indent":[]}},{"type":"link","title":null,"url":"https://docs.imgix.com/tutorials/responsive-images-srcset-imgix","children":[{"type":"text","value":"tutorial","position":{"start":{"line":120,"column":523,"offset":12279},"end":{"line":120,"column":531,"offset":12287},"indent":[]}}],"position":{"start":{"line":120,"column":522,"offset":12278},"end":{"line":120,"column":597,"offset":12353},"indent":[]}},{"type":"text","value":" goes through how to use Imgix for different device pixel ratios. Cloudinary is a similar service, and their ","position":{"start":{"line":120,"column":597,"offset":12353},"end":{"line":120,"column":706,"offset":12462},"indent":[]}},{"type":"link","title":null,"url":"https://cloudinary.com/documentation/image_optimization","children":[{"type":"text","value":"tutorial ","position":{"start":{"line":120,"column":707,"offset":12463},"end":{"line":120,"column":716,"offset":12472},"indent":[]}}],"position":{"start":{"line":120,"column":706,"offset":12462},"end":{"line":120,"column":774,"offset":12530},"indent":[]}},{"type":"text","value":"will take you through the importance of optimisation and how to achieve it will their incredible services. Below is a small example showing how easy it is to use Cloudinary straight in the HTML markup.","position":{"start":{"line":120,"column":774,"offset":12530},"end":{"line":120,"column":975,"offset":12731},"indent":[]}}],"position":{"start":{"line":120,"column":1,"offset":11757},"end":{"line":120,"column":975,"offset":12731},"indent":[]}},{"type":"html","value":"<iframe src=\"https://medium.com/media/98868354e5bf607d317496f64ddec2a2\" frameborder=0></iframe>","position":{"start":{"line":122,"column":1,"offset":12733},"end":{"line":122,"column":96,"offset":12828},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As a last point on image optimisation, the format you use can have a large impact on file size. Some files contain lots of metadata which you don’t want to be serving to your client — ","position":{"start":{"line":124,"column":1,"offset":12830},"end":{"line":124,"column":185,"offset":13014},"indent":[]}},{"type":"link","title":null,"url":"https://www.sno.phy.queensu.ca/~phil/exiftool/","children":[{"type":"text","value":"ExifTool","position":{"start":{"line":124,"column":186,"offset":13015},"end":{"line":124,"column":194,"offset":13023},"indent":[]}}],"position":{"start":{"line":124,"column":185,"offset":13014},"end":{"line":124,"column":243,"offset":13072},"indent":[]}},{"type":"text","value":" is a commonly used command-line application that can help you trim down those files sizes. On top of this, Scalable Vector Graphics (SVG) are a web-standard developed by W3C that offers XML-based vector graphics. This means they have infinite resolution unlike PNG or JPG files. It also makes them highly versatile, easily editable and can even be animated. At the end of the day SVGs are just code and so the file sizes tend to be small. For more reasons to use them, check out this ","position":{"start":{"line":124,"column":243,"offset":13072},"end":{"line":124,"column":728,"offset":13557},"indent":[]}},{"type":"link","title":null,"url":"https://watb.co.uk/5-reasons-you-should-be-using-svgs-over-pngs/","children":[{"type":"text","value":"article","position":{"start":{"line":124,"column":729,"offset":13558},"end":{"line":124,"column":736,"offset":13565},"indent":[]}}],"position":{"start":{"line":124,"column":728,"offset":13557},"end":{"line":124,"column":803,"offset":13632},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":124,"column":803,"offset":13632},"end":{"line":124,"column":804,"offset":13633},"indent":[]}}],"position":{"start":{"line":124,"column":1,"offset":12830},"end":{"line":124,"column":804,"offset":13633},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":126,"column":5,"offset":13639},"end":{"line":126,"column":15,"offset":13649},"indent":[]}}],"position":{"start":{"line":126,"column":1,"offset":13635},"end":{"line":126,"column":15,"offset":13649},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We’ve only scratched the surface of what’s possible for website optimisation. There are many tools you can use to help you stream-line this process like ","position":{"start":{"line":128,"column":1,"offset":13651},"end":{"line":128,"column":154,"offset":13804},"indent":[]}},{"type":"link","title":null,"url":"https://webpack.js.org/","children":[{"type":"text","value":"Webpack","position":{"start":{"line":128,"column":155,"offset":13805},"end":{"line":128,"column":162,"offset":13812},"indent":[]}}],"position":{"start":{"line":128,"column":154,"offset":13804},"end":{"line":128,"column":188,"offset":13838},"indent":[]}},{"type":"text","value":" for bundling or static-site generators like ","position":{"start":{"line":128,"column":188,"offset":13838},"end":{"line":128,"column":233,"offset":13883},"indent":[]}},{"type":"link","title":null,"url":"https://www.gatsbyjs.org/","children":[{"type":"text","value":"Gatsby","position":{"start":{"line":128,"column":234,"offset":13884},"end":{"line":128,"column":240,"offset":13890},"indent":[]}}],"position":{"start":{"line":128,"column":233,"offset":13883},"end":{"line":128,"column":268,"offset":13918},"indent":[]}},{"type":"text","value":". ","position":{"start":{"line":128,"column":268,"offset":13918},"end":{"line":128,"column":270,"offset":13920},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking","children":[{"type":"text","value":"Tree shaking","position":{"start":{"line":128,"column":271,"offset":13921},"end":{"line":128,"column":283,"offset":13933},"indent":[]}}],"position":{"start":{"line":128,"column":270,"offset":13920},"end":{"line":128,"column":348,"offset":13998},"indent":[]}},{"type":"text","value":" is another commonly used technique to remove excess, unused modules lying around your website.","position":{"start":{"line":128,"column":348,"offset":13998},"end":{"line":128,"column":443,"offset":14093},"indent":[]}}],"position":{"start":{"line":128,"column":1,"offset":13651},"end":{"line":128,"column":443,"offset":14093},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Hopefully this article has touched on some useful techniques you can use on your next site to help improve its performance. Happy coding!","position":{"start":{"line":130,"column":1,"offset":14095},"end":{"line":130,"column":138,"offset":14232},"indent":[]}}],"position":{"start":{"line":130,"column":1,"offset":14095},"end":{"line":130,"column":138,"offset":14232},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A big thank you to ","position":{"start":{"line":132,"column":1,"offset":14234},"end":{"line":132,"column":20,"offset":14253},"indent":[]}},{"type":"link","title":null,"url":"undefined","children":[{"type":"text","value":"Christian Silver","position":{"start":{"line":132,"column":21,"offset":14254},"end":{"line":132,"column":37,"offset":14270},"indent":[]}}],"position":{"start":{"line":132,"column":20,"offset":14253},"end":{"line":132,"column":49,"offset":14282},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":132,"column":49,"offset":14282},"end":{"line":132,"column":54,"offset":14287},"indent":[]}},{"type":"link","title":null,"url":"undefined","children":[{"type":"text","value":"Charlie Crisp","position":{"start":{"line":132,"column":55,"offset":14288},"end":{"line":132,"column":68,"offset":14301},"indent":[]}}],"position":{"start":{"line":132,"column":54,"offset":14287},"end":{"line":132,"column":80,"offset":14313},"indent":[]}},{"type":"text","value":" for editing this post and providing extremely useful advice and extra content to make it even better.","position":{"start":{"line":132,"column":80,"offset":14313},"end":{"line":132,"column":182,"offset":14415},"indent":[]}}],"position":{"start":{"line":132,"column":1,"offset":14234},"end":{"line":132,"column":182,"offset":14415},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":133,"column":1,"offset":14416}}}},{"id":"transformer-remark-markdown-html-ast-b8bb1c4e6d1a49e8240486f3aee1c37f-gatsby-remark-imagesgatsby-remark-prismjs-","value":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/patricoferris/image/upload/v1532781201/pf2018/blogposts/28-07-2018/website_optimisation_2.png","alt":"Optimising your Website"},"children":[],"position":{"start":{"line":7,"column":1,"offset":154},"end":{"line":7,"column":149,"offset":302}}},{"type":"text","value":"\nInspired by a ","position":{"start":{"line":7,"column":149,"offset":302},"end":{"line":8,"column":15,"offset":317}}},{"type":"element","tagName":"a","properties":{"href":"https://syntax.fm/"},"children":[{"type":"text","value":"Syntax","position":{"start":{"line":8,"column":16,"offset":318},"end":{"line":8,"column":22,"offset":324}}}],"position":{"start":{"line":8,"column":15,"offset":317},"end":{"line":8,"column":43,"offset":345}}},{"type":"text","value":" podcast, I got really interested in website optimisation. It can often be an overlooked aspect in web development with more focus on design and functionality, I realised my number one priority whenever I visited a website is load speed. My attention is a website’s number one goal, lose it and they lose all potential ad revenue or possibility to give me whatever information I was looking for. ","position":{"start":{"line":8,"column":43,"offset":345},"end":{"line":8,"column":439,"offset":741}}},{"type":"element","tagName":"a","properties":{"href":"https://developers.google.com/web/fundamentals/performance/get-started/"},"children":[{"type":"text","value":"Many seem to agree. 53% of users abandon websites that take more than 3 seconds to load","position":{"start":{"line":8,"column":440,"offset":742},"end":{"line":8,"column":527,"offset":829}}}],"position":{"start":{"line":8,"column":439,"offset":741},"end":{"line":8,"column":601,"offset":903}}},{"type":"text","value":". No amount of fancy graphics or parallax scrolling that appears five seconds after someone’s clicked will hide the slow loading times.","position":{"start":{"line":8,"column":601,"offset":903},"end":{"line":8,"column":736,"offset":1038}}}],"position":{"start":{"line":7,"column":1,"offset":154},"end":{"line":8,"column":736,"offset":1038}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The aim of this article is to give a broad overview of the concepts and ideas behind optimising your website, experienced developers are likely already using things like Webpack (a module bundler) among other tools to speed-up their sites.","position":{"start":{"line":10,"column":1,"offset":1040},"end":{"line":10,"column":240,"offset":1279}}}],"position":{"start":{"line":10,"column":1,"offset":1040},"end":{"line":10,"column":240,"offset":1279}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For testing load-times I will be using the ","position":{"start":{"line":12,"column":1,"offset":1281},"end":{"line":12,"column":44,"offset":1324}}},{"type":"element","tagName":"a","properties":{"href":"https://chrome.google.com/webstore/detail/page-load-time/fploionmjgeclbkemipmkogoaohcdbig?hl=en"},"children":[{"type":"text","value":"Page Load Time ","position":{"start":{"line":12,"column":45,"offset":1325},"end":{"line":12,"column":60,"offset":1340}}}],"position":{"start":{"line":12,"column":44,"offset":1324},"end":{"line":12,"column":158,"offset":1438}}},{"type":"text","value":"Chrome extension. There are a few ways to measure website loading time including: ","position":{"start":{"line":12,"column":158,"offset":1438},"end":{"line":12,"column":240,"offset":1520}}},{"type":"element","tagName":"a","properties":{"href":"https://developers.google.com/web/tools/chrome-user-experience-report/"},"children":[{"type":"text","value":"first paint, first meaning paint, DOMContentLoaded","position":{"start":{"line":12,"column":241,"offset":1521},"end":{"line":12,"column":291,"offset":1571}}}],"position":{"start":{"line":12,"column":240,"offset":1520},"end":{"line":12,"column":364,"offset":1644}}},{"type":"text","value":" etc. For a more detailed look into what this timer measures, check out the Github repository below.\n","position":{"start":{"line":12,"column":364,"offset":1644},"end":{"line":13,"column":1,"offset":1745}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/alex-vv/chrome-load-timer"},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"alex-vv/chrome-load-timer","position":{"start":{"line":13,"column":4,"offset":1748},"end":{"line":13,"column":29,"offset":1773}}}],"position":{"start":{"line":13,"column":2,"offset":1746},"end":{"line":13,"column":31,"offset":1775}}},{"type":"text","value":"\n","position":{"start":{"line":13,"column":31,"offset":1775},"end":{"line":14,"column":1,"offset":1776}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"chrome-load-timer - Google Chrome extension to measure page load time and display it in the toolbar","position":{"start":{"line":14,"column":2,"offset":1777},"end":{"line":14,"column":101,"offset":1876}}}],"position":{"start":{"line":14,"column":1,"offset":1776},"end":{"line":14,"column":102,"offset":1877}}},{"type":"text","value":"github.com","position":{"start":{"line":14,"column":102,"offset":1877},"end":{"line":14,"column":112,"offset":1887}}}],"position":{"start":{"line":13,"column":1,"offset":1745},"end":{"line":14,"column":159,"offset":1934}}}],"position":{"start":{"line":12,"column":1,"offset":1281},"end":{"line":14,"column":159,"offset":1934}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Use Minified Stylesheets and Scripts","position":{"start":{"line":16,"column":7,"offset":1942},"end":{"line":16,"column":43,"offset":1978}}}],"position":{"start":{"line":16,"column":5,"offset":1940},"end":{"line":16,"column":45,"offset":1980}}}],"position":{"start":{"line":16,"column":1,"offset":1936},"end":{"line":16,"column":45,"offset":1980}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You would be amazed at how much performance can be gained by this simple trick. What is a minified document? When we write code it is never our job to make it optimised for the computer, instead our golden rule is to make it readable to humans. This improves readability, cuts down on debug time and makes it easier to maintain. However, to achieve this we often add extra spacing which costs us precious space. Minifying the code is trimming all this fat from what we’ve written to have code that produces the same result but is far more difficult to read and maintain. This is okay though, because a computer has no problem deciphering it. Take the following code for example.","position":{"start":{"line":18,"column":1,"offset":1982},"end":{"line":18,"column":679,"offset":2660}}}],"position":{"start":{"line":18,"column":1,"offset":1982},"end":{"line":18,"column":679,"offset":2660}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","position":{"start":{"line":20,"column":1,"offset":2662},"end":{"line":29,"column":4,"offset":2921}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Notice how, wherever possible, our line-breaks and spaces are gone. On top of that, the code in the for-loop is only one line so there’s no need for the curly braces which extends our code over three lines when it can be done in one. Does this make a difference?","position":{"start":{"line":31,"column":1,"offset":2923},"end":{"line":31,"column":263,"offset":3185}}}],"position":{"start":{"line":31,"column":1,"offset":2923},"end":{"line":31,"column":263,"offset":3185}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I tried it out on simple website that just had one script tag being loaded in for the graphics library ","position":{"start":{"line":33,"column":1,"offset":3187},"end":{"line":33,"column":104,"offset":3290}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/"},"children":[{"type":"text","value":"p5.js","position":{"start":{"line":33,"column":105,"offset":3291},"end":{"line":33,"column":110,"offset":3296}}}],"position":{"start":{"line":33,"column":104,"offset":3290},"end":{"line":33,"column":130,"offset":3316}}},{"type":"text","value":". Using the non-minified CDN link I got a load time of 0.25 seconds. Using the minified version I got a markedly improved load time of 0.08 seconds. Depending on what your website project is, there are a few ways to automatically minify code. If it is a ","position":{"start":{"line":33,"column":130,"offset":3316},"end":{"line":33,"column":384,"offset":3570}}},{"type":"element","tagName":"a","properties":{"href":"https://guide.meteor.com/build-tool.html"},"children":[{"type":"text","value":"Meteor app","position":{"start":{"line":33,"column":385,"offset":3571},"end":{"line":33,"column":395,"offset":3581}}}],"position":{"start":{"line":33,"column":384,"offset":3570},"end":{"line":33,"column":438,"offset":3624}}},{"type":"text","value":" it will be done automatically, using ","position":{"start":{"line":33,"column":438,"offset":3624},"end":{"line":33,"column":476,"offset":3662}}},{"type":"element","tagName":"a","properties":{"href":"https://webpack.js.org/guides/production/"},"children":[{"type":"text","value":"Webpack ","position":{"start":{"line":33,"column":477,"offset":3663},"end":{"line":33,"column":485,"offset":3671}}}],"position":{"start":{"line":33,"column":476,"offset":3662},"end":{"line":33,"column":529,"offset":3715}}},{"type":"text","value":"will also allow you to do this. Otherwise there are some online tools like ","position":{"start":{"line":33,"column":529,"offset":3715},"end":{"line":33,"column":604,"offset":3790}}},{"type":"element","tagName":"a","properties":{"href":"https://jscompress.com/"},"children":[{"type":"text","value":"JSCompress ","position":{"start":{"line":33,"column":605,"offset":3791},"end":{"line":33,"column":616,"offset":3802}}}],"position":{"start":{"line":33,"column":604,"offset":3790},"end":{"line":33,"column":642,"offset":3828}}},{"type":"text","value":"or ","position":{"start":{"line":33,"column":642,"offset":3828},"end":{"line":33,"column":645,"offset":3831}}},{"type":"element","tagName":"a","properties":{"href":"https://cssminifier.com/"},"children":[{"type":"text","value":"CSSMinifier ","position":{"start":{"line":33,"column":646,"offset":3832},"end":{"line":33,"column":658,"offset":3844}}}],"position":{"start":{"line":33,"column":645,"offset":3831},"end":{"line":33,"column":685,"offset":3871}}},{"type":"text","value":"that you can upload your code to.","position":{"start":{"line":33,"column":685,"offset":3871},"end":{"line":33,"column":718,"offset":3904}}}],"position":{"start":{"line":33,"column":1,"offset":3187},"end":{"line":33,"column":718,"offset":3904}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Design Versus Performance","position":{"start":{"line":35,"column":5,"offset":3910},"end":{"line":35,"column":30,"offset":3935}}}],"position":{"start":{"line":35,"column":1,"offset":3906},"end":{"line":35,"column":30,"offset":3935}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Whilst design is undoubtedly a major aspect to a website’s overall success, both developers and designers must work together to compromise and make a mutually beneficial trade-off between design and performance. The classic example is fonts. Take the two screenshots of a simple website below.","position":{"start":{"line":37,"column":1,"offset":3937},"end":{"line":37,"column":294,"offset":4230}}}],"position":{"start":{"line":37,"column":1,"offset":3937},"end":{"line":37,"column":294,"offset":4230}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/patricoferris/image/upload/v1532780050/pf2018/blogposts/28-07-2018/Helvetica.png","alt":"The example website using Helvetica Font (commonly found on many computers) — check [this](https://css-tricks.com/snippets/css/system-font-stack/) link for common system fonts"},"children":[],"position":{"start":{"line":39,"column":1,"offset":4232},"end":{"line":39,"column":288,"offset":4519}}},{"type":"text","value":"\n","position":{"start":{"line":39,"column":288,"offset":4519},"end":{"line":40,"column":1,"offset":4520}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The example website using Helvetica Font (commonly found on many computers) — check ","position":{"start":{"line":40,"column":2,"offset":4521},"end":{"line":40,"column":86,"offset":4605}}},{"type":"element","tagName":"a","properties":{"href":"https://css-tricks.com/snippets/css/system-font-stack/"},"children":[{"type":"text","value":"this","position":{"start":{"line":40,"column":87,"offset":4606},"end":{"line":40,"column":91,"offset":4610}}}],"position":{"start":{"line":40,"column":86,"offset":4605},"end":{"line":40,"column":148,"offset":4667}}},{"type":"text","value":" link for common system fonts","position":{"start":{"line":40,"column":148,"offset":4667},"end":{"line":40,"column":177,"offset":4696}}}],"position":{"start":{"line":40,"column":1,"offset":4520},"end":{"line":40,"column":178,"offset":4697}}}],"position":{"start":{"line":39,"column":1,"offset":4232},"end":{"line":40,"column":178,"offset":4697}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://cdn-images-1.medium.com/max/5760/1*8ciuJNBdqMhlLSaOpNUXow.png","alt":"The example website using Roboto Font (designed by Google and linked from [Google Fonts](https://fonts.google.com/?selection.family=Roboto))"},"children":[],"position":{"start":{"line":42,"column":1,"offset":4699},"end":{"line":42,"column":215,"offset":4913}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The example website using Roboto Font (designed by Google and linked from ","position":{"start":{"line":42,"column":216,"offset":4914},"end":{"line":42,"column":290,"offset":4988}}},{"type":"element","tagName":"a","properties":{"href":"https://fonts.google.com/?selection.family=Roboto"},"children":[{"type":"text","value":"Google Fonts","position":{"start":{"line":42,"column":291,"offset":4989},"end":{"line":42,"column":303,"offset":5001}}}],"position":{"start":{"line":42,"column":290,"offset":4988},"end":{"line":42,"column":355,"offset":5053}}},{"type":"text","value":")","position":{"start":{"line":42,"column":355,"offset":5053},"end":{"line":42,"column":356,"offset":5054}}}],"position":{"start":{"line":42,"column":215,"offset":4913},"end":{"line":42,"column":357,"offset":5055}}}],"position":{"start":{"line":42,"column":1,"offset":4699},"end":{"line":42,"column":357,"offset":5055}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Before critiquing my questionable design skills take a moment to appreciate that these two fonts are very similar — yet the loading time for a website for the Roboto font was 0.22 seconds as compared with 0.17 for Helvetica. Whilst not that significant, using lots of custom fonts will slow down your website, although using Google Fonts’ API will help keep your website optimised. As an over-the-top example, linking 20 different fonts from the Google API increased the load time to 0.87 seconds.","position":{"start":{"line":44,"column":1,"offset":5057},"end":{"line":44,"column":498,"offset":5554}}}],"position":{"start":{"line":44,"column":1,"offset":5057},"end":{"line":44,"column":498,"offset":5554}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Inlining your JavaScript and CSS","position":{"start":{"line":46,"column":5,"offset":5560},"end":{"line":46,"column":37,"offset":5592}}}],"position":{"start":{"line":46,"column":1,"offset":5556},"end":{"line":46,"column":37,"offset":5592}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For each individual document or component of your website, when the parser reaches the script tag or link tag it sends and HTTP request for that document and if not stated differently, these will be blocking actions. What this means is your machine is parsing the HTML document getting the words to display in your browser but if it hits the script tag with the attribute src='js/main.js' for example, it will block the parsing and load in that file. This is where as a developer you need to be clever about where in the document you place things.","position":{"start":{"line":48,"column":1,"offset":5594},"end":{"line":48,"column":548,"offset":6141}}}],"position":{"start":{"line":48,"column":1,"offset":5594},"end":{"line":48,"column":548,"offset":6141}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Whilst it may not ultimately affect the loading time of your website, it can affect the order in which things are loaded. Again we’ll be using the un-minified p5.js library to simulate a large JavaScript file and load it in different places to see how it affects our user experience.","position":{"start":{"line":50,"column":1,"offset":6143},"end":{"line":50,"column":284,"offset":6426}}}],"position":{"start":{"line":50,"column":1,"offset":6143},"end":{"line":50,"column":284,"offset":6426}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://cdn-images-1.medium.com/max/2780/1*h_3GogfkaahcXCO9a43CPA.gif","alt":"Refreshing website with the script tag inserted at the bottom of the body tag"},"children":[],"position":{"start":{"line":52,"column":1,"offset":6428},"end":{"line":52,"column":152,"offset":6579}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Refreshing website with the script tag inserted at the bottom of the body tag","position":{"start":{"line":52,"column":153,"offset":6580},"end":{"line":52,"column":230,"offset":6657}}}],"position":{"start":{"line":52,"column":152,"offset":6579},"end":{"line":52,"column":231,"offset":6658}}}],"position":{"start":{"line":52,"column":1,"offset":6428},"end":{"line":52,"column":231,"offset":6658}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://cdn-images-1.medium.com/max/2780/1*xLOq5r4erQAwb4Au_hB-Ww.gif","alt":"Refreshing website with the script tag inserted at the top of the body tag"},"children":[],"position":{"start":{"line":54,"column":1,"offset":6660},"end":{"line":54,"column":149,"offset":6808}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Refreshing website with the script tag inserted at the top of the body tag","position":{"start":{"line":54,"column":150,"offset":6809},"end":{"line":54,"column":224,"offset":6883}}}],"position":{"start":{"line":54,"column":149,"offset":6808},"end":{"line":54,"column":225,"offset":6884}}}],"position":{"start":{"line":54,"column":1,"offset":6660},"end":{"line":54,"column":225,"offset":6884}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Whilst the load times were similar for both cases — the user experience is far better by placing the script at the body tag allowing the HTML to be parsed before the JavaScript giving the user the website content immediately!","position":{"start":{"line":56,"column":1,"offset":6886},"end":{"line":56,"column":226,"offset":7111}}}],"position":{"start":{"line":56,"column":1,"offset":6886},"end":{"line":56,"column":226,"offset":7111}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In the same vein CSS can also be render-blocking especially because more often than not it is linked in the head tag of your HTML document before the body. But if we want our user to see the content in the quickest time we don’t want to be loading CSS for the footer of our document which the user won’t see until they’ve scrolled to the bottom. In fact, we don’t want to load any CSS in that the user can’t immediately see when the page first loads on their device.","position":{"start":{"line":58,"column":1,"offset":7113},"end":{"line":58,"column":467,"offset":7579}}}],"position":{"start":{"line":58,"column":1,"offset":7113},"end":{"line":58,"column":467,"offset":7579}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The CSS that you need is often called the ","position":{"start":{"line":60,"column":1,"offset":7581},"end":{"line":60,"column":43,"offset":7623}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Critical CSS","position":{"start":{"line":60,"column":44,"offset":7624},"end":{"line":60,"column":56,"offset":7636}}}],"position":{"start":{"line":60,"column":43,"offset":7623},"end":{"line":60,"column":57,"offset":7637}}},{"type":"text","value":". Finding it for yourself would be a headache. It will be different for different devices, meaning you would have to check manually for all possible devices. Lucky for us we have (if you’re using ","position":{"start":{"line":60,"column":57,"offset":7637},"end":{"line":60,"column":253,"offset":7833}}},{"type":"element","tagName":"a","properties":{"href":"https://nodejs.org/en/"},"children":[{"type":"text","value":"Node.js","position":{"start":{"line":60,"column":254,"offset":7834},"end":{"line":60,"column":261,"offset":7841}}}],"position":{"start":{"line":60,"column":253,"offset":7833},"end":{"line":60,"column":286,"offset":7866}}},{"type":"text","value":") ","position":{"start":{"line":60,"column":286,"offset":7866},"end":{"line":60,"column":288,"offset":7868}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/addyosmani/critical"},"children":[{"type":"text","value":"Critical","position":{"start":{"line":60,"column":289,"offset":7869},"end":{"line":60,"column":297,"offset":7877}}}],"position":{"start":{"line":60,"column":288,"offset":7868},"end":{"line":60,"column":338,"offset":7918}}},{"type":"text","value":". This helpful package does the CSS inlining for us and all we do is add some code to a Javascript file. Here’s a code snippet from the Github page.","position":{"start":{"line":60,"column":338,"offset":7918},"end":{"line":60,"column":486,"offset":8066}}}],"position":{"start":{"line":60,"column":1,"offset":7581},"end":{"line":60,"column":486,"offset":8066}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","position":{"start":{"line":62,"column":1,"offset":8068},"end":{"line":73,"column":4,"offset":8329}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Using the generate function, we supply it with a JavaScript object with some values defined. base is where we’re going to save our src and dest (our project folder usually). What’s great is now we just supply an array of dimensions and the code will compute the critical CSS for each and inline that code into our head tag.","position":{"start":{"line":75,"column":1,"offset":8331},"end":{"line":75,"column":324,"offset":8654}}}],"position":{"start":{"line":75,"column":1,"offset":8331},"end":{"line":75,"column":324,"offset":8654}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Async and Defer","position":{"start":{"line":77,"column":5,"offset":8660},"end":{"line":77,"column":20,"offset":8675}}}],"position":{"start":{"line":77,"column":1,"offset":8656},"end":{"line":77,"column":20,"offset":8675}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Again, we come back to this idea of render-blocking and how best we should implement this for our website. When you have a plain script tag in your HTML it blocks the HTML from loading whilst the JavaScript loads ","position":{"start":{"line":79,"column":1,"offset":8677},"end":{"line":79,"column":214,"offset":8890}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"and","position":{"start":{"line":79,"column":216,"offset":8892},"end":{"line":79,"column":219,"offset":8895}}}],"position":{"start":{"line":79,"column":214,"offset":8890},"end":{"line":79,"column":221,"offset":8897}}},{"type":"text","value":" runs. Async and defer are simple attributes that you can add to your script tags that change the way your JavaScript will be loaded.","position":{"start":{"line":79,"column":221,"offset":8897},"end":{"line":79,"column":354,"offset":9030}}}],"position":{"start":{"line":79,"column":1,"offset":8677},"end":{"line":79,"column":354,"offset":9030}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Defer essentially “defers” execution of the script until after the HTML has been parsed. A major advantage of this is that you no longer need some $(document).ready() jQuery-style function to make sure the body was loaded before you could manipulate it, which could cut out some of the dependencies on libraries like jQuery which helps reduce load-time.","position":{"start":{"line":81,"column":1,"offset":9032},"end":{"line":81,"column":354,"offset":9385}}}],"position":{"start":{"line":81,"column":1,"offset":9032},"end":{"line":81,"column":354,"offset":9385}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Async is, unsurprisingly, the asynchronous loading of JavaScript files. What does this mean? Your HTML will continue to be parsed whilst the file is loaded and then whenever its ready the file will be executed. This helps improving user experience whilst viewing your website. Imagine for example you had a JavaScript file for doing some cool graphics. You want the words around this graphic to be parsed until your graphic is ready to be executed. As soon as it is ready, it is executed and we get a more seamless loading of our webpage without missing pieces.","position":{"start":{"line":83,"column":1,"offset":9387},"end":{"line":83,"column":562,"offset":9948}}}],"position":{"start":{"line":83,"column":1,"offset":9387},"end":{"line":83,"column":562,"offset":9948}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Check this ","position":{"start":{"line":85,"column":1,"offset":9950},"end":{"line":85,"column":12,"offset":9961}}},{"type":"element","tagName":"a","properties":{"href":"http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html"},"children":[{"type":"text","value":"website","position":{"start":{"line":85,"column":13,"offset":9962},"end":{"line":85,"column":20,"offset":9969}}}],"position":{"start":{"line":85,"column":12,"offset":9961},"end":{"line":85,"column":94,"offset":10043}}},{"type":"text","value":" for a really intuitive, graphical representation of this.","position":{"start":{"line":85,"column":94,"offset":10043},"end":{"line":85,"column":152,"offset":10101}}}],"position":{"start":{"line":85,"column":1,"offset":9950},"end":{"line":85,"column":152,"offset":10101}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Image Optimisation and Media Queries","position":{"start":{"line":87,"column":5,"offset":10107},"end":{"line":87,"column":41,"offset":10143}}}],"position":{"start":{"line":87,"column":1,"offset":10103},"end":{"line":87,"column":41,"offset":10143}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The cornerstone of all website performance optimisation is the simple rule that, the less data you send to the client, the quicker and better your website will perform. With the plethora of devices on the market capable of viewing websites, there is a growing trend to optimise your website based on the device it is being viewed on.","position":{"start":{"line":89,"column":1,"offset":10145},"end":{"line":89,"column":334,"offset":10478}}}],"position":{"start":{"line":89,"column":1,"offset":10145},"end":{"line":89,"column":334,"offset":10478}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Media queries are a fairly new tool added to CSS3. With more and more content being consumed using mobile-devices there has been a shift in design thinking towards mobile first. Using media queries you can then add stylings for larger screen sizes.","position":{"start":{"line":91,"column":1,"offset":10480},"end":{"line":91,"column":249,"offset":10728}}}],"position":{"start":{"line":91,"column":1,"offset":10480},"end":{"line":91,"column":249,"offset":10728}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/* Some CSS for screen sizes bigger than 600px but smaller than 992px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/*  Some CSS for screen sizes bigger than 992px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">orientation</span><span class=\"token punctuation\">:</span> landscape<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* Some CSS for landscape-oriented devices */</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":93,"column":1,"offset":10730},"end":{"line":105,"column":4,"offset":11060}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The @media tag starts a new CSS rule, whilst the only keyword stops older browsers that don’t support media queries from using it. The screen keyword applies the rules to screens rather than prints. After that you add the media-feature which supports the and , or and not keywords so you can get as specific as you want. When you’re loading your image you can write code like:","position":{"start":{"line":107,"column":1,"offset":11062},"end":{"line":107,"column":377,"offset":11438}}}],"position":{"start":{"line":107,"column":1,"offset":11062},"end":{"line":107,"column":377,"offset":11438}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-small.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-big.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":109,"column":1,"offset":11440},"end":{"line":117,"column":4,"offset":11659}}},{"type":"text","value":"\n"},{"type":"raw","value":"<iframe src=\"https://medium.com/media/ecbcd475236339fbe45efdd97bfcdeed\" frameborder=0></iframe>","position":{"start":{"line":118,"column":1,"offset":11660},"end":{"line":118,"column":96,"offset":11755}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This isn’t necessarily the best or optimal approach for image optimisation. Luckily we have other options. ","position":{"start":{"line":120,"column":1,"offset":11757},"end":{"line":120,"column":108,"offset":11864}}},{"type":"element","tagName":"a","properties":{"href":"https://www.imgix.com/"},"children":[{"type":"text","value":"Imgix","position":{"start":{"line":120,"column":109,"offset":11865},"end":{"line":120,"column":114,"offset":11870}}}],"position":{"start":{"line":120,"column":108,"offset":11864},"end":{"line":120,"column":139,"offset":11895}}},{"type":"text","value":" and ","position":{"start":{"line":120,"column":139,"offset":11895},"end":{"line":120,"column":144,"offset":11900}}},{"type":"element","tagName":"a","properties":{"href":"https://cloudinary.com/"},"children":[{"type":"text","value":"Cloudinary","position":{"start":{"line":120,"column":145,"offset":11901},"end":{"line":120,"column":155,"offset":11911}}}],"position":{"start":{"line":120,"column":144,"offset":11900},"end":{"line":120,"column":181,"offset":11937}}},{"type":"text","value":" are two ways you can help optimise your site for the right device. Imgix is a Content Delivery Network (CDN) for images with a lot of cool features. A CDN simply takes your files and spreads them across the globe so that someone in a different country doesn’t have to wait for your files on your server to make it all the way to them. This ","position":{"start":{"line":120,"column":181,"offset":11937},"end":{"line":120,"column":522,"offset":12278}}},{"type":"element","tagName":"a","properties":{"href":"https://docs.imgix.com/tutorials/responsive-images-srcset-imgix"},"children":[{"type":"text","value":"tutorial","position":{"start":{"line":120,"column":523,"offset":12279},"end":{"line":120,"column":531,"offset":12287}}}],"position":{"start":{"line":120,"column":522,"offset":12278},"end":{"line":120,"column":597,"offset":12353}}},{"type":"text","value":" goes through how to use Imgix for different device pixel ratios. Cloudinary is a similar service, and their ","position":{"start":{"line":120,"column":597,"offset":12353},"end":{"line":120,"column":706,"offset":12462}}},{"type":"element","tagName":"a","properties":{"href":"https://cloudinary.com/documentation/image_optimization"},"children":[{"type":"text","value":"tutorial ","position":{"start":{"line":120,"column":707,"offset":12463},"end":{"line":120,"column":716,"offset":12472}}}],"position":{"start":{"line":120,"column":706,"offset":12462},"end":{"line":120,"column":774,"offset":12530}}},{"type":"text","value":"will take you through the importance of optimisation and how to achieve it will their incredible services. Below is a small example showing how easy it is to use Cloudinary straight in the HTML markup.","position":{"start":{"line":120,"column":774,"offset":12530},"end":{"line":120,"column":975,"offset":12731}}}],"position":{"start":{"line":120,"column":1,"offset":11757},"end":{"line":120,"column":975,"offset":12731}}},{"type":"text","value":"\n"},{"type":"raw","value":"<iframe src=\"https://medium.com/media/98868354e5bf607d317496f64ddec2a2\" frameborder=0></iframe>","position":{"start":{"line":122,"column":1,"offset":12733},"end":{"line":122,"column":96,"offset":12828}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As a last point on image optimisation, the format you use can have a large impact on file size. Some files contain lots of metadata which you don’t want to be serving to your client — ","position":{"start":{"line":124,"column":1,"offset":12830},"end":{"line":124,"column":185,"offset":13014}}},{"type":"element","tagName":"a","properties":{"href":"https://www.sno.phy.queensu.ca/~phil/exiftool/"},"children":[{"type":"text","value":"ExifTool","position":{"start":{"line":124,"column":186,"offset":13015},"end":{"line":124,"column":194,"offset":13023}}}],"position":{"start":{"line":124,"column":185,"offset":13014},"end":{"line":124,"column":243,"offset":13072}}},{"type":"text","value":" is a commonly used command-line application that can help you trim down those files sizes. On top of this, Scalable Vector Graphics (SVG) are a web-standard developed by W3C that offers XML-based vector graphics. This means they have infinite resolution unlike PNG or JPG files. It also makes them highly versatile, easily editable and can even be animated. At the end of the day SVGs are just code and so the file sizes tend to be small. For more reasons to use them, check out this ","position":{"start":{"line":124,"column":243,"offset":13072},"end":{"line":124,"column":728,"offset":13557}}},{"type":"element","tagName":"a","properties":{"href":"https://watb.co.uk/5-reasons-you-should-be-using-svgs-over-pngs/"},"children":[{"type":"text","value":"article","position":{"start":{"line":124,"column":729,"offset":13558},"end":{"line":124,"column":736,"offset":13565}}}],"position":{"start":{"line":124,"column":728,"offset":13557},"end":{"line":124,"column":803,"offset":13632}}},{"type":"text","value":".","position":{"start":{"line":124,"column":803,"offset":13632},"end":{"line":124,"column":804,"offset":13633}}}],"position":{"start":{"line":124,"column":1,"offset":12830},"end":{"line":124,"column":804,"offset":13633}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":126,"column":5,"offset":13639},"end":{"line":126,"column":15,"offset":13649}}}],"position":{"start":{"line":126,"column":1,"offset":13635},"end":{"line":126,"column":15,"offset":13649}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We’ve only scratched the surface of what’s possible for website optimisation. There are many tools you can use to help you stream-line this process like ","position":{"start":{"line":128,"column":1,"offset":13651},"end":{"line":128,"column":154,"offset":13804}}},{"type":"element","tagName":"a","properties":{"href":"https://webpack.js.org/"},"children":[{"type":"text","value":"Webpack","position":{"start":{"line":128,"column":155,"offset":13805},"end":{"line":128,"column":162,"offset":13812}}}],"position":{"start":{"line":128,"column":154,"offset":13804},"end":{"line":128,"column":188,"offset":13838}}},{"type":"text","value":" for bundling or static-site generators like ","position":{"start":{"line":128,"column":188,"offset":13838},"end":{"line":128,"column":233,"offset":13883}}},{"type":"element","tagName":"a","properties":{"href":"https://www.gatsbyjs.org/"},"children":[{"type":"text","value":"Gatsby","position":{"start":{"line":128,"column":234,"offset":13884},"end":{"line":128,"column":240,"offset":13890}}}],"position":{"start":{"line":128,"column":233,"offset":13883},"end":{"line":128,"column":268,"offset":13918}}},{"type":"text","value":". ","position":{"start":{"line":128,"column":268,"offset":13918},"end":{"line":128,"column":270,"offset":13920}}},{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking"},"children":[{"type":"text","value":"Tree shaking","position":{"start":{"line":128,"column":271,"offset":13921},"end":{"line":128,"column":283,"offset":13933}}}],"position":{"start":{"line":128,"column":270,"offset":13920},"end":{"line":128,"column":348,"offset":13998}}},{"type":"text","value":" is another commonly used technique to remove excess, unused modules lying around your website.","position":{"start":{"line":128,"column":348,"offset":13998},"end":{"line":128,"column":443,"offset":14093}}}],"position":{"start":{"line":128,"column":1,"offset":13651},"end":{"line":128,"column":443,"offset":14093}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Hopefully this article has touched on some useful techniques you can use on your next site to help improve its performance. Happy coding!","position":{"start":{"line":130,"column":1,"offset":14095},"end":{"line":130,"column":138,"offset":14232}}}],"position":{"start":{"line":130,"column":1,"offset":14095},"end":{"line":130,"column":138,"offset":14232}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A big thank you to ","position":{"start":{"line":132,"column":1,"offset":14234},"end":{"line":132,"column":20,"offset":14253}}},{"type":"element","tagName":"a","properties":{"href":"undefined"},"children":[{"type":"text","value":"Christian Silver","position":{"start":{"line":132,"column":21,"offset":14254},"end":{"line":132,"column":37,"offset":14270}}}],"position":{"start":{"line":132,"column":20,"offset":14253},"end":{"line":132,"column":49,"offset":14282}}},{"type":"text","value":" and ","position":{"start":{"line":132,"column":49,"offset":14282},"end":{"line":132,"column":54,"offset":14287}}},{"type":"element","tagName":"a","properties":{"href":"undefined"},"children":[{"type":"text","value":"Charlie Crisp","position":{"start":{"line":132,"column":55,"offset":14288},"end":{"line":132,"column":68,"offset":14301}}}],"position":{"start":{"line":132,"column":54,"offset":14287},"end":{"line":132,"column":80,"offset":14313}}},{"type":"text","value":" for editing this post and providing extremely useful advice and extra content to make it even better.","position":{"start":{"line":132,"column":80,"offset":14313},"end":{"line":132,"column":182,"offset":14415}}}],"position":{"start":{"line":132,"column":1,"offset":14234},"end":{"line":132,"column":182,"offset":14415}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":133,"column":1,"offset":14416}}}},{"id":"transformer-remark-markdown-html-b8bb1c4e6d1a49e8240486f3aee1c37f-gatsby-remark-imagesgatsby-remark-prismjs-","value":"<p><img src=\"https://res.cloudinary.com/patricoferris/image/upload/v1532781201/pf2018/blogposts/28-07-2018/website_optimisation_2.png\" alt=\"Optimising your Website\">\nInspired by a <a href=\"https://syntax.fm/\">Syntax</a> podcast, I got really interested in website optimisation. It can often be an overlooked aspect in web development with more focus on design and functionality, I realised my number one priority whenever I visited a website is load speed. My attention is a website’s number one goal, lose it and they lose all potential ad revenue or possibility to give me whatever information I was looking for. <a href=\"https://developers.google.com/web/fundamentals/performance/get-started/\">Many seem to agree. 53% of users abandon websites that take more than 3 seconds to load</a>. No amount of fancy graphics or parallax scrolling that appears five seconds after someone’s clicked will hide the slow loading times.</p>\n<p>The aim of this article is to give a broad overview of the concepts and ideas behind optimising your website, experienced developers are likely already using things like Webpack (a module bundler) among other tools to speed-up their sites.</p>\n<p>For testing load-times I will be using the <a href=\"https://chrome.google.com/webstore/detail/page-load-time/fploionmjgeclbkemipmkogoaohcdbig?hl=en\">Page Load Time </a>Chrome extension. There are a few ways to measure website loading time including: <a href=\"https://developers.google.com/web/tools/chrome-user-experience-report/\">first paint, first meaning paint, DOMContentLoaded</a> etc. For a more detailed look into what this timer measures, check out the Github repository below.\n<a href=\"https://github.com/alex-vv/chrome-load-timer\"><strong>alex-vv/chrome-load-timer</strong>\n<em>chrome-load-timer - Google Chrome extension to measure page load time and display it in the toolbar</em>github.com</a></p>\n<h3><strong>Use Minified Stylesheets and Scripts</strong></h3>\n<p>You would be amazed at how much performance can be gained by this simple trick. What is a minified document? When we write code it is never our job to make it optimised for the computer, instead our golden rule is to make it readable to humans. This improves readability, cuts down on debug time and makes it easier to maintain. However, to achieve this we often add extra spacing which costs us precious space. Minifying the code is trimming all this fat from what we’ve written to have code that produces the same result but is far more difficult to read and maintain. This is okay though, because a computer has no problem deciphering it. Take the following code for example.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Notice how, wherever possible, our line-breaks and spaces are gone. On top of that, the code in the for-loop is only one line so there’s no need for the curly braces which extends our code over three lines when it can be done in one. Does this make a difference?</p>\n<p>I tried it out on simple website that just had one script tag being loaded in for the graphics library <a href=\"https://p5js.org/\">p5.js</a>. Using the non-minified CDN link I got a load time of 0.25 seconds. Using the minified version I got a markedly improved load time of 0.08 seconds. Depending on what your website project is, there are a few ways to automatically minify code. If it is a <a href=\"https://guide.meteor.com/build-tool.html\">Meteor app</a> it will be done automatically, using <a href=\"https://webpack.js.org/guides/production/\">Webpack </a>will also allow you to do this. Otherwise there are some online tools like <a href=\"https://jscompress.com/\">JSCompress </a>or <a href=\"https://cssminifier.com/\">CSSMinifier </a>that you can upload your code to.</p>\n<h3>Design Versus Performance</h3>\n<p>Whilst design is undoubtedly a major aspect to a website’s overall success, both developers and designers must work together to compromise and make a mutually beneficial trade-off between design and performance. The classic example is fonts. Take the two screenshots of a simple website below.</p>\n<p><img src=\"https://res.cloudinary.com/patricoferris/image/upload/v1532780050/pf2018/blogposts/28-07-2018/Helvetica.png\" alt=\"The example website using Helvetica Font (commonly found on many computers) — check [this](https://css-tricks.com/snippets/css/system-font-stack/) link for common system fonts\">\n<em>The example website using Helvetica Font (commonly found on many computers) — check <a href=\"https://css-tricks.com/snippets/css/system-font-stack/\">this</a> link for common system fonts</em></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/5760/1*8ciuJNBdqMhlLSaOpNUXow.png\" alt=\"The example website using Roboto Font (designed by Google and linked from [Google Fonts](https://fonts.google.com/?selection.family=Roboto))\"><em>The example website using Roboto Font (designed by Google and linked from <a href=\"https://fonts.google.com/?selection.family=Roboto\">Google Fonts</a>)</em></p>\n<p>Before critiquing my questionable design skills take a moment to appreciate that these two fonts are very similar — yet the loading time for a website for the Roboto font was 0.22 seconds as compared with 0.17 for Helvetica. Whilst not that significant, using lots of custom fonts will slow down your website, although using Google Fonts’ API will help keep your website optimised. As an over-the-top example, linking 20 different fonts from the Google API increased the load time to 0.87 seconds.</p>\n<h3>Inlining your JavaScript and CSS</h3>\n<p>For each individual document or component of your website, when the parser reaches the script tag or link tag it sends and HTTP request for that document and if not stated differently, these will be blocking actions. What this means is your machine is parsing the HTML document getting the words to display in your browser but if it hits the script tag with the attribute src='js/main.js' for example, it will block the parsing and load in that file. This is where as a developer you need to be clever about where in the document you place things.</p>\n<p>Whilst it may not ultimately affect the loading time of your website, it can affect the order in which things are loaded. Again we’ll be using the un-minified p5.js library to simulate a large JavaScript file and load it in different places to see how it affects our user experience.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2780/1*h_3GogfkaahcXCO9a43CPA.gif\" alt=\"Refreshing website with the script tag inserted at the bottom of the body tag\"><em>Refreshing website with the script tag inserted at the bottom of the body tag</em></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2780/1*xLOq5r4erQAwb4Au_hB-Ww.gif\" alt=\"Refreshing website with the script tag inserted at the top of the body tag\"><em>Refreshing website with the script tag inserted at the top of the body tag</em></p>\n<p>Whilst the load times were similar for both cases — the user experience is far better by placing the script at the body tag allowing the HTML to be parsed before the JavaScript giving the user the website content immediately!</p>\n<p>In the same vein CSS can also be render-blocking especially because more often than not it is linked in the head tag of your HTML document before the body. But if we want our user to see the content in the quickest time we don’t want to be loading CSS for the footer of our document which the user won’t see until they’ve scrolled to the bottom. In fact, we don’t want to load any CSS in that the user can’t immediately see when the page first loads on their device.</p>\n<p>The CSS that you need is often called the <em>Critical CSS</em>. Finding it for yourself would be a headache. It will be different for different devices, meaning you would have to check manually for all possible devices. Lucky for us we have (if you’re using <a href=\"https://nodejs.org/en/\">Node.js</a>) <a href=\"https://github.com/addyosmani/critical\">Critical</a>. This helpful package does the CSS inlining for us and all we do is add some code to a Javascript file. Here’s a code snippet from the Github page.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Using the generate function, we supply it with a JavaScript object with some values defined. base is where we’re going to save our src and dest (our project folder usually). What’s great is now we just supply an array of dimensions and the code will compute the critical CSS for each and inline that code into our head tag.</p>\n<h3>Async and Defer</h3>\n<p>Again, we come back to this idea of render-blocking and how best we should implement this for our website. When you have a plain script tag in your HTML it blocks the HTML from loading whilst the JavaScript loads <strong>and</strong> runs. Async and defer are simple attributes that you can add to your script tags that change the way your JavaScript will be loaded.</p>\n<p>Defer essentially “defers” execution of the script until after the HTML has been parsed. A major advantage of this is that you no longer need some $(document).ready() jQuery-style function to make sure the body was loaded before you could manipulate it, which could cut out some of the dependencies on libraries like jQuery which helps reduce load-time.</p>\n<p>Async is, unsurprisingly, the asynchronous loading of JavaScript files. What does this mean? Your HTML will continue to be parsed whilst the file is loaded and then whenever its ready the file will be executed. This helps improving user experience whilst viewing your website. Imagine for example you had a JavaScript file for doing some cool graphics. You want the words around this graphic to be parsed until your graphic is ready to be executed. As soon as it is ready, it is executed and we get a more seamless loading of our webpage without missing pieces.</p>\n<p>Check this <a href=\"http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html\">website</a> for a really intuitive, graphical representation of this.</p>\n<h3>Image Optimisation and Media Queries</h3>\n<p>The cornerstone of all website performance optimisation is the simple rule that, the less data you send to the client, the quicker and better your website will perform. With the plethora of devices on the market capable of viewing websites, there is a growing trend to optimise your website based on the device it is being viewed on.</p>\n<p>Media queries are a fairly new tool added to CSS3. With more and more content being consumed using mobile-devices there has been a shift in design thinking towards mobile first. Using media queries you can then add stylings for larger screen sizes.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/* Some CSS for screen sizes bigger than 600px but smaller than 992px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/*  Some CSS for screen sizes bigger than 992px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">orientation</span><span class=\"token punctuation\">:</span> landscape<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* Some CSS for landscape-oriented devices */</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>The @media tag starts a new CSS rule, whilst the only keyword stops older browsers that don’t support media queries from using it. The screen keyword applies the rules to screens rather than prints. After that you add the media-feature which supports the and , or and not keywords so you can get as specific as you want. When you’re loading your image you can write code like:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-small.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-big.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<iframe src=\"https://medium.com/media/ecbcd475236339fbe45efdd97bfcdeed\" frameborder=0></iframe>\n<p>This isn’t necessarily the best or optimal approach for image optimisation. Luckily we have other options. <a href=\"https://www.imgix.com/\">Imgix</a> and <a href=\"https://cloudinary.com/\">Cloudinary</a> are two ways you can help optimise your site for the right device. Imgix is a Content Delivery Network (CDN) for images with a lot of cool features. A CDN simply takes your files and spreads them across the globe so that someone in a different country doesn’t have to wait for your files on your server to make it all the way to them. This <a href=\"https://docs.imgix.com/tutorials/responsive-images-srcset-imgix\">tutorial</a> goes through how to use Imgix for different device pixel ratios. Cloudinary is a similar service, and their <a href=\"https://cloudinary.com/documentation/image_optimization\">tutorial </a>will take you through the importance of optimisation and how to achieve it will their incredible services. Below is a small example showing how easy it is to use Cloudinary straight in the HTML markup.</p>\n<iframe src=\"https://medium.com/media/98868354e5bf607d317496f64ddec2a2\" frameborder=0></iframe>\n<p>As a last point on image optimisation, the format you use can have a large impact on file size. Some files contain lots of metadata which you don’t want to be serving to your client — <a href=\"https://www.sno.phy.queensu.ca/~phil/exiftool/\">ExifTool</a> is a commonly used command-line application that can help you trim down those files sizes. On top of this, Scalable Vector Graphics (SVG) are a web-standard developed by W3C that offers XML-based vector graphics. This means they have infinite resolution unlike PNG or JPG files. It also makes them highly versatile, easily editable and can even be animated. At the end of the day SVGs are just code and so the file sizes tend to be small. For more reasons to use them, check out this <a href=\"https://watb.co.uk/5-reasons-you-should-be-using-svgs-over-pngs/\">article</a>.</p>\n<h3>Conclusion</h3>\n<p>We’ve only scratched the surface of what’s possible for website optimisation. There are many tools you can use to help you stream-line this process like <a href=\"https://webpack.js.org/\">Webpack</a> for bundling or static-site generators like <a href=\"https://www.gatsbyjs.org/\">Gatsby</a>. <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking\">Tree shaking</a> is another commonly used technique to remove excess, unused modules lying around your website.</p>\n<p>Hopefully this article has touched on some useful techniques you can use on your next site to help improve its performance. Happy coding!</p>\n<p>A big thank you to <a href=\"undefined\">Christian Silver</a> and <a href=\"undefined\">Charlie Crisp</a> for editing this post and providing extremely useful advice and extra content to make it even better.</p>"},{"id":"transformer-remark-markdown-ast-45150650ad44017e5ae8e21fed0f0504-gatsby-remark-imagesgatsby-remark-prismjs-","value":{"type":"root","children":[{"type":"yaml","value":"path: '/optimise-your-website'\ntitle: 'Optimising your Website'\nsubtitle: 'Tips and tricks to keep your website lean and fast'\ndate: '2018-07-28'","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":6,"column":4,"offset":153},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://res.cloudinary.com/patricoferris/image/upload/v1532781201/pf2018/blogposts/28-07-2018/website_optimisation_2.png","alt":"Optimising your Website","position":{"start":{"line":7,"column":1,"offset":154},"end":{"line":7,"column":149,"offset":302},"indent":[]}},{"type":"text","value":"\nInspired by a ","position":{"start":{"line":7,"column":149,"offset":302},"end":{"line":8,"column":15,"offset":317},"indent":[1]}},{"type":"link","title":null,"url":"https://syntax.fm/","children":[{"type":"text","value":"Syntax","position":{"start":{"line":8,"column":16,"offset":318},"end":{"line":8,"column":22,"offset":324},"indent":[]}}],"position":{"start":{"line":8,"column":15,"offset":317},"end":{"line":8,"column":43,"offset":345},"indent":[]}},{"type":"text","value":" podcast, I got really interested in website optimisation. It can often be an overlooked aspect in web development with more focus on design and functionality, I realised my number one priority whenever I visited a website is load speed. My attention is a website’s number one goal, lose it and they lose all potential ad revenue or possibility to give me whatever information I was looking for. ","position":{"start":{"line":8,"column":43,"offset":345},"end":{"line":8,"column":439,"offset":741},"indent":[]}},{"type":"link","title":null,"url":"https://developers.google.com/web/fundamentals/performance/get-started/","children":[{"type":"text","value":"Many seem to agree. 53% of users abandon websites that take more than 3 seconds to load","position":{"start":{"line":8,"column":440,"offset":742},"end":{"line":8,"column":527,"offset":829},"indent":[]}}],"position":{"start":{"line":8,"column":439,"offset":741},"end":{"line":8,"column":601,"offset":903},"indent":[]}},{"type":"text","value":". No amount of fancy graphics or parallax scrolling that appears five seconds after someone’s clicked will hide the slow loading times.","position":{"start":{"line":8,"column":601,"offset":903},"end":{"line":8,"column":736,"offset":1038},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":154},"end":{"line":8,"column":736,"offset":1038},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"The aim of this article is to give a broad overview of the concepts and ideas behind optimising your website, experienced developers are likely already using things like Webpack (a module bundler) among other tools to speed-up their sites.","position":{"start":{"line":10,"column":1,"offset":1040},"end":{"line":10,"column":240,"offset":1279},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":1040},"end":{"line":10,"column":240,"offset":1279},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For testing load-times I will be using the ","position":{"start":{"line":12,"column":1,"offset":1281},"end":{"line":12,"column":44,"offset":1324},"indent":[]}},{"type":"link","title":null,"url":"https://chrome.google.com/webstore/detail/page-load-time/fploionmjgeclbkemipmkogoaohcdbig?hl=en","children":[{"type":"text","value":"Page Load Time ","position":{"start":{"line":12,"column":45,"offset":1325},"end":{"line":12,"column":60,"offset":1340},"indent":[]}}],"position":{"start":{"line":12,"column":44,"offset":1324},"end":{"line":12,"column":158,"offset":1438},"indent":[]}},{"type":"text","value":"Chrome extension. There are a few ways to measure website loading time including: ","position":{"start":{"line":12,"column":158,"offset":1438},"end":{"line":12,"column":240,"offset":1520},"indent":[]}},{"type":"link","title":null,"url":"https://developers.google.com/web/tools/chrome-user-experience-report/","children":[{"type":"text","value":"first paint, first meaning paint, DOMContentLoaded","position":{"start":{"line":12,"column":241,"offset":1521},"end":{"line":12,"column":291,"offset":1571},"indent":[]}}],"position":{"start":{"line":12,"column":240,"offset":1520},"end":{"line":12,"column":364,"offset":1644},"indent":[]}},{"type":"text","value":" etc. For a more detailed look into what this timer measures, check out the Github repository below.\n","position":{"start":{"line":12,"column":364,"offset":1644},"end":{"line":13,"column":1,"offset":1745},"indent":[1]}},{"type":"link","title":null,"url":"https://github.com/alex-vv/chrome-load-timer","children":[{"type":"strong","children":[{"type":"text","value":"alex-vv/chrome-load-timer","position":{"start":{"line":13,"column":4,"offset":1748},"end":{"line":13,"column":29,"offset":1773},"indent":[]}}],"position":{"start":{"line":13,"column":2,"offset":1746},"end":{"line":13,"column":31,"offset":1775},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":13,"column":31,"offset":1775},"end":{"line":14,"column":1,"offset":1776},"indent":[1]}},{"type":"emphasis","children":[{"type":"text","value":"chrome-load-timer - Google Chrome extension to measure page load time and display it in the toolbar","position":{"start":{"line":14,"column":2,"offset":1777},"end":{"line":14,"column":101,"offset":1876},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":1776},"end":{"line":14,"column":102,"offset":1877},"indent":[]}},{"type":"text","value":"github.com","position":{"start":{"line":14,"column":102,"offset":1877},"end":{"line":14,"column":112,"offset":1887},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":1745},"end":{"line":14,"column":159,"offset":1934},"indent":[1]}}],"position":{"start":{"line":12,"column":1,"offset":1281},"end":{"line":14,"column":159,"offset":1934},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"strong","children":[{"type":"text","value":"Use Minified Stylesheets and Scripts","position":{"start":{"line":16,"column":7,"offset":1942},"end":{"line":16,"column":43,"offset":1978},"indent":[]}}],"position":{"start":{"line":16,"column":5,"offset":1940},"end":{"line":16,"column":45,"offset":1980},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":1936},"end":{"line":16,"column":45,"offset":1980},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You would be amazed at how much performance can be gained by this simple trick. What is a minified document? When we write code it is never our job to make it optimised for the computer, instead our golden rule is to make it readable to humans. This improves readability, cuts down on debug time and makes it easier to maintain. However, to achieve this we often add extra spacing which costs us precious space. Minifying the code is trimming all this fat from what we’ve written to have code that produces the same result but is far more difficult to read and maintain. This is okay though, because a computer has no problem deciphering it. Take the following code for example.","position":{"start":{"line":18,"column":1,"offset":1982},"end":{"line":18,"column":679,"offset":2660},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1982},"end":{"line":18,"column":679,"offset":2660},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","position":{"start":{"line":20,"column":1,"offset":2662},"end":{"line":29,"column":4,"offset":2921},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Notice how, wherever possible, our line-breaks and spaces are gone. On top of that, the code in the for-loop is only one line so there’s no need for the curly braces which extends our code over three lines when it can be done in one. Does this make a difference?","position":{"start":{"line":31,"column":1,"offset":2923},"end":{"line":31,"column":263,"offset":3185},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":2923},"end":{"line":31,"column":263,"offset":3185},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"I tried it out on simple website that just had one script tag being loaded in for the graphics library ","position":{"start":{"line":33,"column":1,"offset":3187},"end":{"line":33,"column":104,"offset":3290},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/","children":[{"type":"text","value":"p5.js","position":{"start":{"line":33,"column":105,"offset":3291},"end":{"line":33,"column":110,"offset":3296},"indent":[]}}],"position":{"start":{"line":33,"column":104,"offset":3290},"end":{"line":33,"column":130,"offset":3316},"indent":[]}},{"type":"text","value":". Using the non-minified CDN link I got a load time of 0.25 seconds. Using the minified version I got a markedly improved load time of 0.08 seconds. Depending on what your website project is, there are a few ways to automatically minify code. If it is a ","position":{"start":{"line":33,"column":130,"offset":3316},"end":{"line":33,"column":384,"offset":3570},"indent":[]}},{"type":"link","title":null,"url":"https://guide.meteor.com/build-tool.html","children":[{"type":"text","value":"Meteor app","position":{"start":{"line":33,"column":385,"offset":3571},"end":{"line":33,"column":395,"offset":3581},"indent":[]}}],"position":{"start":{"line":33,"column":384,"offset":3570},"end":{"line":33,"column":438,"offset":3624},"indent":[]}},{"type":"text","value":" it will be done automatically, using ","position":{"start":{"line":33,"column":438,"offset":3624},"end":{"line":33,"column":476,"offset":3662},"indent":[]}},{"type":"link","title":null,"url":"https://webpack.js.org/guides/production/","children":[{"type":"text","value":"Webpack ","position":{"start":{"line":33,"column":477,"offset":3663},"end":{"line":33,"column":485,"offset":3671},"indent":[]}}],"position":{"start":{"line":33,"column":476,"offset":3662},"end":{"line":33,"column":529,"offset":3715},"indent":[]}},{"type":"text","value":"will also allow you to do this. Otherwise there are some online tools like ","position":{"start":{"line":33,"column":529,"offset":3715},"end":{"line":33,"column":604,"offset":3790},"indent":[]}},{"type":"link","title":null,"url":"https://jscompress.com/","children":[{"type":"text","value":"JSCompress ","position":{"start":{"line":33,"column":605,"offset":3791},"end":{"line":33,"column":616,"offset":3802},"indent":[]}}],"position":{"start":{"line":33,"column":604,"offset":3790},"end":{"line":33,"column":642,"offset":3828},"indent":[]}},{"type":"text","value":"or ","position":{"start":{"line":33,"column":642,"offset":3828},"end":{"line":33,"column":645,"offset":3831},"indent":[]}},{"type":"link","title":null,"url":"https://cssminifier.com/","children":[{"type":"text","value":"CSSMinifier ","position":{"start":{"line":33,"column":646,"offset":3832},"end":{"line":33,"column":658,"offset":3844},"indent":[]}}],"position":{"start":{"line":33,"column":645,"offset":3831},"end":{"line":33,"column":685,"offset":3871},"indent":[]}},{"type":"text","value":"that you can upload your code to.","position":{"start":{"line":33,"column":685,"offset":3871},"end":{"line":33,"column":718,"offset":3904},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":3187},"end":{"line":33,"column":718,"offset":3904},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Design Versus Performance","position":{"start":{"line":35,"column":5,"offset":3910},"end":{"line":35,"column":30,"offset":3935},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":3906},"end":{"line":35,"column":30,"offset":3935},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Whilst design is undoubtedly a major aspect to a website’s overall success, both developers and designers must work together to compromise and make a mutually beneficial trade-off between design and performance. The classic example is fonts. Take the two screenshots of a simple website below.","position":{"start":{"line":37,"column":1,"offset":3937},"end":{"line":37,"column":294,"offset":4230},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":3937},"end":{"line":37,"column":294,"offset":4230},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://res.cloudinary.com/patricoferris/image/upload/v1532780050/pf2018/blogposts/28-07-2018/Helvetica.png","alt":"The example website using Helvetica Font (commonly found on many computers) — check [this](https://css-tricks.com/snippets/css/system-font-stack/) link for common system fonts","position":{"start":{"line":39,"column":1,"offset":4232},"end":{"line":39,"column":288,"offset":4519},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":39,"column":288,"offset":4519},"end":{"line":40,"column":1,"offset":4520},"indent":[1]}},{"type":"emphasis","children":[{"type":"text","value":"The example website using Helvetica Font (commonly found on many computers) — check ","position":{"start":{"line":40,"column":2,"offset":4521},"end":{"line":40,"column":86,"offset":4605},"indent":[]}},{"type":"link","title":null,"url":"https://css-tricks.com/snippets/css/system-font-stack/","children":[{"type":"text","value":"this","position":{"start":{"line":40,"column":87,"offset":4606},"end":{"line":40,"column":91,"offset":4610},"indent":[]}}],"position":{"start":{"line":40,"column":86,"offset":4605},"end":{"line":40,"column":148,"offset":4667},"indent":[]}},{"type":"text","value":" link for common system fonts","position":{"start":{"line":40,"column":148,"offset":4667},"end":{"line":40,"column":177,"offset":4696},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":4520},"end":{"line":40,"column":178,"offset":4697},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":4232},"end":{"line":40,"column":178,"offset":4697},"indent":[1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://cdn-images-1.medium.com/max/5760/1*8ciuJNBdqMhlLSaOpNUXow.png","alt":"The example website using Roboto Font (designed by Google and linked from [Google Fonts](https://fonts.google.com/?selection.family=Roboto))","position":{"start":{"line":42,"column":1,"offset":4699},"end":{"line":42,"column":215,"offset":4913},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"The example website using Roboto Font (designed by Google and linked from ","position":{"start":{"line":42,"column":216,"offset":4914},"end":{"line":42,"column":290,"offset":4988},"indent":[]}},{"type":"link","title":null,"url":"https://fonts.google.com/?selection.family=Roboto","children":[{"type":"text","value":"Google Fonts","position":{"start":{"line":42,"column":291,"offset":4989},"end":{"line":42,"column":303,"offset":5001},"indent":[]}}],"position":{"start":{"line":42,"column":290,"offset":4988},"end":{"line":42,"column":355,"offset":5053},"indent":[]}},{"type":"text","value":")","position":{"start":{"line":42,"column":355,"offset":5053},"end":{"line":42,"column":356,"offset":5054},"indent":[]}}],"position":{"start":{"line":42,"column":215,"offset":4913},"end":{"line":42,"column":357,"offset":5055},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":4699},"end":{"line":42,"column":357,"offset":5055},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Before critiquing my questionable design skills take a moment to appreciate that these two fonts are very similar — yet the loading time for a website for the Roboto font was 0.22 seconds as compared with 0.17 for Helvetica. Whilst not that significant, using lots of custom fonts will slow down your website, although using Google Fonts’ API will help keep your website optimised. As an over-the-top example, linking 20 different fonts from the Google API increased the load time to 0.87 seconds.","position":{"start":{"line":44,"column":1,"offset":5057},"end":{"line":44,"column":498,"offset":5554},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":5057},"end":{"line":44,"column":498,"offset":5554},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Inlining your JavaScript and CSS","position":{"start":{"line":46,"column":5,"offset":5560},"end":{"line":46,"column":37,"offset":5592},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":5556},"end":{"line":46,"column":37,"offset":5592},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For each individual document or component of your website, when the parser reaches the script tag or link tag it sends and HTTP request for that document and if not stated differently, these will be blocking actions. What this means is your machine is parsing the HTML document getting the words to display in your browser but if it hits the script tag with the attribute src='js/main.js' for example, it will block the parsing and load in that file. This is where as a developer you need to be clever about where in the document you place things.","position":{"start":{"line":48,"column":1,"offset":5594},"end":{"line":48,"column":548,"offset":6141},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":5594},"end":{"line":48,"column":548,"offset":6141},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Whilst it may not ultimately affect the loading time of your website, it can affect the order in which things are loaded. Again we’ll be using the un-minified p5.js library to simulate a large JavaScript file and load it in different places to see how it affects our user experience.","position":{"start":{"line":50,"column":1,"offset":6143},"end":{"line":50,"column":284,"offset":6426},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":6143},"end":{"line":50,"column":284,"offset":6426},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://cdn-images-1.medium.com/max/2780/1*h_3GogfkaahcXCO9a43CPA.gif","alt":"Refreshing website with the script tag inserted at the bottom of the body tag","position":{"start":{"line":52,"column":1,"offset":6428},"end":{"line":52,"column":152,"offset":6579},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Refreshing website with the script tag inserted at the bottom of the body tag","position":{"start":{"line":52,"column":153,"offset":6580},"end":{"line":52,"column":230,"offset":6657},"indent":[]}}],"position":{"start":{"line":52,"column":152,"offset":6579},"end":{"line":52,"column":231,"offset":6658},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":6428},"end":{"line":52,"column":231,"offset":6658},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://cdn-images-1.medium.com/max/2780/1*xLOq5r4erQAwb4Au_hB-Ww.gif","alt":"Refreshing website with the script tag inserted at the top of the body tag","position":{"start":{"line":54,"column":1,"offset":6660},"end":{"line":54,"column":149,"offset":6808},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Refreshing website with the script tag inserted at the top of the body tag","position":{"start":{"line":54,"column":150,"offset":6809},"end":{"line":54,"column":224,"offset":6883},"indent":[]}}],"position":{"start":{"line":54,"column":149,"offset":6808},"end":{"line":54,"column":225,"offset":6884},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":6660},"end":{"line":54,"column":225,"offset":6884},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Whilst the load times were similar for both cases — the user experience is far better by placing the script at the body tag allowing the HTML to be parsed before the JavaScript giving the user the website content immediately!","position":{"start":{"line":56,"column":1,"offset":6886},"end":{"line":56,"column":226,"offset":7111},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":6886},"end":{"line":56,"column":226,"offset":7111},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In the same vein CSS can also be render-blocking especially because more often than not it is linked in the head tag of your HTML document before the body. But if we want our user to see the content in the quickest time we don’t want to be loading CSS for the footer of our document which the user won’t see until they’ve scrolled to the bottom. In fact, we don’t want to load any CSS in that the user can’t immediately see when the page first loads on their device.","position":{"start":{"line":58,"column":1,"offset":7113},"end":{"line":58,"column":467,"offset":7579},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":7113},"end":{"line":58,"column":467,"offset":7579},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The CSS that you need is often called the ","position":{"start":{"line":60,"column":1,"offset":7581},"end":{"line":60,"column":43,"offset":7623},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Critical CSS","position":{"start":{"line":60,"column":44,"offset":7624},"end":{"line":60,"column":56,"offset":7636},"indent":[]}}],"position":{"start":{"line":60,"column":43,"offset":7623},"end":{"line":60,"column":57,"offset":7637},"indent":[]}},{"type":"text","value":". Finding it for yourself would be a headache. It will be different for different devices, meaning you would have to check manually for all possible devices. Lucky for us we have (if you’re using ","position":{"start":{"line":60,"column":57,"offset":7637},"end":{"line":60,"column":253,"offset":7833},"indent":[]}},{"type":"link","title":null,"url":"https://nodejs.org/en/","children":[{"type":"text","value":"Node.js","position":{"start":{"line":60,"column":254,"offset":7834},"end":{"line":60,"column":261,"offset":7841},"indent":[]}}],"position":{"start":{"line":60,"column":253,"offset":7833},"end":{"line":60,"column":286,"offset":7866},"indent":[]}},{"type":"text","value":") ","position":{"start":{"line":60,"column":286,"offset":7866},"end":{"line":60,"column":288,"offset":7868},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/addyosmani/critical","children":[{"type":"text","value":"Critical","position":{"start":{"line":60,"column":289,"offset":7869},"end":{"line":60,"column":297,"offset":7877},"indent":[]}}],"position":{"start":{"line":60,"column":288,"offset":7868},"end":{"line":60,"column":338,"offset":7918},"indent":[]}},{"type":"text","value":". This helpful package does the CSS inlining for us and all we do is add some code to a Javascript file. Here’s a code snippet from the Github page.","position":{"start":{"line":60,"column":338,"offset":7918},"end":{"line":60,"column":486,"offset":8066},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":7581},"end":{"line":60,"column":486,"offset":8066},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> critical <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'critical'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncritical<span class=\"token punctuation\">.</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    base<span class=\"token punctuation\">:</span> <span class=\"token string\">'test/'</span><span class=\"token punctuation\">,</span>\n    src<span class=\"token punctuation\">:</span> <span class=\"token string\">'index.html'</span><span class=\"token punctuation\">,</span>\n    dest<span class=\"token punctuation\">:</span> <span class=\"token string\">'styles/main.css'</span><span class=\"token punctuation\">,</span>\n    dimensions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n        height<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n        width<span class=\"token punctuation\">:</span> <span class=\"token number\">500</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        height<span class=\"token punctuation\">:</span> <span class=\"token number\">900</span><span class=\"token punctuation\">,</span>\n        width<span class=\"token punctuation\">:</span> <span class=\"token number\">1200</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","position":{"start":{"line":62,"column":1,"offset":8068},"end":{"line":77,"column":4,"offset":8333},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Using the generate function, we supply it with a JavaScript object with some values defined. base is where we’re going to save our src and dest (our project folder usually). What’s great is now we just supply an array of dimensions and the code will compute the critical CSS for each and inline that code into our head tag.","position":{"start":{"line":79,"column":1,"offset":8335},"end":{"line":79,"column":324,"offset":8658},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":8335},"end":{"line":79,"column":324,"offset":8658},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Async and Defer","position":{"start":{"line":81,"column":5,"offset":8664},"end":{"line":81,"column":20,"offset":8679},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":8660},"end":{"line":81,"column":20,"offset":8679},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Again, we come back to this idea of render-blocking and how best we should implement this for our website. When you have a plain script tag in your HTML it blocks the HTML from loading whilst the JavaScript loads ","position":{"start":{"line":83,"column":1,"offset":8681},"end":{"line":83,"column":214,"offset":8894},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"and","position":{"start":{"line":83,"column":216,"offset":8896},"end":{"line":83,"column":219,"offset":8899},"indent":[]}}],"position":{"start":{"line":83,"column":214,"offset":8894},"end":{"line":83,"column":221,"offset":8901},"indent":[]}},{"type":"text","value":" runs. Async and defer are simple attributes that you can add to your script tags that change the way your JavaScript will be loaded.","position":{"start":{"line":83,"column":221,"offset":8901},"end":{"line":83,"column":354,"offset":9034},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":8681},"end":{"line":83,"column":354,"offset":9034},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Defer essentially “defers” execution of the script until after the HTML has been parsed. A major advantage of this is that you no longer need some $(document).ready() jQuery-style function to make sure the body was loaded before you could manipulate it, which could cut out some of the dependencies on libraries like jQuery which helps reduce load-time.","position":{"start":{"line":85,"column":1,"offset":9036},"end":{"line":85,"column":354,"offset":9389},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":9036},"end":{"line":85,"column":354,"offset":9389},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Async is, unsurprisingly, the asynchronous loading of JavaScript files. What does this mean? Your HTML will continue to be parsed whilst the file is loaded and then whenever its ready the file will be executed. This helps improving user experience whilst viewing your website. Imagine for example you had a JavaScript file for doing some cool graphics. You want the words around this graphic to be parsed until your graphic is ready to be executed. As soon as it is ready, it is executed and we get a more seamless loading of our webpage without missing pieces.","position":{"start":{"line":87,"column":1,"offset":9391},"end":{"line":87,"column":562,"offset":9952},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":9391},"end":{"line":87,"column":562,"offset":9952},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Check this ","position":{"start":{"line":89,"column":1,"offset":9954},"end":{"line":89,"column":12,"offset":9965},"indent":[]}},{"type":"link","title":null,"url":"http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html","children":[{"type":"text","value":"website","position":{"start":{"line":89,"column":13,"offset":9966},"end":{"line":89,"column":20,"offset":9973},"indent":[]}}],"position":{"start":{"line":89,"column":12,"offset":9965},"end":{"line":89,"column":94,"offset":10047},"indent":[]}},{"type":"text","value":" for a really intuitive, graphical representation of this.","position":{"start":{"line":89,"column":94,"offset":10047},"end":{"line":89,"column":152,"offset":10105},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":9954},"end":{"line":89,"column":152,"offset":10105},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Image Optimisation and Media Queries","position":{"start":{"line":91,"column":5,"offset":10111},"end":{"line":91,"column":41,"offset":10147},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":10107},"end":{"line":91,"column":41,"offset":10147},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The cornerstone of all website performance optimisation is the simple rule that, the less data you send to the client, the quicker and better your website will perform. With the plethora of devices on the market capable of viewing websites, there is a growing trend to optimise your website based on the device it is being viewed on.","position":{"start":{"line":93,"column":1,"offset":10149},"end":{"line":93,"column":334,"offset":10482},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":10149},"end":{"line":93,"column":334,"offset":10482},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Media queries are a fairly new tool added to CSS3. With more and more content being consumed using mobile-devices there has been a shift in design thinking towards mobile first. Using media queries you can then add stylings for larger screen sizes.","position":{"start":{"line":95,"column":1,"offset":10484},"end":{"line":95,"column":249,"offset":10732},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":10484},"end":{"line":95,"column":249,"offset":10732},"indent":[]}},{"type":"html","lang":"css","value":"<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/* Some CSS for screen sizes bigger than 600px but smaller than 992px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/*  Some CSS for screen sizes bigger than 992px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">orientation</span><span class=\"token punctuation\">:</span> landscape<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* Some CSS for landscape-oriented devices */</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":97,"column":1,"offset":10734},"end":{"line":109,"column":4,"offset":11064},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The @media tag starts a new CSS rule, whilst the only keyword stops older browsers that don’t support media queries from using it. The screen keyword applies the rules to screens rather than prints. After that you add the media-feature which supports the and , or and not keywords so you can get as specific as you want. When you’re loading your image you can write code like:","position":{"start":{"line":111,"column":1,"offset":11066},"end":{"line":111,"column":377,"offset":11442},"indent":[]}}],"position":{"start":{"line":111,"column":1,"offset":11066},"end":{"line":111,"column":377,"offset":11442},"indent":[]}},{"type":"html","lang":"css","value":"<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-small.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-big.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":113,"column":1,"offset":11444},"end":{"line":121,"column":4,"offset":11663},"indent":[1,1,1,1,1,1,1,1]}},{"type":"html","value":"<iframe src=\"https://medium.com/media/ecbcd475236339fbe45efdd97bfcdeed\" frameborder=0></iframe>","position":{"start":{"line":122,"column":1,"offset":11664},"end":{"line":122,"column":96,"offset":11759},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This isn’t necessarily the best or optimal approach for image optimisation. Luckily we have other options. ","position":{"start":{"line":124,"column":1,"offset":11761},"end":{"line":124,"column":108,"offset":11868},"indent":[]}},{"type":"link","title":null,"url":"https://www.imgix.com/","children":[{"type":"text","value":"Imgix","position":{"start":{"line":124,"column":109,"offset":11869},"end":{"line":124,"column":114,"offset":11874},"indent":[]}}],"position":{"start":{"line":124,"column":108,"offset":11868},"end":{"line":124,"column":139,"offset":11899},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":124,"column":139,"offset":11899},"end":{"line":124,"column":144,"offset":11904},"indent":[]}},{"type":"link","title":null,"url":"https://cloudinary.com/","children":[{"type":"text","value":"Cloudinary","position":{"start":{"line":124,"column":145,"offset":11905},"end":{"line":124,"column":155,"offset":11915},"indent":[]}}],"position":{"start":{"line":124,"column":144,"offset":11904},"end":{"line":124,"column":181,"offset":11941},"indent":[]}},{"type":"text","value":" are two ways you can help optimise your site for the right device. Imgix is a Content Delivery Network (CDN) for images with a lot of cool features. A CDN simply takes your files and spreads them across the globe so that someone in a different country doesn’t have to wait for your files on your server to make it all the way to them. This ","position":{"start":{"line":124,"column":181,"offset":11941},"end":{"line":124,"column":522,"offset":12282},"indent":[]}},{"type":"link","title":null,"url":"https://docs.imgix.com/tutorials/responsive-images-srcset-imgix","children":[{"type":"text","value":"tutorial","position":{"start":{"line":124,"column":523,"offset":12283},"end":{"line":124,"column":531,"offset":12291},"indent":[]}}],"position":{"start":{"line":124,"column":522,"offset":12282},"end":{"line":124,"column":597,"offset":12357},"indent":[]}},{"type":"text","value":" goes through how to use Imgix for different device pixel ratios. Cloudinary is a similar service, and their ","position":{"start":{"line":124,"column":597,"offset":12357},"end":{"line":124,"column":706,"offset":12466},"indent":[]}},{"type":"link","title":null,"url":"https://cloudinary.com/documentation/image_optimization","children":[{"type":"text","value":"tutorial ","position":{"start":{"line":124,"column":707,"offset":12467},"end":{"line":124,"column":716,"offset":12476},"indent":[]}}],"position":{"start":{"line":124,"column":706,"offset":12466},"end":{"line":124,"column":774,"offset":12534},"indent":[]}},{"type":"text","value":"will take you through the importance of optimisation and how to achieve it will their incredible services. Below is a small example showing how easy it is to use Cloudinary straight in the HTML markup.","position":{"start":{"line":124,"column":774,"offset":12534},"end":{"line":124,"column":975,"offset":12735},"indent":[]}}],"position":{"start":{"line":124,"column":1,"offset":11761},"end":{"line":124,"column":975,"offset":12735},"indent":[]}},{"type":"html","value":"<iframe src=\"https://medium.com/media/98868354e5bf607d317496f64ddec2a2\" frameborder=0></iframe>","position":{"start":{"line":126,"column":1,"offset":12737},"end":{"line":126,"column":96,"offset":12832},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As a last point on image optimisation, the format you use can have a large impact on file size. Some files contain lots of metadata which you don’t want to be serving to your client — ","position":{"start":{"line":128,"column":1,"offset":12834},"end":{"line":128,"column":185,"offset":13018},"indent":[]}},{"type":"link","title":null,"url":"https://www.sno.phy.queensu.ca/~phil/exiftool/","children":[{"type":"text","value":"ExifTool","position":{"start":{"line":128,"column":186,"offset":13019},"end":{"line":128,"column":194,"offset":13027},"indent":[]}}],"position":{"start":{"line":128,"column":185,"offset":13018},"end":{"line":128,"column":243,"offset":13076},"indent":[]}},{"type":"text","value":" is a commonly used command-line application that can help you trim down those files sizes. On top of this, Scalable Vector Graphics (SVG) are a web-standard developed by W3C that offers XML-based vector graphics. This means they have infinite resolution unlike PNG or JPG files. It also makes them highly versatile, easily editable and can even be animated. At the end of the day SVGs are just code and so the file sizes tend to be small. For more reasons to use them, check out this ","position":{"start":{"line":128,"column":243,"offset":13076},"end":{"line":128,"column":728,"offset":13561},"indent":[]}},{"type":"link","title":null,"url":"https://watb.co.uk/5-reasons-you-should-be-using-svgs-over-pngs/","children":[{"type":"text","value":"article","position":{"start":{"line":128,"column":729,"offset":13562},"end":{"line":128,"column":736,"offset":13569},"indent":[]}}],"position":{"start":{"line":128,"column":728,"offset":13561},"end":{"line":128,"column":803,"offset":13636},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":128,"column":803,"offset":13636},"end":{"line":128,"column":804,"offset":13637},"indent":[]}}],"position":{"start":{"line":128,"column":1,"offset":12834},"end":{"line":128,"column":804,"offset":13637},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":130,"column":5,"offset":13643},"end":{"line":130,"column":15,"offset":13653},"indent":[]}}],"position":{"start":{"line":130,"column":1,"offset":13639},"end":{"line":130,"column":15,"offset":13653},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We’ve only scratched the surface of what’s possible for website optimisation. There are many tools you can use to help you stream-line this process like ","position":{"start":{"line":132,"column":1,"offset":13655},"end":{"line":132,"column":154,"offset":13808},"indent":[]}},{"type":"link","title":null,"url":"https://webpack.js.org/","children":[{"type":"text","value":"Webpack","position":{"start":{"line":132,"column":155,"offset":13809},"end":{"line":132,"column":162,"offset":13816},"indent":[]}}],"position":{"start":{"line":132,"column":154,"offset":13808},"end":{"line":132,"column":188,"offset":13842},"indent":[]}},{"type":"text","value":" for bundling or static-site generators like ","position":{"start":{"line":132,"column":188,"offset":13842},"end":{"line":132,"column":233,"offset":13887},"indent":[]}},{"type":"link","title":null,"url":"https://www.gatsbyjs.org/","children":[{"type":"text","value":"Gatsby","position":{"start":{"line":132,"column":234,"offset":13888},"end":{"line":132,"column":240,"offset":13894},"indent":[]}}],"position":{"start":{"line":132,"column":233,"offset":13887},"end":{"line":132,"column":268,"offset":13922},"indent":[]}},{"type":"text","value":". ","position":{"start":{"line":132,"column":268,"offset":13922},"end":{"line":132,"column":270,"offset":13924},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking","children":[{"type":"text","value":"Tree shaking","position":{"start":{"line":132,"column":271,"offset":13925},"end":{"line":132,"column":283,"offset":13937},"indent":[]}}],"position":{"start":{"line":132,"column":270,"offset":13924},"end":{"line":132,"column":348,"offset":14002},"indent":[]}},{"type":"text","value":" is another commonly used technique to remove excess, unused modules lying around your website.","position":{"start":{"line":132,"column":348,"offset":14002},"end":{"line":132,"column":443,"offset":14097},"indent":[]}}],"position":{"start":{"line":132,"column":1,"offset":13655},"end":{"line":132,"column":443,"offset":14097},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Hopefully this article has touched on some useful techniques you can use on your next site to help improve its performance. Happy coding!","position":{"start":{"line":134,"column":1,"offset":14099},"end":{"line":134,"column":138,"offset":14236},"indent":[]}}],"position":{"start":{"line":134,"column":1,"offset":14099},"end":{"line":134,"column":138,"offset":14236},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A big thank you to ","position":{"start":{"line":136,"column":1,"offset":14238},"end":{"line":136,"column":20,"offset":14257},"indent":[]}},{"type":"link","title":null,"url":"undefined","children":[{"type":"text","value":"Christian Silver","position":{"start":{"line":136,"column":21,"offset":14258},"end":{"line":136,"column":37,"offset":14274},"indent":[]}}],"position":{"start":{"line":136,"column":20,"offset":14257},"end":{"line":136,"column":49,"offset":14286},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":136,"column":49,"offset":14286},"end":{"line":136,"column":54,"offset":14291},"indent":[]}},{"type":"link","title":null,"url":"undefined","children":[{"type":"text","value":"Charlie Crisp","position":{"start":{"line":136,"column":55,"offset":14292},"end":{"line":136,"column":68,"offset":14305},"indent":[]}}],"position":{"start":{"line":136,"column":54,"offset":14291},"end":{"line":136,"column":80,"offset":14317},"indent":[]}},{"type":"text","value":" for editing this post and providing extremely useful advice and extra content to make it even better.","position":{"start":{"line":136,"column":80,"offset":14317},"end":{"line":136,"column":182,"offset":14419},"indent":[]}}],"position":{"start":{"line":136,"column":1,"offset":14238},"end":{"line":136,"column":182,"offset":14419},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":137,"column":1,"offset":14420}}}},{"id":"transformer-remark-markdown-html-ast-45150650ad44017e5ae8e21fed0f0504-gatsby-remark-imagesgatsby-remark-prismjs-","value":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/patricoferris/image/upload/v1532781201/pf2018/blogposts/28-07-2018/website_optimisation_2.png","alt":"Optimising your Website"},"children":[],"position":{"start":{"line":7,"column":1,"offset":154},"end":{"line":7,"column":149,"offset":302}}},{"type":"text","value":"\nInspired by a ","position":{"start":{"line":7,"column":149,"offset":302},"end":{"line":8,"column":15,"offset":317}}},{"type":"element","tagName":"a","properties":{"href":"https://syntax.fm/"},"children":[{"type":"text","value":"Syntax","position":{"start":{"line":8,"column":16,"offset":318},"end":{"line":8,"column":22,"offset":324}}}],"position":{"start":{"line":8,"column":15,"offset":317},"end":{"line":8,"column":43,"offset":345}}},{"type":"text","value":" podcast, I got really interested in website optimisation. It can often be an overlooked aspect in web development with more focus on design and functionality, I realised my number one priority whenever I visited a website is load speed. My attention is a website’s number one goal, lose it and they lose all potential ad revenue or possibility to give me whatever information I was looking for. ","position":{"start":{"line":8,"column":43,"offset":345},"end":{"line":8,"column":439,"offset":741}}},{"type":"element","tagName":"a","properties":{"href":"https://developers.google.com/web/fundamentals/performance/get-started/"},"children":[{"type":"text","value":"Many seem to agree. 53% of users abandon websites that take more than 3 seconds to load","position":{"start":{"line":8,"column":440,"offset":742},"end":{"line":8,"column":527,"offset":829}}}],"position":{"start":{"line":8,"column":439,"offset":741},"end":{"line":8,"column":601,"offset":903}}},{"type":"text","value":". No amount of fancy graphics or parallax scrolling that appears five seconds after someone’s clicked will hide the slow loading times.","position":{"start":{"line":8,"column":601,"offset":903},"end":{"line":8,"column":736,"offset":1038}}}],"position":{"start":{"line":7,"column":1,"offset":154},"end":{"line":8,"column":736,"offset":1038}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The aim of this article is to give a broad overview of the concepts and ideas behind optimising your website, experienced developers are likely already using things like Webpack (a module bundler) among other tools to speed-up their sites.","position":{"start":{"line":10,"column":1,"offset":1040},"end":{"line":10,"column":240,"offset":1279}}}],"position":{"start":{"line":10,"column":1,"offset":1040},"end":{"line":10,"column":240,"offset":1279}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For testing load-times I will be using the ","position":{"start":{"line":12,"column":1,"offset":1281},"end":{"line":12,"column":44,"offset":1324}}},{"type":"element","tagName":"a","properties":{"href":"https://chrome.google.com/webstore/detail/page-load-time/fploionmjgeclbkemipmkogoaohcdbig?hl=en"},"children":[{"type":"text","value":"Page Load Time ","position":{"start":{"line":12,"column":45,"offset":1325},"end":{"line":12,"column":60,"offset":1340}}}],"position":{"start":{"line":12,"column":44,"offset":1324},"end":{"line":12,"column":158,"offset":1438}}},{"type":"text","value":"Chrome extension. There are a few ways to measure website loading time including: ","position":{"start":{"line":12,"column":158,"offset":1438},"end":{"line":12,"column":240,"offset":1520}}},{"type":"element","tagName":"a","properties":{"href":"https://developers.google.com/web/tools/chrome-user-experience-report/"},"children":[{"type":"text","value":"first paint, first meaning paint, DOMContentLoaded","position":{"start":{"line":12,"column":241,"offset":1521},"end":{"line":12,"column":291,"offset":1571}}}],"position":{"start":{"line":12,"column":240,"offset":1520},"end":{"line":12,"column":364,"offset":1644}}},{"type":"text","value":" etc. For a more detailed look into what this timer measures, check out the Github repository below.\n","position":{"start":{"line":12,"column":364,"offset":1644},"end":{"line":13,"column":1,"offset":1745}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/alex-vv/chrome-load-timer"},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"alex-vv/chrome-load-timer","position":{"start":{"line":13,"column":4,"offset":1748},"end":{"line":13,"column":29,"offset":1773}}}],"position":{"start":{"line":13,"column":2,"offset":1746},"end":{"line":13,"column":31,"offset":1775}}},{"type":"text","value":"\n","position":{"start":{"line":13,"column":31,"offset":1775},"end":{"line":14,"column":1,"offset":1776}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"chrome-load-timer - Google Chrome extension to measure page load time and display it in the toolbar","position":{"start":{"line":14,"column":2,"offset":1777},"end":{"line":14,"column":101,"offset":1876}}}],"position":{"start":{"line":14,"column":1,"offset":1776},"end":{"line":14,"column":102,"offset":1877}}},{"type":"text","value":"github.com","position":{"start":{"line":14,"column":102,"offset":1877},"end":{"line":14,"column":112,"offset":1887}}}],"position":{"start":{"line":13,"column":1,"offset":1745},"end":{"line":14,"column":159,"offset":1934}}}],"position":{"start":{"line":12,"column":1,"offset":1281},"end":{"line":14,"column":159,"offset":1934}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Use Minified Stylesheets and Scripts","position":{"start":{"line":16,"column":7,"offset":1942},"end":{"line":16,"column":43,"offset":1978}}}],"position":{"start":{"line":16,"column":5,"offset":1940},"end":{"line":16,"column":45,"offset":1980}}}],"position":{"start":{"line":16,"column":1,"offset":1936},"end":{"line":16,"column":45,"offset":1980}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You would be amazed at how much performance can be gained by this simple trick. What is a minified document? When we write code it is never our job to make it optimised for the computer, instead our golden rule is to make it readable to humans. This improves readability, cuts down on debug time and makes it easier to maintain. However, to achieve this we often add extra spacing which costs us precious space. Minifying the code is trimming all this fat from what we’ve written to have code that produces the same result but is far more difficult to read and maintain. This is okay though, because a computer has no problem deciphering it. Take the following code for example.","position":{"start":{"line":18,"column":1,"offset":1982},"end":{"line":18,"column":679,"offset":2660}}}],"position":{"start":{"line":18,"column":1,"offset":1982},"end":{"line":18,"column":679,"offset":2660}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","position":{"start":{"line":20,"column":1,"offset":2662},"end":{"line":29,"column":4,"offset":2921}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Notice how, wherever possible, our line-breaks and spaces are gone. On top of that, the code in the for-loop is only one line so there’s no need for the curly braces which extends our code over three lines when it can be done in one. Does this make a difference?","position":{"start":{"line":31,"column":1,"offset":2923},"end":{"line":31,"column":263,"offset":3185}}}],"position":{"start":{"line":31,"column":1,"offset":2923},"end":{"line":31,"column":263,"offset":3185}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I tried it out on simple website that just had one script tag being loaded in for the graphics library ","position":{"start":{"line":33,"column":1,"offset":3187},"end":{"line":33,"column":104,"offset":3290}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/"},"children":[{"type":"text","value":"p5.js","position":{"start":{"line":33,"column":105,"offset":3291},"end":{"line":33,"column":110,"offset":3296}}}],"position":{"start":{"line":33,"column":104,"offset":3290},"end":{"line":33,"column":130,"offset":3316}}},{"type":"text","value":". Using the non-minified CDN link I got a load time of 0.25 seconds. Using the minified version I got a markedly improved load time of 0.08 seconds. Depending on what your website project is, there are a few ways to automatically minify code. If it is a ","position":{"start":{"line":33,"column":130,"offset":3316},"end":{"line":33,"column":384,"offset":3570}}},{"type":"element","tagName":"a","properties":{"href":"https://guide.meteor.com/build-tool.html"},"children":[{"type":"text","value":"Meteor app","position":{"start":{"line":33,"column":385,"offset":3571},"end":{"line":33,"column":395,"offset":3581}}}],"position":{"start":{"line":33,"column":384,"offset":3570},"end":{"line":33,"column":438,"offset":3624}}},{"type":"text","value":" it will be done automatically, using ","position":{"start":{"line":33,"column":438,"offset":3624},"end":{"line":33,"column":476,"offset":3662}}},{"type":"element","tagName":"a","properties":{"href":"https://webpack.js.org/guides/production/"},"children":[{"type":"text","value":"Webpack ","position":{"start":{"line":33,"column":477,"offset":3663},"end":{"line":33,"column":485,"offset":3671}}}],"position":{"start":{"line":33,"column":476,"offset":3662},"end":{"line":33,"column":529,"offset":3715}}},{"type":"text","value":"will also allow you to do this. Otherwise there are some online tools like ","position":{"start":{"line":33,"column":529,"offset":3715},"end":{"line":33,"column":604,"offset":3790}}},{"type":"element","tagName":"a","properties":{"href":"https://jscompress.com/"},"children":[{"type":"text","value":"JSCompress ","position":{"start":{"line":33,"column":605,"offset":3791},"end":{"line":33,"column":616,"offset":3802}}}],"position":{"start":{"line":33,"column":604,"offset":3790},"end":{"line":33,"column":642,"offset":3828}}},{"type":"text","value":"or ","position":{"start":{"line":33,"column":642,"offset":3828},"end":{"line":33,"column":645,"offset":3831}}},{"type":"element","tagName":"a","properties":{"href":"https://cssminifier.com/"},"children":[{"type":"text","value":"CSSMinifier ","position":{"start":{"line":33,"column":646,"offset":3832},"end":{"line":33,"column":658,"offset":3844}}}],"position":{"start":{"line":33,"column":645,"offset":3831},"end":{"line":33,"column":685,"offset":3871}}},{"type":"text","value":"that you can upload your code to.","position":{"start":{"line":33,"column":685,"offset":3871},"end":{"line":33,"column":718,"offset":3904}}}],"position":{"start":{"line":33,"column":1,"offset":3187},"end":{"line":33,"column":718,"offset":3904}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Design Versus Performance","position":{"start":{"line":35,"column":5,"offset":3910},"end":{"line":35,"column":30,"offset":3935}}}],"position":{"start":{"line":35,"column":1,"offset":3906},"end":{"line":35,"column":30,"offset":3935}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Whilst design is undoubtedly a major aspect to a website’s overall success, both developers and designers must work together to compromise and make a mutually beneficial trade-off between design and performance. The classic example is fonts. Take the two screenshots of a simple website below.","position":{"start":{"line":37,"column":1,"offset":3937},"end":{"line":37,"column":294,"offset":4230}}}],"position":{"start":{"line":37,"column":1,"offset":3937},"end":{"line":37,"column":294,"offset":4230}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/patricoferris/image/upload/v1532780050/pf2018/blogposts/28-07-2018/Helvetica.png","alt":"The example website using Helvetica Font (commonly found on many computers) — check [this](https://css-tricks.com/snippets/css/system-font-stack/) link for common system fonts"},"children":[],"position":{"start":{"line":39,"column":1,"offset":4232},"end":{"line":39,"column":288,"offset":4519}}},{"type":"text","value":"\n","position":{"start":{"line":39,"column":288,"offset":4519},"end":{"line":40,"column":1,"offset":4520}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The example website using Helvetica Font (commonly found on many computers) — check ","position":{"start":{"line":40,"column":2,"offset":4521},"end":{"line":40,"column":86,"offset":4605}}},{"type":"element","tagName":"a","properties":{"href":"https://css-tricks.com/snippets/css/system-font-stack/"},"children":[{"type":"text","value":"this","position":{"start":{"line":40,"column":87,"offset":4606},"end":{"line":40,"column":91,"offset":4610}}}],"position":{"start":{"line":40,"column":86,"offset":4605},"end":{"line":40,"column":148,"offset":4667}}},{"type":"text","value":" link for common system fonts","position":{"start":{"line":40,"column":148,"offset":4667},"end":{"line":40,"column":177,"offset":4696}}}],"position":{"start":{"line":40,"column":1,"offset":4520},"end":{"line":40,"column":178,"offset":4697}}}],"position":{"start":{"line":39,"column":1,"offset":4232},"end":{"line":40,"column":178,"offset":4697}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://cdn-images-1.medium.com/max/5760/1*8ciuJNBdqMhlLSaOpNUXow.png","alt":"The example website using Roboto Font (designed by Google and linked from [Google Fonts](https://fonts.google.com/?selection.family=Roboto))"},"children":[],"position":{"start":{"line":42,"column":1,"offset":4699},"end":{"line":42,"column":215,"offset":4913}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The example website using Roboto Font (designed by Google and linked from ","position":{"start":{"line":42,"column":216,"offset":4914},"end":{"line":42,"column":290,"offset":4988}}},{"type":"element","tagName":"a","properties":{"href":"https://fonts.google.com/?selection.family=Roboto"},"children":[{"type":"text","value":"Google Fonts","position":{"start":{"line":42,"column":291,"offset":4989},"end":{"line":42,"column":303,"offset":5001}}}],"position":{"start":{"line":42,"column":290,"offset":4988},"end":{"line":42,"column":355,"offset":5053}}},{"type":"text","value":")","position":{"start":{"line":42,"column":355,"offset":5053},"end":{"line":42,"column":356,"offset":5054}}}],"position":{"start":{"line":42,"column":215,"offset":4913},"end":{"line":42,"column":357,"offset":5055}}}],"position":{"start":{"line":42,"column":1,"offset":4699},"end":{"line":42,"column":357,"offset":5055}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Before critiquing my questionable design skills take a moment to appreciate that these two fonts are very similar — yet the loading time for a website for the Roboto font was 0.22 seconds as compared with 0.17 for Helvetica. Whilst not that significant, using lots of custom fonts will slow down your website, although using Google Fonts’ API will help keep your website optimised. As an over-the-top example, linking 20 different fonts from the Google API increased the load time to 0.87 seconds.","position":{"start":{"line":44,"column":1,"offset":5057},"end":{"line":44,"column":498,"offset":5554}}}],"position":{"start":{"line":44,"column":1,"offset":5057},"end":{"line":44,"column":498,"offset":5554}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Inlining your JavaScript and CSS","position":{"start":{"line":46,"column":5,"offset":5560},"end":{"line":46,"column":37,"offset":5592}}}],"position":{"start":{"line":46,"column":1,"offset":5556},"end":{"line":46,"column":37,"offset":5592}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For each individual document or component of your website, when the parser reaches the script tag or link tag it sends and HTTP request for that document and if not stated differently, these will be blocking actions. What this means is your machine is parsing the HTML document getting the words to display in your browser but if it hits the script tag with the attribute src='js/main.js' for example, it will block the parsing and load in that file. This is where as a developer you need to be clever about where in the document you place things.","position":{"start":{"line":48,"column":1,"offset":5594},"end":{"line":48,"column":548,"offset":6141}}}],"position":{"start":{"line":48,"column":1,"offset":5594},"end":{"line":48,"column":548,"offset":6141}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Whilst it may not ultimately affect the loading time of your website, it can affect the order in which things are loaded. Again we’ll be using the un-minified p5.js library to simulate a large JavaScript file and load it in different places to see how it affects our user experience.","position":{"start":{"line":50,"column":1,"offset":6143},"end":{"line":50,"column":284,"offset":6426}}}],"position":{"start":{"line":50,"column":1,"offset":6143},"end":{"line":50,"column":284,"offset":6426}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://cdn-images-1.medium.com/max/2780/1*h_3GogfkaahcXCO9a43CPA.gif","alt":"Refreshing website with the script tag inserted at the bottom of the body tag"},"children":[],"position":{"start":{"line":52,"column":1,"offset":6428},"end":{"line":52,"column":152,"offset":6579}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Refreshing website with the script tag inserted at the bottom of the body tag","position":{"start":{"line":52,"column":153,"offset":6580},"end":{"line":52,"column":230,"offset":6657}}}],"position":{"start":{"line":52,"column":152,"offset":6579},"end":{"line":52,"column":231,"offset":6658}}}],"position":{"start":{"line":52,"column":1,"offset":6428},"end":{"line":52,"column":231,"offset":6658}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://cdn-images-1.medium.com/max/2780/1*xLOq5r4erQAwb4Au_hB-Ww.gif","alt":"Refreshing website with the script tag inserted at the top of the body tag"},"children":[],"position":{"start":{"line":54,"column":1,"offset":6660},"end":{"line":54,"column":149,"offset":6808}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Refreshing website with the script tag inserted at the top of the body tag","position":{"start":{"line":54,"column":150,"offset":6809},"end":{"line":54,"column":224,"offset":6883}}}],"position":{"start":{"line":54,"column":149,"offset":6808},"end":{"line":54,"column":225,"offset":6884}}}],"position":{"start":{"line":54,"column":1,"offset":6660},"end":{"line":54,"column":225,"offset":6884}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Whilst the load times were similar for both cases — the user experience is far better by placing the script at the body tag allowing the HTML to be parsed before the JavaScript giving the user the website content immediately!","position":{"start":{"line":56,"column":1,"offset":6886},"end":{"line":56,"column":226,"offset":7111}}}],"position":{"start":{"line":56,"column":1,"offset":6886},"end":{"line":56,"column":226,"offset":7111}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In the same vein CSS can also be render-blocking especially because more often than not it is linked in the head tag of your HTML document before the body. But if we want our user to see the content in the quickest time we don’t want to be loading CSS for the footer of our document which the user won’t see until they’ve scrolled to the bottom. In fact, we don’t want to load any CSS in that the user can’t immediately see when the page first loads on their device.","position":{"start":{"line":58,"column":1,"offset":7113},"end":{"line":58,"column":467,"offset":7579}}}],"position":{"start":{"line":58,"column":1,"offset":7113},"end":{"line":58,"column":467,"offset":7579}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The CSS that you need is often called the ","position":{"start":{"line":60,"column":1,"offset":7581},"end":{"line":60,"column":43,"offset":7623}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Critical CSS","position":{"start":{"line":60,"column":44,"offset":7624},"end":{"line":60,"column":56,"offset":7636}}}],"position":{"start":{"line":60,"column":43,"offset":7623},"end":{"line":60,"column":57,"offset":7637}}},{"type":"text","value":". Finding it for yourself would be a headache. It will be different for different devices, meaning you would have to check manually for all possible devices. Lucky for us we have (if you’re using ","position":{"start":{"line":60,"column":57,"offset":7637},"end":{"line":60,"column":253,"offset":7833}}},{"type":"element","tagName":"a","properties":{"href":"https://nodejs.org/en/"},"children":[{"type":"text","value":"Node.js","position":{"start":{"line":60,"column":254,"offset":7834},"end":{"line":60,"column":261,"offset":7841}}}],"position":{"start":{"line":60,"column":253,"offset":7833},"end":{"line":60,"column":286,"offset":7866}}},{"type":"text","value":") ","position":{"start":{"line":60,"column":286,"offset":7866},"end":{"line":60,"column":288,"offset":7868}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/addyosmani/critical"},"children":[{"type":"text","value":"Critical","position":{"start":{"line":60,"column":289,"offset":7869},"end":{"line":60,"column":297,"offset":7877}}}],"position":{"start":{"line":60,"column":288,"offset":7868},"end":{"line":60,"column":338,"offset":7918}}},{"type":"text","value":". This helpful package does the CSS inlining for us and all we do is add some code to a Javascript file. Here’s a code snippet from the Github page.","position":{"start":{"line":60,"column":338,"offset":7918},"end":{"line":60,"column":486,"offset":8066}}}],"position":{"start":{"line":60,"column":1,"offset":7581},"end":{"line":60,"column":486,"offset":8066}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> critical <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'critical'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncritical<span class=\"token punctuation\">.</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    base<span class=\"token punctuation\">:</span> <span class=\"token string\">'test/'</span><span class=\"token punctuation\">,</span>\n    src<span class=\"token punctuation\">:</span> <span class=\"token string\">'index.html'</span><span class=\"token punctuation\">,</span>\n    dest<span class=\"token punctuation\">:</span> <span class=\"token string\">'styles/main.css'</span><span class=\"token punctuation\">,</span>\n    dimensions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n        height<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n        width<span class=\"token punctuation\">:</span> <span class=\"token number\">500</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        height<span class=\"token punctuation\">:</span> <span class=\"token number\">900</span><span class=\"token punctuation\">,</span>\n        width<span class=\"token punctuation\">:</span> <span class=\"token number\">1200</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","position":{"start":{"line":62,"column":1,"offset":8068},"end":{"line":77,"column":4,"offset":8333}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Using the generate function, we supply it with a JavaScript object with some values defined. base is where we’re going to save our src and dest (our project folder usually). What’s great is now we just supply an array of dimensions and the code will compute the critical CSS for each and inline that code into our head tag.","position":{"start":{"line":79,"column":1,"offset":8335},"end":{"line":79,"column":324,"offset":8658}}}],"position":{"start":{"line":79,"column":1,"offset":8335},"end":{"line":79,"column":324,"offset":8658}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Async and Defer","position":{"start":{"line":81,"column":5,"offset":8664},"end":{"line":81,"column":20,"offset":8679}}}],"position":{"start":{"line":81,"column":1,"offset":8660},"end":{"line":81,"column":20,"offset":8679}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Again, we come back to this idea of render-blocking and how best we should implement this for our website. When you have a plain script tag in your HTML it blocks the HTML from loading whilst the JavaScript loads ","position":{"start":{"line":83,"column":1,"offset":8681},"end":{"line":83,"column":214,"offset":8894}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"and","position":{"start":{"line":83,"column":216,"offset":8896},"end":{"line":83,"column":219,"offset":8899}}}],"position":{"start":{"line":83,"column":214,"offset":8894},"end":{"line":83,"column":221,"offset":8901}}},{"type":"text","value":" runs. Async and defer are simple attributes that you can add to your script tags that change the way your JavaScript will be loaded.","position":{"start":{"line":83,"column":221,"offset":8901},"end":{"line":83,"column":354,"offset":9034}}}],"position":{"start":{"line":83,"column":1,"offset":8681},"end":{"line":83,"column":354,"offset":9034}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Defer essentially “defers” execution of the script until after the HTML has been parsed. A major advantage of this is that you no longer need some $(document).ready() jQuery-style function to make sure the body was loaded before you could manipulate it, which could cut out some of the dependencies on libraries like jQuery which helps reduce load-time.","position":{"start":{"line":85,"column":1,"offset":9036},"end":{"line":85,"column":354,"offset":9389}}}],"position":{"start":{"line":85,"column":1,"offset":9036},"end":{"line":85,"column":354,"offset":9389}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Async is, unsurprisingly, the asynchronous loading of JavaScript files. What does this mean? Your HTML will continue to be parsed whilst the file is loaded and then whenever its ready the file will be executed. This helps improving user experience whilst viewing your website. Imagine for example you had a JavaScript file for doing some cool graphics. You want the words around this graphic to be parsed until your graphic is ready to be executed. As soon as it is ready, it is executed and we get a more seamless loading of our webpage without missing pieces.","position":{"start":{"line":87,"column":1,"offset":9391},"end":{"line":87,"column":562,"offset":9952}}}],"position":{"start":{"line":87,"column":1,"offset":9391},"end":{"line":87,"column":562,"offset":9952}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Check this ","position":{"start":{"line":89,"column":1,"offset":9954},"end":{"line":89,"column":12,"offset":9965}}},{"type":"element","tagName":"a","properties":{"href":"http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html"},"children":[{"type":"text","value":"website","position":{"start":{"line":89,"column":13,"offset":9966},"end":{"line":89,"column":20,"offset":9973}}}],"position":{"start":{"line":89,"column":12,"offset":9965},"end":{"line":89,"column":94,"offset":10047}}},{"type":"text","value":" for a really intuitive, graphical representation of this.","position":{"start":{"line":89,"column":94,"offset":10047},"end":{"line":89,"column":152,"offset":10105}}}],"position":{"start":{"line":89,"column":1,"offset":9954},"end":{"line":89,"column":152,"offset":10105}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Image Optimisation and Media Queries","position":{"start":{"line":91,"column":5,"offset":10111},"end":{"line":91,"column":41,"offset":10147}}}],"position":{"start":{"line":91,"column":1,"offset":10107},"end":{"line":91,"column":41,"offset":10147}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The cornerstone of all website performance optimisation is the simple rule that, the less data you send to the client, the quicker and better your website will perform. With the plethora of devices on the market capable of viewing websites, there is a growing trend to optimise your website based on the device it is being viewed on.","position":{"start":{"line":93,"column":1,"offset":10149},"end":{"line":93,"column":334,"offset":10482}}}],"position":{"start":{"line":93,"column":1,"offset":10149},"end":{"line":93,"column":334,"offset":10482}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Media queries are a fairly new tool added to CSS3. With more and more content being consumed using mobile-devices there has been a shift in design thinking towards mobile first. Using media queries you can then add stylings for larger screen sizes.","position":{"start":{"line":95,"column":1,"offset":10484},"end":{"line":95,"column":249,"offset":10732}}}],"position":{"start":{"line":95,"column":1,"offset":10484},"end":{"line":95,"column":249,"offset":10732}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/* Some CSS for screen sizes bigger than 600px but smaller than 992px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/*  Some CSS for screen sizes bigger than 992px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">orientation</span><span class=\"token punctuation\">:</span> landscape<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* Some CSS for landscape-oriented devices */</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":97,"column":1,"offset":10734},"end":{"line":109,"column":4,"offset":11064}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The @media tag starts a new CSS rule, whilst the only keyword stops older browsers that don’t support media queries from using it. The screen keyword applies the rules to screens rather than prints. After that you add the media-feature which supports the and , or and not keywords so you can get as specific as you want. When you’re loading your image you can write code like:","position":{"start":{"line":111,"column":1,"offset":11066},"end":{"line":111,"column":377,"offset":11442}}}],"position":{"start":{"line":111,"column":1,"offset":11066},"end":{"line":111,"column":377,"offset":11442}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-small.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-big.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":113,"column":1,"offset":11444},"end":{"line":121,"column":4,"offset":11663}}},{"type":"text","value":"\n"},{"type":"raw","value":"<iframe src=\"https://medium.com/media/ecbcd475236339fbe45efdd97bfcdeed\" frameborder=0></iframe>","position":{"start":{"line":122,"column":1,"offset":11664},"end":{"line":122,"column":96,"offset":11759}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This isn’t necessarily the best or optimal approach for image optimisation. Luckily we have other options. ","position":{"start":{"line":124,"column":1,"offset":11761},"end":{"line":124,"column":108,"offset":11868}}},{"type":"element","tagName":"a","properties":{"href":"https://www.imgix.com/"},"children":[{"type":"text","value":"Imgix","position":{"start":{"line":124,"column":109,"offset":11869},"end":{"line":124,"column":114,"offset":11874}}}],"position":{"start":{"line":124,"column":108,"offset":11868},"end":{"line":124,"column":139,"offset":11899}}},{"type":"text","value":" and ","position":{"start":{"line":124,"column":139,"offset":11899},"end":{"line":124,"column":144,"offset":11904}}},{"type":"element","tagName":"a","properties":{"href":"https://cloudinary.com/"},"children":[{"type":"text","value":"Cloudinary","position":{"start":{"line":124,"column":145,"offset":11905},"end":{"line":124,"column":155,"offset":11915}}}],"position":{"start":{"line":124,"column":144,"offset":11904},"end":{"line":124,"column":181,"offset":11941}}},{"type":"text","value":" are two ways you can help optimise your site for the right device. Imgix is a Content Delivery Network (CDN) for images with a lot of cool features. A CDN simply takes your files and spreads them across the globe so that someone in a different country doesn’t have to wait for your files on your server to make it all the way to them. This ","position":{"start":{"line":124,"column":181,"offset":11941},"end":{"line":124,"column":522,"offset":12282}}},{"type":"element","tagName":"a","properties":{"href":"https://docs.imgix.com/tutorials/responsive-images-srcset-imgix"},"children":[{"type":"text","value":"tutorial","position":{"start":{"line":124,"column":523,"offset":12283},"end":{"line":124,"column":531,"offset":12291}}}],"position":{"start":{"line":124,"column":522,"offset":12282},"end":{"line":124,"column":597,"offset":12357}}},{"type":"text","value":" goes through how to use Imgix for different device pixel ratios. Cloudinary is a similar service, and their ","position":{"start":{"line":124,"column":597,"offset":12357},"end":{"line":124,"column":706,"offset":12466}}},{"type":"element","tagName":"a","properties":{"href":"https://cloudinary.com/documentation/image_optimization"},"children":[{"type":"text","value":"tutorial ","position":{"start":{"line":124,"column":707,"offset":12467},"end":{"line":124,"column":716,"offset":12476}}}],"position":{"start":{"line":124,"column":706,"offset":12466},"end":{"line":124,"column":774,"offset":12534}}},{"type":"text","value":"will take you through the importance of optimisation and how to achieve it will their incredible services. Below is a small example showing how easy it is to use Cloudinary straight in the HTML markup.","position":{"start":{"line":124,"column":774,"offset":12534},"end":{"line":124,"column":975,"offset":12735}}}],"position":{"start":{"line":124,"column":1,"offset":11761},"end":{"line":124,"column":975,"offset":12735}}},{"type":"text","value":"\n"},{"type":"raw","value":"<iframe src=\"https://medium.com/media/98868354e5bf607d317496f64ddec2a2\" frameborder=0></iframe>","position":{"start":{"line":126,"column":1,"offset":12737},"end":{"line":126,"column":96,"offset":12832}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As a last point on image optimisation, the format you use can have a large impact on file size. Some files contain lots of metadata which you don’t want to be serving to your client — ","position":{"start":{"line":128,"column":1,"offset":12834},"end":{"line":128,"column":185,"offset":13018}}},{"type":"element","tagName":"a","properties":{"href":"https://www.sno.phy.queensu.ca/~phil/exiftool/"},"children":[{"type":"text","value":"ExifTool","position":{"start":{"line":128,"column":186,"offset":13019},"end":{"line":128,"column":194,"offset":13027}}}],"position":{"start":{"line":128,"column":185,"offset":13018},"end":{"line":128,"column":243,"offset":13076}}},{"type":"text","value":" is a commonly used command-line application that can help you trim down those files sizes. On top of this, Scalable Vector Graphics (SVG) are a web-standard developed by W3C that offers XML-based vector graphics. This means they have infinite resolution unlike PNG or JPG files. It also makes them highly versatile, easily editable and can even be animated. At the end of the day SVGs are just code and so the file sizes tend to be small. For more reasons to use them, check out this ","position":{"start":{"line":128,"column":243,"offset":13076},"end":{"line":128,"column":728,"offset":13561}}},{"type":"element","tagName":"a","properties":{"href":"https://watb.co.uk/5-reasons-you-should-be-using-svgs-over-pngs/"},"children":[{"type":"text","value":"article","position":{"start":{"line":128,"column":729,"offset":13562},"end":{"line":128,"column":736,"offset":13569}}}],"position":{"start":{"line":128,"column":728,"offset":13561},"end":{"line":128,"column":803,"offset":13636}}},{"type":"text","value":".","position":{"start":{"line":128,"column":803,"offset":13636},"end":{"line":128,"column":804,"offset":13637}}}],"position":{"start":{"line":128,"column":1,"offset":12834},"end":{"line":128,"column":804,"offset":13637}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":130,"column":5,"offset":13643},"end":{"line":130,"column":15,"offset":13653}}}],"position":{"start":{"line":130,"column":1,"offset":13639},"end":{"line":130,"column":15,"offset":13653}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We’ve only scratched the surface of what’s possible for website optimisation. There are many tools you can use to help you stream-line this process like ","position":{"start":{"line":132,"column":1,"offset":13655},"end":{"line":132,"column":154,"offset":13808}}},{"type":"element","tagName":"a","properties":{"href":"https://webpack.js.org/"},"children":[{"type":"text","value":"Webpack","position":{"start":{"line":132,"column":155,"offset":13809},"end":{"line":132,"column":162,"offset":13816}}}],"position":{"start":{"line":132,"column":154,"offset":13808},"end":{"line":132,"column":188,"offset":13842}}},{"type":"text","value":" for bundling or static-site generators like ","position":{"start":{"line":132,"column":188,"offset":13842},"end":{"line":132,"column":233,"offset":13887}}},{"type":"element","tagName":"a","properties":{"href":"https://www.gatsbyjs.org/"},"children":[{"type":"text","value":"Gatsby","position":{"start":{"line":132,"column":234,"offset":13888},"end":{"line":132,"column":240,"offset":13894}}}],"position":{"start":{"line":132,"column":233,"offset":13887},"end":{"line":132,"column":268,"offset":13922}}},{"type":"text","value":". ","position":{"start":{"line":132,"column":268,"offset":13922},"end":{"line":132,"column":270,"offset":13924}}},{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking"},"children":[{"type":"text","value":"Tree shaking","position":{"start":{"line":132,"column":271,"offset":13925},"end":{"line":132,"column":283,"offset":13937}}}],"position":{"start":{"line":132,"column":270,"offset":13924},"end":{"line":132,"column":348,"offset":14002}}},{"type":"text","value":" is another commonly used technique to remove excess, unused modules lying around your website.","position":{"start":{"line":132,"column":348,"offset":14002},"end":{"line":132,"column":443,"offset":14097}}}],"position":{"start":{"line":132,"column":1,"offset":13655},"end":{"line":132,"column":443,"offset":14097}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Hopefully this article has touched on some useful techniques you can use on your next site to help improve its performance. Happy coding!","position":{"start":{"line":134,"column":1,"offset":14099},"end":{"line":134,"column":138,"offset":14236}}}],"position":{"start":{"line":134,"column":1,"offset":14099},"end":{"line":134,"column":138,"offset":14236}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A big thank you to ","position":{"start":{"line":136,"column":1,"offset":14238},"end":{"line":136,"column":20,"offset":14257}}},{"type":"element","tagName":"a","properties":{"href":"undefined"},"children":[{"type":"text","value":"Christian Silver","position":{"start":{"line":136,"column":21,"offset":14258},"end":{"line":136,"column":37,"offset":14274}}}],"position":{"start":{"line":136,"column":20,"offset":14257},"end":{"line":136,"column":49,"offset":14286}}},{"type":"text","value":" and ","position":{"start":{"line":136,"column":49,"offset":14286},"end":{"line":136,"column":54,"offset":14291}}},{"type":"element","tagName":"a","properties":{"href":"undefined"},"children":[{"type":"text","value":"Charlie Crisp","position":{"start":{"line":136,"column":55,"offset":14292},"end":{"line":136,"column":68,"offset":14305}}}],"position":{"start":{"line":136,"column":54,"offset":14291},"end":{"line":136,"column":80,"offset":14317}}},{"type":"text","value":" for editing this post and providing extremely useful advice and extra content to make it even better.","position":{"start":{"line":136,"column":80,"offset":14317},"end":{"line":136,"column":182,"offset":14419}}}],"position":{"start":{"line":136,"column":1,"offset":14238},"end":{"line":136,"column":182,"offset":14419}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":137,"column":1,"offset":14420}}}},{"id":"transformer-remark-markdown-html-45150650ad44017e5ae8e21fed0f0504-gatsby-remark-imagesgatsby-remark-prismjs-","value":"<p><img src=\"https://res.cloudinary.com/patricoferris/image/upload/v1532781201/pf2018/blogposts/28-07-2018/website_optimisation_2.png\" alt=\"Optimising your Website\">\nInspired by a <a href=\"https://syntax.fm/\">Syntax</a> podcast, I got really interested in website optimisation. It can often be an overlooked aspect in web development with more focus on design and functionality, I realised my number one priority whenever I visited a website is load speed. My attention is a website’s number one goal, lose it and they lose all potential ad revenue or possibility to give me whatever information I was looking for. <a href=\"https://developers.google.com/web/fundamentals/performance/get-started/\">Many seem to agree. 53% of users abandon websites that take more than 3 seconds to load</a>. No amount of fancy graphics or parallax scrolling that appears five seconds after someone’s clicked will hide the slow loading times.</p>\n<p>The aim of this article is to give a broad overview of the concepts and ideas behind optimising your website, experienced developers are likely already using things like Webpack (a module bundler) among other tools to speed-up their sites.</p>\n<p>For testing load-times I will be using the <a href=\"https://chrome.google.com/webstore/detail/page-load-time/fploionmjgeclbkemipmkogoaohcdbig?hl=en\">Page Load Time </a>Chrome extension. There are a few ways to measure website loading time including: <a href=\"https://developers.google.com/web/tools/chrome-user-experience-report/\">first paint, first meaning paint, DOMContentLoaded</a> etc. For a more detailed look into what this timer measures, check out the Github repository below.\n<a href=\"https://github.com/alex-vv/chrome-load-timer\"><strong>alex-vv/chrome-load-timer</strong>\n<em>chrome-load-timer - Google Chrome extension to measure page load time and display it in the toolbar</em>github.com</a></p>\n<h3><strong>Use Minified Stylesheets and Scripts</strong></h3>\n<p>You would be amazed at how much performance can be gained by this simple trick. What is a minified document? When we write code it is never our job to make it optimised for the computer, instead our golden rule is to make it readable to humans. This improves readability, cuts down on debug time and makes it easier to maintain. However, to achieve this we often add extra spacing which costs us precious space. Minifying the code is trimming all this fat from what we’ve written to have code that produces the same result but is far more difficult to read and maintain. This is okay though, because a computer has no problem deciphering it. Take the following code for example.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Notice how, wherever possible, our line-breaks and spaces are gone. On top of that, the code in the for-loop is only one line so there’s no need for the curly braces which extends our code over three lines when it can be done in one. Does this make a difference?</p>\n<p>I tried it out on simple website that just had one script tag being loaded in for the graphics library <a href=\"https://p5js.org/\">p5.js</a>. Using the non-minified CDN link I got a load time of 0.25 seconds. Using the minified version I got a markedly improved load time of 0.08 seconds. Depending on what your website project is, there are a few ways to automatically minify code. If it is a <a href=\"https://guide.meteor.com/build-tool.html\">Meteor app</a> it will be done automatically, using <a href=\"https://webpack.js.org/guides/production/\">Webpack </a>will also allow you to do this. Otherwise there are some online tools like <a href=\"https://jscompress.com/\">JSCompress </a>or <a href=\"https://cssminifier.com/\">CSSMinifier </a>that you can upload your code to.</p>\n<h3>Design Versus Performance</h3>\n<p>Whilst design is undoubtedly a major aspect to a website’s overall success, both developers and designers must work together to compromise and make a mutually beneficial trade-off between design and performance. The classic example is fonts. Take the two screenshots of a simple website below.</p>\n<p><img src=\"https://res.cloudinary.com/patricoferris/image/upload/v1532780050/pf2018/blogposts/28-07-2018/Helvetica.png\" alt=\"The example website using Helvetica Font (commonly found on many computers) — check [this](https://css-tricks.com/snippets/css/system-font-stack/) link for common system fonts\">\n<em>The example website using Helvetica Font (commonly found on many computers) — check <a href=\"https://css-tricks.com/snippets/css/system-font-stack/\">this</a> link for common system fonts</em></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/5760/1*8ciuJNBdqMhlLSaOpNUXow.png\" alt=\"The example website using Roboto Font (designed by Google and linked from [Google Fonts](https://fonts.google.com/?selection.family=Roboto))\"><em>The example website using Roboto Font (designed by Google and linked from <a href=\"https://fonts.google.com/?selection.family=Roboto\">Google Fonts</a>)</em></p>\n<p>Before critiquing my questionable design skills take a moment to appreciate that these two fonts are very similar — yet the loading time for a website for the Roboto font was 0.22 seconds as compared with 0.17 for Helvetica. Whilst not that significant, using lots of custom fonts will slow down your website, although using Google Fonts’ API will help keep your website optimised. As an over-the-top example, linking 20 different fonts from the Google API increased the load time to 0.87 seconds.</p>\n<h3>Inlining your JavaScript and CSS</h3>\n<p>For each individual document or component of your website, when the parser reaches the script tag or link tag it sends and HTTP request for that document and if not stated differently, these will be blocking actions. What this means is your machine is parsing the HTML document getting the words to display in your browser but if it hits the script tag with the attribute src='js/main.js' for example, it will block the parsing and load in that file. This is where as a developer you need to be clever about where in the document you place things.</p>\n<p>Whilst it may not ultimately affect the loading time of your website, it can affect the order in which things are loaded. Again we’ll be using the un-minified p5.js library to simulate a large JavaScript file and load it in different places to see how it affects our user experience.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2780/1*h_3GogfkaahcXCO9a43CPA.gif\" alt=\"Refreshing website with the script tag inserted at the bottom of the body tag\"><em>Refreshing website with the script tag inserted at the bottom of the body tag</em></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2780/1*xLOq5r4erQAwb4Au_hB-Ww.gif\" alt=\"Refreshing website with the script tag inserted at the top of the body tag\"><em>Refreshing website with the script tag inserted at the top of the body tag</em></p>\n<p>Whilst the load times were similar for both cases — the user experience is far better by placing the script at the body tag allowing the HTML to be parsed before the JavaScript giving the user the website content immediately!</p>\n<p>In the same vein CSS can also be render-blocking especially because more often than not it is linked in the head tag of your HTML document before the body. But if we want our user to see the content in the quickest time we don’t want to be loading CSS for the footer of our document which the user won’t see until they’ve scrolled to the bottom. In fact, we don’t want to load any CSS in that the user can’t immediately see when the page first loads on their device.</p>\n<p>The CSS that you need is often called the <em>Critical CSS</em>. Finding it for yourself would be a headache. It will be different for different devices, meaning you would have to check manually for all possible devices. Lucky for us we have (if you’re using <a href=\"https://nodejs.org/en/\">Node.js</a>) <a href=\"https://github.com/addyosmani/critical\">Critical</a>. This helpful package does the CSS inlining for us and all we do is add some code to a Javascript file. Here’s a code snippet from the Github page.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> critical <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'critical'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncritical<span class=\"token punctuation\">.</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    base<span class=\"token punctuation\">:</span> <span class=\"token string\">'test/'</span><span class=\"token punctuation\">,</span>\n    src<span class=\"token punctuation\">:</span> <span class=\"token string\">'index.html'</span><span class=\"token punctuation\">,</span>\n    dest<span class=\"token punctuation\">:</span> <span class=\"token string\">'styles/main.css'</span><span class=\"token punctuation\">,</span>\n    dimensions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n        height<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n        width<span class=\"token punctuation\">:</span> <span class=\"token number\">500</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        height<span class=\"token punctuation\">:</span> <span class=\"token number\">900</span><span class=\"token punctuation\">,</span>\n        width<span class=\"token punctuation\">:</span> <span class=\"token number\">1200</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Using the generate function, we supply it with a JavaScript object with some values defined. base is where we’re going to save our src and dest (our project folder usually). What’s great is now we just supply an array of dimensions and the code will compute the critical CSS for each and inline that code into our head tag.</p>\n<h3>Async and Defer</h3>\n<p>Again, we come back to this idea of render-blocking and how best we should implement this for our website. When you have a plain script tag in your HTML it blocks the HTML from loading whilst the JavaScript loads <strong>and</strong> runs. Async and defer are simple attributes that you can add to your script tags that change the way your JavaScript will be loaded.</p>\n<p>Defer essentially “defers” execution of the script until after the HTML has been parsed. A major advantage of this is that you no longer need some $(document).ready() jQuery-style function to make sure the body was loaded before you could manipulate it, which could cut out some of the dependencies on libraries like jQuery which helps reduce load-time.</p>\n<p>Async is, unsurprisingly, the asynchronous loading of JavaScript files. What does this mean? Your HTML will continue to be parsed whilst the file is loaded and then whenever its ready the file will be executed. This helps improving user experience whilst viewing your website. Imagine for example you had a JavaScript file for doing some cool graphics. You want the words around this graphic to be parsed until your graphic is ready to be executed. As soon as it is ready, it is executed and we get a more seamless loading of our webpage without missing pieces.</p>\n<p>Check this <a href=\"http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html\">website</a> for a really intuitive, graphical representation of this.</p>\n<h3>Image Optimisation and Media Queries</h3>\n<p>The cornerstone of all website performance optimisation is the simple rule that, the less data you send to the client, the quicker and better your website will perform. With the plethora of devices on the market capable of viewing websites, there is a growing trend to optimise your website based on the device it is being viewed on.</p>\n<p>Media queries are a fairly new tool added to CSS3. With more and more content being consumed using mobile-devices there has been a shift in design thinking towards mobile first. Using media queries you can then add stylings for larger screen sizes.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/* Some CSS for screen sizes bigger than 600px but smaller than 992px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/*  Some CSS for screen sizes bigger than 992px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">orientation</span><span class=\"token punctuation\">:</span> landscape<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* Some CSS for landscape-oriented devices */</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>The @media tag starts a new CSS rule, whilst the only keyword stops older browsers that don’t support media queries from using it. The screen keyword applies the rules to screens rather than prints. After that you add the media-feature which supports the and , or and not keywords so you can get as specific as you want. When you’re loading your image you can write code like:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-small.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-big.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<iframe src=\"https://medium.com/media/ecbcd475236339fbe45efdd97bfcdeed\" frameborder=0></iframe>\n<p>This isn’t necessarily the best or optimal approach for image optimisation. Luckily we have other options. <a href=\"https://www.imgix.com/\">Imgix</a> and <a href=\"https://cloudinary.com/\">Cloudinary</a> are two ways you can help optimise your site for the right device. Imgix is a Content Delivery Network (CDN) for images with a lot of cool features. A CDN simply takes your files and spreads them across the globe so that someone in a different country doesn’t have to wait for your files on your server to make it all the way to them. This <a href=\"https://docs.imgix.com/tutorials/responsive-images-srcset-imgix\">tutorial</a> goes through how to use Imgix for different device pixel ratios. Cloudinary is a similar service, and their <a href=\"https://cloudinary.com/documentation/image_optimization\">tutorial </a>will take you through the importance of optimisation and how to achieve it will their incredible services. Below is a small example showing how easy it is to use Cloudinary straight in the HTML markup.</p>\n<iframe src=\"https://medium.com/media/98868354e5bf607d317496f64ddec2a2\" frameborder=0></iframe>\n<p>As a last point on image optimisation, the format you use can have a large impact on file size. Some files contain lots of metadata which you don’t want to be serving to your client — <a href=\"https://www.sno.phy.queensu.ca/~phil/exiftool/\">ExifTool</a> is a commonly used command-line application that can help you trim down those files sizes. On top of this, Scalable Vector Graphics (SVG) are a web-standard developed by W3C that offers XML-based vector graphics. This means they have infinite resolution unlike PNG or JPG files. It also makes them highly versatile, easily editable and can even be animated. At the end of the day SVGs are just code and so the file sizes tend to be small. For more reasons to use them, check out this <a href=\"https://watb.co.uk/5-reasons-you-should-be-using-svgs-over-pngs/\">article</a>.</p>\n<h3>Conclusion</h3>\n<p>We’ve only scratched the surface of what’s possible for website optimisation. There are many tools you can use to help you stream-line this process like <a href=\"https://webpack.js.org/\">Webpack</a> for bundling or static-site generators like <a href=\"https://www.gatsbyjs.org/\">Gatsby</a>. <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking\">Tree shaking</a> is another commonly used technique to remove excess, unused modules lying around your website.</p>\n<p>Hopefully this article has touched on some useful techniques you can use on your next site to help improve its performance. Happy coding!</p>\n<p>A big thank you to <a href=\"undefined\">Christian Silver</a> and <a href=\"undefined\">Charlie Crisp</a> for editing this post and providing extremely useful advice and extra content to make it even better.</p>"},{"id":"transformer-remark-markdown-ast-701f0f402b35d9a4d0df54710318a08c-gatsby-remark-imagesgatsby-remark-prismjs-","value":{"type":"root","children":[{"type":"yaml","value":"path: '/optimise-your-website'\ntitle: 'Optimising your Website'\nsubtitle: 'Tips and tricks to keep your website lean and fast'\ndate: '2018-07-28'","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":6,"column":4,"offset":153},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://res.cloudinary.com/patricoferris/image/upload/v1532781201/pf2018/blogposts/28-07-2018/website_optimisation_2.png","alt":"Optimising your Website","position":{"start":{"line":7,"column":1,"offset":154},"end":{"line":7,"column":149,"offset":302},"indent":[]}},{"type":"text","value":"\nInspired by a ","position":{"start":{"line":7,"column":149,"offset":302},"end":{"line":8,"column":15,"offset":317},"indent":[1]}},{"type":"link","title":null,"url":"https://syntax.fm/","children":[{"type":"text","value":"Syntax","position":{"start":{"line":8,"column":16,"offset":318},"end":{"line":8,"column":22,"offset":324},"indent":[]}}],"position":{"start":{"line":8,"column":15,"offset":317},"end":{"line":8,"column":43,"offset":345},"indent":[]}},{"type":"text","value":" podcast, I got really interested in website optimisation. It can often be an overlooked aspect in web development with more focus on design and functionality, I realised my number one priority whenever I visited a website is load speed. My attention is a website’s number one goal, lose it and they lose all potential ad revenue or possibility to give me whatever information I was looking for. ","position":{"start":{"line":8,"column":43,"offset":345},"end":{"line":8,"column":439,"offset":741},"indent":[]}},{"type":"link","title":null,"url":"https://developers.google.com/web/fundamentals/performance/get-started/","children":[{"type":"text","value":"Many seem to agree. 53% of users abandon websites that take more than 3 seconds to load","position":{"start":{"line":8,"column":440,"offset":742},"end":{"line":8,"column":527,"offset":829},"indent":[]}}],"position":{"start":{"line":8,"column":439,"offset":741},"end":{"line":8,"column":601,"offset":903},"indent":[]}},{"type":"text","value":". No amount of fancy graphics or parallax scrolling that appears five seconds after someone’s clicked will hide the slow loading times.","position":{"start":{"line":8,"column":601,"offset":903},"end":{"line":8,"column":736,"offset":1038},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":154},"end":{"line":8,"column":736,"offset":1038},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"The aim of this article is to give a broad overview of the concepts and ideas behind optimising your website, experienced developers are likely already using things like Webpack (a module bundler) among other tools to speed-up their sites.","position":{"start":{"line":10,"column":1,"offset":1040},"end":{"line":10,"column":240,"offset":1279},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":1040},"end":{"line":10,"column":240,"offset":1279},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For testing load-times I will be using the ","position":{"start":{"line":12,"column":1,"offset":1281},"end":{"line":12,"column":44,"offset":1324},"indent":[]}},{"type":"link","title":null,"url":"https://chrome.google.com/webstore/detail/page-load-time/fploionmjgeclbkemipmkogoaohcdbig?hl=en","children":[{"type":"text","value":"Page Load Time ","position":{"start":{"line":12,"column":45,"offset":1325},"end":{"line":12,"column":60,"offset":1340},"indent":[]}}],"position":{"start":{"line":12,"column":44,"offset":1324},"end":{"line":12,"column":158,"offset":1438},"indent":[]}},{"type":"text","value":"Chrome extension. There are a few ways to measure website loading time including: ","position":{"start":{"line":12,"column":158,"offset":1438},"end":{"line":12,"column":240,"offset":1520},"indent":[]}},{"type":"link","title":null,"url":"https://developers.google.com/web/tools/chrome-user-experience-report/","children":[{"type":"text","value":"first paint, first meaning paint, DOMContentLoaded","position":{"start":{"line":12,"column":241,"offset":1521},"end":{"line":12,"column":291,"offset":1571},"indent":[]}}],"position":{"start":{"line":12,"column":240,"offset":1520},"end":{"line":12,"column":364,"offset":1644},"indent":[]}},{"type":"text","value":" etc. For a more detailed look into what this timer measures, check out the Github repository below.\n","position":{"start":{"line":12,"column":364,"offset":1644},"end":{"line":13,"column":1,"offset":1745},"indent":[1]}},{"type":"link","title":null,"url":"https://github.com/alex-vv/chrome-load-timer","children":[{"type":"strong","children":[{"type":"text","value":"alex-vv/chrome-load-timer","position":{"start":{"line":13,"column":4,"offset":1748},"end":{"line":13,"column":29,"offset":1773},"indent":[]}}],"position":{"start":{"line":13,"column":2,"offset":1746},"end":{"line":13,"column":31,"offset":1775},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":13,"column":31,"offset":1775},"end":{"line":14,"column":1,"offset":1776},"indent":[1]}},{"type":"emphasis","children":[{"type":"text","value":"chrome-load-timer - Google Chrome extension to measure page load time and display it in the toolbar","position":{"start":{"line":14,"column":2,"offset":1777},"end":{"line":14,"column":101,"offset":1876},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":1776},"end":{"line":14,"column":102,"offset":1877},"indent":[]}},{"type":"text","value":"github.com","position":{"start":{"line":14,"column":102,"offset":1877},"end":{"line":14,"column":112,"offset":1887},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":1745},"end":{"line":14,"column":159,"offset":1934},"indent":[1]}}],"position":{"start":{"line":12,"column":1,"offset":1281},"end":{"line":14,"column":159,"offset":1934},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"strong","children":[{"type":"text","value":"Use Minified Stylesheets and Scripts","position":{"start":{"line":16,"column":7,"offset":1942},"end":{"line":16,"column":43,"offset":1978},"indent":[]}}],"position":{"start":{"line":16,"column":5,"offset":1940},"end":{"line":16,"column":45,"offset":1980},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":1936},"end":{"line":16,"column":45,"offset":1980},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You would be amazed at how much performance can be gained by this simple trick. What is a minified document? When we write code it is never our job to make it optimised for the computer, instead our golden rule is to make it readable to humans. This improves readability, cuts down on debug time and makes it easier to maintain. However, to achieve this we often add extra spacing which costs us precious space. Minifying the code is trimming all this fat from what we’ve written to have code that produces the same result but is far more difficult to read and maintain. This is okay though, because a computer has no problem deciphering it. Take the following code for example.","position":{"start":{"line":18,"column":1,"offset":1982},"end":{"line":18,"column":679,"offset":2660},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1982},"end":{"line":18,"column":679,"offset":2660},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","position":{"start":{"line":20,"column":1,"offset":2662},"end":{"line":29,"column":4,"offset":2921},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Notice how, wherever possible, our line-breaks and spaces are gone. On top of that, the code in the for-loop is only one line so there’s no need for the curly braces which extends our code over three lines when it can be done in one. Does this make a difference?","position":{"start":{"line":31,"column":1,"offset":2923},"end":{"line":31,"column":263,"offset":3185},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":2923},"end":{"line":31,"column":263,"offset":3185},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"I tried it out on simple website that just had one script tag being loaded in for the graphics library ","position":{"start":{"line":33,"column":1,"offset":3187},"end":{"line":33,"column":104,"offset":3290},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/","children":[{"type":"text","value":"p5.js","position":{"start":{"line":33,"column":105,"offset":3291},"end":{"line":33,"column":110,"offset":3296},"indent":[]}}],"position":{"start":{"line":33,"column":104,"offset":3290},"end":{"line":33,"column":130,"offset":3316},"indent":[]}},{"type":"text","value":". Using the non-minified CDN link I got a load time of 0.25 seconds. Using the minified version I got a markedly improved load time of 0.08 seconds. Depending on what your website project is, there are a few ways to automatically minify code. If it is a ","position":{"start":{"line":33,"column":130,"offset":3316},"end":{"line":33,"column":384,"offset":3570},"indent":[]}},{"type":"link","title":null,"url":"https://guide.meteor.com/build-tool.html","children":[{"type":"text","value":"Meteor app","position":{"start":{"line":33,"column":385,"offset":3571},"end":{"line":33,"column":395,"offset":3581},"indent":[]}}],"position":{"start":{"line":33,"column":384,"offset":3570},"end":{"line":33,"column":438,"offset":3624},"indent":[]}},{"type":"text","value":" it will be done automatically, using ","position":{"start":{"line":33,"column":438,"offset":3624},"end":{"line":33,"column":476,"offset":3662},"indent":[]}},{"type":"link","title":null,"url":"https://webpack.js.org/guides/production/","children":[{"type":"text","value":"Webpack ","position":{"start":{"line":33,"column":477,"offset":3663},"end":{"line":33,"column":485,"offset":3671},"indent":[]}}],"position":{"start":{"line":33,"column":476,"offset":3662},"end":{"line":33,"column":529,"offset":3715},"indent":[]}},{"type":"text","value":"will also allow you to do this. Otherwise there are some online tools like ","position":{"start":{"line":33,"column":529,"offset":3715},"end":{"line":33,"column":604,"offset":3790},"indent":[]}},{"type":"link","title":null,"url":"https://jscompress.com/","children":[{"type":"text","value":"JSCompress ","position":{"start":{"line":33,"column":605,"offset":3791},"end":{"line":33,"column":616,"offset":3802},"indent":[]}}],"position":{"start":{"line":33,"column":604,"offset":3790},"end":{"line":33,"column":642,"offset":3828},"indent":[]}},{"type":"text","value":"or ","position":{"start":{"line":33,"column":642,"offset":3828},"end":{"line":33,"column":645,"offset":3831},"indent":[]}},{"type":"link","title":null,"url":"https://cssminifier.com/","children":[{"type":"text","value":"CSSMinifier ","position":{"start":{"line":33,"column":646,"offset":3832},"end":{"line":33,"column":658,"offset":3844},"indent":[]}}],"position":{"start":{"line":33,"column":645,"offset":3831},"end":{"line":33,"column":685,"offset":3871},"indent":[]}},{"type":"text","value":"that you can upload your code to.","position":{"start":{"line":33,"column":685,"offset":3871},"end":{"line":33,"column":718,"offset":3904},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":3187},"end":{"line":33,"column":718,"offset":3904},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Design Versus Performance","position":{"start":{"line":35,"column":5,"offset":3910},"end":{"line":35,"column":30,"offset":3935},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":3906},"end":{"line":35,"column":30,"offset":3935},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Whilst design is undoubtedly a major aspect to a website’s overall success, both developers and designers must work together to compromise and make a mutually beneficial trade-off between design and performance. The classic example is fonts. Take the two screenshots of a simple website below.","position":{"start":{"line":37,"column":1,"offset":3937},"end":{"line":37,"column":294,"offset":4230},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":3937},"end":{"line":37,"column":294,"offset":4230},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://res.cloudinary.com/patricoferris/image/upload/v1532780050/pf2018/blogposts/28-07-2018/Helvetica.png","alt":"The example website using Helvetica Font (commonly found on many computers) — check [this](https://css-tricks.com/snippets/css/system-font-stack/) link for common system fonts","position":{"start":{"line":39,"column":1,"offset":4232},"end":{"line":39,"column":288,"offset":4519},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":39,"column":288,"offset":4519},"end":{"line":40,"column":1,"offset":4520},"indent":[1]}},{"type":"emphasis","children":[{"type":"text","value":"The example website using Helvetica Font (commonly found on many computers) — check ","position":{"start":{"line":40,"column":2,"offset":4521},"end":{"line":40,"column":86,"offset":4605},"indent":[]}},{"type":"link","title":null,"url":"https://css-tricks.com/snippets/css/system-font-stack/","children":[{"type":"text","value":"this","position":{"start":{"line":40,"column":87,"offset":4606},"end":{"line":40,"column":91,"offset":4610},"indent":[]}}],"position":{"start":{"line":40,"column":86,"offset":4605},"end":{"line":40,"column":148,"offset":4667},"indent":[]}},{"type":"text","value":" link for common system fonts","position":{"start":{"line":40,"column":148,"offset":4667},"end":{"line":40,"column":177,"offset":4696},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":4520},"end":{"line":40,"column":178,"offset":4697},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":4232},"end":{"line":40,"column":178,"offset":4697},"indent":[1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://cdn-images-1.medium.com/max/5760/1*8ciuJNBdqMhlLSaOpNUXow.png","alt":"The example website using Roboto Font (designed by Google and linked from [Google Fonts](https://fonts.google.com/?selection.family=Roboto))","position":{"start":{"line":42,"column":1,"offset":4699},"end":{"line":42,"column":215,"offset":4913},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"The example website using Roboto Font (designed by Google and linked from ","position":{"start":{"line":42,"column":216,"offset":4914},"end":{"line":42,"column":290,"offset":4988},"indent":[]}},{"type":"link","title":null,"url":"https://fonts.google.com/?selection.family=Roboto","children":[{"type":"text","value":"Google Fonts","position":{"start":{"line":42,"column":291,"offset":4989},"end":{"line":42,"column":303,"offset":5001},"indent":[]}}],"position":{"start":{"line":42,"column":290,"offset":4988},"end":{"line":42,"column":355,"offset":5053},"indent":[]}},{"type":"text","value":")","position":{"start":{"line":42,"column":355,"offset":5053},"end":{"line":42,"column":356,"offset":5054},"indent":[]}}],"position":{"start":{"line":42,"column":215,"offset":4913},"end":{"line":42,"column":357,"offset":5055},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":4699},"end":{"line":42,"column":357,"offset":5055},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Before critiquing my questionable design skills take a moment to appreciate that these two fonts are very similar — yet the loading time for a website for the Roboto font was 0.22 seconds as compared with 0.17 for Helvetica. Whilst not that significant, using lots of custom fonts will slow down your website, although using Google Fonts’ API will help keep your website optimised. As an over-the-top example, linking 20 different fonts from the Google API increased the load time to 0.87 seconds.","position":{"start":{"line":44,"column":1,"offset":5057},"end":{"line":44,"column":498,"offset":5554},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":5057},"end":{"line":44,"column":498,"offset":5554},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Inlining your JavaScript and CSS","position":{"start":{"line":46,"column":5,"offset":5560},"end":{"line":46,"column":37,"offset":5592},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":5556},"end":{"line":46,"column":37,"offset":5592},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For each individual document or component of your website, when the parser reaches the script tag or link tag it sends and HTTP request for that document and if not stated differently, these will be blocking actions. What this means is your machine is parsing the HTML document getting the words to display in your browser but if it hits the script tag with the attribute src='js/main.js' for example, it will block the parsing and load in that file. This is where as a developer you need to be clever about where in the document you place things.","position":{"start":{"line":48,"column":1,"offset":5594},"end":{"line":48,"column":548,"offset":6141},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":5594},"end":{"line":48,"column":548,"offset":6141},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Whilst it may not ultimately affect the loading time of your website, it can affect the order in which things are loaded. Again we’ll be using the un-minified p5.js library to simulate a large JavaScript file and load it in different places to see how it affects our user experience.","position":{"start":{"line":50,"column":1,"offset":6143},"end":{"line":50,"column":284,"offset":6426},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":6143},"end":{"line":50,"column":284,"offset":6426},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://cdn-images-1.medium.com/max/2780/1*h_3GogfkaahcXCO9a43CPA.gif","alt":"Refreshing website with the script tag inserted at the bottom of the body tag","position":{"start":{"line":52,"column":1,"offset":6428},"end":{"line":52,"column":152,"offset":6579},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Refreshing website with the script tag inserted at the bottom of the body tag","position":{"start":{"line":52,"column":153,"offset":6580},"end":{"line":52,"column":230,"offset":6657},"indent":[]}}],"position":{"start":{"line":52,"column":152,"offset":6579},"end":{"line":52,"column":231,"offset":6658},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":6428},"end":{"line":52,"column":231,"offset":6658},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://cdn-images-1.medium.com/max/2780/1*xLOq5r4erQAwb4Au_hB-Ww.gif","alt":"Refreshing website with the script tag inserted at the top of the body tag","position":{"start":{"line":54,"column":1,"offset":6660},"end":{"line":54,"column":149,"offset":6808},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Refreshing website with the script tag inserted at the top of the body tag","position":{"start":{"line":54,"column":150,"offset":6809},"end":{"line":54,"column":224,"offset":6883},"indent":[]}}],"position":{"start":{"line":54,"column":149,"offset":6808},"end":{"line":54,"column":225,"offset":6884},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":6660},"end":{"line":54,"column":225,"offset":6884},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Whilst the load times were similar for both cases — the user experience is far better by placing the script at the body tag allowing the HTML to be parsed before the JavaScript giving the user the website content immediately!","position":{"start":{"line":56,"column":1,"offset":6886},"end":{"line":56,"column":226,"offset":7111},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":6886},"end":{"line":56,"column":226,"offset":7111},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In the same vein CSS can also be render-blocking especially because more often than not it is linked in the head tag of your HTML document before the body. But if we want our user to see the content in the quickest time we don’t want to be loading CSS for the footer of our document which the user won’t see until they’ve scrolled to the bottom. In fact, we don’t want to load any CSS in that the user can’t immediately see when the page first loads on their device.","position":{"start":{"line":58,"column":1,"offset":7113},"end":{"line":58,"column":467,"offset":7579},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":7113},"end":{"line":58,"column":467,"offset":7579},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The CSS that you need is often called the ","position":{"start":{"line":60,"column":1,"offset":7581},"end":{"line":60,"column":43,"offset":7623},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Critical CSS","position":{"start":{"line":60,"column":44,"offset":7624},"end":{"line":60,"column":56,"offset":7636},"indent":[]}}],"position":{"start":{"line":60,"column":43,"offset":7623},"end":{"line":60,"column":57,"offset":7637},"indent":[]}},{"type":"text","value":". Finding it for yourself would be a headache. It will be different for different devices, meaning you would have to check manually for all possible devices. Lucky for us we have (if you’re using ","position":{"start":{"line":60,"column":57,"offset":7637},"end":{"line":60,"column":253,"offset":7833},"indent":[]}},{"type":"link","title":null,"url":"https://nodejs.org/en/","children":[{"type":"text","value":"Node.js","position":{"start":{"line":60,"column":254,"offset":7834},"end":{"line":60,"column":261,"offset":7841},"indent":[]}}],"position":{"start":{"line":60,"column":253,"offset":7833},"end":{"line":60,"column":286,"offset":7866},"indent":[]}},{"type":"text","value":") ","position":{"start":{"line":60,"column":286,"offset":7866},"end":{"line":60,"column":288,"offset":7868},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/addyosmani/critical","children":[{"type":"text","value":"Critical","position":{"start":{"line":60,"column":289,"offset":7869},"end":{"line":60,"column":297,"offset":7877},"indent":[]}}],"position":{"start":{"line":60,"column":288,"offset":7868},"end":{"line":60,"column":338,"offset":7918},"indent":[]}},{"type":"text","value":". This helpful package does the CSS inlining for us and all we do is add some code to a Javascript file. Here’s a code snippet from the Github page.","position":{"start":{"line":60,"column":338,"offset":7918},"end":{"line":60,"column":486,"offset":8066},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":7581},"end":{"line":60,"column":486,"offset":8066},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> critical <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'critical'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncritical<span class=\"token punctuation\">.</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    base<span class=\"token punctuation\">:</span> <span class=\"token string\">'test/'</span><span class=\"token punctuation\">,</span>\n    src<span class=\"token punctuation\">:</span> <span class=\"token string\">'index.html'</span><span class=\"token punctuation\">,</span>\n    dest<span class=\"token punctuation\">:</span> <span class=\"token string\">'styles/main.css'</span><span class=\"token punctuation\">,</span>\n    dimensions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n        height<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n        width<span class=\"token punctuation\">:</span> <span class=\"token number\">500</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        height<span class=\"token punctuation\">:</span> <span class=\"token number\">900</span><span class=\"token punctuation\">,</span>\n        width<span class=\"token punctuation\">:</span> <span class=\"token number\">1200</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","position":{"start":{"line":62,"column":1,"offset":8068},"end":{"line":77,"column":4,"offset":8333},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Using the generate function, we supply it with a JavaScript object with some values defined. base is where we’re going to save our src and dest (our project folder usually). What’s great is now we just supply an array of dimensions and the code will compute the critical CSS for each and inline that code into our head tag.","position":{"start":{"line":79,"column":1,"offset":8335},"end":{"line":79,"column":324,"offset":8658},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":8335},"end":{"line":79,"column":324,"offset":8658},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Async and Defer","position":{"start":{"line":81,"column":5,"offset":8664},"end":{"line":81,"column":20,"offset":8679},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":8660},"end":{"line":81,"column":20,"offset":8679},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Again, we come back to this idea of render-blocking and how best we should implement this for our website. When you have a plain script tag in your HTML it blocks the HTML from loading whilst the JavaScript loads ","position":{"start":{"line":83,"column":1,"offset":8681},"end":{"line":83,"column":214,"offset":8894},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"and","position":{"start":{"line":83,"column":216,"offset":8896},"end":{"line":83,"column":219,"offset":8899},"indent":[]}}],"position":{"start":{"line":83,"column":214,"offset":8894},"end":{"line":83,"column":221,"offset":8901},"indent":[]}},{"type":"text","value":" runs. Async and defer are simple attributes that you can add to your script tags that change the way your JavaScript will be loaded.","position":{"start":{"line":83,"column":221,"offset":8901},"end":{"line":83,"column":354,"offset":9034},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":8681},"end":{"line":83,"column":354,"offset":9034},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Defer essentially “defers” execution of the script until after the HTML has been parsed. A major advantage of this is that you no longer need some $(document).ready() jQuery-style function to make sure the body was loaded before you could manipulate it, which could cut out some of the dependencies on libraries like jQuery which helps reduce load-time.","position":{"start":{"line":85,"column":1,"offset":9036},"end":{"line":85,"column":354,"offset":9389},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":9036},"end":{"line":85,"column":354,"offset":9389},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Async is, unsurprisingly, the asynchronous loading of JavaScript files. What does this mean? Your HTML will continue to be parsed whilst the file is loaded and then whenever its ready the file will be executed. This helps improving user experience whilst viewing your website. Imagine for example you had a JavaScript file for doing some cool graphics. You want the words around this graphic to be parsed until your graphic is ready to be executed. As soon as it is ready, it is executed and we get a more seamless loading of our webpage without missing pieces.","position":{"start":{"line":87,"column":1,"offset":9391},"end":{"line":87,"column":562,"offset":9952},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":9391},"end":{"line":87,"column":562,"offset":9952},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Check this ","position":{"start":{"line":89,"column":1,"offset":9954},"end":{"line":89,"column":12,"offset":9965},"indent":[]}},{"type":"link","title":null,"url":"http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html","children":[{"type":"text","value":"website","position":{"start":{"line":89,"column":13,"offset":9966},"end":{"line":89,"column":20,"offset":9973},"indent":[]}}],"position":{"start":{"line":89,"column":12,"offset":9965},"end":{"line":89,"column":94,"offset":10047},"indent":[]}},{"type":"text","value":" for a really intuitive, graphical representation of this.","position":{"start":{"line":89,"column":94,"offset":10047},"end":{"line":89,"column":152,"offset":10105},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":9954},"end":{"line":89,"column":152,"offset":10105},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Image Optimisation and Media Queries","position":{"start":{"line":91,"column":5,"offset":10111},"end":{"line":91,"column":41,"offset":10147},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":10107},"end":{"line":91,"column":41,"offset":10147},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The cornerstone of all website performance optimisation is the simple rule that, the less data you send to the client, the quicker and better your website will perform. With the plethora of devices on the market capable of viewing websites, there is a growing trend to optimise your website based on the device it is being viewed on.","position":{"start":{"line":93,"column":1,"offset":10149},"end":{"line":93,"column":334,"offset":10482},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":10149},"end":{"line":93,"column":334,"offset":10482},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Media queries are a fairly new tool added to CSS3. With more and more content being consumed using mobile-devices there has been a shift in design thinking towards mobile first. Using media queries you can then add stylings for larger screen sizes.","position":{"start":{"line":95,"column":1,"offset":10484},"end":{"line":95,"column":249,"offset":10732},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":10484},"end":{"line":95,"column":249,"offset":10732},"indent":[]}},{"type":"html","lang":"css","value":"<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/* Some CSS for screen sizes bigger than 600px but smaller than 992px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/*  Some CSS for screen sizes bigger than 992px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">orientation</span><span class=\"token punctuation\">:</span> landscape<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* Some CSS for landscape-oriented devices */</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":97,"column":1,"offset":10734},"end":{"line":109,"column":4,"offset":11064},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The @media tag starts a new CSS rule, whilst the only keyword stops older browsers that don’t support media queries from using it. The screen keyword applies the rules to screens rather than prints. After that you add the media-feature which supports the and , or and not keywords so you can get as specific as you want. When you’re loading your image you can write code like:","position":{"start":{"line":111,"column":1,"offset":11066},"end":{"line":111,"column":377,"offset":11442},"indent":[]}}],"position":{"start":{"line":111,"column":1,"offset":11066},"end":{"line":111,"column":377,"offset":11442},"indent":[]}},{"type":"html","lang":"css","value":"<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-small.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-big.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":113,"column":1,"offset":11444},"end":{"line":121,"column":4,"offset":11663},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This isn’t necessarily the best or optimal approach for image optimisation. Luckily we have other options. ","position":{"start":{"line":123,"column":1,"offset":11665},"end":{"line":123,"column":108,"offset":11772},"indent":[]}},{"type":"link","title":null,"url":"https://www.imgix.com/","children":[{"type":"text","value":"Imgix","position":{"start":{"line":123,"column":109,"offset":11773},"end":{"line":123,"column":114,"offset":11778},"indent":[]}}],"position":{"start":{"line":123,"column":108,"offset":11772},"end":{"line":123,"column":139,"offset":11803},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":123,"column":139,"offset":11803},"end":{"line":123,"column":144,"offset":11808},"indent":[]}},{"type":"link","title":null,"url":"https://cloudinary.com/","children":[{"type":"text","value":"Cloudinary","position":{"start":{"line":123,"column":145,"offset":11809},"end":{"line":123,"column":155,"offset":11819},"indent":[]}}],"position":{"start":{"line":123,"column":144,"offset":11808},"end":{"line":123,"column":181,"offset":11845},"indent":[]}},{"type":"text","value":" are two ways you can help optimise your site for the right device. Imgix is a Content Delivery Network (CDN) for images with a lot of cool features. A CDN simply takes your files and spreads them across the globe so that someone in a different country doesn’t have to wait for your files on your server to make it all the way to them. This ","position":{"start":{"line":123,"column":181,"offset":11845},"end":{"line":123,"column":522,"offset":12186},"indent":[]}},{"type":"link","title":null,"url":"https://docs.imgix.com/tutorials/responsive-images-srcset-imgix","children":[{"type":"text","value":"tutorial","position":{"start":{"line":123,"column":523,"offset":12187},"end":{"line":123,"column":531,"offset":12195},"indent":[]}}],"position":{"start":{"line":123,"column":522,"offset":12186},"end":{"line":123,"column":597,"offset":12261},"indent":[]}},{"type":"text","value":" goes through how to use Imgix for different device pixel ratios. Cloudinary is a similar service, and their ","position":{"start":{"line":123,"column":597,"offset":12261},"end":{"line":123,"column":706,"offset":12370},"indent":[]}},{"type":"link","title":null,"url":"https://cloudinary.com/documentation/image_optimization","children":[{"type":"text","value":"tutorial ","position":{"start":{"line":123,"column":707,"offset":12371},"end":{"line":123,"column":716,"offset":12380},"indent":[]}}],"position":{"start":{"line":123,"column":706,"offset":12370},"end":{"line":123,"column":774,"offset":12438},"indent":[]}},{"type":"text","value":"will take you through the importance of optimisation and how to achieve it will their incredible services. Below is a small example showing how easy it is to use Cloudinary straight in the HTML markup.","position":{"start":{"line":123,"column":774,"offset":12438},"end":{"line":123,"column":975,"offset":12639},"indent":[]}}],"position":{"start":{"line":123,"column":1,"offset":11665},"end":{"line":123,"column":975,"offset":12639},"indent":[]}},{"type":"html","value":"<iframe height='265' scrolling='no' title='Cloudinary Example' src='//codepen.io/patricoferris/embed/ejgVJN/?height=265&theme-id=0&default-tab=html,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/ejgVJN/'>Cloudinary Example</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":125,"column":1,"offset":12641},"end":{"line":126,"column":10,"offset":13125},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"As a last point on image optimisation, the format you use can have a large impact on file size. Some files contain lots of metadata which you don’t want to be serving to your client — ","position":{"start":{"line":128,"column":1,"offset":13127},"end":{"line":128,"column":185,"offset":13311},"indent":[]}},{"type":"link","title":null,"url":"https://www.sno.phy.queensu.ca/~phil/exiftool/","children":[{"type":"text","value":"ExifTool","position":{"start":{"line":128,"column":186,"offset":13312},"end":{"line":128,"column":194,"offset":13320},"indent":[]}}],"position":{"start":{"line":128,"column":185,"offset":13311},"end":{"line":128,"column":243,"offset":13369},"indent":[]}},{"type":"text","value":" is a commonly used command-line application that can help you trim down those files sizes. On top of this, Scalable Vector Graphics (SVG) are a web-standard developed by W3C that offers XML-based vector graphics. This means they have infinite resolution unlike PNG or JPG files. It also makes them highly versatile, easily editable and can even be animated. At the end of the day SVGs are just code and so the file sizes tend to be small. For more reasons to use them, check out this ","position":{"start":{"line":128,"column":243,"offset":13369},"end":{"line":128,"column":728,"offset":13854},"indent":[]}},{"type":"link","title":null,"url":"https://watb.co.uk/5-reasons-you-should-be-using-svgs-over-pngs/","children":[{"type":"text","value":"article","position":{"start":{"line":128,"column":729,"offset":13855},"end":{"line":128,"column":736,"offset":13862},"indent":[]}}],"position":{"start":{"line":128,"column":728,"offset":13854},"end":{"line":128,"column":803,"offset":13929},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":128,"column":803,"offset":13929},"end":{"line":128,"column":804,"offset":13930},"indent":[]}}],"position":{"start":{"line":128,"column":1,"offset":13127},"end":{"line":128,"column":804,"offset":13930},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":130,"column":5,"offset":13936},"end":{"line":130,"column":15,"offset":13946},"indent":[]}}],"position":{"start":{"line":130,"column":1,"offset":13932},"end":{"line":130,"column":15,"offset":13946},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We’ve only scratched the surface of what’s possible for website optimisation. There are many tools you can use to help you stream-line this process like ","position":{"start":{"line":132,"column":1,"offset":13948},"end":{"line":132,"column":154,"offset":14101},"indent":[]}},{"type":"link","title":null,"url":"https://webpack.js.org/","children":[{"type":"text","value":"Webpack","position":{"start":{"line":132,"column":155,"offset":14102},"end":{"line":132,"column":162,"offset":14109},"indent":[]}}],"position":{"start":{"line":132,"column":154,"offset":14101},"end":{"line":132,"column":188,"offset":14135},"indent":[]}},{"type":"text","value":" for bundling or static-site generators like ","position":{"start":{"line":132,"column":188,"offset":14135},"end":{"line":132,"column":233,"offset":14180},"indent":[]}},{"type":"link","title":null,"url":"https://www.gatsbyjs.org/","children":[{"type":"text","value":"Gatsby","position":{"start":{"line":132,"column":234,"offset":14181},"end":{"line":132,"column":240,"offset":14187},"indent":[]}}],"position":{"start":{"line":132,"column":233,"offset":14180},"end":{"line":132,"column":268,"offset":14215},"indent":[]}},{"type":"text","value":". ","position":{"start":{"line":132,"column":268,"offset":14215},"end":{"line":132,"column":270,"offset":14217},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking","children":[{"type":"text","value":"Tree shaking","position":{"start":{"line":132,"column":271,"offset":14218},"end":{"line":132,"column":283,"offset":14230},"indent":[]}}],"position":{"start":{"line":132,"column":270,"offset":14217},"end":{"line":132,"column":348,"offset":14295},"indent":[]}},{"type":"text","value":" is another commonly used technique to remove excess, unused modules lying around your website.","position":{"start":{"line":132,"column":348,"offset":14295},"end":{"line":132,"column":443,"offset":14390},"indent":[]}}],"position":{"start":{"line":132,"column":1,"offset":13948},"end":{"line":132,"column":443,"offset":14390},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Hopefully this article has touched on some useful techniques you can use on your next site to help improve its performance. Happy coding!","position":{"start":{"line":134,"column":1,"offset":14392},"end":{"line":134,"column":138,"offset":14529},"indent":[]}}],"position":{"start":{"line":134,"column":1,"offset":14392},"end":{"line":134,"column":138,"offset":14529},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A big thank you to ","position":{"start":{"line":136,"column":1,"offset":14531},"end":{"line":136,"column":20,"offset":14550},"indent":[]}},{"type":"link","title":null,"url":"undefined","children":[{"type":"text","value":"Christian Silver","position":{"start":{"line":136,"column":21,"offset":14551},"end":{"line":136,"column":37,"offset":14567},"indent":[]}}],"position":{"start":{"line":136,"column":20,"offset":14550},"end":{"line":136,"column":49,"offset":14579},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":136,"column":49,"offset":14579},"end":{"line":136,"column":54,"offset":14584},"indent":[]}},{"type":"link","title":null,"url":"undefined","children":[{"type":"text","value":"Charlie Crisp","position":{"start":{"line":136,"column":55,"offset":14585},"end":{"line":136,"column":68,"offset":14598},"indent":[]}}],"position":{"start":{"line":136,"column":54,"offset":14584},"end":{"line":136,"column":80,"offset":14610},"indent":[]}},{"type":"text","value":" for editing this post and providing extremely useful advice and extra content to make it even better.","position":{"start":{"line":136,"column":80,"offset":14610},"end":{"line":136,"column":182,"offset":14712},"indent":[]}}],"position":{"start":{"line":136,"column":1,"offset":14531},"end":{"line":136,"column":182,"offset":14712},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":137,"column":1,"offset":14713}}}},{"id":"transformer-remark-markdown-html-ast-701f0f402b35d9a4d0df54710318a08c-gatsby-remark-imagesgatsby-remark-prismjs-","value":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/patricoferris/image/upload/v1532781201/pf2018/blogposts/28-07-2018/website_optimisation_2.png","alt":"Optimising your Website"},"children":[],"position":{"start":{"line":7,"column":1,"offset":154},"end":{"line":7,"column":149,"offset":302}}},{"type":"text","value":"\nInspired by a ","position":{"start":{"line":7,"column":149,"offset":302},"end":{"line":8,"column":15,"offset":317}}},{"type":"element","tagName":"a","properties":{"href":"https://syntax.fm/"},"children":[{"type":"text","value":"Syntax","position":{"start":{"line":8,"column":16,"offset":318},"end":{"line":8,"column":22,"offset":324}}}],"position":{"start":{"line":8,"column":15,"offset":317},"end":{"line":8,"column":43,"offset":345}}},{"type":"text","value":" podcast, I got really interested in website optimisation. It can often be an overlooked aspect in web development with more focus on design and functionality, I realised my number one priority whenever I visited a website is load speed. My attention is a website’s number one goal, lose it and they lose all potential ad revenue or possibility to give me whatever information I was looking for. ","position":{"start":{"line":8,"column":43,"offset":345},"end":{"line":8,"column":439,"offset":741}}},{"type":"element","tagName":"a","properties":{"href":"https://developers.google.com/web/fundamentals/performance/get-started/"},"children":[{"type":"text","value":"Many seem to agree. 53% of users abandon websites that take more than 3 seconds to load","position":{"start":{"line":8,"column":440,"offset":742},"end":{"line":8,"column":527,"offset":829}}}],"position":{"start":{"line":8,"column":439,"offset":741},"end":{"line":8,"column":601,"offset":903}}},{"type":"text","value":". No amount of fancy graphics or parallax scrolling that appears five seconds after someone’s clicked will hide the slow loading times.","position":{"start":{"line":8,"column":601,"offset":903},"end":{"line":8,"column":736,"offset":1038}}}],"position":{"start":{"line":7,"column":1,"offset":154},"end":{"line":8,"column":736,"offset":1038}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The aim of this article is to give a broad overview of the concepts and ideas behind optimising your website, experienced developers are likely already using things like Webpack (a module bundler) among other tools to speed-up their sites.","position":{"start":{"line":10,"column":1,"offset":1040},"end":{"line":10,"column":240,"offset":1279}}}],"position":{"start":{"line":10,"column":1,"offset":1040},"end":{"line":10,"column":240,"offset":1279}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For testing load-times I will be using the ","position":{"start":{"line":12,"column":1,"offset":1281},"end":{"line":12,"column":44,"offset":1324}}},{"type":"element","tagName":"a","properties":{"href":"https://chrome.google.com/webstore/detail/page-load-time/fploionmjgeclbkemipmkogoaohcdbig?hl=en"},"children":[{"type":"text","value":"Page Load Time ","position":{"start":{"line":12,"column":45,"offset":1325},"end":{"line":12,"column":60,"offset":1340}}}],"position":{"start":{"line":12,"column":44,"offset":1324},"end":{"line":12,"column":158,"offset":1438}}},{"type":"text","value":"Chrome extension. There are a few ways to measure website loading time including: ","position":{"start":{"line":12,"column":158,"offset":1438},"end":{"line":12,"column":240,"offset":1520}}},{"type":"element","tagName":"a","properties":{"href":"https://developers.google.com/web/tools/chrome-user-experience-report/"},"children":[{"type":"text","value":"first paint, first meaning paint, DOMContentLoaded","position":{"start":{"line":12,"column":241,"offset":1521},"end":{"line":12,"column":291,"offset":1571}}}],"position":{"start":{"line":12,"column":240,"offset":1520},"end":{"line":12,"column":364,"offset":1644}}},{"type":"text","value":" etc. For a more detailed look into what this timer measures, check out the Github repository below.\n","position":{"start":{"line":12,"column":364,"offset":1644},"end":{"line":13,"column":1,"offset":1745}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/alex-vv/chrome-load-timer"},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"alex-vv/chrome-load-timer","position":{"start":{"line":13,"column":4,"offset":1748},"end":{"line":13,"column":29,"offset":1773}}}],"position":{"start":{"line":13,"column":2,"offset":1746},"end":{"line":13,"column":31,"offset":1775}}},{"type":"text","value":"\n","position":{"start":{"line":13,"column":31,"offset":1775},"end":{"line":14,"column":1,"offset":1776}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"chrome-load-timer - Google Chrome extension to measure page load time and display it in the toolbar","position":{"start":{"line":14,"column":2,"offset":1777},"end":{"line":14,"column":101,"offset":1876}}}],"position":{"start":{"line":14,"column":1,"offset":1776},"end":{"line":14,"column":102,"offset":1877}}},{"type":"text","value":"github.com","position":{"start":{"line":14,"column":102,"offset":1877},"end":{"line":14,"column":112,"offset":1887}}}],"position":{"start":{"line":13,"column":1,"offset":1745},"end":{"line":14,"column":159,"offset":1934}}}],"position":{"start":{"line":12,"column":1,"offset":1281},"end":{"line":14,"column":159,"offset":1934}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Use Minified Stylesheets and Scripts","position":{"start":{"line":16,"column":7,"offset":1942},"end":{"line":16,"column":43,"offset":1978}}}],"position":{"start":{"line":16,"column":5,"offset":1940},"end":{"line":16,"column":45,"offset":1980}}}],"position":{"start":{"line":16,"column":1,"offset":1936},"end":{"line":16,"column":45,"offset":1980}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You would be amazed at how much performance can be gained by this simple trick. What is a minified document? When we write code it is never our job to make it optimised for the computer, instead our golden rule is to make it readable to humans. This improves readability, cuts down on debug time and makes it easier to maintain. However, to achieve this we often add extra spacing which costs us precious space. Minifying the code is trimming all this fat from what we’ve written to have code that produces the same result but is far more difficult to read and maintain. This is okay though, because a computer has no problem deciphering it. Take the following code for example.","position":{"start":{"line":18,"column":1,"offset":1982},"end":{"line":18,"column":679,"offset":2660}}}],"position":{"start":{"line":18,"column":1,"offset":1982},"end":{"line":18,"column":679,"offset":2660}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","position":{"start":{"line":20,"column":1,"offset":2662},"end":{"line":29,"column":4,"offset":2921}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Notice how, wherever possible, our line-breaks and spaces are gone. On top of that, the code in the for-loop is only one line so there’s no need for the curly braces which extends our code over three lines when it can be done in one. Does this make a difference?","position":{"start":{"line":31,"column":1,"offset":2923},"end":{"line":31,"column":263,"offset":3185}}}],"position":{"start":{"line":31,"column":1,"offset":2923},"end":{"line":31,"column":263,"offset":3185}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I tried it out on simple website that just had one script tag being loaded in for the graphics library ","position":{"start":{"line":33,"column":1,"offset":3187},"end":{"line":33,"column":104,"offset":3290}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/"},"children":[{"type":"text","value":"p5.js","position":{"start":{"line":33,"column":105,"offset":3291},"end":{"line":33,"column":110,"offset":3296}}}],"position":{"start":{"line":33,"column":104,"offset":3290},"end":{"line":33,"column":130,"offset":3316}}},{"type":"text","value":". Using the non-minified CDN link I got a load time of 0.25 seconds. Using the minified version I got a markedly improved load time of 0.08 seconds. Depending on what your website project is, there are a few ways to automatically minify code. If it is a ","position":{"start":{"line":33,"column":130,"offset":3316},"end":{"line":33,"column":384,"offset":3570}}},{"type":"element","tagName":"a","properties":{"href":"https://guide.meteor.com/build-tool.html"},"children":[{"type":"text","value":"Meteor app","position":{"start":{"line":33,"column":385,"offset":3571},"end":{"line":33,"column":395,"offset":3581}}}],"position":{"start":{"line":33,"column":384,"offset":3570},"end":{"line":33,"column":438,"offset":3624}}},{"type":"text","value":" it will be done automatically, using ","position":{"start":{"line":33,"column":438,"offset":3624},"end":{"line":33,"column":476,"offset":3662}}},{"type":"element","tagName":"a","properties":{"href":"https://webpack.js.org/guides/production/"},"children":[{"type":"text","value":"Webpack ","position":{"start":{"line":33,"column":477,"offset":3663},"end":{"line":33,"column":485,"offset":3671}}}],"position":{"start":{"line":33,"column":476,"offset":3662},"end":{"line":33,"column":529,"offset":3715}}},{"type":"text","value":"will also allow you to do this. Otherwise there are some online tools like ","position":{"start":{"line":33,"column":529,"offset":3715},"end":{"line":33,"column":604,"offset":3790}}},{"type":"element","tagName":"a","properties":{"href":"https://jscompress.com/"},"children":[{"type":"text","value":"JSCompress ","position":{"start":{"line":33,"column":605,"offset":3791},"end":{"line":33,"column":616,"offset":3802}}}],"position":{"start":{"line":33,"column":604,"offset":3790},"end":{"line":33,"column":642,"offset":3828}}},{"type":"text","value":"or ","position":{"start":{"line":33,"column":642,"offset":3828},"end":{"line":33,"column":645,"offset":3831}}},{"type":"element","tagName":"a","properties":{"href":"https://cssminifier.com/"},"children":[{"type":"text","value":"CSSMinifier ","position":{"start":{"line":33,"column":646,"offset":3832},"end":{"line":33,"column":658,"offset":3844}}}],"position":{"start":{"line":33,"column":645,"offset":3831},"end":{"line":33,"column":685,"offset":3871}}},{"type":"text","value":"that you can upload your code to.","position":{"start":{"line":33,"column":685,"offset":3871},"end":{"line":33,"column":718,"offset":3904}}}],"position":{"start":{"line":33,"column":1,"offset":3187},"end":{"line":33,"column":718,"offset":3904}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Design Versus Performance","position":{"start":{"line":35,"column":5,"offset":3910},"end":{"line":35,"column":30,"offset":3935}}}],"position":{"start":{"line":35,"column":1,"offset":3906},"end":{"line":35,"column":30,"offset":3935}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Whilst design is undoubtedly a major aspect to a website’s overall success, both developers and designers must work together to compromise and make a mutually beneficial trade-off between design and performance. The classic example is fonts. Take the two screenshots of a simple website below.","position":{"start":{"line":37,"column":1,"offset":3937},"end":{"line":37,"column":294,"offset":4230}}}],"position":{"start":{"line":37,"column":1,"offset":3937},"end":{"line":37,"column":294,"offset":4230}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/patricoferris/image/upload/v1532780050/pf2018/blogposts/28-07-2018/Helvetica.png","alt":"The example website using Helvetica Font (commonly found on many computers) — check [this](https://css-tricks.com/snippets/css/system-font-stack/) link for common system fonts"},"children":[],"position":{"start":{"line":39,"column":1,"offset":4232},"end":{"line":39,"column":288,"offset":4519}}},{"type":"text","value":"\n","position":{"start":{"line":39,"column":288,"offset":4519},"end":{"line":40,"column":1,"offset":4520}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The example website using Helvetica Font (commonly found on many computers) — check ","position":{"start":{"line":40,"column":2,"offset":4521},"end":{"line":40,"column":86,"offset":4605}}},{"type":"element","tagName":"a","properties":{"href":"https://css-tricks.com/snippets/css/system-font-stack/"},"children":[{"type":"text","value":"this","position":{"start":{"line":40,"column":87,"offset":4606},"end":{"line":40,"column":91,"offset":4610}}}],"position":{"start":{"line":40,"column":86,"offset":4605},"end":{"line":40,"column":148,"offset":4667}}},{"type":"text","value":" link for common system fonts","position":{"start":{"line":40,"column":148,"offset":4667},"end":{"line":40,"column":177,"offset":4696}}}],"position":{"start":{"line":40,"column":1,"offset":4520},"end":{"line":40,"column":178,"offset":4697}}}],"position":{"start":{"line":39,"column":1,"offset":4232},"end":{"line":40,"column":178,"offset":4697}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://cdn-images-1.medium.com/max/5760/1*8ciuJNBdqMhlLSaOpNUXow.png","alt":"The example website using Roboto Font (designed by Google and linked from [Google Fonts](https://fonts.google.com/?selection.family=Roboto))"},"children":[],"position":{"start":{"line":42,"column":1,"offset":4699},"end":{"line":42,"column":215,"offset":4913}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The example website using Roboto Font (designed by Google and linked from ","position":{"start":{"line":42,"column":216,"offset":4914},"end":{"line":42,"column":290,"offset":4988}}},{"type":"element","tagName":"a","properties":{"href":"https://fonts.google.com/?selection.family=Roboto"},"children":[{"type":"text","value":"Google Fonts","position":{"start":{"line":42,"column":291,"offset":4989},"end":{"line":42,"column":303,"offset":5001}}}],"position":{"start":{"line":42,"column":290,"offset":4988},"end":{"line":42,"column":355,"offset":5053}}},{"type":"text","value":")","position":{"start":{"line":42,"column":355,"offset":5053},"end":{"line":42,"column":356,"offset":5054}}}],"position":{"start":{"line":42,"column":215,"offset":4913},"end":{"line":42,"column":357,"offset":5055}}}],"position":{"start":{"line":42,"column":1,"offset":4699},"end":{"line":42,"column":357,"offset":5055}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Before critiquing my questionable design skills take a moment to appreciate that these two fonts are very similar — yet the loading time for a website for the Roboto font was 0.22 seconds as compared with 0.17 for Helvetica. Whilst not that significant, using lots of custom fonts will slow down your website, although using Google Fonts’ API will help keep your website optimised. As an over-the-top example, linking 20 different fonts from the Google API increased the load time to 0.87 seconds.","position":{"start":{"line":44,"column":1,"offset":5057},"end":{"line":44,"column":498,"offset":5554}}}],"position":{"start":{"line":44,"column":1,"offset":5057},"end":{"line":44,"column":498,"offset":5554}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Inlining your JavaScript and CSS","position":{"start":{"line":46,"column":5,"offset":5560},"end":{"line":46,"column":37,"offset":5592}}}],"position":{"start":{"line":46,"column":1,"offset":5556},"end":{"line":46,"column":37,"offset":5592}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For each individual document or component of your website, when the parser reaches the script tag or link tag it sends and HTTP request for that document and if not stated differently, these will be blocking actions. What this means is your machine is parsing the HTML document getting the words to display in your browser but if it hits the script tag with the attribute src='js/main.js' for example, it will block the parsing and load in that file. This is where as a developer you need to be clever about where in the document you place things.","position":{"start":{"line":48,"column":1,"offset":5594},"end":{"line":48,"column":548,"offset":6141}}}],"position":{"start":{"line":48,"column":1,"offset":5594},"end":{"line":48,"column":548,"offset":6141}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Whilst it may not ultimately affect the loading time of your website, it can affect the order in which things are loaded. Again we’ll be using the un-minified p5.js library to simulate a large JavaScript file and load it in different places to see how it affects our user experience.","position":{"start":{"line":50,"column":1,"offset":6143},"end":{"line":50,"column":284,"offset":6426}}}],"position":{"start":{"line":50,"column":1,"offset":6143},"end":{"line":50,"column":284,"offset":6426}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://cdn-images-1.medium.com/max/2780/1*h_3GogfkaahcXCO9a43CPA.gif","alt":"Refreshing website with the script tag inserted at the bottom of the body tag"},"children":[],"position":{"start":{"line":52,"column":1,"offset":6428},"end":{"line":52,"column":152,"offset":6579}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Refreshing website with the script tag inserted at the bottom of the body tag","position":{"start":{"line":52,"column":153,"offset":6580},"end":{"line":52,"column":230,"offset":6657}}}],"position":{"start":{"line":52,"column":152,"offset":6579},"end":{"line":52,"column":231,"offset":6658}}}],"position":{"start":{"line":52,"column":1,"offset":6428},"end":{"line":52,"column":231,"offset":6658}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://cdn-images-1.medium.com/max/2780/1*xLOq5r4erQAwb4Au_hB-Ww.gif","alt":"Refreshing website with the script tag inserted at the top of the body tag"},"children":[],"position":{"start":{"line":54,"column":1,"offset":6660},"end":{"line":54,"column":149,"offset":6808}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Refreshing website with the script tag inserted at the top of the body tag","position":{"start":{"line":54,"column":150,"offset":6809},"end":{"line":54,"column":224,"offset":6883}}}],"position":{"start":{"line":54,"column":149,"offset":6808},"end":{"line":54,"column":225,"offset":6884}}}],"position":{"start":{"line":54,"column":1,"offset":6660},"end":{"line":54,"column":225,"offset":6884}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Whilst the load times were similar for both cases — the user experience is far better by placing the script at the body tag allowing the HTML to be parsed before the JavaScript giving the user the website content immediately!","position":{"start":{"line":56,"column":1,"offset":6886},"end":{"line":56,"column":226,"offset":7111}}}],"position":{"start":{"line":56,"column":1,"offset":6886},"end":{"line":56,"column":226,"offset":7111}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In the same vein CSS can also be render-blocking especially because more often than not it is linked in the head tag of your HTML document before the body. But if we want our user to see the content in the quickest time we don’t want to be loading CSS for the footer of our document which the user won’t see until they’ve scrolled to the bottom. In fact, we don’t want to load any CSS in that the user can’t immediately see when the page first loads on their device.","position":{"start":{"line":58,"column":1,"offset":7113},"end":{"line":58,"column":467,"offset":7579}}}],"position":{"start":{"line":58,"column":1,"offset":7113},"end":{"line":58,"column":467,"offset":7579}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The CSS that you need is often called the ","position":{"start":{"line":60,"column":1,"offset":7581},"end":{"line":60,"column":43,"offset":7623}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Critical CSS","position":{"start":{"line":60,"column":44,"offset":7624},"end":{"line":60,"column":56,"offset":7636}}}],"position":{"start":{"line":60,"column":43,"offset":7623},"end":{"line":60,"column":57,"offset":7637}}},{"type":"text","value":". Finding it for yourself would be a headache. It will be different for different devices, meaning you would have to check manually for all possible devices. Lucky for us we have (if you’re using ","position":{"start":{"line":60,"column":57,"offset":7637},"end":{"line":60,"column":253,"offset":7833}}},{"type":"element","tagName":"a","properties":{"href":"https://nodejs.org/en/"},"children":[{"type":"text","value":"Node.js","position":{"start":{"line":60,"column":254,"offset":7834},"end":{"line":60,"column":261,"offset":7841}}}],"position":{"start":{"line":60,"column":253,"offset":7833},"end":{"line":60,"column":286,"offset":7866}}},{"type":"text","value":") ","position":{"start":{"line":60,"column":286,"offset":7866},"end":{"line":60,"column":288,"offset":7868}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/addyosmani/critical"},"children":[{"type":"text","value":"Critical","position":{"start":{"line":60,"column":289,"offset":7869},"end":{"line":60,"column":297,"offset":7877}}}],"position":{"start":{"line":60,"column":288,"offset":7868},"end":{"line":60,"column":338,"offset":7918}}},{"type":"text","value":". This helpful package does the CSS inlining for us and all we do is add some code to a Javascript file. Here’s a code snippet from the Github page.","position":{"start":{"line":60,"column":338,"offset":7918},"end":{"line":60,"column":486,"offset":8066}}}],"position":{"start":{"line":60,"column":1,"offset":7581},"end":{"line":60,"column":486,"offset":8066}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> critical <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'critical'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncritical<span class=\"token punctuation\">.</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    base<span class=\"token punctuation\">:</span> <span class=\"token string\">'test/'</span><span class=\"token punctuation\">,</span>\n    src<span class=\"token punctuation\">:</span> <span class=\"token string\">'index.html'</span><span class=\"token punctuation\">,</span>\n    dest<span class=\"token punctuation\">:</span> <span class=\"token string\">'styles/main.css'</span><span class=\"token punctuation\">,</span>\n    dimensions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n        height<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n        width<span class=\"token punctuation\">:</span> <span class=\"token number\">500</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        height<span class=\"token punctuation\">:</span> <span class=\"token number\">900</span><span class=\"token punctuation\">,</span>\n        width<span class=\"token punctuation\">:</span> <span class=\"token number\">1200</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","position":{"start":{"line":62,"column":1,"offset":8068},"end":{"line":77,"column":4,"offset":8333}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Using the generate function, we supply it with a JavaScript object with some values defined. base is where we’re going to save our src and dest (our project folder usually). What’s great is now we just supply an array of dimensions and the code will compute the critical CSS for each and inline that code into our head tag.","position":{"start":{"line":79,"column":1,"offset":8335},"end":{"line":79,"column":324,"offset":8658}}}],"position":{"start":{"line":79,"column":1,"offset":8335},"end":{"line":79,"column":324,"offset":8658}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Async and Defer","position":{"start":{"line":81,"column":5,"offset":8664},"end":{"line":81,"column":20,"offset":8679}}}],"position":{"start":{"line":81,"column":1,"offset":8660},"end":{"line":81,"column":20,"offset":8679}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Again, we come back to this idea of render-blocking and how best we should implement this for our website. When you have a plain script tag in your HTML it blocks the HTML from loading whilst the JavaScript loads ","position":{"start":{"line":83,"column":1,"offset":8681},"end":{"line":83,"column":214,"offset":8894}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"and","position":{"start":{"line":83,"column":216,"offset":8896},"end":{"line":83,"column":219,"offset":8899}}}],"position":{"start":{"line":83,"column":214,"offset":8894},"end":{"line":83,"column":221,"offset":8901}}},{"type":"text","value":" runs. Async and defer are simple attributes that you can add to your script tags that change the way your JavaScript will be loaded.","position":{"start":{"line":83,"column":221,"offset":8901},"end":{"line":83,"column":354,"offset":9034}}}],"position":{"start":{"line":83,"column":1,"offset":8681},"end":{"line":83,"column":354,"offset":9034}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Defer essentially “defers” execution of the script until after the HTML has been parsed. A major advantage of this is that you no longer need some $(document).ready() jQuery-style function to make sure the body was loaded before you could manipulate it, which could cut out some of the dependencies on libraries like jQuery which helps reduce load-time.","position":{"start":{"line":85,"column":1,"offset":9036},"end":{"line":85,"column":354,"offset":9389}}}],"position":{"start":{"line":85,"column":1,"offset":9036},"end":{"line":85,"column":354,"offset":9389}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Async is, unsurprisingly, the asynchronous loading of JavaScript files. What does this mean? Your HTML will continue to be parsed whilst the file is loaded and then whenever its ready the file will be executed. This helps improving user experience whilst viewing your website. Imagine for example you had a JavaScript file for doing some cool graphics. You want the words around this graphic to be parsed until your graphic is ready to be executed. As soon as it is ready, it is executed and we get a more seamless loading of our webpage without missing pieces.","position":{"start":{"line":87,"column":1,"offset":9391},"end":{"line":87,"column":562,"offset":9952}}}],"position":{"start":{"line":87,"column":1,"offset":9391},"end":{"line":87,"column":562,"offset":9952}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Check this ","position":{"start":{"line":89,"column":1,"offset":9954},"end":{"line":89,"column":12,"offset":9965}}},{"type":"element","tagName":"a","properties":{"href":"http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html"},"children":[{"type":"text","value":"website","position":{"start":{"line":89,"column":13,"offset":9966},"end":{"line":89,"column":20,"offset":9973}}}],"position":{"start":{"line":89,"column":12,"offset":9965},"end":{"line":89,"column":94,"offset":10047}}},{"type":"text","value":" for a really intuitive, graphical representation of this.","position":{"start":{"line":89,"column":94,"offset":10047},"end":{"line":89,"column":152,"offset":10105}}}],"position":{"start":{"line":89,"column":1,"offset":9954},"end":{"line":89,"column":152,"offset":10105}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Image Optimisation and Media Queries","position":{"start":{"line":91,"column":5,"offset":10111},"end":{"line":91,"column":41,"offset":10147}}}],"position":{"start":{"line":91,"column":1,"offset":10107},"end":{"line":91,"column":41,"offset":10147}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The cornerstone of all website performance optimisation is the simple rule that, the less data you send to the client, the quicker and better your website will perform. With the plethora of devices on the market capable of viewing websites, there is a growing trend to optimise your website based on the device it is being viewed on.","position":{"start":{"line":93,"column":1,"offset":10149},"end":{"line":93,"column":334,"offset":10482}}}],"position":{"start":{"line":93,"column":1,"offset":10149},"end":{"line":93,"column":334,"offset":10482}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Media queries are a fairly new tool added to CSS3. With more and more content being consumed using mobile-devices there has been a shift in design thinking towards mobile first. Using media queries you can then add stylings for larger screen sizes.","position":{"start":{"line":95,"column":1,"offset":10484},"end":{"line":95,"column":249,"offset":10732}}}],"position":{"start":{"line":95,"column":1,"offset":10484},"end":{"line":95,"column":249,"offset":10732}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/* Some CSS for screen sizes bigger than 600px but smaller than 992px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/*  Some CSS for screen sizes bigger than 992px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">orientation</span><span class=\"token punctuation\">:</span> landscape<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* Some CSS for landscape-oriented devices */</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":97,"column":1,"offset":10734},"end":{"line":109,"column":4,"offset":11064}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The @media tag starts a new CSS rule, whilst the only keyword stops older browsers that don’t support media queries from using it. The screen keyword applies the rules to screens rather than prints. After that you add the media-feature which supports the and , or and not keywords so you can get as specific as you want. When you’re loading your image you can write code like:","position":{"start":{"line":111,"column":1,"offset":11066},"end":{"line":111,"column":377,"offset":11442}}}],"position":{"start":{"line":111,"column":1,"offset":11066},"end":{"line":111,"column":377,"offset":11442}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-small.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-big.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":113,"column":1,"offset":11444},"end":{"line":121,"column":4,"offset":11663}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This isn’t necessarily the best or optimal approach for image optimisation. Luckily we have other options. ","position":{"start":{"line":123,"column":1,"offset":11665},"end":{"line":123,"column":108,"offset":11772}}},{"type":"element","tagName":"a","properties":{"href":"https://www.imgix.com/"},"children":[{"type":"text","value":"Imgix","position":{"start":{"line":123,"column":109,"offset":11773},"end":{"line":123,"column":114,"offset":11778}}}],"position":{"start":{"line":123,"column":108,"offset":11772},"end":{"line":123,"column":139,"offset":11803}}},{"type":"text","value":" and ","position":{"start":{"line":123,"column":139,"offset":11803},"end":{"line":123,"column":144,"offset":11808}}},{"type":"element","tagName":"a","properties":{"href":"https://cloudinary.com/"},"children":[{"type":"text","value":"Cloudinary","position":{"start":{"line":123,"column":145,"offset":11809},"end":{"line":123,"column":155,"offset":11819}}}],"position":{"start":{"line":123,"column":144,"offset":11808},"end":{"line":123,"column":181,"offset":11845}}},{"type":"text","value":" are two ways you can help optimise your site for the right device. Imgix is a Content Delivery Network (CDN) for images with a lot of cool features. A CDN simply takes your files and spreads them across the globe so that someone in a different country doesn’t have to wait for your files on your server to make it all the way to them. This ","position":{"start":{"line":123,"column":181,"offset":11845},"end":{"line":123,"column":522,"offset":12186}}},{"type":"element","tagName":"a","properties":{"href":"https://docs.imgix.com/tutorials/responsive-images-srcset-imgix"},"children":[{"type":"text","value":"tutorial","position":{"start":{"line":123,"column":523,"offset":12187},"end":{"line":123,"column":531,"offset":12195}}}],"position":{"start":{"line":123,"column":522,"offset":12186},"end":{"line":123,"column":597,"offset":12261}}},{"type":"text","value":" goes through how to use Imgix for different device pixel ratios. Cloudinary is a similar service, and their ","position":{"start":{"line":123,"column":597,"offset":12261},"end":{"line":123,"column":706,"offset":12370}}},{"type":"element","tagName":"a","properties":{"href":"https://cloudinary.com/documentation/image_optimization"},"children":[{"type":"text","value":"tutorial ","position":{"start":{"line":123,"column":707,"offset":12371},"end":{"line":123,"column":716,"offset":12380}}}],"position":{"start":{"line":123,"column":706,"offset":12370},"end":{"line":123,"column":774,"offset":12438}}},{"type":"text","value":"will take you through the importance of optimisation and how to achieve it will their incredible services. Below is a small example showing how easy it is to use Cloudinary straight in the HTML markup.","position":{"start":{"line":123,"column":774,"offset":12438},"end":{"line":123,"column":975,"offset":12639}}}],"position":{"start":{"line":123,"column":1,"offset":11665},"end":{"line":123,"column":975,"offset":12639}}},{"type":"text","value":"\n"},{"type":"raw","value":"<iframe height='265' scrolling='no' title='Cloudinary Example' src='//codepen.io/patricoferris/embed/ejgVJN/?height=265&theme-id=0&default-tab=html,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/ejgVJN/'>Cloudinary Example</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":125,"column":1,"offset":12641},"end":{"line":126,"column":10,"offset":13125}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As a last point on image optimisation, the format you use can have a large impact on file size. Some files contain lots of metadata which you don’t want to be serving to your client — ","position":{"start":{"line":128,"column":1,"offset":13127},"end":{"line":128,"column":185,"offset":13311}}},{"type":"element","tagName":"a","properties":{"href":"https://www.sno.phy.queensu.ca/~phil/exiftool/"},"children":[{"type":"text","value":"ExifTool","position":{"start":{"line":128,"column":186,"offset":13312},"end":{"line":128,"column":194,"offset":13320}}}],"position":{"start":{"line":128,"column":185,"offset":13311},"end":{"line":128,"column":243,"offset":13369}}},{"type":"text","value":" is a commonly used command-line application that can help you trim down those files sizes. On top of this, Scalable Vector Graphics (SVG) are a web-standard developed by W3C that offers XML-based vector graphics. This means they have infinite resolution unlike PNG or JPG files. It also makes them highly versatile, easily editable and can even be animated. At the end of the day SVGs are just code and so the file sizes tend to be small. For more reasons to use them, check out this ","position":{"start":{"line":128,"column":243,"offset":13369},"end":{"line":128,"column":728,"offset":13854}}},{"type":"element","tagName":"a","properties":{"href":"https://watb.co.uk/5-reasons-you-should-be-using-svgs-over-pngs/"},"children":[{"type":"text","value":"article","position":{"start":{"line":128,"column":729,"offset":13855},"end":{"line":128,"column":736,"offset":13862}}}],"position":{"start":{"line":128,"column":728,"offset":13854},"end":{"line":128,"column":803,"offset":13929}}},{"type":"text","value":".","position":{"start":{"line":128,"column":803,"offset":13929},"end":{"line":128,"column":804,"offset":13930}}}],"position":{"start":{"line":128,"column":1,"offset":13127},"end":{"line":128,"column":804,"offset":13930}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":130,"column":5,"offset":13936},"end":{"line":130,"column":15,"offset":13946}}}],"position":{"start":{"line":130,"column":1,"offset":13932},"end":{"line":130,"column":15,"offset":13946}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We’ve only scratched the surface of what’s possible for website optimisation. There are many tools you can use to help you stream-line this process like ","position":{"start":{"line":132,"column":1,"offset":13948},"end":{"line":132,"column":154,"offset":14101}}},{"type":"element","tagName":"a","properties":{"href":"https://webpack.js.org/"},"children":[{"type":"text","value":"Webpack","position":{"start":{"line":132,"column":155,"offset":14102},"end":{"line":132,"column":162,"offset":14109}}}],"position":{"start":{"line":132,"column":154,"offset":14101},"end":{"line":132,"column":188,"offset":14135}}},{"type":"text","value":" for bundling or static-site generators like ","position":{"start":{"line":132,"column":188,"offset":14135},"end":{"line":132,"column":233,"offset":14180}}},{"type":"element","tagName":"a","properties":{"href":"https://www.gatsbyjs.org/"},"children":[{"type":"text","value":"Gatsby","position":{"start":{"line":132,"column":234,"offset":14181},"end":{"line":132,"column":240,"offset":14187}}}],"position":{"start":{"line":132,"column":233,"offset":14180},"end":{"line":132,"column":268,"offset":14215}}},{"type":"text","value":". ","position":{"start":{"line":132,"column":268,"offset":14215},"end":{"line":132,"column":270,"offset":14217}}},{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking"},"children":[{"type":"text","value":"Tree shaking","position":{"start":{"line":132,"column":271,"offset":14218},"end":{"line":132,"column":283,"offset":14230}}}],"position":{"start":{"line":132,"column":270,"offset":14217},"end":{"line":132,"column":348,"offset":14295}}},{"type":"text","value":" is another commonly used technique to remove excess, unused modules lying around your website.","position":{"start":{"line":132,"column":348,"offset":14295},"end":{"line":132,"column":443,"offset":14390}}}],"position":{"start":{"line":132,"column":1,"offset":13948},"end":{"line":132,"column":443,"offset":14390}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Hopefully this article has touched on some useful techniques you can use on your next site to help improve its performance. Happy coding!","position":{"start":{"line":134,"column":1,"offset":14392},"end":{"line":134,"column":138,"offset":14529}}}],"position":{"start":{"line":134,"column":1,"offset":14392},"end":{"line":134,"column":138,"offset":14529}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A big thank you to ","position":{"start":{"line":136,"column":1,"offset":14531},"end":{"line":136,"column":20,"offset":14550}}},{"type":"element","tagName":"a","properties":{"href":"undefined"},"children":[{"type":"text","value":"Christian Silver","position":{"start":{"line":136,"column":21,"offset":14551},"end":{"line":136,"column":37,"offset":14567}}}],"position":{"start":{"line":136,"column":20,"offset":14550},"end":{"line":136,"column":49,"offset":14579}}},{"type":"text","value":" and ","position":{"start":{"line":136,"column":49,"offset":14579},"end":{"line":136,"column":54,"offset":14584}}},{"type":"element","tagName":"a","properties":{"href":"undefined"},"children":[{"type":"text","value":"Charlie Crisp","position":{"start":{"line":136,"column":55,"offset":14585},"end":{"line":136,"column":68,"offset":14598}}}],"position":{"start":{"line":136,"column":54,"offset":14584},"end":{"line":136,"column":80,"offset":14610}}},{"type":"text","value":" for editing this post and providing extremely useful advice and extra content to make it even better.","position":{"start":{"line":136,"column":80,"offset":14610},"end":{"line":136,"column":182,"offset":14712}}}],"position":{"start":{"line":136,"column":1,"offset":14531},"end":{"line":136,"column":182,"offset":14712}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":137,"column":1,"offset":14713}}}},{"id":"transformer-remark-markdown-html-701f0f402b35d9a4d0df54710318a08c-gatsby-remark-imagesgatsby-remark-prismjs-","value":"<p><img src=\"https://res.cloudinary.com/patricoferris/image/upload/v1532781201/pf2018/blogposts/28-07-2018/website_optimisation_2.png\" alt=\"Optimising your Website\">\nInspired by a <a href=\"https://syntax.fm/\">Syntax</a> podcast, I got really interested in website optimisation. It can often be an overlooked aspect in web development with more focus on design and functionality, I realised my number one priority whenever I visited a website is load speed. My attention is a website’s number one goal, lose it and they lose all potential ad revenue or possibility to give me whatever information I was looking for. <a href=\"https://developers.google.com/web/fundamentals/performance/get-started/\">Many seem to agree. 53% of users abandon websites that take more than 3 seconds to load</a>. No amount of fancy graphics or parallax scrolling that appears five seconds after someone’s clicked will hide the slow loading times.</p>\n<p>The aim of this article is to give a broad overview of the concepts and ideas behind optimising your website, experienced developers are likely already using things like Webpack (a module bundler) among other tools to speed-up their sites.</p>\n<p>For testing load-times I will be using the <a href=\"https://chrome.google.com/webstore/detail/page-load-time/fploionmjgeclbkemipmkogoaohcdbig?hl=en\">Page Load Time </a>Chrome extension. There are a few ways to measure website loading time including: <a href=\"https://developers.google.com/web/tools/chrome-user-experience-report/\">first paint, first meaning paint, DOMContentLoaded</a> etc. For a more detailed look into what this timer measures, check out the Github repository below.\n<a href=\"https://github.com/alex-vv/chrome-load-timer\"><strong>alex-vv/chrome-load-timer</strong>\n<em>chrome-load-timer - Google Chrome extension to measure page load time and display it in the toolbar</em>github.com</a></p>\n<h3><strong>Use Minified Stylesheets and Scripts</strong></h3>\n<p>You would be amazed at how much performance can be gained by this simple trick. What is a minified document? When we write code it is never our job to make it optimised for the computer, instead our golden rule is to make it readable to humans. This improves readability, cuts down on debug time and makes it easier to maintain. However, to achieve this we often add extra spacing which costs us precious space. Minifying the code is trimming all this fat from what we’ve written to have code that produces the same result but is far more difficult to read and maintain. This is okay though, because a computer has no problem deciphering it. Take the following code for example.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Notice how, wherever possible, our line-breaks and spaces are gone. On top of that, the code in the for-loop is only one line so there’s no need for the curly braces which extends our code over three lines when it can be done in one. Does this make a difference?</p>\n<p>I tried it out on simple website that just had one script tag being loaded in for the graphics library <a href=\"https://p5js.org/\">p5.js</a>. Using the non-minified CDN link I got a load time of 0.25 seconds. Using the minified version I got a markedly improved load time of 0.08 seconds. Depending on what your website project is, there are a few ways to automatically minify code. If it is a <a href=\"https://guide.meteor.com/build-tool.html\">Meteor app</a> it will be done automatically, using <a href=\"https://webpack.js.org/guides/production/\">Webpack </a>will also allow you to do this. Otherwise there are some online tools like <a href=\"https://jscompress.com/\">JSCompress </a>or <a href=\"https://cssminifier.com/\">CSSMinifier </a>that you can upload your code to.</p>\n<h3>Design Versus Performance</h3>\n<p>Whilst design is undoubtedly a major aspect to a website’s overall success, both developers and designers must work together to compromise and make a mutually beneficial trade-off between design and performance. The classic example is fonts. Take the two screenshots of a simple website below.</p>\n<p><img src=\"https://res.cloudinary.com/patricoferris/image/upload/v1532780050/pf2018/blogposts/28-07-2018/Helvetica.png\" alt=\"The example website using Helvetica Font (commonly found on many computers) — check [this](https://css-tricks.com/snippets/css/system-font-stack/) link for common system fonts\">\n<em>The example website using Helvetica Font (commonly found on many computers) — check <a href=\"https://css-tricks.com/snippets/css/system-font-stack/\">this</a> link for common system fonts</em></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/5760/1*8ciuJNBdqMhlLSaOpNUXow.png\" alt=\"The example website using Roboto Font (designed by Google and linked from [Google Fonts](https://fonts.google.com/?selection.family=Roboto))\"><em>The example website using Roboto Font (designed by Google and linked from <a href=\"https://fonts.google.com/?selection.family=Roboto\">Google Fonts</a>)</em></p>\n<p>Before critiquing my questionable design skills take a moment to appreciate that these two fonts are very similar — yet the loading time for a website for the Roboto font was 0.22 seconds as compared with 0.17 for Helvetica. Whilst not that significant, using lots of custom fonts will slow down your website, although using Google Fonts’ API will help keep your website optimised. As an over-the-top example, linking 20 different fonts from the Google API increased the load time to 0.87 seconds.</p>\n<h3>Inlining your JavaScript and CSS</h3>\n<p>For each individual document or component of your website, when the parser reaches the script tag or link tag it sends and HTTP request for that document and if not stated differently, these will be blocking actions. What this means is your machine is parsing the HTML document getting the words to display in your browser but if it hits the script tag with the attribute src='js/main.js' for example, it will block the parsing and load in that file. This is where as a developer you need to be clever about where in the document you place things.</p>\n<p>Whilst it may not ultimately affect the loading time of your website, it can affect the order in which things are loaded. Again we’ll be using the un-minified p5.js library to simulate a large JavaScript file and load it in different places to see how it affects our user experience.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2780/1*h_3GogfkaahcXCO9a43CPA.gif\" alt=\"Refreshing website with the script tag inserted at the bottom of the body tag\"><em>Refreshing website with the script tag inserted at the bottom of the body tag</em></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2780/1*xLOq5r4erQAwb4Au_hB-Ww.gif\" alt=\"Refreshing website with the script tag inserted at the top of the body tag\"><em>Refreshing website with the script tag inserted at the top of the body tag</em></p>\n<p>Whilst the load times were similar for both cases — the user experience is far better by placing the script at the body tag allowing the HTML to be parsed before the JavaScript giving the user the website content immediately!</p>\n<p>In the same vein CSS can also be render-blocking especially because more often than not it is linked in the head tag of your HTML document before the body. But if we want our user to see the content in the quickest time we don’t want to be loading CSS for the footer of our document which the user won’t see until they’ve scrolled to the bottom. In fact, we don’t want to load any CSS in that the user can’t immediately see when the page first loads on their device.</p>\n<p>The CSS that you need is often called the <em>Critical CSS</em>. Finding it for yourself would be a headache. It will be different for different devices, meaning you would have to check manually for all possible devices. Lucky for us we have (if you’re using <a href=\"https://nodejs.org/en/\">Node.js</a>) <a href=\"https://github.com/addyosmani/critical\">Critical</a>. This helpful package does the CSS inlining for us and all we do is add some code to a Javascript file. Here’s a code snippet from the Github page.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> critical <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'critical'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncritical<span class=\"token punctuation\">.</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    base<span class=\"token punctuation\">:</span> <span class=\"token string\">'test/'</span><span class=\"token punctuation\">,</span>\n    src<span class=\"token punctuation\">:</span> <span class=\"token string\">'index.html'</span><span class=\"token punctuation\">,</span>\n    dest<span class=\"token punctuation\">:</span> <span class=\"token string\">'styles/main.css'</span><span class=\"token punctuation\">,</span>\n    dimensions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n        height<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n        width<span class=\"token punctuation\">:</span> <span class=\"token number\">500</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        height<span class=\"token punctuation\">:</span> <span class=\"token number\">900</span><span class=\"token punctuation\">,</span>\n        width<span class=\"token punctuation\">:</span> <span class=\"token number\">1200</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Using the generate function, we supply it with a JavaScript object with some values defined. base is where we’re going to save our src and dest (our project folder usually). What’s great is now we just supply an array of dimensions and the code will compute the critical CSS for each and inline that code into our head tag.</p>\n<h3>Async and Defer</h3>\n<p>Again, we come back to this idea of render-blocking and how best we should implement this for our website. When you have a plain script tag in your HTML it blocks the HTML from loading whilst the JavaScript loads <strong>and</strong> runs. Async and defer are simple attributes that you can add to your script tags that change the way your JavaScript will be loaded.</p>\n<p>Defer essentially “defers” execution of the script until after the HTML has been parsed. A major advantage of this is that you no longer need some $(document).ready() jQuery-style function to make sure the body was loaded before you could manipulate it, which could cut out some of the dependencies on libraries like jQuery which helps reduce load-time.</p>\n<p>Async is, unsurprisingly, the asynchronous loading of JavaScript files. What does this mean? Your HTML will continue to be parsed whilst the file is loaded and then whenever its ready the file will be executed. This helps improving user experience whilst viewing your website. Imagine for example you had a JavaScript file for doing some cool graphics. You want the words around this graphic to be parsed until your graphic is ready to be executed. As soon as it is ready, it is executed and we get a more seamless loading of our webpage without missing pieces.</p>\n<p>Check this <a href=\"http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html\">website</a> for a really intuitive, graphical representation of this.</p>\n<h3>Image Optimisation and Media Queries</h3>\n<p>The cornerstone of all website performance optimisation is the simple rule that, the less data you send to the client, the quicker and better your website will perform. With the plethora of devices on the market capable of viewing websites, there is a growing trend to optimise your website based on the device it is being viewed on.</p>\n<p>Media queries are a fairly new tool added to CSS3. With more and more content being consumed using mobile-devices there has been a shift in design thinking towards mobile first. Using media queries you can then add stylings for larger screen sizes.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/* Some CSS for screen sizes bigger than 600px but smaller than 992px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/*  Some CSS for screen sizes bigger than 992px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">orientation</span><span class=\"token punctuation\">:</span> landscape<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* Some CSS for landscape-oriented devices */</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>The @media tag starts a new CSS rule, whilst the only keyword stops older browsers that don’t support media queries from using it. The screen keyword applies the rules to screens rather than prints. After that you add the media-feature which supports the and , or and not keywords so you can get as specific as you want. When you’re loading your image you can write code like:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-small.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-big.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>This isn’t necessarily the best or optimal approach for image optimisation. Luckily we have other options. <a href=\"https://www.imgix.com/\">Imgix</a> and <a href=\"https://cloudinary.com/\">Cloudinary</a> are two ways you can help optimise your site for the right device. Imgix is a Content Delivery Network (CDN) for images with a lot of cool features. A CDN simply takes your files and spreads them across the globe so that someone in a different country doesn’t have to wait for your files on your server to make it all the way to them. This <a href=\"https://docs.imgix.com/tutorials/responsive-images-srcset-imgix\">tutorial</a> goes through how to use Imgix for different device pixel ratios. Cloudinary is a similar service, and their <a href=\"https://cloudinary.com/documentation/image_optimization\">tutorial </a>will take you through the importance of optimisation and how to achieve it will their incredible services. Below is a small example showing how easy it is to use Cloudinary straight in the HTML markup.</p>\n<iframe height='265' scrolling='no' title='Cloudinary Example' src='//codepen.io/patricoferris/embed/ejgVJN/?height=265&theme-id=0&default-tab=html,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/ejgVJN/'>Cloudinary Example</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>As a last point on image optimisation, the format you use can have a large impact on file size. Some files contain lots of metadata which you don’t want to be serving to your client — <a href=\"https://www.sno.phy.queensu.ca/~phil/exiftool/\">ExifTool</a> is a commonly used command-line application that can help you trim down those files sizes. On top of this, Scalable Vector Graphics (SVG) are a web-standard developed by W3C that offers XML-based vector graphics. This means they have infinite resolution unlike PNG or JPG files. It also makes them highly versatile, easily editable and can even be animated. At the end of the day SVGs are just code and so the file sizes tend to be small. For more reasons to use them, check out this <a href=\"https://watb.co.uk/5-reasons-you-should-be-using-svgs-over-pngs/\">article</a>.</p>\n<h3>Conclusion</h3>\n<p>We’ve only scratched the surface of what’s possible for website optimisation. There are many tools you can use to help you stream-line this process like <a href=\"https://webpack.js.org/\">Webpack</a> for bundling or static-site generators like <a href=\"https://www.gatsbyjs.org/\">Gatsby</a>. <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking\">Tree shaking</a> is another commonly used technique to remove excess, unused modules lying around your website.</p>\n<p>Hopefully this article has touched on some useful techniques you can use on your next site to help improve its performance. Happy coding!</p>\n<p>A big thank you to <a href=\"undefined\">Christian Silver</a> and <a href=\"undefined\">Charlie Crisp</a> for editing this post and providing extremely useful advice and extra content to make it even better.</p>"},{"id":"transformer-remark-markdown-ast-2f482fc4a3133ee994535735bbc9df16-gatsby-remark-imagesgatsby-remark-prismjs-","value":{"type":"root","children":[{"type":"yaml","value":"path: '/optimise-your-website'\ntitle: 'Optimising your Website'\nsubtitle: 'Tips and tricks to keep your website lean and fast'\ndate: '2018-07-28'","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":6,"column":4,"offset":153},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://res.cloudinary.com/patricoferris/image/upload/v1532781201/pf2018/blogposts/28-07-2018/website_optimisation_2.png","alt":"Optimising your Website","position":{"start":{"line":7,"column":1,"offset":154},"end":{"line":7,"column":149,"offset":302},"indent":[]}},{"type":"text","value":"\nInspired by a ","position":{"start":{"line":7,"column":149,"offset":302},"end":{"line":8,"column":15,"offset":317},"indent":[1]}},{"type":"link","title":null,"url":"https://syntax.fm/","children":[{"type":"text","value":"Syntax","position":{"start":{"line":8,"column":16,"offset":318},"end":{"line":8,"column":22,"offset":324},"indent":[]}}],"position":{"start":{"line":8,"column":15,"offset":317},"end":{"line":8,"column":43,"offset":345},"indent":[]}},{"type":"text","value":" podcast, I got really interested in website optimisation. It can often be an overlooked aspect in web development with more focus on design and functionality, I realised my number one priority whenever I visited a website is load speed. My attention is a website’s number one goal, lose it and they lose all potential ad revenue or possibility to give me whatever information I was looking for. ","position":{"start":{"line":8,"column":43,"offset":345},"end":{"line":8,"column":439,"offset":741},"indent":[]}},{"type":"link","title":null,"url":"https://developers.google.com/web/fundamentals/performance/get-started/","children":[{"type":"text","value":"Many seem to agree. 53% of users abandon websites that take more than 3 seconds to load","position":{"start":{"line":8,"column":440,"offset":742},"end":{"line":8,"column":527,"offset":829},"indent":[]}}],"position":{"start":{"line":8,"column":439,"offset":741},"end":{"line":8,"column":601,"offset":903},"indent":[]}},{"type":"text","value":". No amount of fancy graphics or parallax scrolling that appears five seconds after someone’s clicked will hide the slow loading times.","position":{"start":{"line":8,"column":601,"offset":903},"end":{"line":8,"column":736,"offset":1038},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":154},"end":{"line":8,"column":736,"offset":1038},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"The aim of this article is to give a broad overview of the concepts and ideas behind optimising your website, experienced developers are likely already using things like Webpack (a module bundler) among other tools to speed-up their sites.","position":{"start":{"line":10,"column":1,"offset":1040},"end":{"line":10,"column":240,"offset":1279},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":1040},"end":{"line":10,"column":240,"offset":1279},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For testing load-times I will be using the ","position":{"start":{"line":12,"column":1,"offset":1281},"end":{"line":12,"column":44,"offset":1324},"indent":[]}},{"type":"link","title":null,"url":"https://chrome.google.com/webstore/detail/page-load-time/fploionmjgeclbkemipmkogoaohcdbig?hl=en","children":[{"type":"text","value":"Page Load Time ","position":{"start":{"line":12,"column":45,"offset":1325},"end":{"line":12,"column":60,"offset":1340},"indent":[]}}],"position":{"start":{"line":12,"column":44,"offset":1324},"end":{"line":12,"column":158,"offset":1438},"indent":[]}},{"type":"text","value":"Chrome extension. There are a few ways to measure website loading time including: ","position":{"start":{"line":12,"column":158,"offset":1438},"end":{"line":12,"column":240,"offset":1520},"indent":[]}},{"type":"link","title":null,"url":"https://developers.google.com/web/tools/chrome-user-experience-report/","children":[{"type":"text","value":"first paint, first meaning paint, DOMContentLoaded","position":{"start":{"line":12,"column":241,"offset":1521},"end":{"line":12,"column":291,"offset":1571},"indent":[]}}],"position":{"start":{"line":12,"column":240,"offset":1520},"end":{"line":12,"column":364,"offset":1644},"indent":[]}},{"type":"text","value":" etc. For a more detailed look into what this timer measures, check out the Github repository below.\n","position":{"start":{"line":12,"column":364,"offset":1644},"end":{"line":13,"column":1,"offset":1745},"indent":[1]}},{"type":"link","title":null,"url":"https://github.com/alex-vv/chrome-load-timer","children":[{"type":"strong","children":[{"type":"text","value":"alex-vv/chrome-load-timer","position":{"start":{"line":13,"column":4,"offset":1748},"end":{"line":13,"column":29,"offset":1773},"indent":[]}}],"position":{"start":{"line":13,"column":2,"offset":1746},"end":{"line":13,"column":31,"offset":1775},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":13,"column":31,"offset":1775},"end":{"line":14,"column":1,"offset":1776},"indent":[1]}},{"type":"emphasis","children":[{"type":"text","value":"chrome-load-timer - Google Chrome extension to measure page load time and display it in the toolbar","position":{"start":{"line":14,"column":2,"offset":1777},"end":{"line":14,"column":101,"offset":1876},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":1776},"end":{"line":14,"column":102,"offset":1877},"indent":[]}},{"type":"text","value":"github.com","position":{"start":{"line":14,"column":102,"offset":1877},"end":{"line":14,"column":112,"offset":1887},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":1745},"end":{"line":14,"column":159,"offset":1934},"indent":[1]}}],"position":{"start":{"line":12,"column":1,"offset":1281},"end":{"line":14,"column":159,"offset":1934},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"strong","children":[{"type":"text","value":"Use Minified Stylesheets and Scripts","position":{"start":{"line":16,"column":7,"offset":1942},"end":{"line":16,"column":43,"offset":1978},"indent":[]}}],"position":{"start":{"line":16,"column":5,"offset":1940},"end":{"line":16,"column":45,"offset":1980},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":1936},"end":{"line":16,"column":45,"offset":1980},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You would be amazed at how much performance can be gained by this simple trick. What is a minified document? When we write code it is never our job to make it optimised for the computer, instead our golden rule is to make it readable to humans. This improves readability, cuts down on debug time and makes it easier to maintain. However, to achieve this we often add extra spacing which costs us precious space. Minifying the code is trimming all this fat from what we’ve written to have code that produces the same result but is far more difficult to read and maintain. This is okay though, because a computer has no problem deciphering it. Take the following code for example.","position":{"start":{"line":18,"column":1,"offset":1982},"end":{"line":18,"column":679,"offset":2660},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1982},"end":{"line":18,"column":679,"offset":2660},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","position":{"start":{"line":20,"column":1,"offset":2662},"end":{"line":29,"column":4,"offset":2921},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Notice how, wherever possible, our line-breaks and spaces are gone. On top of that, the code in the for-loop is only one line so there’s no need for the curly braces which extends our code over three lines when it can be done in one. Does this make a difference?","position":{"start":{"line":31,"column":1,"offset":2923},"end":{"line":31,"column":263,"offset":3185},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":2923},"end":{"line":31,"column":263,"offset":3185},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"I tried it out on simple website that just had one script tag being loaded in for the graphics library ","position":{"start":{"line":33,"column":1,"offset":3187},"end":{"line":33,"column":104,"offset":3290},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/","children":[{"type":"text","value":"p5.js","position":{"start":{"line":33,"column":105,"offset":3291},"end":{"line":33,"column":110,"offset":3296},"indent":[]}}],"position":{"start":{"line":33,"column":104,"offset":3290},"end":{"line":33,"column":130,"offset":3316},"indent":[]}},{"type":"text","value":". Using the non-minified CDN link I got a load time of 0.25 seconds. Using the minified version I got a markedly improved load time of 0.08 seconds. Depending on what your website project is, there are a few ways to automatically minify code. If it is a ","position":{"start":{"line":33,"column":130,"offset":3316},"end":{"line":33,"column":384,"offset":3570},"indent":[]}},{"type":"link","title":null,"url":"https://guide.meteor.com/build-tool.html","children":[{"type":"text","value":"Meteor app","position":{"start":{"line":33,"column":385,"offset":3571},"end":{"line":33,"column":395,"offset":3581},"indent":[]}}],"position":{"start":{"line":33,"column":384,"offset":3570},"end":{"line":33,"column":438,"offset":3624},"indent":[]}},{"type":"text","value":" it will be done automatically, using ","position":{"start":{"line":33,"column":438,"offset":3624},"end":{"line":33,"column":476,"offset":3662},"indent":[]}},{"type":"link","title":null,"url":"https://webpack.js.org/guides/production/","children":[{"type":"text","value":"Webpack ","position":{"start":{"line":33,"column":477,"offset":3663},"end":{"line":33,"column":485,"offset":3671},"indent":[]}}],"position":{"start":{"line":33,"column":476,"offset":3662},"end":{"line":33,"column":529,"offset":3715},"indent":[]}},{"type":"text","value":"will also allow you to do this. Otherwise there are some online tools like ","position":{"start":{"line":33,"column":529,"offset":3715},"end":{"line":33,"column":604,"offset":3790},"indent":[]}},{"type":"link","title":null,"url":"https://jscompress.com/","children":[{"type":"text","value":"JSCompress ","position":{"start":{"line":33,"column":605,"offset":3791},"end":{"line":33,"column":616,"offset":3802},"indent":[]}}],"position":{"start":{"line":33,"column":604,"offset":3790},"end":{"line":33,"column":642,"offset":3828},"indent":[]}},{"type":"text","value":"or ","position":{"start":{"line":33,"column":642,"offset":3828},"end":{"line":33,"column":645,"offset":3831},"indent":[]}},{"type":"link","title":null,"url":"https://cssminifier.com/","children":[{"type":"text","value":"CSSMinifier ","position":{"start":{"line":33,"column":646,"offset":3832},"end":{"line":33,"column":658,"offset":3844},"indent":[]}}],"position":{"start":{"line":33,"column":645,"offset":3831},"end":{"line":33,"column":685,"offset":3871},"indent":[]}},{"type":"text","value":"that you can upload your code to.","position":{"start":{"line":33,"column":685,"offset":3871},"end":{"line":33,"column":718,"offset":3904},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":3187},"end":{"line":33,"column":718,"offset":3904},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Design Versus Performance","position":{"start":{"line":35,"column":5,"offset":3910},"end":{"line":35,"column":30,"offset":3935},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":3906},"end":{"line":35,"column":30,"offset":3935},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Whilst design is undoubtedly a major aspect to a website’s overall success, both developers and designers must work together to compromise and make a mutually beneficial trade-off between design and performance. The classic example is fonts. Take the two screenshots of a simple website below.","position":{"start":{"line":37,"column":1,"offset":3937},"end":{"line":37,"column":294,"offset":4230},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":3937},"end":{"line":37,"column":294,"offset":4230},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://res.cloudinary.com/patricoferris/image/upload/v1532780050/pf2018/blogposts/28-07-2018/Helvetica.png","alt":"The example website using Helvetica Font (commonly found on many computers) — check [this](https://css-tricks.com/snippets/css/system-font-stack/) link for common system fonts","position":{"start":{"line":39,"column":1,"offset":4232},"end":{"line":39,"column":288,"offset":4519},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":39,"column":288,"offset":4519},"end":{"line":40,"column":1,"offset":4520},"indent":[1]}},{"type":"emphasis","children":[{"type":"text","value":"The example website using Helvetica Font (commonly found on many computers) — check ","position":{"start":{"line":40,"column":2,"offset":4521},"end":{"line":40,"column":86,"offset":4605},"indent":[]}},{"type":"link","title":null,"url":"https://css-tricks.com/snippets/css/system-font-stack/","children":[{"type":"text","value":"this","position":{"start":{"line":40,"column":87,"offset":4606},"end":{"line":40,"column":91,"offset":4610},"indent":[]}}],"position":{"start":{"line":40,"column":86,"offset":4605},"end":{"line":40,"column":148,"offset":4667},"indent":[]}},{"type":"text","value":" link for common system fonts","position":{"start":{"line":40,"column":148,"offset":4667},"end":{"line":40,"column":177,"offset":4696},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":4520},"end":{"line":40,"column":178,"offset":4697},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":4232},"end":{"line":40,"column":178,"offset":4697},"indent":[1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://cdn-images-1.medium.com/max/5760/1*8ciuJNBdqMhlLSaOpNUXow.png","alt":"The example website using Roboto Font (designed by Google and linked from [Google Fonts](https://fonts.google.com/?selection.family=Roboto))","position":{"start":{"line":42,"column":1,"offset":4699},"end":{"line":42,"column":215,"offset":4913},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"The example website using Roboto Font (designed by Google and linked from ","position":{"start":{"line":42,"column":216,"offset":4914},"end":{"line":42,"column":290,"offset":4988},"indent":[]}},{"type":"link","title":null,"url":"https://fonts.google.com/?selection.family=Roboto","children":[{"type":"text","value":"Google Fonts","position":{"start":{"line":42,"column":291,"offset":4989},"end":{"line":42,"column":303,"offset":5001},"indent":[]}}],"position":{"start":{"line":42,"column":290,"offset":4988},"end":{"line":42,"column":355,"offset":5053},"indent":[]}},{"type":"text","value":")","position":{"start":{"line":42,"column":355,"offset":5053},"end":{"line":42,"column":356,"offset":5054},"indent":[]}}],"position":{"start":{"line":42,"column":215,"offset":4913},"end":{"line":42,"column":357,"offset":5055},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":4699},"end":{"line":42,"column":357,"offset":5055},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Before critiquing my questionable design skills take a moment to appreciate that these two fonts are very similar — yet the loading time for a website for the Roboto font was 0.22 seconds as compared with 0.17 for Helvetica. Whilst not that significant, using lots of custom fonts will slow down your website, although using Google Fonts’ API will help keep your website optimised. As an over-the-top example, linking 20 different fonts from the Google API increased the load time to 0.87 seconds.","position":{"start":{"line":44,"column":1,"offset":5057},"end":{"line":44,"column":498,"offset":5554},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":5057},"end":{"line":44,"column":498,"offset":5554},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Inlining your JavaScript and CSS","position":{"start":{"line":46,"column":5,"offset":5560},"end":{"line":46,"column":37,"offset":5592},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":5556},"end":{"line":46,"column":37,"offset":5592},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For each individual document or component of your website, when the parser reaches the script tag or link tag it sends and HTTP request for that document and if not stated differently, these will be blocking actions. What this means is your machine is parsing the HTML document getting the words to display in your browser but if it hits the script tag with the attribute src='js/main.js' for example, it will block the parsing and load in that file. This is where as a developer you need to be clever about where in the document you place things.","position":{"start":{"line":48,"column":1,"offset":5594},"end":{"line":48,"column":548,"offset":6141},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":5594},"end":{"line":48,"column":548,"offset":6141},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Whilst it may not ultimately affect the loading time of your website, it can affect the order in which things are loaded. Again we’ll be using the un-minified p5.js library to simulate a large JavaScript file and load it in different places to see how it affects our user experience.","position":{"start":{"line":50,"column":1,"offset":6143},"end":{"line":50,"column":284,"offset":6426},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":6143},"end":{"line":50,"column":284,"offset":6426},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://cdn-images-1.medium.com/max/2780/1*h_3GogfkaahcXCO9a43CPA.gif","alt":"Refreshing website with the script tag inserted at the bottom of the body tag","position":{"start":{"line":52,"column":1,"offset":6428},"end":{"line":52,"column":152,"offset":6579},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Refreshing website with the script tag inserted at the bottom of the body tag","position":{"start":{"line":52,"column":153,"offset":6580},"end":{"line":52,"column":230,"offset":6657},"indent":[]}}],"position":{"start":{"line":52,"column":152,"offset":6579},"end":{"line":52,"column":231,"offset":6658},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":6428},"end":{"line":52,"column":231,"offset":6658},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://cdn-images-1.medium.com/max/2780/1*xLOq5r4erQAwb4Au_hB-Ww.gif","alt":"Refreshing website with the script tag inserted at the top of the body tag","position":{"start":{"line":54,"column":1,"offset":6660},"end":{"line":54,"column":149,"offset":6808},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Refreshing website with the script tag inserted at the top of the body tag","position":{"start":{"line":54,"column":150,"offset":6809},"end":{"line":54,"column":224,"offset":6883},"indent":[]}}],"position":{"start":{"line":54,"column":149,"offset":6808},"end":{"line":54,"column":225,"offset":6884},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":6660},"end":{"line":54,"column":225,"offset":6884},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Whilst the load times were similar for both cases — the user experience is far better by placing the script at the body tag allowing the HTML to be parsed before the JavaScript giving the user the website content immediately!","position":{"start":{"line":56,"column":1,"offset":6886},"end":{"line":56,"column":226,"offset":7111},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":6886},"end":{"line":56,"column":226,"offset":7111},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In the same vein CSS can also be render-blocking especially because more often than not it is linked in the head tag of your HTML document before the body. But if we want our user to see the content in the quickest time we don’t want to be loading CSS for the footer of our document which the user won’t see until they’ve scrolled to the bottom. In fact, we don’t want to load any CSS in that the user can’t immediately see when the page first loads on their device.","position":{"start":{"line":58,"column":1,"offset":7113},"end":{"line":58,"column":467,"offset":7579},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":7113},"end":{"line":58,"column":467,"offset":7579},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The CSS that you need is often called the ","position":{"start":{"line":60,"column":1,"offset":7581},"end":{"line":60,"column":43,"offset":7623},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Critical CSS","position":{"start":{"line":60,"column":44,"offset":7624},"end":{"line":60,"column":56,"offset":7636},"indent":[]}}],"position":{"start":{"line":60,"column":43,"offset":7623},"end":{"line":60,"column":57,"offset":7637},"indent":[]}},{"type":"text","value":". Finding it for yourself would be a headache. It will be different for different devices, meaning you would have to check manually for all possible devices. Lucky for us we have (if you’re using ","position":{"start":{"line":60,"column":57,"offset":7637},"end":{"line":60,"column":253,"offset":7833},"indent":[]}},{"type":"link","title":null,"url":"https://nodejs.org/en/","children":[{"type":"text","value":"Node.js","position":{"start":{"line":60,"column":254,"offset":7834},"end":{"line":60,"column":261,"offset":7841},"indent":[]}}],"position":{"start":{"line":60,"column":253,"offset":7833},"end":{"line":60,"column":286,"offset":7866},"indent":[]}},{"type":"text","value":") ","position":{"start":{"line":60,"column":286,"offset":7866},"end":{"line":60,"column":288,"offset":7868},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/addyosmani/critical","children":[{"type":"text","value":"Critical","position":{"start":{"line":60,"column":289,"offset":7869},"end":{"line":60,"column":297,"offset":7877},"indent":[]}}],"position":{"start":{"line":60,"column":288,"offset":7868},"end":{"line":60,"column":338,"offset":7918},"indent":[]}},{"type":"text","value":". This helpful package does the CSS inlining for us and all we do is add some code to a Javascript file. Here’s a code snippet from the Github page.","position":{"start":{"line":60,"column":338,"offset":7918},"end":{"line":60,"column":486,"offset":8066},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":7581},"end":{"line":60,"column":486,"offset":8066},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> critical <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'critical'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncritical<span class=\"token punctuation\">.</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    base<span class=\"token punctuation\">:</span> <span class=\"token string\">'test/'</span><span class=\"token punctuation\">,</span>\n    src<span class=\"token punctuation\">:</span> <span class=\"token string\">'index.html'</span><span class=\"token punctuation\">,</span>\n    dest<span class=\"token punctuation\">:</span> <span class=\"token string\">'styles/main.css'</span><span class=\"token punctuation\">,</span>\n    dimensions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n        height<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n        width<span class=\"token punctuation\">:</span> <span class=\"token number\">500</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        height<span class=\"token punctuation\">:</span> <span class=\"token number\">900</span><span class=\"token punctuation\">,</span>\n        width<span class=\"token punctuation\">:</span> <span class=\"token number\">1200</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","position":{"start":{"line":62,"column":1,"offset":8068},"end":{"line":77,"column":4,"offset":8333},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Using the generate function, we supply it with a JavaScript object with some values defined. base is where we’re going to save our src and dest (our project folder usually). What’s great is now we just supply an array of dimensions and the code will compute the critical CSS for each and inline that code into our head tag.","position":{"start":{"line":79,"column":1,"offset":8335},"end":{"line":79,"column":324,"offset":8658},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":8335},"end":{"line":79,"column":324,"offset":8658},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Async and Defer","position":{"start":{"line":81,"column":5,"offset":8664},"end":{"line":81,"column":20,"offset":8679},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":8660},"end":{"line":81,"column":20,"offset":8679},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Again, we come back to this idea of render-blocking and how best we should implement this for our website. When you have a plain script tag in your HTML it blocks the HTML from loading whilst the JavaScript loads ","position":{"start":{"line":83,"column":1,"offset":8681},"end":{"line":83,"column":214,"offset":8894},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"and","position":{"start":{"line":83,"column":216,"offset":8896},"end":{"line":83,"column":219,"offset":8899},"indent":[]}}],"position":{"start":{"line":83,"column":214,"offset":8894},"end":{"line":83,"column":221,"offset":8901},"indent":[]}},{"type":"text","value":" runs. Async and defer are simple attributes that you can add to your script tags that change the way your JavaScript will be loaded.","position":{"start":{"line":83,"column":221,"offset":8901},"end":{"line":83,"column":354,"offset":9034},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":8681},"end":{"line":83,"column":354,"offset":9034},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Defer essentially “defers” execution of the script until after the HTML has been parsed. A major advantage of this is that you no longer need some $(document).ready() jQuery-style function to make sure the body was loaded before you could manipulate it, which could cut out some of the dependencies on libraries like jQuery which helps reduce load-time.","position":{"start":{"line":85,"column":1,"offset":9036},"end":{"line":85,"column":354,"offset":9389},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":9036},"end":{"line":85,"column":354,"offset":9389},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Async is, unsurprisingly, the asynchronous loading of JavaScript files. What does this mean? Your HTML will continue to be parsed whilst the file is loaded and then whenever its ready the file will be executed. This helps improving user experience whilst viewing your website. Imagine for example you had a JavaScript file for doing some cool graphics. You want the words around this graphic to be parsed until your graphic is ready to be executed. As soon as it is ready, it is executed and we get a more seamless loading of our webpage without missing pieces.","position":{"start":{"line":87,"column":1,"offset":9391},"end":{"line":87,"column":562,"offset":9952},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":9391},"end":{"line":87,"column":562,"offset":9952},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Check this ","position":{"start":{"line":89,"column":1,"offset":9954},"end":{"line":89,"column":12,"offset":9965},"indent":[]}},{"type":"link","title":null,"url":"http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html","children":[{"type":"text","value":"website","position":{"start":{"line":89,"column":13,"offset":9966},"end":{"line":89,"column":20,"offset":9973},"indent":[]}}],"position":{"start":{"line":89,"column":12,"offset":9965},"end":{"line":89,"column":94,"offset":10047},"indent":[]}},{"type":"text","value":" for a really intuitive, graphical representation of this.","position":{"start":{"line":89,"column":94,"offset":10047},"end":{"line":89,"column":152,"offset":10105},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":9954},"end":{"line":89,"column":152,"offset":10105},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Image Optimisation and Media Queries","position":{"start":{"line":91,"column":5,"offset":10111},"end":{"line":91,"column":41,"offset":10147},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":10107},"end":{"line":91,"column":41,"offset":10147},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The cornerstone of all website performance optimisation is the simple rule that, the less data you send to the client, the quicker and better your website will perform. With the plethora of devices on the market capable of viewing websites, there is a growing trend to optimise your website based on the device it is being viewed on.","position":{"start":{"line":93,"column":1,"offset":10149},"end":{"line":93,"column":334,"offset":10482},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":10149},"end":{"line":93,"column":334,"offset":10482},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Media queries are a fairly new tool added to CSS3. With more and more content being consumed using mobile-devices there has been a shift in design thinking towards mobile first. Using media queries you can then add stylings for larger screen sizes.","position":{"start":{"line":95,"column":1,"offset":10484},"end":{"line":95,"column":249,"offset":10732},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":10484},"end":{"line":95,"column":249,"offset":10732},"indent":[]}},{"type":"html","lang":"css","value":"<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/* Some CSS for screen sizes bigger than 600px but smaller than 992px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/*  Some CSS for screen sizes bigger than 992px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">orientation</span><span class=\"token punctuation\">:</span> landscape<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* Some CSS for landscape-oriented devices */</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":97,"column":1,"offset":10734},"end":{"line":109,"column":4,"offset":11064},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The @media tag starts a new CSS rule, whilst the only keyword stops older browsers that don’t support media queries from using it. The screen keyword applies the rules to screens rather than prints. After that you add the media-feature which supports the and , or and not keywords so you can get as specific as you want. When you’re loading your image you can write code like:","position":{"start":{"line":111,"column":1,"offset":11066},"end":{"line":111,"column":377,"offset":11442},"indent":[]}}],"position":{"start":{"line":111,"column":1,"offset":11066},"end":{"line":111,"column":377,"offset":11442},"indent":[]}},{"type":"html","lang":"css","value":"<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-small.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-big.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":113,"column":1,"offset":11444},"end":{"line":121,"column":4,"offset":11663},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This isn’t necessarily the best or optimal approach for image optimisation. Luckily we have other options. ","position":{"start":{"line":123,"column":1,"offset":11665},"end":{"line":123,"column":108,"offset":11772},"indent":[]}},{"type":"link","title":null,"url":"https://www.imgix.com/","children":[{"type":"text","value":"Imgix","position":{"start":{"line":123,"column":109,"offset":11773},"end":{"line":123,"column":114,"offset":11778},"indent":[]}}],"position":{"start":{"line":123,"column":108,"offset":11772},"end":{"line":123,"column":139,"offset":11803},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":123,"column":139,"offset":11803},"end":{"line":123,"column":144,"offset":11808},"indent":[]}},{"type":"link","title":null,"url":"https://cloudinary.com/","children":[{"type":"text","value":"Cloudinary","position":{"start":{"line":123,"column":145,"offset":11809},"end":{"line":123,"column":155,"offset":11819},"indent":[]}}],"position":{"start":{"line":123,"column":144,"offset":11808},"end":{"line":123,"column":181,"offset":11845},"indent":[]}},{"type":"text","value":" are two ways you can help optimise your site for the right device. Imgix is a Content Delivery Network (CDN) for images with a lot of cool features. A CDN simply takes your files and spreads them across the globe so that someone in a different country doesn’t have to wait for your files on your server to make it all the way to them. This ","position":{"start":{"line":123,"column":181,"offset":11845},"end":{"line":123,"column":522,"offset":12186},"indent":[]}},{"type":"link","title":null,"url":"https://docs.imgix.com/tutorials/responsive-images-srcset-imgix","children":[{"type":"text","value":"tutorial","position":{"start":{"line":123,"column":523,"offset":12187},"end":{"line":123,"column":531,"offset":12195},"indent":[]}}],"position":{"start":{"line":123,"column":522,"offset":12186},"end":{"line":123,"column":597,"offset":12261},"indent":[]}},{"type":"text","value":" goes through how to use Imgix for different device pixel ratios. Cloudinary is a similar service, and their ","position":{"start":{"line":123,"column":597,"offset":12261},"end":{"line":123,"column":706,"offset":12370},"indent":[]}},{"type":"link","title":null,"url":"https://cloudinary.com/documentation/image_optimization","children":[{"type":"text","value":"tutorial ","position":{"start":{"line":123,"column":707,"offset":12371},"end":{"line":123,"column":716,"offset":12380},"indent":[]}}],"position":{"start":{"line":123,"column":706,"offset":12370},"end":{"line":123,"column":774,"offset":12438},"indent":[]}},{"type":"text","value":"will take you through the importance of optimisation and how to achieve it will their incredible services. Below is a small example showing how easy it is to use Cloudinary straight in the HTML markup.","position":{"start":{"line":123,"column":774,"offset":12438},"end":{"line":123,"column":975,"offset":12639},"indent":[]}}],"position":{"start":{"line":123,"column":1,"offset":11665},"end":{"line":123,"column":975,"offset":12639},"indent":[]}},{"type":"html","value":"<iframe height='400' scrolling='no' title='Cloudinary Example' src='//codepen.io/patricoferris/embed/ejgVJN/?height=400&theme-id=0&default-tab=html,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/ejgVJN/'>Cloudinary Example</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":125,"column":1,"offset":12641},"end":{"line":126,"column":10,"offset":13125},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"As a last point on image optimisation, the format you use can have a large impact on file size. Some files contain lots of metadata which you don’t want to be serving to your client — ","position":{"start":{"line":128,"column":1,"offset":13127},"end":{"line":128,"column":185,"offset":13311},"indent":[]}},{"type":"link","title":null,"url":"https://www.sno.phy.queensu.ca/~phil/exiftool/","children":[{"type":"text","value":"ExifTool","position":{"start":{"line":128,"column":186,"offset":13312},"end":{"line":128,"column":194,"offset":13320},"indent":[]}}],"position":{"start":{"line":128,"column":185,"offset":13311},"end":{"line":128,"column":243,"offset":13369},"indent":[]}},{"type":"text","value":" is a commonly used command-line application that can help you trim down those files sizes. On top of this, Scalable Vector Graphics (SVG) are a web-standard developed by W3C that offers XML-based vector graphics. This means they have infinite resolution unlike PNG or JPG files. It also makes them highly versatile, easily editable and can even be animated. At the end of the day SVGs are just code and so the file sizes tend to be small. For more reasons to use them, check out this ","position":{"start":{"line":128,"column":243,"offset":13369},"end":{"line":128,"column":728,"offset":13854},"indent":[]}},{"type":"link","title":null,"url":"https://watb.co.uk/5-reasons-you-should-be-using-svgs-over-pngs/","children":[{"type":"text","value":"article","position":{"start":{"line":128,"column":729,"offset":13855},"end":{"line":128,"column":736,"offset":13862},"indent":[]}}],"position":{"start":{"line":128,"column":728,"offset":13854},"end":{"line":128,"column":803,"offset":13929},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":128,"column":803,"offset":13929},"end":{"line":128,"column":804,"offset":13930},"indent":[]}}],"position":{"start":{"line":128,"column":1,"offset":13127},"end":{"line":128,"column":804,"offset":13930},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":130,"column":5,"offset":13936},"end":{"line":130,"column":15,"offset":13946},"indent":[]}}],"position":{"start":{"line":130,"column":1,"offset":13932},"end":{"line":130,"column":15,"offset":13946},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We’ve only scratched the surface of what’s possible for website optimisation. There are many tools you can use to help you stream-line this process like ","position":{"start":{"line":132,"column":1,"offset":13948},"end":{"line":132,"column":154,"offset":14101},"indent":[]}},{"type":"link","title":null,"url":"https://webpack.js.org/","children":[{"type":"text","value":"Webpack","position":{"start":{"line":132,"column":155,"offset":14102},"end":{"line":132,"column":162,"offset":14109},"indent":[]}}],"position":{"start":{"line":132,"column":154,"offset":14101},"end":{"line":132,"column":188,"offset":14135},"indent":[]}},{"type":"text","value":" for bundling or static-site generators like ","position":{"start":{"line":132,"column":188,"offset":14135},"end":{"line":132,"column":233,"offset":14180},"indent":[]}},{"type":"link","title":null,"url":"https://www.gatsbyjs.org/","children":[{"type":"text","value":"Gatsby","position":{"start":{"line":132,"column":234,"offset":14181},"end":{"line":132,"column":240,"offset":14187},"indent":[]}}],"position":{"start":{"line":132,"column":233,"offset":14180},"end":{"line":132,"column":268,"offset":14215},"indent":[]}},{"type":"text","value":". ","position":{"start":{"line":132,"column":268,"offset":14215},"end":{"line":132,"column":270,"offset":14217},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking","children":[{"type":"text","value":"Tree shaking","position":{"start":{"line":132,"column":271,"offset":14218},"end":{"line":132,"column":283,"offset":14230},"indent":[]}}],"position":{"start":{"line":132,"column":270,"offset":14217},"end":{"line":132,"column":348,"offset":14295},"indent":[]}},{"type":"text","value":" is another commonly used technique to remove excess, unused modules lying around your website.","position":{"start":{"line":132,"column":348,"offset":14295},"end":{"line":132,"column":443,"offset":14390},"indent":[]}}],"position":{"start":{"line":132,"column":1,"offset":13948},"end":{"line":132,"column":443,"offset":14390},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Hopefully this article has touched on some useful techniques you can use on your next site to help improve its performance. Happy coding!","position":{"start":{"line":134,"column":1,"offset":14392},"end":{"line":134,"column":138,"offset":14529},"indent":[]}}],"position":{"start":{"line":134,"column":1,"offset":14392},"end":{"line":134,"column":138,"offset":14529},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A big thank you to ","position":{"start":{"line":136,"column":1,"offset":14531},"end":{"line":136,"column":20,"offset":14550},"indent":[]}},{"type":"link","title":null,"url":"undefined","children":[{"type":"text","value":"Christian Silver","position":{"start":{"line":136,"column":21,"offset":14551},"end":{"line":136,"column":37,"offset":14567},"indent":[]}}],"position":{"start":{"line":136,"column":20,"offset":14550},"end":{"line":136,"column":49,"offset":14579},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":136,"column":49,"offset":14579},"end":{"line":136,"column":54,"offset":14584},"indent":[]}},{"type":"link","title":null,"url":"undefined","children":[{"type":"text","value":"Charlie Crisp","position":{"start":{"line":136,"column":55,"offset":14585},"end":{"line":136,"column":68,"offset":14598},"indent":[]}}],"position":{"start":{"line":136,"column":54,"offset":14584},"end":{"line":136,"column":80,"offset":14610},"indent":[]}},{"type":"text","value":" for editing this post and providing extremely useful advice and extra content to make it even better.","position":{"start":{"line":136,"column":80,"offset":14610},"end":{"line":136,"column":182,"offset":14712},"indent":[]}}],"position":{"start":{"line":136,"column":1,"offset":14531},"end":{"line":136,"column":182,"offset":14712},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":137,"column":1,"offset":14713}}}},{"id":"transformer-remark-markdown-html-ast-2f482fc4a3133ee994535735bbc9df16-gatsby-remark-imagesgatsby-remark-prismjs-","value":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/patricoferris/image/upload/v1532781201/pf2018/blogposts/28-07-2018/website_optimisation_2.png","alt":"Optimising your Website"},"children":[],"position":{"start":{"line":7,"column":1,"offset":154},"end":{"line":7,"column":149,"offset":302}}},{"type":"text","value":"\nInspired by a ","position":{"start":{"line":7,"column":149,"offset":302},"end":{"line":8,"column":15,"offset":317}}},{"type":"element","tagName":"a","properties":{"href":"https://syntax.fm/"},"children":[{"type":"text","value":"Syntax","position":{"start":{"line":8,"column":16,"offset":318},"end":{"line":8,"column":22,"offset":324}}}],"position":{"start":{"line":8,"column":15,"offset":317},"end":{"line":8,"column":43,"offset":345}}},{"type":"text","value":" podcast, I got really interested in website optimisation. It can often be an overlooked aspect in web development with more focus on design and functionality, I realised my number one priority whenever I visited a website is load speed. My attention is a website’s number one goal, lose it and they lose all potential ad revenue or possibility to give me whatever information I was looking for. ","position":{"start":{"line":8,"column":43,"offset":345},"end":{"line":8,"column":439,"offset":741}}},{"type":"element","tagName":"a","properties":{"href":"https://developers.google.com/web/fundamentals/performance/get-started/"},"children":[{"type":"text","value":"Many seem to agree. 53% of users abandon websites that take more than 3 seconds to load","position":{"start":{"line":8,"column":440,"offset":742},"end":{"line":8,"column":527,"offset":829}}}],"position":{"start":{"line":8,"column":439,"offset":741},"end":{"line":8,"column":601,"offset":903}}},{"type":"text","value":". No amount of fancy graphics or parallax scrolling that appears five seconds after someone’s clicked will hide the slow loading times.","position":{"start":{"line":8,"column":601,"offset":903},"end":{"line":8,"column":736,"offset":1038}}}],"position":{"start":{"line":7,"column":1,"offset":154},"end":{"line":8,"column":736,"offset":1038}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The aim of this article is to give a broad overview of the concepts and ideas behind optimising your website, experienced developers are likely already using things like Webpack (a module bundler) among other tools to speed-up their sites.","position":{"start":{"line":10,"column":1,"offset":1040},"end":{"line":10,"column":240,"offset":1279}}}],"position":{"start":{"line":10,"column":1,"offset":1040},"end":{"line":10,"column":240,"offset":1279}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For testing load-times I will be using the ","position":{"start":{"line":12,"column":1,"offset":1281},"end":{"line":12,"column":44,"offset":1324}}},{"type":"element","tagName":"a","properties":{"href":"https://chrome.google.com/webstore/detail/page-load-time/fploionmjgeclbkemipmkogoaohcdbig?hl=en"},"children":[{"type":"text","value":"Page Load Time ","position":{"start":{"line":12,"column":45,"offset":1325},"end":{"line":12,"column":60,"offset":1340}}}],"position":{"start":{"line":12,"column":44,"offset":1324},"end":{"line":12,"column":158,"offset":1438}}},{"type":"text","value":"Chrome extension. There are a few ways to measure website loading time including: ","position":{"start":{"line":12,"column":158,"offset":1438},"end":{"line":12,"column":240,"offset":1520}}},{"type":"element","tagName":"a","properties":{"href":"https://developers.google.com/web/tools/chrome-user-experience-report/"},"children":[{"type":"text","value":"first paint, first meaning paint, DOMContentLoaded","position":{"start":{"line":12,"column":241,"offset":1521},"end":{"line":12,"column":291,"offset":1571}}}],"position":{"start":{"line":12,"column":240,"offset":1520},"end":{"line":12,"column":364,"offset":1644}}},{"type":"text","value":" etc. For a more detailed look into what this timer measures, check out the Github repository below.\n","position":{"start":{"line":12,"column":364,"offset":1644},"end":{"line":13,"column":1,"offset":1745}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/alex-vv/chrome-load-timer"},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"alex-vv/chrome-load-timer","position":{"start":{"line":13,"column":4,"offset":1748},"end":{"line":13,"column":29,"offset":1773}}}],"position":{"start":{"line":13,"column":2,"offset":1746},"end":{"line":13,"column":31,"offset":1775}}},{"type":"text","value":"\n","position":{"start":{"line":13,"column":31,"offset":1775},"end":{"line":14,"column":1,"offset":1776}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"chrome-load-timer - Google Chrome extension to measure page load time and display it in the toolbar","position":{"start":{"line":14,"column":2,"offset":1777},"end":{"line":14,"column":101,"offset":1876}}}],"position":{"start":{"line":14,"column":1,"offset":1776},"end":{"line":14,"column":102,"offset":1877}}},{"type":"text","value":"github.com","position":{"start":{"line":14,"column":102,"offset":1877},"end":{"line":14,"column":112,"offset":1887}}}],"position":{"start":{"line":13,"column":1,"offset":1745},"end":{"line":14,"column":159,"offset":1934}}}],"position":{"start":{"line":12,"column":1,"offset":1281},"end":{"line":14,"column":159,"offset":1934}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Use Minified Stylesheets and Scripts","position":{"start":{"line":16,"column":7,"offset":1942},"end":{"line":16,"column":43,"offset":1978}}}],"position":{"start":{"line":16,"column":5,"offset":1940},"end":{"line":16,"column":45,"offset":1980}}}],"position":{"start":{"line":16,"column":1,"offset":1936},"end":{"line":16,"column":45,"offset":1980}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You would be amazed at how much performance can be gained by this simple trick. What is a minified document? When we write code it is never our job to make it optimised for the computer, instead our golden rule is to make it readable to humans. This improves readability, cuts down on debug time and makes it easier to maintain. However, to achieve this we often add extra spacing which costs us precious space. Minifying the code is trimming all this fat from what we’ve written to have code that produces the same result but is far more difficult to read and maintain. This is okay though, because a computer has no problem deciphering it. Take the following code for example.","position":{"start":{"line":18,"column":1,"offset":1982},"end":{"line":18,"column":679,"offset":2660}}}],"position":{"start":{"line":18,"column":1,"offset":1982},"end":{"line":18,"column":679,"offset":2660}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","position":{"start":{"line":20,"column":1,"offset":2662},"end":{"line":29,"column":4,"offset":2921}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Notice how, wherever possible, our line-breaks and spaces are gone. On top of that, the code in the for-loop is only one line so there’s no need for the curly braces which extends our code over three lines when it can be done in one. Does this make a difference?","position":{"start":{"line":31,"column":1,"offset":2923},"end":{"line":31,"column":263,"offset":3185}}}],"position":{"start":{"line":31,"column":1,"offset":2923},"end":{"line":31,"column":263,"offset":3185}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I tried it out on simple website that just had one script tag being loaded in for the graphics library ","position":{"start":{"line":33,"column":1,"offset":3187},"end":{"line":33,"column":104,"offset":3290}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/"},"children":[{"type":"text","value":"p5.js","position":{"start":{"line":33,"column":105,"offset":3291},"end":{"line":33,"column":110,"offset":3296}}}],"position":{"start":{"line":33,"column":104,"offset":3290},"end":{"line":33,"column":130,"offset":3316}}},{"type":"text","value":". Using the non-minified CDN link I got a load time of 0.25 seconds. Using the minified version I got a markedly improved load time of 0.08 seconds. Depending on what your website project is, there are a few ways to automatically minify code. If it is a ","position":{"start":{"line":33,"column":130,"offset":3316},"end":{"line":33,"column":384,"offset":3570}}},{"type":"element","tagName":"a","properties":{"href":"https://guide.meteor.com/build-tool.html"},"children":[{"type":"text","value":"Meteor app","position":{"start":{"line":33,"column":385,"offset":3571},"end":{"line":33,"column":395,"offset":3581}}}],"position":{"start":{"line":33,"column":384,"offset":3570},"end":{"line":33,"column":438,"offset":3624}}},{"type":"text","value":" it will be done automatically, using ","position":{"start":{"line":33,"column":438,"offset":3624},"end":{"line":33,"column":476,"offset":3662}}},{"type":"element","tagName":"a","properties":{"href":"https://webpack.js.org/guides/production/"},"children":[{"type":"text","value":"Webpack ","position":{"start":{"line":33,"column":477,"offset":3663},"end":{"line":33,"column":485,"offset":3671}}}],"position":{"start":{"line":33,"column":476,"offset":3662},"end":{"line":33,"column":529,"offset":3715}}},{"type":"text","value":"will also allow you to do this. Otherwise there are some online tools like ","position":{"start":{"line":33,"column":529,"offset":3715},"end":{"line":33,"column":604,"offset":3790}}},{"type":"element","tagName":"a","properties":{"href":"https://jscompress.com/"},"children":[{"type":"text","value":"JSCompress ","position":{"start":{"line":33,"column":605,"offset":3791},"end":{"line":33,"column":616,"offset":3802}}}],"position":{"start":{"line":33,"column":604,"offset":3790},"end":{"line":33,"column":642,"offset":3828}}},{"type":"text","value":"or ","position":{"start":{"line":33,"column":642,"offset":3828},"end":{"line":33,"column":645,"offset":3831}}},{"type":"element","tagName":"a","properties":{"href":"https://cssminifier.com/"},"children":[{"type":"text","value":"CSSMinifier ","position":{"start":{"line":33,"column":646,"offset":3832},"end":{"line":33,"column":658,"offset":3844}}}],"position":{"start":{"line":33,"column":645,"offset":3831},"end":{"line":33,"column":685,"offset":3871}}},{"type":"text","value":"that you can upload your code to.","position":{"start":{"line":33,"column":685,"offset":3871},"end":{"line":33,"column":718,"offset":3904}}}],"position":{"start":{"line":33,"column":1,"offset":3187},"end":{"line":33,"column":718,"offset":3904}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Design Versus Performance","position":{"start":{"line":35,"column":5,"offset":3910},"end":{"line":35,"column":30,"offset":3935}}}],"position":{"start":{"line":35,"column":1,"offset":3906},"end":{"line":35,"column":30,"offset":3935}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Whilst design is undoubtedly a major aspect to a website’s overall success, both developers and designers must work together to compromise and make a mutually beneficial trade-off between design and performance. The classic example is fonts. Take the two screenshots of a simple website below.","position":{"start":{"line":37,"column":1,"offset":3937},"end":{"line":37,"column":294,"offset":4230}}}],"position":{"start":{"line":37,"column":1,"offset":3937},"end":{"line":37,"column":294,"offset":4230}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/patricoferris/image/upload/v1532780050/pf2018/blogposts/28-07-2018/Helvetica.png","alt":"The example website using Helvetica Font (commonly found on many computers) — check [this](https://css-tricks.com/snippets/css/system-font-stack/) link for common system fonts"},"children":[],"position":{"start":{"line":39,"column":1,"offset":4232},"end":{"line":39,"column":288,"offset":4519}}},{"type":"text","value":"\n","position":{"start":{"line":39,"column":288,"offset":4519},"end":{"line":40,"column":1,"offset":4520}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The example website using Helvetica Font (commonly found on many computers) — check ","position":{"start":{"line":40,"column":2,"offset":4521},"end":{"line":40,"column":86,"offset":4605}}},{"type":"element","tagName":"a","properties":{"href":"https://css-tricks.com/snippets/css/system-font-stack/"},"children":[{"type":"text","value":"this","position":{"start":{"line":40,"column":87,"offset":4606},"end":{"line":40,"column":91,"offset":4610}}}],"position":{"start":{"line":40,"column":86,"offset":4605},"end":{"line":40,"column":148,"offset":4667}}},{"type":"text","value":" link for common system fonts","position":{"start":{"line":40,"column":148,"offset":4667},"end":{"line":40,"column":177,"offset":4696}}}],"position":{"start":{"line":40,"column":1,"offset":4520},"end":{"line":40,"column":178,"offset":4697}}}],"position":{"start":{"line":39,"column":1,"offset":4232},"end":{"line":40,"column":178,"offset":4697}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://cdn-images-1.medium.com/max/5760/1*8ciuJNBdqMhlLSaOpNUXow.png","alt":"The example website using Roboto Font (designed by Google and linked from [Google Fonts](https://fonts.google.com/?selection.family=Roboto))"},"children":[],"position":{"start":{"line":42,"column":1,"offset":4699},"end":{"line":42,"column":215,"offset":4913}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The example website using Roboto Font (designed by Google and linked from ","position":{"start":{"line":42,"column":216,"offset":4914},"end":{"line":42,"column":290,"offset":4988}}},{"type":"element","tagName":"a","properties":{"href":"https://fonts.google.com/?selection.family=Roboto"},"children":[{"type":"text","value":"Google Fonts","position":{"start":{"line":42,"column":291,"offset":4989},"end":{"line":42,"column":303,"offset":5001}}}],"position":{"start":{"line":42,"column":290,"offset":4988},"end":{"line":42,"column":355,"offset":5053}}},{"type":"text","value":")","position":{"start":{"line":42,"column":355,"offset":5053},"end":{"line":42,"column":356,"offset":5054}}}],"position":{"start":{"line":42,"column":215,"offset":4913},"end":{"line":42,"column":357,"offset":5055}}}],"position":{"start":{"line":42,"column":1,"offset":4699},"end":{"line":42,"column":357,"offset":5055}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Before critiquing my questionable design skills take a moment to appreciate that these two fonts are very similar — yet the loading time for a website for the Roboto font was 0.22 seconds as compared with 0.17 for Helvetica. Whilst not that significant, using lots of custom fonts will slow down your website, although using Google Fonts’ API will help keep your website optimised. As an over-the-top example, linking 20 different fonts from the Google API increased the load time to 0.87 seconds.","position":{"start":{"line":44,"column":1,"offset":5057},"end":{"line":44,"column":498,"offset":5554}}}],"position":{"start":{"line":44,"column":1,"offset":5057},"end":{"line":44,"column":498,"offset":5554}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Inlining your JavaScript and CSS","position":{"start":{"line":46,"column":5,"offset":5560},"end":{"line":46,"column":37,"offset":5592}}}],"position":{"start":{"line":46,"column":1,"offset":5556},"end":{"line":46,"column":37,"offset":5592}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For each individual document or component of your website, when the parser reaches the script tag or link tag it sends and HTTP request for that document and if not stated differently, these will be blocking actions. What this means is your machine is parsing the HTML document getting the words to display in your browser but if it hits the script tag with the attribute src='js/main.js' for example, it will block the parsing and load in that file. This is where as a developer you need to be clever about where in the document you place things.","position":{"start":{"line":48,"column":1,"offset":5594},"end":{"line":48,"column":548,"offset":6141}}}],"position":{"start":{"line":48,"column":1,"offset":5594},"end":{"line":48,"column":548,"offset":6141}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Whilst it may not ultimately affect the loading time of your website, it can affect the order in which things are loaded. Again we’ll be using the un-minified p5.js library to simulate a large JavaScript file and load it in different places to see how it affects our user experience.","position":{"start":{"line":50,"column":1,"offset":6143},"end":{"line":50,"column":284,"offset":6426}}}],"position":{"start":{"line":50,"column":1,"offset":6143},"end":{"line":50,"column":284,"offset":6426}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://cdn-images-1.medium.com/max/2780/1*h_3GogfkaahcXCO9a43CPA.gif","alt":"Refreshing website with the script tag inserted at the bottom of the body tag"},"children":[],"position":{"start":{"line":52,"column":1,"offset":6428},"end":{"line":52,"column":152,"offset":6579}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Refreshing website with the script tag inserted at the bottom of the body tag","position":{"start":{"line":52,"column":153,"offset":6580},"end":{"line":52,"column":230,"offset":6657}}}],"position":{"start":{"line":52,"column":152,"offset":6579},"end":{"line":52,"column":231,"offset":6658}}}],"position":{"start":{"line":52,"column":1,"offset":6428},"end":{"line":52,"column":231,"offset":6658}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://cdn-images-1.medium.com/max/2780/1*xLOq5r4erQAwb4Au_hB-Ww.gif","alt":"Refreshing website with the script tag inserted at the top of the body tag"},"children":[],"position":{"start":{"line":54,"column":1,"offset":6660},"end":{"line":54,"column":149,"offset":6808}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Refreshing website with the script tag inserted at the top of the body tag","position":{"start":{"line":54,"column":150,"offset":6809},"end":{"line":54,"column":224,"offset":6883}}}],"position":{"start":{"line":54,"column":149,"offset":6808},"end":{"line":54,"column":225,"offset":6884}}}],"position":{"start":{"line":54,"column":1,"offset":6660},"end":{"line":54,"column":225,"offset":6884}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Whilst the load times were similar for both cases — the user experience is far better by placing the script at the body tag allowing the HTML to be parsed before the JavaScript giving the user the website content immediately!","position":{"start":{"line":56,"column":1,"offset":6886},"end":{"line":56,"column":226,"offset":7111}}}],"position":{"start":{"line":56,"column":1,"offset":6886},"end":{"line":56,"column":226,"offset":7111}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In the same vein CSS can also be render-blocking especially because more often than not it is linked in the head tag of your HTML document before the body. But if we want our user to see the content in the quickest time we don’t want to be loading CSS for the footer of our document which the user won’t see until they’ve scrolled to the bottom. In fact, we don’t want to load any CSS in that the user can’t immediately see when the page first loads on their device.","position":{"start":{"line":58,"column":1,"offset":7113},"end":{"line":58,"column":467,"offset":7579}}}],"position":{"start":{"line":58,"column":1,"offset":7113},"end":{"line":58,"column":467,"offset":7579}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The CSS that you need is often called the ","position":{"start":{"line":60,"column":1,"offset":7581},"end":{"line":60,"column":43,"offset":7623}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Critical CSS","position":{"start":{"line":60,"column":44,"offset":7624},"end":{"line":60,"column":56,"offset":7636}}}],"position":{"start":{"line":60,"column":43,"offset":7623},"end":{"line":60,"column":57,"offset":7637}}},{"type":"text","value":". Finding it for yourself would be a headache. It will be different for different devices, meaning you would have to check manually for all possible devices. Lucky for us we have (if you’re using ","position":{"start":{"line":60,"column":57,"offset":7637},"end":{"line":60,"column":253,"offset":7833}}},{"type":"element","tagName":"a","properties":{"href":"https://nodejs.org/en/"},"children":[{"type":"text","value":"Node.js","position":{"start":{"line":60,"column":254,"offset":7834},"end":{"line":60,"column":261,"offset":7841}}}],"position":{"start":{"line":60,"column":253,"offset":7833},"end":{"line":60,"column":286,"offset":7866}}},{"type":"text","value":") ","position":{"start":{"line":60,"column":286,"offset":7866},"end":{"line":60,"column":288,"offset":7868}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/addyosmani/critical"},"children":[{"type":"text","value":"Critical","position":{"start":{"line":60,"column":289,"offset":7869},"end":{"line":60,"column":297,"offset":7877}}}],"position":{"start":{"line":60,"column":288,"offset":7868},"end":{"line":60,"column":338,"offset":7918}}},{"type":"text","value":". This helpful package does the CSS inlining for us and all we do is add some code to a Javascript file. Here’s a code snippet from the Github page.","position":{"start":{"line":60,"column":338,"offset":7918},"end":{"line":60,"column":486,"offset":8066}}}],"position":{"start":{"line":60,"column":1,"offset":7581},"end":{"line":60,"column":486,"offset":8066}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> critical <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'critical'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncritical<span class=\"token punctuation\">.</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    base<span class=\"token punctuation\">:</span> <span class=\"token string\">'test/'</span><span class=\"token punctuation\">,</span>\n    src<span class=\"token punctuation\">:</span> <span class=\"token string\">'index.html'</span><span class=\"token punctuation\">,</span>\n    dest<span class=\"token punctuation\">:</span> <span class=\"token string\">'styles/main.css'</span><span class=\"token punctuation\">,</span>\n    dimensions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n        height<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n        width<span class=\"token punctuation\">:</span> <span class=\"token number\">500</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        height<span class=\"token punctuation\">:</span> <span class=\"token number\">900</span><span class=\"token punctuation\">,</span>\n        width<span class=\"token punctuation\">:</span> <span class=\"token number\">1200</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","position":{"start":{"line":62,"column":1,"offset":8068},"end":{"line":77,"column":4,"offset":8333}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Using the generate function, we supply it with a JavaScript object with some values defined. base is where we’re going to save our src and dest (our project folder usually). What’s great is now we just supply an array of dimensions and the code will compute the critical CSS for each and inline that code into our head tag.","position":{"start":{"line":79,"column":1,"offset":8335},"end":{"line":79,"column":324,"offset":8658}}}],"position":{"start":{"line":79,"column":1,"offset":8335},"end":{"line":79,"column":324,"offset":8658}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Async and Defer","position":{"start":{"line":81,"column":5,"offset":8664},"end":{"line":81,"column":20,"offset":8679}}}],"position":{"start":{"line":81,"column":1,"offset":8660},"end":{"line":81,"column":20,"offset":8679}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Again, we come back to this idea of render-blocking and how best we should implement this for our website. When you have a plain script tag in your HTML it blocks the HTML from loading whilst the JavaScript loads ","position":{"start":{"line":83,"column":1,"offset":8681},"end":{"line":83,"column":214,"offset":8894}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"and","position":{"start":{"line":83,"column":216,"offset":8896},"end":{"line":83,"column":219,"offset":8899}}}],"position":{"start":{"line":83,"column":214,"offset":8894},"end":{"line":83,"column":221,"offset":8901}}},{"type":"text","value":" runs. Async and defer are simple attributes that you can add to your script tags that change the way your JavaScript will be loaded.","position":{"start":{"line":83,"column":221,"offset":8901},"end":{"line":83,"column":354,"offset":9034}}}],"position":{"start":{"line":83,"column":1,"offset":8681},"end":{"line":83,"column":354,"offset":9034}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Defer essentially “defers” execution of the script until after the HTML has been parsed. A major advantage of this is that you no longer need some $(document).ready() jQuery-style function to make sure the body was loaded before you could manipulate it, which could cut out some of the dependencies on libraries like jQuery which helps reduce load-time.","position":{"start":{"line":85,"column":1,"offset":9036},"end":{"line":85,"column":354,"offset":9389}}}],"position":{"start":{"line":85,"column":1,"offset":9036},"end":{"line":85,"column":354,"offset":9389}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Async is, unsurprisingly, the asynchronous loading of JavaScript files. What does this mean? Your HTML will continue to be parsed whilst the file is loaded and then whenever its ready the file will be executed. This helps improving user experience whilst viewing your website. Imagine for example you had a JavaScript file for doing some cool graphics. You want the words around this graphic to be parsed until your graphic is ready to be executed. As soon as it is ready, it is executed and we get a more seamless loading of our webpage without missing pieces.","position":{"start":{"line":87,"column":1,"offset":9391},"end":{"line":87,"column":562,"offset":9952}}}],"position":{"start":{"line":87,"column":1,"offset":9391},"end":{"line":87,"column":562,"offset":9952}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Check this ","position":{"start":{"line":89,"column":1,"offset":9954},"end":{"line":89,"column":12,"offset":9965}}},{"type":"element","tagName":"a","properties":{"href":"http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html"},"children":[{"type":"text","value":"website","position":{"start":{"line":89,"column":13,"offset":9966},"end":{"line":89,"column":20,"offset":9973}}}],"position":{"start":{"line":89,"column":12,"offset":9965},"end":{"line":89,"column":94,"offset":10047}}},{"type":"text","value":" for a really intuitive, graphical representation of this.","position":{"start":{"line":89,"column":94,"offset":10047},"end":{"line":89,"column":152,"offset":10105}}}],"position":{"start":{"line":89,"column":1,"offset":9954},"end":{"line":89,"column":152,"offset":10105}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Image Optimisation and Media Queries","position":{"start":{"line":91,"column":5,"offset":10111},"end":{"line":91,"column":41,"offset":10147}}}],"position":{"start":{"line":91,"column":1,"offset":10107},"end":{"line":91,"column":41,"offset":10147}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The cornerstone of all website performance optimisation is the simple rule that, the less data you send to the client, the quicker and better your website will perform. With the plethora of devices on the market capable of viewing websites, there is a growing trend to optimise your website based on the device it is being viewed on.","position":{"start":{"line":93,"column":1,"offset":10149},"end":{"line":93,"column":334,"offset":10482}}}],"position":{"start":{"line":93,"column":1,"offset":10149},"end":{"line":93,"column":334,"offset":10482}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Media queries are a fairly new tool added to CSS3. With more and more content being consumed using mobile-devices there has been a shift in design thinking towards mobile first. Using media queries you can then add stylings for larger screen sizes.","position":{"start":{"line":95,"column":1,"offset":10484},"end":{"line":95,"column":249,"offset":10732}}}],"position":{"start":{"line":95,"column":1,"offset":10484},"end":{"line":95,"column":249,"offset":10732}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/* Some CSS for screen sizes bigger than 600px but smaller than 992px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/*  Some CSS for screen sizes bigger than 992px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">orientation</span><span class=\"token punctuation\">:</span> landscape<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* Some CSS for landscape-oriented devices */</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":97,"column":1,"offset":10734},"end":{"line":109,"column":4,"offset":11064}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The @media tag starts a new CSS rule, whilst the only keyword stops older browsers that don’t support media queries from using it. The screen keyword applies the rules to screens rather than prints. After that you add the media-feature which supports the and , or and not keywords so you can get as specific as you want. When you’re loading your image you can write code like:","position":{"start":{"line":111,"column":1,"offset":11066},"end":{"line":111,"column":377,"offset":11442}}}],"position":{"start":{"line":111,"column":1,"offset":11066},"end":{"line":111,"column":377,"offset":11442}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-small.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-big.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":113,"column":1,"offset":11444},"end":{"line":121,"column":4,"offset":11663}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This isn’t necessarily the best or optimal approach for image optimisation. Luckily we have other options. ","position":{"start":{"line":123,"column":1,"offset":11665},"end":{"line":123,"column":108,"offset":11772}}},{"type":"element","tagName":"a","properties":{"href":"https://www.imgix.com/"},"children":[{"type":"text","value":"Imgix","position":{"start":{"line":123,"column":109,"offset":11773},"end":{"line":123,"column":114,"offset":11778}}}],"position":{"start":{"line":123,"column":108,"offset":11772},"end":{"line":123,"column":139,"offset":11803}}},{"type":"text","value":" and ","position":{"start":{"line":123,"column":139,"offset":11803},"end":{"line":123,"column":144,"offset":11808}}},{"type":"element","tagName":"a","properties":{"href":"https://cloudinary.com/"},"children":[{"type":"text","value":"Cloudinary","position":{"start":{"line":123,"column":145,"offset":11809},"end":{"line":123,"column":155,"offset":11819}}}],"position":{"start":{"line":123,"column":144,"offset":11808},"end":{"line":123,"column":181,"offset":11845}}},{"type":"text","value":" are two ways you can help optimise your site for the right device. Imgix is a Content Delivery Network (CDN) for images with a lot of cool features. A CDN simply takes your files and spreads them across the globe so that someone in a different country doesn’t have to wait for your files on your server to make it all the way to them. This ","position":{"start":{"line":123,"column":181,"offset":11845},"end":{"line":123,"column":522,"offset":12186}}},{"type":"element","tagName":"a","properties":{"href":"https://docs.imgix.com/tutorials/responsive-images-srcset-imgix"},"children":[{"type":"text","value":"tutorial","position":{"start":{"line":123,"column":523,"offset":12187},"end":{"line":123,"column":531,"offset":12195}}}],"position":{"start":{"line":123,"column":522,"offset":12186},"end":{"line":123,"column":597,"offset":12261}}},{"type":"text","value":" goes through how to use Imgix for different device pixel ratios. Cloudinary is a similar service, and their ","position":{"start":{"line":123,"column":597,"offset":12261},"end":{"line":123,"column":706,"offset":12370}}},{"type":"element","tagName":"a","properties":{"href":"https://cloudinary.com/documentation/image_optimization"},"children":[{"type":"text","value":"tutorial ","position":{"start":{"line":123,"column":707,"offset":12371},"end":{"line":123,"column":716,"offset":12380}}}],"position":{"start":{"line":123,"column":706,"offset":12370},"end":{"line":123,"column":774,"offset":12438}}},{"type":"text","value":"will take you through the importance of optimisation and how to achieve it will their incredible services. Below is a small example showing how easy it is to use Cloudinary straight in the HTML markup.","position":{"start":{"line":123,"column":774,"offset":12438},"end":{"line":123,"column":975,"offset":12639}}}],"position":{"start":{"line":123,"column":1,"offset":11665},"end":{"line":123,"column":975,"offset":12639}}},{"type":"text","value":"\n"},{"type":"raw","value":"<iframe height='400' scrolling='no' title='Cloudinary Example' src='//codepen.io/patricoferris/embed/ejgVJN/?height=400&theme-id=0&default-tab=html,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/ejgVJN/'>Cloudinary Example</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":125,"column":1,"offset":12641},"end":{"line":126,"column":10,"offset":13125}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As a last point on image optimisation, the format you use can have a large impact on file size. Some files contain lots of metadata which you don’t want to be serving to your client — ","position":{"start":{"line":128,"column":1,"offset":13127},"end":{"line":128,"column":185,"offset":13311}}},{"type":"element","tagName":"a","properties":{"href":"https://www.sno.phy.queensu.ca/~phil/exiftool/"},"children":[{"type":"text","value":"ExifTool","position":{"start":{"line":128,"column":186,"offset":13312},"end":{"line":128,"column":194,"offset":13320}}}],"position":{"start":{"line":128,"column":185,"offset":13311},"end":{"line":128,"column":243,"offset":13369}}},{"type":"text","value":" is a commonly used command-line application that can help you trim down those files sizes. On top of this, Scalable Vector Graphics (SVG) are a web-standard developed by W3C that offers XML-based vector graphics. This means they have infinite resolution unlike PNG or JPG files. It also makes them highly versatile, easily editable and can even be animated. At the end of the day SVGs are just code and so the file sizes tend to be small. For more reasons to use them, check out this ","position":{"start":{"line":128,"column":243,"offset":13369},"end":{"line":128,"column":728,"offset":13854}}},{"type":"element","tagName":"a","properties":{"href":"https://watb.co.uk/5-reasons-you-should-be-using-svgs-over-pngs/"},"children":[{"type":"text","value":"article","position":{"start":{"line":128,"column":729,"offset":13855},"end":{"line":128,"column":736,"offset":13862}}}],"position":{"start":{"line":128,"column":728,"offset":13854},"end":{"line":128,"column":803,"offset":13929}}},{"type":"text","value":".","position":{"start":{"line":128,"column":803,"offset":13929},"end":{"line":128,"column":804,"offset":13930}}}],"position":{"start":{"line":128,"column":1,"offset":13127},"end":{"line":128,"column":804,"offset":13930}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":130,"column":5,"offset":13936},"end":{"line":130,"column":15,"offset":13946}}}],"position":{"start":{"line":130,"column":1,"offset":13932},"end":{"line":130,"column":15,"offset":13946}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We’ve only scratched the surface of what’s possible for website optimisation. There are many tools you can use to help you stream-line this process like ","position":{"start":{"line":132,"column":1,"offset":13948},"end":{"line":132,"column":154,"offset":14101}}},{"type":"element","tagName":"a","properties":{"href":"https://webpack.js.org/"},"children":[{"type":"text","value":"Webpack","position":{"start":{"line":132,"column":155,"offset":14102},"end":{"line":132,"column":162,"offset":14109}}}],"position":{"start":{"line":132,"column":154,"offset":14101},"end":{"line":132,"column":188,"offset":14135}}},{"type":"text","value":" for bundling or static-site generators like ","position":{"start":{"line":132,"column":188,"offset":14135},"end":{"line":132,"column":233,"offset":14180}}},{"type":"element","tagName":"a","properties":{"href":"https://www.gatsbyjs.org/"},"children":[{"type":"text","value":"Gatsby","position":{"start":{"line":132,"column":234,"offset":14181},"end":{"line":132,"column":240,"offset":14187}}}],"position":{"start":{"line":132,"column":233,"offset":14180},"end":{"line":132,"column":268,"offset":14215}}},{"type":"text","value":". ","position":{"start":{"line":132,"column":268,"offset":14215},"end":{"line":132,"column":270,"offset":14217}}},{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking"},"children":[{"type":"text","value":"Tree shaking","position":{"start":{"line":132,"column":271,"offset":14218},"end":{"line":132,"column":283,"offset":14230}}}],"position":{"start":{"line":132,"column":270,"offset":14217},"end":{"line":132,"column":348,"offset":14295}}},{"type":"text","value":" is another commonly used technique to remove excess, unused modules lying around your website.","position":{"start":{"line":132,"column":348,"offset":14295},"end":{"line":132,"column":443,"offset":14390}}}],"position":{"start":{"line":132,"column":1,"offset":13948},"end":{"line":132,"column":443,"offset":14390}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Hopefully this article has touched on some useful techniques you can use on your next site to help improve its performance. Happy coding!","position":{"start":{"line":134,"column":1,"offset":14392},"end":{"line":134,"column":138,"offset":14529}}}],"position":{"start":{"line":134,"column":1,"offset":14392},"end":{"line":134,"column":138,"offset":14529}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A big thank you to ","position":{"start":{"line":136,"column":1,"offset":14531},"end":{"line":136,"column":20,"offset":14550}}},{"type":"element","tagName":"a","properties":{"href":"undefined"},"children":[{"type":"text","value":"Christian Silver","position":{"start":{"line":136,"column":21,"offset":14551},"end":{"line":136,"column":37,"offset":14567}}}],"position":{"start":{"line":136,"column":20,"offset":14550},"end":{"line":136,"column":49,"offset":14579}}},{"type":"text","value":" and ","position":{"start":{"line":136,"column":49,"offset":14579},"end":{"line":136,"column":54,"offset":14584}}},{"type":"element","tagName":"a","properties":{"href":"undefined"},"children":[{"type":"text","value":"Charlie Crisp","position":{"start":{"line":136,"column":55,"offset":14585},"end":{"line":136,"column":68,"offset":14598}}}],"position":{"start":{"line":136,"column":54,"offset":14584},"end":{"line":136,"column":80,"offset":14610}}},{"type":"text","value":" for editing this post and providing extremely useful advice and extra content to make it even better.","position":{"start":{"line":136,"column":80,"offset":14610},"end":{"line":136,"column":182,"offset":14712}}}],"position":{"start":{"line":136,"column":1,"offset":14531},"end":{"line":136,"column":182,"offset":14712}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":137,"column":1,"offset":14713}}}},{"id":"transformer-remark-markdown-html-2f482fc4a3133ee994535735bbc9df16-gatsby-remark-imagesgatsby-remark-prismjs-","value":"<p><img src=\"https://res.cloudinary.com/patricoferris/image/upload/v1532781201/pf2018/blogposts/28-07-2018/website_optimisation_2.png\" alt=\"Optimising your Website\">\nInspired by a <a href=\"https://syntax.fm/\">Syntax</a> podcast, I got really interested in website optimisation. It can often be an overlooked aspect in web development with more focus on design and functionality, I realised my number one priority whenever I visited a website is load speed. My attention is a website’s number one goal, lose it and they lose all potential ad revenue or possibility to give me whatever information I was looking for. <a href=\"https://developers.google.com/web/fundamentals/performance/get-started/\">Many seem to agree. 53% of users abandon websites that take more than 3 seconds to load</a>. No amount of fancy graphics or parallax scrolling that appears five seconds after someone’s clicked will hide the slow loading times.</p>\n<p>The aim of this article is to give a broad overview of the concepts and ideas behind optimising your website, experienced developers are likely already using things like Webpack (a module bundler) among other tools to speed-up their sites.</p>\n<p>For testing load-times I will be using the <a href=\"https://chrome.google.com/webstore/detail/page-load-time/fploionmjgeclbkemipmkogoaohcdbig?hl=en\">Page Load Time </a>Chrome extension. There are a few ways to measure website loading time including: <a href=\"https://developers.google.com/web/tools/chrome-user-experience-report/\">first paint, first meaning paint, DOMContentLoaded</a> etc. For a more detailed look into what this timer measures, check out the Github repository below.\n<a href=\"https://github.com/alex-vv/chrome-load-timer\"><strong>alex-vv/chrome-load-timer</strong>\n<em>chrome-load-timer - Google Chrome extension to measure page load time and display it in the toolbar</em>github.com</a></p>\n<h3><strong>Use Minified Stylesheets and Scripts</strong></h3>\n<p>You would be amazed at how much performance can be gained by this simple trick. What is a minified document? When we write code it is never our job to make it optimised for the computer, instead our golden rule is to make it readable to humans. This improves readability, cuts down on debug time and makes it easier to maintain. However, to achieve this we often add extra spacing which costs us precious space. Minifying the code is trimming all this fat from what we’ve written to have code that produces the same result but is far more difficult to read and maintain. This is okay though, because a computer has no problem deciphering it. Take the following code for example.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Notice how, wherever possible, our line-breaks and spaces are gone. On top of that, the code in the for-loop is only one line so there’s no need for the curly braces which extends our code over three lines when it can be done in one. Does this make a difference?</p>\n<p>I tried it out on simple website that just had one script tag being loaded in for the graphics library <a href=\"https://p5js.org/\">p5.js</a>. Using the non-minified CDN link I got a load time of 0.25 seconds. Using the minified version I got a markedly improved load time of 0.08 seconds. Depending on what your website project is, there are a few ways to automatically minify code. If it is a <a href=\"https://guide.meteor.com/build-tool.html\">Meteor app</a> it will be done automatically, using <a href=\"https://webpack.js.org/guides/production/\">Webpack </a>will also allow you to do this. Otherwise there are some online tools like <a href=\"https://jscompress.com/\">JSCompress </a>or <a href=\"https://cssminifier.com/\">CSSMinifier </a>that you can upload your code to.</p>\n<h3>Design Versus Performance</h3>\n<p>Whilst design is undoubtedly a major aspect to a website’s overall success, both developers and designers must work together to compromise and make a mutually beneficial trade-off between design and performance. The classic example is fonts. Take the two screenshots of a simple website below.</p>\n<p><img src=\"https://res.cloudinary.com/patricoferris/image/upload/v1532780050/pf2018/blogposts/28-07-2018/Helvetica.png\" alt=\"The example website using Helvetica Font (commonly found on many computers) — check [this](https://css-tricks.com/snippets/css/system-font-stack/) link for common system fonts\">\n<em>The example website using Helvetica Font (commonly found on many computers) — check <a href=\"https://css-tricks.com/snippets/css/system-font-stack/\">this</a> link for common system fonts</em></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/5760/1*8ciuJNBdqMhlLSaOpNUXow.png\" alt=\"The example website using Roboto Font (designed by Google and linked from [Google Fonts](https://fonts.google.com/?selection.family=Roboto))\"><em>The example website using Roboto Font (designed by Google and linked from <a href=\"https://fonts.google.com/?selection.family=Roboto\">Google Fonts</a>)</em></p>\n<p>Before critiquing my questionable design skills take a moment to appreciate that these two fonts are very similar — yet the loading time for a website for the Roboto font was 0.22 seconds as compared with 0.17 for Helvetica. Whilst not that significant, using lots of custom fonts will slow down your website, although using Google Fonts’ API will help keep your website optimised. As an over-the-top example, linking 20 different fonts from the Google API increased the load time to 0.87 seconds.</p>\n<h3>Inlining your JavaScript and CSS</h3>\n<p>For each individual document or component of your website, when the parser reaches the script tag or link tag it sends and HTTP request for that document and if not stated differently, these will be blocking actions. What this means is your machine is parsing the HTML document getting the words to display in your browser but if it hits the script tag with the attribute src='js/main.js' for example, it will block the parsing and load in that file. This is where as a developer you need to be clever about where in the document you place things.</p>\n<p>Whilst it may not ultimately affect the loading time of your website, it can affect the order in which things are loaded. Again we’ll be using the un-minified p5.js library to simulate a large JavaScript file and load it in different places to see how it affects our user experience.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2780/1*h_3GogfkaahcXCO9a43CPA.gif\" alt=\"Refreshing website with the script tag inserted at the bottom of the body tag\"><em>Refreshing website with the script tag inserted at the bottom of the body tag</em></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2780/1*xLOq5r4erQAwb4Au_hB-Ww.gif\" alt=\"Refreshing website with the script tag inserted at the top of the body tag\"><em>Refreshing website with the script tag inserted at the top of the body tag</em></p>\n<p>Whilst the load times were similar for both cases — the user experience is far better by placing the script at the body tag allowing the HTML to be parsed before the JavaScript giving the user the website content immediately!</p>\n<p>In the same vein CSS can also be render-blocking especially because more often than not it is linked in the head tag of your HTML document before the body. But if we want our user to see the content in the quickest time we don’t want to be loading CSS for the footer of our document which the user won’t see until they’ve scrolled to the bottom. In fact, we don’t want to load any CSS in that the user can’t immediately see when the page first loads on their device.</p>\n<p>The CSS that you need is often called the <em>Critical CSS</em>. Finding it for yourself would be a headache. It will be different for different devices, meaning you would have to check manually for all possible devices. Lucky for us we have (if you’re using <a href=\"https://nodejs.org/en/\">Node.js</a>) <a href=\"https://github.com/addyosmani/critical\">Critical</a>. This helpful package does the CSS inlining for us and all we do is add some code to a Javascript file. Here’s a code snippet from the Github page.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> critical <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'critical'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncritical<span class=\"token punctuation\">.</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    base<span class=\"token punctuation\">:</span> <span class=\"token string\">'test/'</span><span class=\"token punctuation\">,</span>\n    src<span class=\"token punctuation\">:</span> <span class=\"token string\">'index.html'</span><span class=\"token punctuation\">,</span>\n    dest<span class=\"token punctuation\">:</span> <span class=\"token string\">'styles/main.css'</span><span class=\"token punctuation\">,</span>\n    dimensions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n        height<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n        width<span class=\"token punctuation\">:</span> <span class=\"token number\">500</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        height<span class=\"token punctuation\">:</span> <span class=\"token number\">900</span><span class=\"token punctuation\">,</span>\n        width<span class=\"token punctuation\">:</span> <span class=\"token number\">1200</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Using the generate function, we supply it with a JavaScript object with some values defined. base is where we’re going to save our src and dest (our project folder usually). What’s great is now we just supply an array of dimensions and the code will compute the critical CSS for each and inline that code into our head tag.</p>\n<h3>Async and Defer</h3>\n<p>Again, we come back to this idea of render-blocking and how best we should implement this for our website. When you have a plain script tag in your HTML it blocks the HTML from loading whilst the JavaScript loads <strong>and</strong> runs. Async and defer are simple attributes that you can add to your script tags that change the way your JavaScript will be loaded.</p>\n<p>Defer essentially “defers” execution of the script until after the HTML has been parsed. A major advantage of this is that you no longer need some $(document).ready() jQuery-style function to make sure the body was loaded before you could manipulate it, which could cut out some of the dependencies on libraries like jQuery which helps reduce load-time.</p>\n<p>Async is, unsurprisingly, the asynchronous loading of JavaScript files. What does this mean? Your HTML will continue to be parsed whilst the file is loaded and then whenever its ready the file will be executed. This helps improving user experience whilst viewing your website. Imagine for example you had a JavaScript file for doing some cool graphics. You want the words around this graphic to be parsed until your graphic is ready to be executed. As soon as it is ready, it is executed and we get a more seamless loading of our webpage without missing pieces.</p>\n<p>Check this <a href=\"http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html\">website</a> for a really intuitive, graphical representation of this.</p>\n<h3>Image Optimisation and Media Queries</h3>\n<p>The cornerstone of all website performance optimisation is the simple rule that, the less data you send to the client, the quicker and better your website will perform. With the plethora of devices on the market capable of viewing websites, there is a growing trend to optimise your website based on the device it is being viewed on.</p>\n<p>Media queries are a fairly new tool added to CSS3. With more and more content being consumed using mobile-devices there has been a shift in design thinking towards mobile first. Using media queries you can then add stylings for larger screen sizes.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/* Some CSS for screen sizes bigger than 600px but smaller than 992px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/*  Some CSS for screen sizes bigger than 992px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">orientation</span><span class=\"token punctuation\">:</span> landscape<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* Some CSS for landscape-oriented devices */</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>The @media tag starts a new CSS rule, whilst the only keyword stops older browsers that don’t support media queries from using it. The screen keyword applies the rules to screens rather than prints. After that you add the media-feature which supports the and , or and not keywords so you can get as specific as you want. When you’re loading your image you can write code like:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-small.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-big.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>This isn’t necessarily the best or optimal approach for image optimisation. Luckily we have other options. <a href=\"https://www.imgix.com/\">Imgix</a> and <a href=\"https://cloudinary.com/\">Cloudinary</a> are two ways you can help optimise your site for the right device. Imgix is a Content Delivery Network (CDN) for images with a lot of cool features. A CDN simply takes your files and spreads them across the globe so that someone in a different country doesn’t have to wait for your files on your server to make it all the way to them. This <a href=\"https://docs.imgix.com/tutorials/responsive-images-srcset-imgix\">tutorial</a> goes through how to use Imgix for different device pixel ratios. Cloudinary is a similar service, and their <a href=\"https://cloudinary.com/documentation/image_optimization\">tutorial </a>will take you through the importance of optimisation and how to achieve it will their incredible services. Below is a small example showing how easy it is to use Cloudinary straight in the HTML markup.</p>\n<iframe height='400' scrolling='no' title='Cloudinary Example' src='//codepen.io/patricoferris/embed/ejgVJN/?height=400&theme-id=0&default-tab=html,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/ejgVJN/'>Cloudinary Example</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>As a last point on image optimisation, the format you use can have a large impact on file size. Some files contain lots of metadata which you don’t want to be serving to your client — <a href=\"https://www.sno.phy.queensu.ca/~phil/exiftool/\">ExifTool</a> is a commonly used command-line application that can help you trim down those files sizes. On top of this, Scalable Vector Graphics (SVG) are a web-standard developed by W3C that offers XML-based vector graphics. This means they have infinite resolution unlike PNG or JPG files. It also makes them highly versatile, easily editable and can even be animated. At the end of the day SVGs are just code and so the file sizes tend to be small. For more reasons to use them, check out this <a href=\"https://watb.co.uk/5-reasons-you-should-be-using-svgs-over-pngs/\">article</a>.</p>\n<h3>Conclusion</h3>\n<p>We’ve only scratched the surface of what’s possible for website optimisation. There are many tools you can use to help you stream-line this process like <a href=\"https://webpack.js.org/\">Webpack</a> for bundling or static-site generators like <a href=\"https://www.gatsbyjs.org/\">Gatsby</a>. <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking\">Tree shaking</a> is another commonly used technique to remove excess, unused modules lying around your website.</p>\n<p>Hopefully this article has touched on some useful techniques you can use on your next site to help improve its performance. Happy coding!</p>\n<p>A big thank you to <a href=\"undefined\">Christian Silver</a> and <a href=\"undefined\">Charlie Crisp</a> for editing this post and providing extremely useful advice and extra content to make it even better.</p>"},{"id":"transformer-remark-markdown-ast-492ceae38cde832ebeed7c875ee46e42-gatsby-remark-imagesgatsby-remark-prismjs-","value":{"type":"root","children":[{"type":"yaml","value":"path: '/optimise-your-website'\ntitle: 'Optimising your Website'\nsubtitle: 'Tips and tricks to keep your website lean and fast'\ndate: '2018-07-28'","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":6,"column":4,"offset":153},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://res.cloudinary.com/patricoferris/image/upload/v1532781201/pf2018/blogposts/28-07-2018/website_optimisation_2.png","alt":"Optimising your Website","position":{"start":{"line":7,"column":1,"offset":154},"end":{"line":7,"column":149,"offset":302},"indent":[]}},{"type":"text","value":"\nInspired by a ","position":{"start":{"line":7,"column":149,"offset":302},"end":{"line":8,"column":15,"offset":317},"indent":[1]}},{"type":"link","title":null,"url":"https://syntax.fm/","children":[{"type":"text","value":"Syntax","position":{"start":{"line":8,"column":16,"offset":318},"end":{"line":8,"column":22,"offset":324},"indent":[]}}],"position":{"start":{"line":8,"column":15,"offset":317},"end":{"line":8,"column":43,"offset":345},"indent":[]}},{"type":"text","value":" podcast, I got really interested in website optimisation. It can often be an overlooked aspect in web development with more focus on design and functionality, I realised my number one priority whenever I visited a website is load speed. My attention is a website’s number one goal, lose it and they lose all potential ad revenue or possibility to give me whatever information I was looking for. ","position":{"start":{"line":8,"column":43,"offset":345},"end":{"line":8,"column":439,"offset":741},"indent":[]}},{"type":"link","title":null,"url":"https://developers.google.com/web/fundamentals/performance/get-started/","children":[{"type":"text","value":"Many seem to agree. 53% of users abandon websites that take more than 3 seconds to load","position":{"start":{"line":8,"column":440,"offset":742},"end":{"line":8,"column":527,"offset":829},"indent":[]}}],"position":{"start":{"line":8,"column":439,"offset":741},"end":{"line":8,"column":601,"offset":903},"indent":[]}},{"type":"text","value":". No amount of fancy graphics or parallax scrolling that appears five seconds after someone’s clicked will hide the slow loading times.","position":{"start":{"line":8,"column":601,"offset":903},"end":{"line":8,"column":736,"offset":1038},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":154},"end":{"line":8,"column":736,"offset":1038},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"The aim of this article is to give a broad overview of the concepts and ideas behind optimising your website, experienced developers are likely already using things like Webpack (a module bundler) among other tools to speed-up their sites.","position":{"start":{"line":10,"column":1,"offset":1040},"end":{"line":10,"column":240,"offset":1279},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":1040},"end":{"line":10,"column":240,"offset":1279},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For testing load-times I will be using the ","position":{"start":{"line":12,"column":1,"offset":1281},"end":{"line":12,"column":44,"offset":1324},"indent":[]}},{"type":"link","title":null,"url":"https://chrome.google.com/webstore/detail/page-load-time/fploionmjgeclbkemipmkogoaohcdbig?hl=en","children":[{"type":"text","value":"Page Load Time ","position":{"start":{"line":12,"column":45,"offset":1325},"end":{"line":12,"column":60,"offset":1340},"indent":[]}}],"position":{"start":{"line":12,"column":44,"offset":1324},"end":{"line":12,"column":158,"offset":1438},"indent":[]}},{"type":"text","value":"Chrome extension. There are a few ways to measure website loading time including: ","position":{"start":{"line":12,"column":158,"offset":1438},"end":{"line":12,"column":240,"offset":1520},"indent":[]}},{"type":"link","title":null,"url":"https://developers.google.com/web/tools/chrome-user-experience-report/","children":[{"type":"text","value":"first paint, first meaning paint, DOMContentLoaded","position":{"start":{"line":12,"column":241,"offset":1521},"end":{"line":12,"column":291,"offset":1571},"indent":[]}}],"position":{"start":{"line":12,"column":240,"offset":1520},"end":{"line":12,"column":364,"offset":1644},"indent":[]}},{"type":"text","value":" etc. For a more detailed look into what this timer measures, check out the Github repository below.\n","position":{"start":{"line":12,"column":364,"offset":1644},"end":{"line":13,"column":1,"offset":1745},"indent":[1]}},{"type":"link","title":null,"url":"https://github.com/alex-vv/chrome-load-timer","children":[{"type":"strong","children":[{"type":"text","value":"alex-vv/chrome-load-timer","position":{"start":{"line":13,"column":4,"offset":1748},"end":{"line":13,"column":29,"offset":1773},"indent":[]}}],"position":{"start":{"line":13,"column":2,"offset":1746},"end":{"line":13,"column":31,"offset":1775},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":13,"column":31,"offset":1775},"end":{"line":14,"column":1,"offset":1776},"indent":[1]}},{"type":"emphasis","children":[{"type":"text","value":"chrome-load-timer - Google Chrome extension to measure page load time and display it in the toolbar","position":{"start":{"line":14,"column":2,"offset":1777},"end":{"line":14,"column":101,"offset":1876},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":1776},"end":{"line":14,"column":102,"offset":1877},"indent":[]}},{"type":"text","value":"github.com","position":{"start":{"line":14,"column":102,"offset":1877},"end":{"line":14,"column":112,"offset":1887},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":1745},"end":{"line":14,"column":159,"offset":1934},"indent":[1]}}],"position":{"start":{"line":12,"column":1,"offset":1281},"end":{"line":14,"column":159,"offset":1934},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"strong","children":[{"type":"text","value":"Use Minified Stylesheets and Scripts","position":{"start":{"line":16,"column":7,"offset":1942},"end":{"line":16,"column":43,"offset":1978},"indent":[]}}],"position":{"start":{"line":16,"column":5,"offset":1940},"end":{"line":16,"column":45,"offset":1980},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":1936},"end":{"line":16,"column":45,"offset":1980},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You would be amazed at how much performance can be gained by this simple trick. What is a minified document? When we write code it is never our job to make it optimised for the computer, instead our golden rule is to make it readable to humans. This improves readability, cuts down on debug time and makes it easier to maintain. However, to achieve this we often add extra spacing which costs us precious space. Minifying the code is trimming all this fat from what we’ve written to have code that produces the same result but is far more difficult to read and maintain. This is okay though, because a computer has no problem deciphering it. Take the following code for example.","position":{"start":{"line":18,"column":1,"offset":1982},"end":{"line":18,"column":679,"offset":2660},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1982},"end":{"line":18,"column":679,"offset":2660},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","position":{"start":{"line":20,"column":1,"offset":2662},"end":{"line":29,"column":4,"offset":2921},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Notice how, wherever possible, our line-breaks and spaces are gone. On top of that, the code in the for-loop is only one line so there’s no need for the curly braces which extends our code over three lines when it can be done in one. Does this make a difference?","position":{"start":{"line":31,"column":1,"offset":2923},"end":{"line":31,"column":263,"offset":3185},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":2923},"end":{"line":31,"column":263,"offset":3185},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"I tried it out on simple website that just had one script tag being loaded in for the graphics library ","position":{"start":{"line":33,"column":1,"offset":3187},"end":{"line":33,"column":104,"offset":3290},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/","children":[{"type":"text","value":"p5.js","position":{"start":{"line":33,"column":105,"offset":3291},"end":{"line":33,"column":110,"offset":3296},"indent":[]}}],"position":{"start":{"line":33,"column":104,"offset":3290},"end":{"line":33,"column":130,"offset":3316},"indent":[]}},{"type":"text","value":". Using the non-minified CDN link I got a load time of 0.25 seconds. Using the minified version I got a markedly improved load time of 0.08 seconds. Depending on what your website project is, there are a few ways to automatically minify code. If it is a ","position":{"start":{"line":33,"column":130,"offset":3316},"end":{"line":33,"column":384,"offset":3570},"indent":[]}},{"type":"link","title":null,"url":"https://guide.meteor.com/build-tool.html","children":[{"type":"text","value":"Meteor app","position":{"start":{"line":33,"column":385,"offset":3571},"end":{"line":33,"column":395,"offset":3581},"indent":[]}}],"position":{"start":{"line":33,"column":384,"offset":3570},"end":{"line":33,"column":438,"offset":3624},"indent":[]}},{"type":"text","value":" it will be done automatically, using ","position":{"start":{"line":33,"column":438,"offset":3624},"end":{"line":33,"column":476,"offset":3662},"indent":[]}},{"type":"link","title":null,"url":"https://webpack.js.org/guides/production/","children":[{"type":"text","value":"Webpack ","position":{"start":{"line":33,"column":477,"offset":3663},"end":{"line":33,"column":485,"offset":3671},"indent":[]}}],"position":{"start":{"line":33,"column":476,"offset":3662},"end":{"line":33,"column":529,"offset":3715},"indent":[]}},{"type":"text","value":"will also allow you to do this. Otherwise there are some online tools like ","position":{"start":{"line":33,"column":529,"offset":3715},"end":{"line":33,"column":604,"offset":3790},"indent":[]}},{"type":"link","title":null,"url":"https://jscompress.com/","children":[{"type":"text","value":"JSCompress ","position":{"start":{"line":33,"column":605,"offset":3791},"end":{"line":33,"column":616,"offset":3802},"indent":[]}}],"position":{"start":{"line":33,"column":604,"offset":3790},"end":{"line":33,"column":642,"offset":3828},"indent":[]}},{"type":"text","value":"or ","position":{"start":{"line":33,"column":642,"offset":3828},"end":{"line":33,"column":645,"offset":3831},"indent":[]}},{"type":"link","title":null,"url":"https://cssminifier.com/","children":[{"type":"text","value":"CSSMinifier ","position":{"start":{"line":33,"column":646,"offset":3832},"end":{"line":33,"column":658,"offset":3844},"indent":[]}}],"position":{"start":{"line":33,"column":645,"offset":3831},"end":{"line":33,"column":685,"offset":3871},"indent":[]}},{"type":"text","value":"that you can upload your code to.","position":{"start":{"line":33,"column":685,"offset":3871},"end":{"line":33,"column":718,"offset":3904},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":3187},"end":{"line":33,"column":718,"offset":3904},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Design Versus Performance","position":{"start":{"line":35,"column":5,"offset":3910},"end":{"line":35,"column":30,"offset":3935},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":3906},"end":{"line":35,"column":30,"offset":3935},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Whilst design is undoubtedly a major aspect to a website’s overall success, both developers and designers must work together to compromise and make a mutually beneficial trade-off between design and performance. The classic example is fonts. Take the two screenshots of a simple website below.","position":{"start":{"line":37,"column":1,"offset":3937},"end":{"line":37,"column":294,"offset":4230},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":3937},"end":{"line":37,"column":294,"offset":4230},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://res.cloudinary.com/patricoferris/image/upload/v1532780050/pf2018/blogposts/28-07-2018/Helvetica.png","alt":"The example website using Helvetica Font (commonly found on many computers) — check [this](https://css-tricks.com/snippets/css/system-font-stack/) link for common system fonts","position":{"start":{"line":39,"column":1,"offset":4232},"end":{"line":39,"column":288,"offset":4519},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":39,"column":288,"offset":4519},"end":{"line":40,"column":1,"offset":4520},"indent":[1]}},{"type":"emphasis","children":[{"type":"text","value":"The example website using Helvetica Font (commonly found on many computers) — check ","position":{"start":{"line":40,"column":2,"offset":4521},"end":{"line":40,"column":86,"offset":4605},"indent":[]}},{"type":"link","title":null,"url":"https://css-tricks.com/snippets/css/system-font-stack/","children":[{"type":"text","value":"this","position":{"start":{"line":40,"column":87,"offset":4606},"end":{"line":40,"column":91,"offset":4610},"indent":[]}}],"position":{"start":{"line":40,"column":86,"offset":4605},"end":{"line":40,"column":148,"offset":4667},"indent":[]}},{"type":"text","value":" link for common system fonts","position":{"start":{"line":40,"column":148,"offset":4667},"end":{"line":40,"column":177,"offset":4696},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":4520},"end":{"line":40,"column":178,"offset":4697},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":4232},"end":{"line":40,"column":178,"offset":4697},"indent":[1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://cdn-images-1.medium.com/max/5760/1*8ciuJNBdqMhlLSaOpNUXow.png","alt":"The example website using Roboto Font (designed by Google and linked from [Google Fonts](https://fonts.google.com/?selection.family=Roboto))","position":{"start":{"line":42,"column":1,"offset":4699},"end":{"line":42,"column":215,"offset":4913},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"The example website using Roboto Font (designed by Google and linked from ","position":{"start":{"line":42,"column":216,"offset":4914},"end":{"line":42,"column":290,"offset":4988},"indent":[]}},{"type":"link","title":null,"url":"https://fonts.google.com/?selection.family=Roboto","children":[{"type":"text","value":"Google Fonts","position":{"start":{"line":42,"column":291,"offset":4989},"end":{"line":42,"column":303,"offset":5001},"indent":[]}}],"position":{"start":{"line":42,"column":290,"offset":4988},"end":{"line":42,"column":355,"offset":5053},"indent":[]}},{"type":"text","value":")","position":{"start":{"line":42,"column":355,"offset":5053},"end":{"line":42,"column":356,"offset":5054},"indent":[]}}],"position":{"start":{"line":42,"column":215,"offset":4913},"end":{"line":42,"column":357,"offset":5055},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":4699},"end":{"line":42,"column":357,"offset":5055},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Before critiquing my questionable design skills take a moment to appreciate that these two fonts are very similar — yet the loading time for a website for the Roboto font was 0.22 seconds as compared with 0.17 for Helvetica. Whilst not that significant, using lots of custom fonts will slow down your website, although using Google Fonts’ API will help keep your website optimised. As an over-the-top example, linking 20 different fonts from the Google API increased the load time to 0.87 seconds.","position":{"start":{"line":44,"column":1,"offset":5057},"end":{"line":44,"column":498,"offset":5554},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":5057},"end":{"line":44,"column":498,"offset":5554},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Inlining your JavaScript and CSS","position":{"start":{"line":46,"column":5,"offset":5560},"end":{"line":46,"column":37,"offset":5592},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":5556},"end":{"line":46,"column":37,"offset":5592},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For each individual document or component of your website, when the parser reaches the script tag or link tag it sends and HTTP request for that document and if not stated differently, these will be blocking actions. What this means is your machine is parsing the HTML document getting the words to display in your browser but if it hits the script tag with the attribute src='js/main.js' for example, it will block the parsing and load in that file. This is where as a developer you need to be clever about where in the document you place things.","position":{"start":{"line":48,"column":1,"offset":5594},"end":{"line":48,"column":548,"offset":6141},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":5594},"end":{"line":48,"column":548,"offset":6141},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Whilst it may not ultimately affect the loading time of your website, it can affect the order in which things are loaded. Again we’ll be using the un-minified p5.js library to simulate a large JavaScript file and load it in different places to see how it affects our user experience.","position":{"start":{"line":50,"column":1,"offset":6143},"end":{"line":50,"column":284,"offset":6426},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":6143},"end":{"line":50,"column":284,"offset":6426},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://cdn-images-1.medium.com/max/2780/1*h_3GogfkaahcXCO9a43CPA.gif","alt":"Refreshing website with the script tag inserted at the bottom of the body tag","position":{"start":{"line":52,"column":1,"offset":6428},"end":{"line":52,"column":152,"offset":6579},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Refreshing website with the script tag inserted at the bottom of the body tag","position":{"start":{"line":52,"column":153,"offset":6580},"end":{"line":52,"column":230,"offset":6657},"indent":[]}}],"position":{"start":{"line":52,"column":152,"offset":6579},"end":{"line":52,"column":231,"offset":6658},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":6428},"end":{"line":52,"column":231,"offset":6658},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://cdn-images-1.medium.com/max/2780/1*xLOq5r4erQAwb4Au_hB-Ww.gif","alt":"Refreshing website with the script tag inserted at the top of the body tag","position":{"start":{"line":54,"column":1,"offset":6660},"end":{"line":54,"column":149,"offset":6808},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Refreshing website with the script tag inserted at the top of the body tag","position":{"start":{"line":54,"column":150,"offset":6809},"end":{"line":54,"column":224,"offset":6883},"indent":[]}}],"position":{"start":{"line":54,"column":149,"offset":6808},"end":{"line":54,"column":225,"offset":6884},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":6660},"end":{"line":54,"column":225,"offset":6884},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Whilst the load times were similar for both cases — the user experience is far better by placing the script at the body tag allowing the HTML to be parsed before the JavaScript giving the user the website content immediately!","position":{"start":{"line":56,"column":1,"offset":6886},"end":{"line":56,"column":226,"offset":7111},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":6886},"end":{"line":56,"column":226,"offset":7111},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In the same vein CSS can also be render-blocking especially because more often than not it is linked in the head tag of your HTML document before the body. But if we want our user to see the content in the quickest time we don’t want to be loading CSS for the footer of our document which the user won’t see until they’ve scrolled to the bottom. In fact, we don’t want to load any CSS in that the user can’t immediately see when the page first loads on their device.","position":{"start":{"line":58,"column":1,"offset":7113},"end":{"line":58,"column":467,"offset":7579},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":7113},"end":{"line":58,"column":467,"offset":7579},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The CSS that you need is often called the ","position":{"start":{"line":60,"column":1,"offset":7581},"end":{"line":60,"column":43,"offset":7623},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Critical CSS","position":{"start":{"line":60,"column":44,"offset":7624},"end":{"line":60,"column":56,"offset":7636},"indent":[]}}],"position":{"start":{"line":60,"column":43,"offset":7623},"end":{"line":60,"column":57,"offset":7637},"indent":[]}},{"type":"text","value":". Finding it for yourself would be a headache. It will be different for different devices, meaning you would have to check manually for all possible devices. Lucky for us we have (if you’re using ","position":{"start":{"line":60,"column":57,"offset":7637},"end":{"line":60,"column":253,"offset":7833},"indent":[]}},{"type":"link","title":null,"url":"https://nodejs.org/en/","children":[{"type":"text","value":"Node.js","position":{"start":{"line":60,"column":254,"offset":7834},"end":{"line":60,"column":261,"offset":7841},"indent":[]}}],"position":{"start":{"line":60,"column":253,"offset":7833},"end":{"line":60,"column":286,"offset":7866},"indent":[]}},{"type":"text","value":") ","position":{"start":{"line":60,"column":286,"offset":7866},"end":{"line":60,"column":288,"offset":7868},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/addyosmani/critical","children":[{"type":"text","value":"Critical","position":{"start":{"line":60,"column":289,"offset":7869},"end":{"line":60,"column":297,"offset":7877},"indent":[]}}],"position":{"start":{"line":60,"column":288,"offset":7868},"end":{"line":60,"column":338,"offset":7918},"indent":[]}},{"type":"text","value":". This helpful package does the CSS inlining for us and all we do is add some code to a Javascript file. Here’s a code snippet from the Github page.","position":{"start":{"line":60,"column":338,"offset":7918},"end":{"line":60,"column":486,"offset":8066},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":7581},"end":{"line":60,"column":486,"offset":8066},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> critical <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'critical'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncritical<span class=\"token punctuation\">.</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    base<span class=\"token punctuation\">:</span> <span class=\"token string\">'test/'</span><span class=\"token punctuation\">,</span>\n    src<span class=\"token punctuation\">:</span> <span class=\"token string\">'index.html'</span><span class=\"token punctuation\">,</span>\n    dest<span class=\"token punctuation\">:</span> <span class=\"token string\">'styles/main.css'</span><span class=\"token punctuation\">,</span>\n    dimensions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n        height<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n        width<span class=\"token punctuation\">:</span> <span class=\"token number\">500</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        height<span class=\"token punctuation\">:</span> <span class=\"token number\">900</span><span class=\"token punctuation\">,</span>\n        width<span class=\"token punctuation\">:</span> <span class=\"token number\">1200</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","position":{"start":{"line":62,"column":1,"offset":8068},"end":{"line":77,"column":4,"offset":8333},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Using the generate function, we supply it with a JavaScript object with some values defined. base is where we’re going to save our src and dest (our project folder usually). What’s great is now we just supply an array of dimensions and the code will compute the critical CSS for each and inline that code into our head tag.","position":{"start":{"line":79,"column":1,"offset":8335},"end":{"line":79,"column":324,"offset":8658},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":8335},"end":{"line":79,"column":324,"offset":8658},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Async and Defer","position":{"start":{"line":81,"column":5,"offset":8664},"end":{"line":81,"column":20,"offset":8679},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":8660},"end":{"line":81,"column":20,"offset":8679},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Again, we come back to this idea of render-blocking and how best we should implement this for our website. When you have a plain script tag in your HTML it blocks the HTML from loading whilst the JavaScript loads ","position":{"start":{"line":83,"column":1,"offset":8681},"end":{"line":83,"column":214,"offset":8894},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"and","position":{"start":{"line":83,"column":216,"offset":8896},"end":{"line":83,"column":219,"offset":8899},"indent":[]}}],"position":{"start":{"line":83,"column":214,"offset":8894},"end":{"line":83,"column":221,"offset":8901},"indent":[]}},{"type":"text","value":" runs. Async and defer are simple attributes that you can add to your script tags that change the way your JavaScript will be loaded.","position":{"start":{"line":83,"column":221,"offset":8901},"end":{"line":83,"column":354,"offset":9034},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":8681},"end":{"line":83,"column":354,"offset":9034},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Defer essentially “defers” execution of the script until after the HTML has been parsed. A major advantage of this is that you no longer need some $(document).ready() jQuery-style function to make sure the body was loaded before you could manipulate it, which could cut out some of the dependencies on libraries like jQuery which helps reduce load-time.","position":{"start":{"line":85,"column":1,"offset":9036},"end":{"line":85,"column":354,"offset":9389},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":9036},"end":{"line":85,"column":354,"offset":9389},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Async is, unsurprisingly, the asynchronous loading of JavaScript files. What does this mean? Your HTML will continue to be parsed whilst the file is loaded and then whenever its ready the file will be executed. This helps improving user experience whilst viewing your website. Imagine for example you had a JavaScript file for doing some cool graphics. You want the words around this graphic to be parsed until your graphic is ready to be executed. As soon as it is ready, it is executed and we get a more seamless loading of our webpage without missing pieces.","position":{"start":{"line":87,"column":1,"offset":9391},"end":{"line":87,"column":562,"offset":9952},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":9391},"end":{"line":87,"column":562,"offset":9952},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Check this ","position":{"start":{"line":89,"column":1,"offset":9954},"end":{"line":89,"column":12,"offset":9965},"indent":[]}},{"type":"link","title":null,"url":"http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html","children":[{"type":"text","value":"website","position":{"start":{"line":89,"column":13,"offset":9966},"end":{"line":89,"column":20,"offset":9973},"indent":[]}}],"position":{"start":{"line":89,"column":12,"offset":9965},"end":{"line":89,"column":94,"offset":10047},"indent":[]}},{"type":"text","value":" for a really intuitive, graphical representation of this.","position":{"start":{"line":89,"column":94,"offset":10047},"end":{"line":89,"column":152,"offset":10105},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":9954},"end":{"line":89,"column":152,"offset":10105},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Image Optimisation and Media Queries","position":{"start":{"line":91,"column":5,"offset":10111},"end":{"line":91,"column":41,"offset":10147},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":10107},"end":{"line":91,"column":41,"offset":10147},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The cornerstone of all website performance optimisation is the simple rule that, the less data you send to the client, the quicker and better your website will perform. With the plethora of devices on the market capable of viewing websites, there is a growing trend to optimise your website based on the device it is being viewed on.","position":{"start":{"line":93,"column":1,"offset":10149},"end":{"line":93,"column":334,"offset":10482},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":10149},"end":{"line":93,"column":334,"offset":10482},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Media queries are a fairly new tool added to CSS3. With more and more content being consumed using mobile-devices there has been a shift in design thinking towards mobile first. Using media queries you can then add stylings for larger screen sizes.","position":{"start":{"line":95,"column":1,"offset":10484},"end":{"line":95,"column":249,"offset":10732},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":10484},"end":{"line":95,"column":249,"offset":10732},"indent":[]}},{"type":"html","lang":"css","value":"<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/* Some CSS for screen sizes bigger than 600px but smaller than 992px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/*  Some CSS for screen sizes bigger than 992px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">orientation</span><span class=\"token punctuation\">:</span> landscape<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* Some CSS for landscape-oriented devices */</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":97,"column":1,"offset":10734},"end":{"line":109,"column":4,"offset":11064},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The @media tag starts a new CSS rule, whilst the only keyword stops older browsers that don’t support media queries from using it. The screen keyword applies the rules to screens rather than prints. After that you add the media-feature which supports the and , or and not keywords so you can get as specific as you want. When you’re loading your image you can write code like:","position":{"start":{"line":111,"column":1,"offset":11066},"end":{"line":111,"column":377,"offset":11442},"indent":[]}}],"position":{"start":{"line":111,"column":1,"offset":11066},"end":{"line":111,"column":377,"offset":11442},"indent":[]}},{"type":"html","lang":"css","value":"<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-small.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-big.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":113,"column":1,"offset":11444},"end":{"line":121,"column":4,"offset":11663},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This isn’t necessarily the best or optimal approach for image optimisation. Luckily we have other options. ","position":{"start":{"line":123,"column":1,"offset":11665},"end":{"line":123,"column":108,"offset":11772},"indent":[]}},{"type":"link","title":null,"url":"https://www.imgix.com/","children":[{"type":"text","value":"Imgix","position":{"start":{"line":123,"column":109,"offset":11773},"end":{"line":123,"column":114,"offset":11778},"indent":[]}}],"position":{"start":{"line":123,"column":108,"offset":11772},"end":{"line":123,"column":139,"offset":11803},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":123,"column":139,"offset":11803},"end":{"line":123,"column":144,"offset":11808},"indent":[]}},{"type":"link","title":null,"url":"https://cloudinary.com/","children":[{"type":"text","value":"Cloudinary","position":{"start":{"line":123,"column":145,"offset":11809},"end":{"line":123,"column":155,"offset":11819},"indent":[]}}],"position":{"start":{"line":123,"column":144,"offset":11808},"end":{"line":123,"column":181,"offset":11845},"indent":[]}},{"type":"text","value":" are two ways you can help optimise your site for the right device. Imgix is a Content Delivery Network (CDN) for images with a lot of cool features. A CDN simply takes your files and spreads them across the globe so that someone in a different country doesn’t have to wait for your files on your server to make it all the way to them. This ","position":{"start":{"line":123,"column":181,"offset":11845},"end":{"line":123,"column":522,"offset":12186},"indent":[]}},{"type":"link","title":null,"url":"https://docs.imgix.com/tutorials/responsive-images-srcset-imgix","children":[{"type":"text","value":"tutorial","position":{"start":{"line":123,"column":523,"offset":12187},"end":{"line":123,"column":531,"offset":12195},"indent":[]}}],"position":{"start":{"line":123,"column":522,"offset":12186},"end":{"line":123,"column":597,"offset":12261},"indent":[]}},{"type":"text","value":" goes through how to use Imgix for different device pixel ratios. Cloudinary is a similar service, and their ","position":{"start":{"line":123,"column":597,"offset":12261},"end":{"line":123,"column":706,"offset":12370},"indent":[]}},{"type":"link","title":null,"url":"https://cloudinary.com/documentation/image_optimization","children":[{"type":"text","value":"tutorial ","position":{"start":{"line":123,"column":707,"offset":12371},"end":{"line":123,"column":716,"offset":12380},"indent":[]}}],"position":{"start":{"line":123,"column":706,"offset":12370},"end":{"line":123,"column":774,"offset":12438},"indent":[]}},{"type":"text","value":"will take you through the importance of optimisation and how to achieve it will their incredible services. Below is a small example showing how easy it is to use Cloudinary straight in the HTML markup.","position":{"start":{"line":123,"column":774,"offset":12438},"end":{"line":123,"column":975,"offset":12639},"indent":[]}}],"position":{"start":{"line":123,"column":1,"offset":11665},"end":{"line":123,"column":975,"offset":12639},"indent":[]}},{"type":"html","value":"<iframe height='400' scrolling='no' title='Cloudinary Example' src='//codepen.io/patricoferris/embed/ejgVJN/?height=400&theme-id=0&default-tab=html,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/ejgVJN/'>Cloudinary Example</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":125,"column":1,"offset":12641},"end":{"line":126,"column":10,"offset":13125},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"As a last point on image optimisation, the format you use can have a large impact on file size. Some files contain lots of metadata which you don’t want to be serving to your client — ","position":{"start":{"line":128,"column":1,"offset":13127},"end":{"line":128,"column":185,"offset":13311},"indent":[]}},{"type":"link","title":null,"url":"https://www.sno.phy.queensu.ca/~phil/exiftool/","children":[{"type":"text","value":"ExifTool","position":{"start":{"line":128,"column":186,"offset":13312},"end":{"line":128,"column":194,"offset":13320},"indent":[]}}],"position":{"start":{"line":128,"column":185,"offset":13311},"end":{"line":128,"column":243,"offset":13369},"indent":[]}},{"type":"text","value":" is a commonly used command-line application that can help you trim down those files sizes. On top of this, Scalable Vector Graphics (SVG) are a web-standard developed by W3C that offers XML-based vector graphics. This means they have infinite resolution unlike PNG or JPG files. It also makes them highly versatile, easily editable and can even be animated. At the end of the day SVGs are just code and so the file sizes tend to be small. For more reasons to use them, check out this ","position":{"start":{"line":128,"column":243,"offset":13369},"end":{"line":128,"column":728,"offset":13854},"indent":[]}},{"type":"link","title":null,"url":"https://watb.co.uk/5-reasons-you-should-be-using-svgs-over-pngs/","children":[{"type":"text","value":"article","position":{"start":{"line":128,"column":729,"offset":13855},"end":{"line":128,"column":736,"offset":13862},"indent":[]}}],"position":{"start":{"line":128,"column":728,"offset":13854},"end":{"line":128,"column":803,"offset":13929},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":128,"column":803,"offset":13929},"end":{"line":128,"column":804,"offset":13930},"indent":[]}}],"position":{"start":{"line":128,"column":1,"offset":13127},"end":{"line":128,"column":804,"offset":13930},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":130,"column":5,"offset":13936},"end":{"line":130,"column":15,"offset":13946},"indent":[]}}],"position":{"start":{"line":130,"column":1,"offset":13932},"end":{"line":130,"column":15,"offset":13946},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We’ve only scratched the surface of what’s possible for website optimisation. There are many tools you can use to help you stream-line this process like ","position":{"start":{"line":132,"column":1,"offset":13948},"end":{"line":132,"column":154,"offset":14101},"indent":[]}},{"type":"link","title":null,"url":"https://webpack.js.org/","children":[{"type":"text","value":"Webpack","position":{"start":{"line":132,"column":155,"offset":14102},"end":{"line":132,"column":162,"offset":14109},"indent":[]}}],"position":{"start":{"line":132,"column":154,"offset":14101},"end":{"line":132,"column":188,"offset":14135},"indent":[]}},{"type":"text","value":" for bundling or static-site generators like ","position":{"start":{"line":132,"column":188,"offset":14135},"end":{"line":132,"column":233,"offset":14180},"indent":[]}},{"type":"link","title":null,"url":"https://www.gatsbyjs.org/","children":[{"type":"text","value":"Gatsby","position":{"start":{"line":132,"column":234,"offset":14181},"end":{"line":132,"column":240,"offset":14187},"indent":[]}}],"position":{"start":{"line":132,"column":233,"offset":14180},"end":{"line":132,"column":268,"offset":14215},"indent":[]}},{"type":"text","value":". ","position":{"start":{"line":132,"column":268,"offset":14215},"end":{"line":132,"column":270,"offset":14217},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking","children":[{"type":"text","value":"Tree shaking","position":{"start":{"line":132,"column":271,"offset":14218},"end":{"line":132,"column":283,"offset":14230},"indent":[]}}],"position":{"start":{"line":132,"column":270,"offset":14217},"end":{"line":132,"column":348,"offset":14295},"indent":[]}},{"type":"text","value":" is another commonly used technique to remove excess, unused modules lying around your website.","position":{"start":{"line":132,"column":348,"offset":14295},"end":{"line":132,"column":443,"offset":14390},"indent":[]}}],"position":{"start":{"line":132,"column":1,"offset":13948},"end":{"line":132,"column":443,"offset":14390},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Hopefully this article has touched on some useful techniques you can use on your next site to help improve its performance. Happy coding!","position":{"start":{"line":134,"column":1,"offset":14392},"end":{"line":134,"column":138,"offset":14529},"indent":[]}}],"position":{"start":{"line":134,"column":1,"offset":14392},"end":{"line":134,"column":138,"offset":14529},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A big thank you to ","position":{"start":{"line":136,"column":1,"offset":14531},"end":{"line":136,"column":20,"offset":14550},"indent":[]}},{"type":"link","title":null,"url":"https://medium.com/@pinpickle","children":[{"type":"text","value":"Christian Silver","position":{"start":{"line":136,"column":21,"offset":14551},"end":{"line":136,"column":37,"offset":14567},"indent":[]}}],"position":{"start":{"line":136,"column":20,"offset":14550},"end":{"line":136,"column":69,"offset":14599},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":136,"column":69,"offset":14599},"end":{"line":136,"column":74,"offset":14604},"indent":[]}},{"type":"link","title":null,"url":"https://medium.com/@charliecrisp249","children":[{"type":"text","value":"Charlie Crisp","position":{"start":{"line":136,"column":75,"offset":14605},"end":{"line":136,"column":88,"offset":14618},"indent":[]}}],"position":{"start":{"line":136,"column":74,"offset":14604},"end":{"line":136,"column":126,"offset":14656},"indent":[]}},{"type":"text","value":" for editing this post and providing extremely useful advice and extra content to make it even better.","position":{"start":{"line":136,"column":126,"offset":14656},"end":{"line":136,"column":228,"offset":14758},"indent":[]}}],"position":{"start":{"line":136,"column":1,"offset":14531},"end":{"line":136,"column":228,"offset":14758},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":137,"column":1,"offset":14759}}}},{"id":"transformer-remark-markdown-html-ast-492ceae38cde832ebeed7c875ee46e42-gatsby-remark-imagesgatsby-remark-prismjs-","value":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/patricoferris/image/upload/v1532781201/pf2018/blogposts/28-07-2018/website_optimisation_2.png","alt":"Optimising your Website"},"children":[],"position":{"start":{"line":7,"column":1,"offset":154},"end":{"line":7,"column":149,"offset":302}}},{"type":"text","value":"\nInspired by a ","position":{"start":{"line":7,"column":149,"offset":302},"end":{"line":8,"column":15,"offset":317}}},{"type":"element","tagName":"a","properties":{"href":"https://syntax.fm/"},"children":[{"type":"text","value":"Syntax","position":{"start":{"line":8,"column":16,"offset":318},"end":{"line":8,"column":22,"offset":324}}}],"position":{"start":{"line":8,"column":15,"offset":317},"end":{"line":8,"column":43,"offset":345}}},{"type":"text","value":" podcast, I got really interested in website optimisation. It can often be an overlooked aspect in web development with more focus on design and functionality, I realised my number one priority whenever I visited a website is load speed. My attention is a website’s number one goal, lose it and they lose all potential ad revenue or possibility to give me whatever information I was looking for. ","position":{"start":{"line":8,"column":43,"offset":345},"end":{"line":8,"column":439,"offset":741}}},{"type":"element","tagName":"a","properties":{"href":"https://developers.google.com/web/fundamentals/performance/get-started/"},"children":[{"type":"text","value":"Many seem to agree. 53% of users abandon websites that take more than 3 seconds to load","position":{"start":{"line":8,"column":440,"offset":742},"end":{"line":8,"column":527,"offset":829}}}],"position":{"start":{"line":8,"column":439,"offset":741},"end":{"line":8,"column":601,"offset":903}}},{"type":"text","value":". No amount of fancy graphics or parallax scrolling that appears five seconds after someone’s clicked will hide the slow loading times.","position":{"start":{"line":8,"column":601,"offset":903},"end":{"line":8,"column":736,"offset":1038}}}],"position":{"start":{"line":7,"column":1,"offset":154},"end":{"line":8,"column":736,"offset":1038}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The aim of this article is to give a broad overview of the concepts and ideas behind optimising your website, experienced developers are likely already using things like Webpack (a module bundler) among other tools to speed-up their sites.","position":{"start":{"line":10,"column":1,"offset":1040},"end":{"line":10,"column":240,"offset":1279}}}],"position":{"start":{"line":10,"column":1,"offset":1040},"end":{"line":10,"column":240,"offset":1279}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For testing load-times I will be using the ","position":{"start":{"line":12,"column":1,"offset":1281},"end":{"line":12,"column":44,"offset":1324}}},{"type":"element","tagName":"a","properties":{"href":"https://chrome.google.com/webstore/detail/page-load-time/fploionmjgeclbkemipmkogoaohcdbig?hl=en"},"children":[{"type":"text","value":"Page Load Time ","position":{"start":{"line":12,"column":45,"offset":1325},"end":{"line":12,"column":60,"offset":1340}}}],"position":{"start":{"line":12,"column":44,"offset":1324},"end":{"line":12,"column":158,"offset":1438}}},{"type":"text","value":"Chrome extension. There are a few ways to measure website loading time including: ","position":{"start":{"line":12,"column":158,"offset":1438},"end":{"line":12,"column":240,"offset":1520}}},{"type":"element","tagName":"a","properties":{"href":"https://developers.google.com/web/tools/chrome-user-experience-report/"},"children":[{"type":"text","value":"first paint, first meaning paint, DOMContentLoaded","position":{"start":{"line":12,"column":241,"offset":1521},"end":{"line":12,"column":291,"offset":1571}}}],"position":{"start":{"line":12,"column":240,"offset":1520},"end":{"line":12,"column":364,"offset":1644}}},{"type":"text","value":" etc. For a more detailed look into what this timer measures, check out the Github repository below.\n","position":{"start":{"line":12,"column":364,"offset":1644},"end":{"line":13,"column":1,"offset":1745}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/alex-vv/chrome-load-timer"},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"alex-vv/chrome-load-timer","position":{"start":{"line":13,"column":4,"offset":1748},"end":{"line":13,"column":29,"offset":1773}}}],"position":{"start":{"line":13,"column":2,"offset":1746},"end":{"line":13,"column":31,"offset":1775}}},{"type":"text","value":"\n","position":{"start":{"line":13,"column":31,"offset":1775},"end":{"line":14,"column":1,"offset":1776}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"chrome-load-timer - Google Chrome extension to measure page load time and display it in the toolbar","position":{"start":{"line":14,"column":2,"offset":1777},"end":{"line":14,"column":101,"offset":1876}}}],"position":{"start":{"line":14,"column":1,"offset":1776},"end":{"line":14,"column":102,"offset":1877}}},{"type":"text","value":"github.com","position":{"start":{"line":14,"column":102,"offset":1877},"end":{"line":14,"column":112,"offset":1887}}}],"position":{"start":{"line":13,"column":1,"offset":1745},"end":{"line":14,"column":159,"offset":1934}}}],"position":{"start":{"line":12,"column":1,"offset":1281},"end":{"line":14,"column":159,"offset":1934}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Use Minified Stylesheets and Scripts","position":{"start":{"line":16,"column":7,"offset":1942},"end":{"line":16,"column":43,"offset":1978}}}],"position":{"start":{"line":16,"column":5,"offset":1940},"end":{"line":16,"column":45,"offset":1980}}}],"position":{"start":{"line":16,"column":1,"offset":1936},"end":{"line":16,"column":45,"offset":1980}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You would be amazed at how much performance can be gained by this simple trick. What is a minified document? When we write code it is never our job to make it optimised for the computer, instead our golden rule is to make it readable to humans. This improves readability, cuts down on debug time and makes it easier to maintain. However, to achieve this we often add extra spacing which costs us precious space. Minifying the code is trimming all this fat from what we’ve written to have code that produces the same result but is far more difficult to read and maintain. This is okay though, because a computer has no problem deciphering it. Take the following code for example.","position":{"start":{"line":18,"column":1,"offset":1982},"end":{"line":18,"column":679,"offset":2660}}}],"position":{"start":{"line":18,"column":1,"offset":1982},"end":{"line":18,"column":679,"offset":2660}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","position":{"start":{"line":20,"column":1,"offset":2662},"end":{"line":29,"column":4,"offset":2921}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Notice how, wherever possible, our line-breaks and spaces are gone. On top of that, the code in the for-loop is only one line so there’s no need for the curly braces which extends our code over three lines when it can be done in one. Does this make a difference?","position":{"start":{"line":31,"column":1,"offset":2923},"end":{"line":31,"column":263,"offset":3185}}}],"position":{"start":{"line":31,"column":1,"offset":2923},"end":{"line":31,"column":263,"offset":3185}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I tried it out on simple website that just had one script tag being loaded in for the graphics library ","position":{"start":{"line":33,"column":1,"offset":3187},"end":{"line":33,"column":104,"offset":3290}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/"},"children":[{"type":"text","value":"p5.js","position":{"start":{"line":33,"column":105,"offset":3291},"end":{"line":33,"column":110,"offset":3296}}}],"position":{"start":{"line":33,"column":104,"offset":3290},"end":{"line":33,"column":130,"offset":3316}}},{"type":"text","value":". Using the non-minified CDN link I got a load time of 0.25 seconds. Using the minified version I got a markedly improved load time of 0.08 seconds. Depending on what your website project is, there are a few ways to automatically minify code. If it is a ","position":{"start":{"line":33,"column":130,"offset":3316},"end":{"line":33,"column":384,"offset":3570}}},{"type":"element","tagName":"a","properties":{"href":"https://guide.meteor.com/build-tool.html"},"children":[{"type":"text","value":"Meteor app","position":{"start":{"line":33,"column":385,"offset":3571},"end":{"line":33,"column":395,"offset":3581}}}],"position":{"start":{"line":33,"column":384,"offset":3570},"end":{"line":33,"column":438,"offset":3624}}},{"type":"text","value":" it will be done automatically, using ","position":{"start":{"line":33,"column":438,"offset":3624},"end":{"line":33,"column":476,"offset":3662}}},{"type":"element","tagName":"a","properties":{"href":"https://webpack.js.org/guides/production/"},"children":[{"type":"text","value":"Webpack ","position":{"start":{"line":33,"column":477,"offset":3663},"end":{"line":33,"column":485,"offset":3671}}}],"position":{"start":{"line":33,"column":476,"offset":3662},"end":{"line":33,"column":529,"offset":3715}}},{"type":"text","value":"will also allow you to do this. Otherwise there are some online tools like ","position":{"start":{"line":33,"column":529,"offset":3715},"end":{"line":33,"column":604,"offset":3790}}},{"type":"element","tagName":"a","properties":{"href":"https://jscompress.com/"},"children":[{"type":"text","value":"JSCompress ","position":{"start":{"line":33,"column":605,"offset":3791},"end":{"line":33,"column":616,"offset":3802}}}],"position":{"start":{"line":33,"column":604,"offset":3790},"end":{"line":33,"column":642,"offset":3828}}},{"type":"text","value":"or ","position":{"start":{"line":33,"column":642,"offset":3828},"end":{"line":33,"column":645,"offset":3831}}},{"type":"element","tagName":"a","properties":{"href":"https://cssminifier.com/"},"children":[{"type":"text","value":"CSSMinifier ","position":{"start":{"line":33,"column":646,"offset":3832},"end":{"line":33,"column":658,"offset":3844}}}],"position":{"start":{"line":33,"column":645,"offset":3831},"end":{"line":33,"column":685,"offset":3871}}},{"type":"text","value":"that you can upload your code to.","position":{"start":{"line":33,"column":685,"offset":3871},"end":{"line":33,"column":718,"offset":3904}}}],"position":{"start":{"line":33,"column":1,"offset":3187},"end":{"line":33,"column":718,"offset":3904}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Design Versus Performance","position":{"start":{"line":35,"column":5,"offset":3910},"end":{"line":35,"column":30,"offset":3935}}}],"position":{"start":{"line":35,"column":1,"offset":3906},"end":{"line":35,"column":30,"offset":3935}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Whilst design is undoubtedly a major aspect to a website’s overall success, both developers and designers must work together to compromise and make a mutually beneficial trade-off between design and performance. The classic example is fonts. Take the two screenshots of a simple website below.","position":{"start":{"line":37,"column":1,"offset":3937},"end":{"line":37,"column":294,"offset":4230}}}],"position":{"start":{"line":37,"column":1,"offset":3937},"end":{"line":37,"column":294,"offset":4230}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/patricoferris/image/upload/v1532780050/pf2018/blogposts/28-07-2018/Helvetica.png","alt":"The example website using Helvetica Font (commonly found on many computers) — check [this](https://css-tricks.com/snippets/css/system-font-stack/) link for common system fonts"},"children":[],"position":{"start":{"line":39,"column":1,"offset":4232},"end":{"line":39,"column":288,"offset":4519}}},{"type":"text","value":"\n","position":{"start":{"line":39,"column":288,"offset":4519},"end":{"line":40,"column":1,"offset":4520}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The example website using Helvetica Font (commonly found on many computers) — check ","position":{"start":{"line":40,"column":2,"offset":4521},"end":{"line":40,"column":86,"offset":4605}}},{"type":"element","tagName":"a","properties":{"href":"https://css-tricks.com/snippets/css/system-font-stack/"},"children":[{"type":"text","value":"this","position":{"start":{"line":40,"column":87,"offset":4606},"end":{"line":40,"column":91,"offset":4610}}}],"position":{"start":{"line":40,"column":86,"offset":4605},"end":{"line":40,"column":148,"offset":4667}}},{"type":"text","value":" link for common system fonts","position":{"start":{"line":40,"column":148,"offset":4667},"end":{"line":40,"column":177,"offset":4696}}}],"position":{"start":{"line":40,"column":1,"offset":4520},"end":{"line":40,"column":178,"offset":4697}}}],"position":{"start":{"line":39,"column":1,"offset":4232},"end":{"line":40,"column":178,"offset":4697}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://cdn-images-1.medium.com/max/5760/1*8ciuJNBdqMhlLSaOpNUXow.png","alt":"The example website using Roboto Font (designed by Google and linked from [Google Fonts](https://fonts.google.com/?selection.family=Roboto))"},"children":[],"position":{"start":{"line":42,"column":1,"offset":4699},"end":{"line":42,"column":215,"offset":4913}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The example website using Roboto Font (designed by Google and linked from ","position":{"start":{"line":42,"column":216,"offset":4914},"end":{"line":42,"column":290,"offset":4988}}},{"type":"element","tagName":"a","properties":{"href":"https://fonts.google.com/?selection.family=Roboto"},"children":[{"type":"text","value":"Google Fonts","position":{"start":{"line":42,"column":291,"offset":4989},"end":{"line":42,"column":303,"offset":5001}}}],"position":{"start":{"line":42,"column":290,"offset":4988},"end":{"line":42,"column":355,"offset":5053}}},{"type":"text","value":")","position":{"start":{"line":42,"column":355,"offset":5053},"end":{"line":42,"column":356,"offset":5054}}}],"position":{"start":{"line":42,"column":215,"offset":4913},"end":{"line":42,"column":357,"offset":5055}}}],"position":{"start":{"line":42,"column":1,"offset":4699},"end":{"line":42,"column":357,"offset":5055}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Before critiquing my questionable design skills take a moment to appreciate that these two fonts are very similar — yet the loading time for a website for the Roboto font was 0.22 seconds as compared with 0.17 for Helvetica. Whilst not that significant, using lots of custom fonts will slow down your website, although using Google Fonts’ API will help keep your website optimised. As an over-the-top example, linking 20 different fonts from the Google API increased the load time to 0.87 seconds.","position":{"start":{"line":44,"column":1,"offset":5057},"end":{"line":44,"column":498,"offset":5554}}}],"position":{"start":{"line":44,"column":1,"offset":5057},"end":{"line":44,"column":498,"offset":5554}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Inlining your JavaScript and CSS","position":{"start":{"line":46,"column":5,"offset":5560},"end":{"line":46,"column":37,"offset":5592}}}],"position":{"start":{"line":46,"column":1,"offset":5556},"end":{"line":46,"column":37,"offset":5592}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For each individual document or component of your website, when the parser reaches the script tag or link tag it sends and HTTP request for that document and if not stated differently, these will be blocking actions. What this means is your machine is parsing the HTML document getting the words to display in your browser but if it hits the script tag with the attribute src='js/main.js' for example, it will block the parsing and load in that file. This is where as a developer you need to be clever about where in the document you place things.","position":{"start":{"line":48,"column":1,"offset":5594},"end":{"line":48,"column":548,"offset":6141}}}],"position":{"start":{"line":48,"column":1,"offset":5594},"end":{"line":48,"column":548,"offset":6141}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Whilst it may not ultimately affect the loading time of your website, it can affect the order in which things are loaded. Again we’ll be using the un-minified p5.js library to simulate a large JavaScript file and load it in different places to see how it affects our user experience.","position":{"start":{"line":50,"column":1,"offset":6143},"end":{"line":50,"column":284,"offset":6426}}}],"position":{"start":{"line":50,"column":1,"offset":6143},"end":{"line":50,"column":284,"offset":6426}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://cdn-images-1.medium.com/max/2780/1*h_3GogfkaahcXCO9a43CPA.gif","alt":"Refreshing website with the script tag inserted at the bottom of the body tag"},"children":[],"position":{"start":{"line":52,"column":1,"offset":6428},"end":{"line":52,"column":152,"offset":6579}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Refreshing website with the script tag inserted at the bottom of the body tag","position":{"start":{"line":52,"column":153,"offset":6580},"end":{"line":52,"column":230,"offset":6657}}}],"position":{"start":{"line":52,"column":152,"offset":6579},"end":{"line":52,"column":231,"offset":6658}}}],"position":{"start":{"line":52,"column":1,"offset":6428},"end":{"line":52,"column":231,"offset":6658}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://cdn-images-1.medium.com/max/2780/1*xLOq5r4erQAwb4Au_hB-Ww.gif","alt":"Refreshing website with the script tag inserted at the top of the body tag"},"children":[],"position":{"start":{"line":54,"column":1,"offset":6660},"end":{"line":54,"column":149,"offset":6808}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Refreshing website with the script tag inserted at the top of the body tag","position":{"start":{"line":54,"column":150,"offset":6809},"end":{"line":54,"column":224,"offset":6883}}}],"position":{"start":{"line":54,"column":149,"offset":6808},"end":{"line":54,"column":225,"offset":6884}}}],"position":{"start":{"line":54,"column":1,"offset":6660},"end":{"line":54,"column":225,"offset":6884}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Whilst the load times were similar for both cases — the user experience is far better by placing the script at the body tag allowing the HTML to be parsed before the JavaScript giving the user the website content immediately!","position":{"start":{"line":56,"column":1,"offset":6886},"end":{"line":56,"column":226,"offset":7111}}}],"position":{"start":{"line":56,"column":1,"offset":6886},"end":{"line":56,"column":226,"offset":7111}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In the same vein CSS can also be render-blocking especially because more often than not it is linked in the head tag of your HTML document before the body. But if we want our user to see the content in the quickest time we don’t want to be loading CSS for the footer of our document which the user won’t see until they’ve scrolled to the bottom. In fact, we don’t want to load any CSS in that the user can’t immediately see when the page first loads on their device.","position":{"start":{"line":58,"column":1,"offset":7113},"end":{"line":58,"column":467,"offset":7579}}}],"position":{"start":{"line":58,"column":1,"offset":7113},"end":{"line":58,"column":467,"offset":7579}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The CSS that you need is often called the ","position":{"start":{"line":60,"column":1,"offset":7581},"end":{"line":60,"column":43,"offset":7623}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Critical CSS","position":{"start":{"line":60,"column":44,"offset":7624},"end":{"line":60,"column":56,"offset":7636}}}],"position":{"start":{"line":60,"column":43,"offset":7623},"end":{"line":60,"column":57,"offset":7637}}},{"type":"text","value":". Finding it for yourself would be a headache. It will be different for different devices, meaning you would have to check manually for all possible devices. Lucky for us we have (if you’re using ","position":{"start":{"line":60,"column":57,"offset":7637},"end":{"line":60,"column":253,"offset":7833}}},{"type":"element","tagName":"a","properties":{"href":"https://nodejs.org/en/"},"children":[{"type":"text","value":"Node.js","position":{"start":{"line":60,"column":254,"offset":7834},"end":{"line":60,"column":261,"offset":7841}}}],"position":{"start":{"line":60,"column":253,"offset":7833},"end":{"line":60,"column":286,"offset":7866}}},{"type":"text","value":") ","position":{"start":{"line":60,"column":286,"offset":7866},"end":{"line":60,"column":288,"offset":7868}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/addyosmani/critical"},"children":[{"type":"text","value":"Critical","position":{"start":{"line":60,"column":289,"offset":7869},"end":{"line":60,"column":297,"offset":7877}}}],"position":{"start":{"line":60,"column":288,"offset":7868},"end":{"line":60,"column":338,"offset":7918}}},{"type":"text","value":". This helpful package does the CSS inlining for us and all we do is add some code to a Javascript file. Here’s a code snippet from the Github page.","position":{"start":{"line":60,"column":338,"offset":7918},"end":{"line":60,"column":486,"offset":8066}}}],"position":{"start":{"line":60,"column":1,"offset":7581},"end":{"line":60,"column":486,"offset":8066}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> critical <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'critical'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncritical<span class=\"token punctuation\">.</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    base<span class=\"token punctuation\">:</span> <span class=\"token string\">'test/'</span><span class=\"token punctuation\">,</span>\n    src<span class=\"token punctuation\">:</span> <span class=\"token string\">'index.html'</span><span class=\"token punctuation\">,</span>\n    dest<span class=\"token punctuation\">:</span> <span class=\"token string\">'styles/main.css'</span><span class=\"token punctuation\">,</span>\n    dimensions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n        height<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n        width<span class=\"token punctuation\">:</span> <span class=\"token number\">500</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        height<span class=\"token punctuation\">:</span> <span class=\"token number\">900</span><span class=\"token punctuation\">,</span>\n        width<span class=\"token punctuation\">:</span> <span class=\"token number\">1200</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","position":{"start":{"line":62,"column":1,"offset":8068},"end":{"line":77,"column":4,"offset":8333}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Using the generate function, we supply it with a JavaScript object with some values defined. base is where we’re going to save our src and dest (our project folder usually). What’s great is now we just supply an array of dimensions and the code will compute the critical CSS for each and inline that code into our head tag.","position":{"start":{"line":79,"column":1,"offset":8335},"end":{"line":79,"column":324,"offset":8658}}}],"position":{"start":{"line":79,"column":1,"offset":8335},"end":{"line":79,"column":324,"offset":8658}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Async and Defer","position":{"start":{"line":81,"column":5,"offset":8664},"end":{"line":81,"column":20,"offset":8679}}}],"position":{"start":{"line":81,"column":1,"offset":8660},"end":{"line":81,"column":20,"offset":8679}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Again, we come back to this idea of render-blocking and how best we should implement this for our website. When you have a plain script tag in your HTML it blocks the HTML from loading whilst the JavaScript loads ","position":{"start":{"line":83,"column":1,"offset":8681},"end":{"line":83,"column":214,"offset":8894}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"and","position":{"start":{"line":83,"column":216,"offset":8896},"end":{"line":83,"column":219,"offset":8899}}}],"position":{"start":{"line":83,"column":214,"offset":8894},"end":{"line":83,"column":221,"offset":8901}}},{"type":"text","value":" runs. Async and defer are simple attributes that you can add to your script tags that change the way your JavaScript will be loaded.","position":{"start":{"line":83,"column":221,"offset":8901},"end":{"line":83,"column":354,"offset":9034}}}],"position":{"start":{"line":83,"column":1,"offset":8681},"end":{"line":83,"column":354,"offset":9034}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Defer essentially “defers” execution of the script until after the HTML has been parsed. A major advantage of this is that you no longer need some $(document).ready() jQuery-style function to make sure the body was loaded before you could manipulate it, which could cut out some of the dependencies on libraries like jQuery which helps reduce load-time.","position":{"start":{"line":85,"column":1,"offset":9036},"end":{"line":85,"column":354,"offset":9389}}}],"position":{"start":{"line":85,"column":1,"offset":9036},"end":{"line":85,"column":354,"offset":9389}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Async is, unsurprisingly, the asynchronous loading of JavaScript files. What does this mean? Your HTML will continue to be parsed whilst the file is loaded and then whenever its ready the file will be executed. This helps improving user experience whilst viewing your website. Imagine for example you had a JavaScript file for doing some cool graphics. You want the words around this graphic to be parsed until your graphic is ready to be executed. As soon as it is ready, it is executed and we get a more seamless loading of our webpage without missing pieces.","position":{"start":{"line":87,"column":1,"offset":9391},"end":{"line":87,"column":562,"offset":9952}}}],"position":{"start":{"line":87,"column":1,"offset":9391},"end":{"line":87,"column":562,"offset":9952}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Check this ","position":{"start":{"line":89,"column":1,"offset":9954},"end":{"line":89,"column":12,"offset":9965}}},{"type":"element","tagName":"a","properties":{"href":"http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html"},"children":[{"type":"text","value":"website","position":{"start":{"line":89,"column":13,"offset":9966},"end":{"line":89,"column":20,"offset":9973}}}],"position":{"start":{"line":89,"column":12,"offset":9965},"end":{"line":89,"column":94,"offset":10047}}},{"type":"text","value":" for a really intuitive, graphical representation of this.","position":{"start":{"line":89,"column":94,"offset":10047},"end":{"line":89,"column":152,"offset":10105}}}],"position":{"start":{"line":89,"column":1,"offset":9954},"end":{"line":89,"column":152,"offset":10105}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Image Optimisation and Media Queries","position":{"start":{"line":91,"column":5,"offset":10111},"end":{"line":91,"column":41,"offset":10147}}}],"position":{"start":{"line":91,"column":1,"offset":10107},"end":{"line":91,"column":41,"offset":10147}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The cornerstone of all website performance optimisation is the simple rule that, the less data you send to the client, the quicker and better your website will perform. With the plethora of devices on the market capable of viewing websites, there is a growing trend to optimise your website based on the device it is being viewed on.","position":{"start":{"line":93,"column":1,"offset":10149},"end":{"line":93,"column":334,"offset":10482}}}],"position":{"start":{"line":93,"column":1,"offset":10149},"end":{"line":93,"column":334,"offset":10482}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Media queries are a fairly new tool added to CSS3. With more and more content being consumed using mobile-devices there has been a shift in design thinking towards mobile first. Using media queries you can then add stylings for larger screen sizes.","position":{"start":{"line":95,"column":1,"offset":10484},"end":{"line":95,"column":249,"offset":10732}}}],"position":{"start":{"line":95,"column":1,"offset":10484},"end":{"line":95,"column":249,"offset":10732}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/* Some CSS for screen sizes bigger than 600px but smaller than 992px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/*  Some CSS for screen sizes bigger than 992px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">orientation</span><span class=\"token punctuation\">:</span> landscape<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* Some CSS for landscape-oriented devices */</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":97,"column":1,"offset":10734},"end":{"line":109,"column":4,"offset":11064}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The @media tag starts a new CSS rule, whilst the only keyword stops older browsers that don’t support media queries from using it. The screen keyword applies the rules to screens rather than prints. After that you add the media-feature which supports the and , or and not keywords so you can get as specific as you want. When you’re loading your image you can write code like:","position":{"start":{"line":111,"column":1,"offset":11066},"end":{"line":111,"column":377,"offset":11442}}}],"position":{"start":{"line":111,"column":1,"offset":11066},"end":{"line":111,"column":377,"offset":11442}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-small.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-big.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":113,"column":1,"offset":11444},"end":{"line":121,"column":4,"offset":11663}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This isn’t necessarily the best or optimal approach for image optimisation. Luckily we have other options. ","position":{"start":{"line":123,"column":1,"offset":11665},"end":{"line":123,"column":108,"offset":11772}}},{"type":"element","tagName":"a","properties":{"href":"https://www.imgix.com/"},"children":[{"type":"text","value":"Imgix","position":{"start":{"line":123,"column":109,"offset":11773},"end":{"line":123,"column":114,"offset":11778}}}],"position":{"start":{"line":123,"column":108,"offset":11772},"end":{"line":123,"column":139,"offset":11803}}},{"type":"text","value":" and ","position":{"start":{"line":123,"column":139,"offset":11803},"end":{"line":123,"column":144,"offset":11808}}},{"type":"element","tagName":"a","properties":{"href":"https://cloudinary.com/"},"children":[{"type":"text","value":"Cloudinary","position":{"start":{"line":123,"column":145,"offset":11809},"end":{"line":123,"column":155,"offset":11819}}}],"position":{"start":{"line":123,"column":144,"offset":11808},"end":{"line":123,"column":181,"offset":11845}}},{"type":"text","value":" are two ways you can help optimise your site for the right device. Imgix is a Content Delivery Network (CDN) for images with a lot of cool features. A CDN simply takes your files and spreads them across the globe so that someone in a different country doesn’t have to wait for your files on your server to make it all the way to them. This ","position":{"start":{"line":123,"column":181,"offset":11845},"end":{"line":123,"column":522,"offset":12186}}},{"type":"element","tagName":"a","properties":{"href":"https://docs.imgix.com/tutorials/responsive-images-srcset-imgix"},"children":[{"type":"text","value":"tutorial","position":{"start":{"line":123,"column":523,"offset":12187},"end":{"line":123,"column":531,"offset":12195}}}],"position":{"start":{"line":123,"column":522,"offset":12186},"end":{"line":123,"column":597,"offset":12261}}},{"type":"text","value":" goes through how to use Imgix for different device pixel ratios. Cloudinary is a similar service, and their ","position":{"start":{"line":123,"column":597,"offset":12261},"end":{"line":123,"column":706,"offset":12370}}},{"type":"element","tagName":"a","properties":{"href":"https://cloudinary.com/documentation/image_optimization"},"children":[{"type":"text","value":"tutorial ","position":{"start":{"line":123,"column":707,"offset":12371},"end":{"line":123,"column":716,"offset":12380}}}],"position":{"start":{"line":123,"column":706,"offset":12370},"end":{"line":123,"column":774,"offset":12438}}},{"type":"text","value":"will take you through the importance of optimisation and how to achieve it will their incredible services. Below is a small example showing how easy it is to use Cloudinary straight in the HTML markup.","position":{"start":{"line":123,"column":774,"offset":12438},"end":{"line":123,"column":975,"offset":12639}}}],"position":{"start":{"line":123,"column":1,"offset":11665},"end":{"line":123,"column":975,"offset":12639}}},{"type":"text","value":"\n"},{"type":"raw","value":"<iframe height='400' scrolling='no' title='Cloudinary Example' src='//codepen.io/patricoferris/embed/ejgVJN/?height=400&theme-id=0&default-tab=html,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/ejgVJN/'>Cloudinary Example</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":125,"column":1,"offset":12641},"end":{"line":126,"column":10,"offset":13125}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As a last point on image optimisation, the format you use can have a large impact on file size. Some files contain lots of metadata which you don’t want to be serving to your client — ","position":{"start":{"line":128,"column":1,"offset":13127},"end":{"line":128,"column":185,"offset":13311}}},{"type":"element","tagName":"a","properties":{"href":"https://www.sno.phy.queensu.ca/~phil/exiftool/"},"children":[{"type":"text","value":"ExifTool","position":{"start":{"line":128,"column":186,"offset":13312},"end":{"line":128,"column":194,"offset":13320}}}],"position":{"start":{"line":128,"column":185,"offset":13311},"end":{"line":128,"column":243,"offset":13369}}},{"type":"text","value":" is a commonly used command-line application that can help you trim down those files sizes. On top of this, Scalable Vector Graphics (SVG) are a web-standard developed by W3C that offers XML-based vector graphics. This means they have infinite resolution unlike PNG or JPG files. It also makes them highly versatile, easily editable and can even be animated. At the end of the day SVGs are just code and so the file sizes tend to be small. For more reasons to use them, check out this ","position":{"start":{"line":128,"column":243,"offset":13369},"end":{"line":128,"column":728,"offset":13854}}},{"type":"element","tagName":"a","properties":{"href":"https://watb.co.uk/5-reasons-you-should-be-using-svgs-over-pngs/"},"children":[{"type":"text","value":"article","position":{"start":{"line":128,"column":729,"offset":13855},"end":{"line":128,"column":736,"offset":13862}}}],"position":{"start":{"line":128,"column":728,"offset":13854},"end":{"line":128,"column":803,"offset":13929}}},{"type":"text","value":".","position":{"start":{"line":128,"column":803,"offset":13929},"end":{"line":128,"column":804,"offset":13930}}}],"position":{"start":{"line":128,"column":1,"offset":13127},"end":{"line":128,"column":804,"offset":13930}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":130,"column":5,"offset":13936},"end":{"line":130,"column":15,"offset":13946}}}],"position":{"start":{"line":130,"column":1,"offset":13932},"end":{"line":130,"column":15,"offset":13946}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We’ve only scratched the surface of what’s possible for website optimisation. There are many tools you can use to help you stream-line this process like ","position":{"start":{"line":132,"column":1,"offset":13948},"end":{"line":132,"column":154,"offset":14101}}},{"type":"element","tagName":"a","properties":{"href":"https://webpack.js.org/"},"children":[{"type":"text","value":"Webpack","position":{"start":{"line":132,"column":155,"offset":14102},"end":{"line":132,"column":162,"offset":14109}}}],"position":{"start":{"line":132,"column":154,"offset":14101},"end":{"line":132,"column":188,"offset":14135}}},{"type":"text","value":" for bundling or static-site generators like ","position":{"start":{"line":132,"column":188,"offset":14135},"end":{"line":132,"column":233,"offset":14180}}},{"type":"element","tagName":"a","properties":{"href":"https://www.gatsbyjs.org/"},"children":[{"type":"text","value":"Gatsby","position":{"start":{"line":132,"column":234,"offset":14181},"end":{"line":132,"column":240,"offset":14187}}}],"position":{"start":{"line":132,"column":233,"offset":14180},"end":{"line":132,"column":268,"offset":14215}}},{"type":"text","value":". ","position":{"start":{"line":132,"column":268,"offset":14215},"end":{"line":132,"column":270,"offset":14217}}},{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking"},"children":[{"type":"text","value":"Tree shaking","position":{"start":{"line":132,"column":271,"offset":14218},"end":{"line":132,"column":283,"offset":14230}}}],"position":{"start":{"line":132,"column":270,"offset":14217},"end":{"line":132,"column":348,"offset":14295}}},{"type":"text","value":" is another commonly used technique to remove excess, unused modules lying around your website.","position":{"start":{"line":132,"column":348,"offset":14295},"end":{"line":132,"column":443,"offset":14390}}}],"position":{"start":{"line":132,"column":1,"offset":13948},"end":{"line":132,"column":443,"offset":14390}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Hopefully this article has touched on some useful techniques you can use on your next site to help improve its performance. Happy coding!","position":{"start":{"line":134,"column":1,"offset":14392},"end":{"line":134,"column":138,"offset":14529}}}],"position":{"start":{"line":134,"column":1,"offset":14392},"end":{"line":134,"column":138,"offset":14529}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A big thank you to ","position":{"start":{"line":136,"column":1,"offset":14531},"end":{"line":136,"column":20,"offset":14550}}},{"type":"element","tagName":"a","properties":{"href":"https://medium.com/@pinpickle"},"children":[{"type":"text","value":"Christian Silver","position":{"start":{"line":136,"column":21,"offset":14551},"end":{"line":136,"column":37,"offset":14567}}}],"position":{"start":{"line":136,"column":20,"offset":14550},"end":{"line":136,"column":69,"offset":14599}}},{"type":"text","value":" and ","position":{"start":{"line":136,"column":69,"offset":14599},"end":{"line":136,"column":74,"offset":14604}}},{"type":"element","tagName":"a","properties":{"href":"https://medium.com/@charliecrisp249"},"children":[{"type":"text","value":"Charlie Crisp","position":{"start":{"line":136,"column":75,"offset":14605},"end":{"line":136,"column":88,"offset":14618}}}],"position":{"start":{"line":136,"column":74,"offset":14604},"end":{"line":136,"column":126,"offset":14656}}},{"type":"text","value":" for editing this post and providing extremely useful advice and extra content to make it even better.","position":{"start":{"line":136,"column":126,"offset":14656},"end":{"line":136,"column":228,"offset":14758}}}],"position":{"start":{"line":136,"column":1,"offset":14531},"end":{"line":136,"column":228,"offset":14758}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":137,"column":1,"offset":14759}}}},{"id":"transformer-remark-markdown-html-492ceae38cde832ebeed7c875ee46e42-gatsby-remark-imagesgatsby-remark-prismjs-","value":"<p><img src=\"https://res.cloudinary.com/patricoferris/image/upload/v1532781201/pf2018/blogposts/28-07-2018/website_optimisation_2.png\" alt=\"Optimising your Website\">\nInspired by a <a href=\"https://syntax.fm/\">Syntax</a> podcast, I got really interested in website optimisation. It can often be an overlooked aspect in web development with more focus on design and functionality, I realised my number one priority whenever I visited a website is load speed. My attention is a website’s number one goal, lose it and they lose all potential ad revenue or possibility to give me whatever information I was looking for. <a href=\"https://developers.google.com/web/fundamentals/performance/get-started/\">Many seem to agree. 53% of users abandon websites that take more than 3 seconds to load</a>. No amount of fancy graphics or parallax scrolling that appears five seconds after someone’s clicked will hide the slow loading times.</p>\n<p>The aim of this article is to give a broad overview of the concepts and ideas behind optimising your website, experienced developers are likely already using things like Webpack (a module bundler) among other tools to speed-up their sites.</p>\n<p>For testing load-times I will be using the <a href=\"https://chrome.google.com/webstore/detail/page-load-time/fploionmjgeclbkemipmkogoaohcdbig?hl=en\">Page Load Time </a>Chrome extension. There are a few ways to measure website loading time including: <a href=\"https://developers.google.com/web/tools/chrome-user-experience-report/\">first paint, first meaning paint, DOMContentLoaded</a> etc. For a more detailed look into what this timer measures, check out the Github repository below.\n<a href=\"https://github.com/alex-vv/chrome-load-timer\"><strong>alex-vv/chrome-load-timer</strong>\n<em>chrome-load-timer - Google Chrome extension to measure page load time and display it in the toolbar</em>github.com</a></p>\n<h3><strong>Use Minified Stylesheets and Scripts</strong></h3>\n<p>You would be amazed at how much performance can be gained by this simple trick. What is a minified document? When we write code it is never our job to make it optimised for the computer, instead our golden rule is to make it readable to humans. This improves readability, cuts down on debug time and makes it easier to maintain. However, to achieve this we often add extra spacing which costs us precious space. Minifying the code is trimming all this fat from what we’ve written to have code that produces the same result but is far more difficult to read and maintain. This is okay though, because a computer has no problem deciphering it. Take the following code for example.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Notice how, wherever possible, our line-breaks and spaces are gone. On top of that, the code in the for-loop is only one line so there’s no need for the curly braces which extends our code over three lines when it can be done in one. Does this make a difference?</p>\n<p>I tried it out on simple website that just had one script tag being loaded in for the graphics library <a href=\"https://p5js.org/\">p5.js</a>. Using the non-minified CDN link I got a load time of 0.25 seconds. Using the minified version I got a markedly improved load time of 0.08 seconds. Depending on what your website project is, there are a few ways to automatically minify code. If it is a <a href=\"https://guide.meteor.com/build-tool.html\">Meteor app</a> it will be done automatically, using <a href=\"https://webpack.js.org/guides/production/\">Webpack </a>will also allow you to do this. Otherwise there are some online tools like <a href=\"https://jscompress.com/\">JSCompress </a>or <a href=\"https://cssminifier.com/\">CSSMinifier </a>that you can upload your code to.</p>\n<h3>Design Versus Performance</h3>\n<p>Whilst design is undoubtedly a major aspect to a website’s overall success, both developers and designers must work together to compromise and make a mutually beneficial trade-off between design and performance. The classic example is fonts. Take the two screenshots of a simple website below.</p>\n<p><img src=\"https://res.cloudinary.com/patricoferris/image/upload/v1532780050/pf2018/blogposts/28-07-2018/Helvetica.png\" alt=\"The example website using Helvetica Font (commonly found on many computers) — check [this](https://css-tricks.com/snippets/css/system-font-stack/) link for common system fonts\">\n<em>The example website using Helvetica Font (commonly found on many computers) — check <a href=\"https://css-tricks.com/snippets/css/system-font-stack/\">this</a> link for common system fonts</em></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/5760/1*8ciuJNBdqMhlLSaOpNUXow.png\" alt=\"The example website using Roboto Font (designed by Google and linked from [Google Fonts](https://fonts.google.com/?selection.family=Roboto))\"><em>The example website using Roboto Font (designed by Google and linked from <a href=\"https://fonts.google.com/?selection.family=Roboto\">Google Fonts</a>)</em></p>\n<p>Before critiquing my questionable design skills take a moment to appreciate that these two fonts are very similar — yet the loading time for a website for the Roboto font was 0.22 seconds as compared with 0.17 for Helvetica. Whilst not that significant, using lots of custom fonts will slow down your website, although using Google Fonts’ API will help keep your website optimised. As an over-the-top example, linking 20 different fonts from the Google API increased the load time to 0.87 seconds.</p>\n<h3>Inlining your JavaScript and CSS</h3>\n<p>For each individual document or component of your website, when the parser reaches the script tag or link tag it sends and HTTP request for that document and if not stated differently, these will be blocking actions. What this means is your machine is parsing the HTML document getting the words to display in your browser but if it hits the script tag with the attribute src='js/main.js' for example, it will block the parsing and load in that file. This is where as a developer you need to be clever about where in the document you place things.</p>\n<p>Whilst it may not ultimately affect the loading time of your website, it can affect the order in which things are loaded. Again we’ll be using the un-minified p5.js library to simulate a large JavaScript file and load it in different places to see how it affects our user experience.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2780/1*h_3GogfkaahcXCO9a43CPA.gif\" alt=\"Refreshing website with the script tag inserted at the bottom of the body tag\"><em>Refreshing website with the script tag inserted at the bottom of the body tag</em></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2780/1*xLOq5r4erQAwb4Au_hB-Ww.gif\" alt=\"Refreshing website with the script tag inserted at the top of the body tag\"><em>Refreshing website with the script tag inserted at the top of the body tag</em></p>\n<p>Whilst the load times were similar for both cases — the user experience is far better by placing the script at the body tag allowing the HTML to be parsed before the JavaScript giving the user the website content immediately!</p>\n<p>In the same vein CSS can also be render-blocking especially because more often than not it is linked in the head tag of your HTML document before the body. But if we want our user to see the content in the quickest time we don’t want to be loading CSS for the footer of our document which the user won’t see until they’ve scrolled to the bottom. In fact, we don’t want to load any CSS in that the user can’t immediately see when the page first loads on their device.</p>\n<p>The CSS that you need is often called the <em>Critical CSS</em>. Finding it for yourself would be a headache. It will be different for different devices, meaning you would have to check manually for all possible devices. Lucky for us we have (if you’re using <a href=\"https://nodejs.org/en/\">Node.js</a>) <a href=\"https://github.com/addyosmani/critical\">Critical</a>. This helpful package does the CSS inlining for us and all we do is add some code to a Javascript file. Here’s a code snippet from the Github page.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> critical <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'critical'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncritical<span class=\"token punctuation\">.</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    base<span class=\"token punctuation\">:</span> <span class=\"token string\">'test/'</span><span class=\"token punctuation\">,</span>\n    src<span class=\"token punctuation\">:</span> <span class=\"token string\">'index.html'</span><span class=\"token punctuation\">,</span>\n    dest<span class=\"token punctuation\">:</span> <span class=\"token string\">'styles/main.css'</span><span class=\"token punctuation\">,</span>\n    dimensions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n        height<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n        width<span class=\"token punctuation\">:</span> <span class=\"token number\">500</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        height<span class=\"token punctuation\">:</span> <span class=\"token number\">900</span><span class=\"token punctuation\">,</span>\n        width<span class=\"token punctuation\">:</span> <span class=\"token number\">1200</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Using the generate function, we supply it with a JavaScript object with some values defined. base is where we’re going to save our src and dest (our project folder usually). What’s great is now we just supply an array of dimensions and the code will compute the critical CSS for each and inline that code into our head tag.</p>\n<h3>Async and Defer</h3>\n<p>Again, we come back to this idea of render-blocking and how best we should implement this for our website. When you have a plain script tag in your HTML it blocks the HTML from loading whilst the JavaScript loads <strong>and</strong> runs. Async and defer are simple attributes that you can add to your script tags that change the way your JavaScript will be loaded.</p>\n<p>Defer essentially “defers” execution of the script until after the HTML has been parsed. A major advantage of this is that you no longer need some $(document).ready() jQuery-style function to make sure the body was loaded before you could manipulate it, which could cut out some of the dependencies on libraries like jQuery which helps reduce load-time.</p>\n<p>Async is, unsurprisingly, the asynchronous loading of JavaScript files. What does this mean? Your HTML will continue to be parsed whilst the file is loaded and then whenever its ready the file will be executed. This helps improving user experience whilst viewing your website. Imagine for example you had a JavaScript file for doing some cool graphics. You want the words around this graphic to be parsed until your graphic is ready to be executed. As soon as it is ready, it is executed and we get a more seamless loading of our webpage without missing pieces.</p>\n<p>Check this <a href=\"http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html\">website</a> for a really intuitive, graphical representation of this.</p>\n<h3>Image Optimisation and Media Queries</h3>\n<p>The cornerstone of all website performance optimisation is the simple rule that, the less data you send to the client, the quicker and better your website will perform. With the plethora of devices on the market capable of viewing websites, there is a growing trend to optimise your website based on the device it is being viewed on.</p>\n<p>Media queries are a fairly new tool added to CSS3. With more and more content being consumed using mobile-devices there has been a shift in design thinking towards mobile first. Using media queries you can then add stylings for larger screen sizes.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/* Some CSS for screen sizes bigger than 600px but smaller than 992px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/*  Some CSS for screen sizes bigger than 992px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">orientation</span><span class=\"token punctuation\">:</span> landscape<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* Some CSS for landscape-oriented devices */</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>The @media tag starts a new CSS rule, whilst the only keyword stops older browsers that don’t support media queries from using it. The screen keyword applies the rules to screens rather than prints. After that you add the media-feature which supports the and , or and not keywords so you can get as specific as you want. When you’re loading your image you can write code like:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-small.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-big.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>This isn’t necessarily the best or optimal approach for image optimisation. Luckily we have other options. <a href=\"https://www.imgix.com/\">Imgix</a> and <a href=\"https://cloudinary.com/\">Cloudinary</a> are two ways you can help optimise your site for the right device. Imgix is a Content Delivery Network (CDN) for images with a lot of cool features. A CDN simply takes your files and spreads them across the globe so that someone in a different country doesn’t have to wait for your files on your server to make it all the way to them. This <a href=\"https://docs.imgix.com/tutorials/responsive-images-srcset-imgix\">tutorial</a> goes through how to use Imgix for different device pixel ratios. Cloudinary is a similar service, and their <a href=\"https://cloudinary.com/documentation/image_optimization\">tutorial </a>will take you through the importance of optimisation and how to achieve it will their incredible services. Below is a small example showing how easy it is to use Cloudinary straight in the HTML markup.</p>\n<iframe height='400' scrolling='no' title='Cloudinary Example' src='//codepen.io/patricoferris/embed/ejgVJN/?height=400&theme-id=0&default-tab=html,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/ejgVJN/'>Cloudinary Example</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>As a last point on image optimisation, the format you use can have a large impact on file size. Some files contain lots of metadata which you don’t want to be serving to your client — <a href=\"https://www.sno.phy.queensu.ca/~phil/exiftool/\">ExifTool</a> is a commonly used command-line application that can help you trim down those files sizes. On top of this, Scalable Vector Graphics (SVG) are a web-standard developed by W3C that offers XML-based vector graphics. This means they have infinite resolution unlike PNG or JPG files. It also makes them highly versatile, easily editable and can even be animated. At the end of the day SVGs are just code and so the file sizes tend to be small. For more reasons to use them, check out this <a href=\"https://watb.co.uk/5-reasons-you-should-be-using-svgs-over-pngs/\">article</a>.</p>\n<h3>Conclusion</h3>\n<p>We’ve only scratched the surface of what’s possible for website optimisation. There are many tools you can use to help you stream-line this process like <a href=\"https://webpack.js.org/\">Webpack</a> for bundling or static-site generators like <a href=\"https://www.gatsbyjs.org/\">Gatsby</a>. <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking\">Tree shaking</a> is another commonly used technique to remove excess, unused modules lying around your website.</p>\n<p>Hopefully this article has touched on some useful techniques you can use on your next site to help improve its performance. Happy coding!</p>\n<p>A big thank you to <a href=\"https://medium.com/@pinpickle\">Christian Silver</a> and <a href=\"https://medium.com/@charliecrisp249\">Charlie Crisp</a> for editing this post and providing extremely useful advice and extra content to make it even better.</p>"},{"id":"transformer-remark-markdown-ast-3f006e644e19741a63484fdacc517353-gatsby-remark-imagesgatsby-remark-prismjs-","value":{"type":"root","children":[{"type":"yaml","value":"path: '/graphics-and-p5'\ntitle: 'Computer Graphics for Everyone'\nsubtitle: 'An Introduction to Computer Graphics using p5.js'\ndate: '2018-02-27'","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":6,"column":4,"offset":152},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://res.cloudinary.com/patricoferris/image/upload/v1532857964/pf2018/blogposts/27-02-2018/tree.png","alt":"Recursive Tree","position":{"start":{"line":8,"column":1,"offset":154},"end":{"line":8,"column":122,"offset":275},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":154},"end":{"line":8,"column":122,"offset":275},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Graphics and computer programming are two dearly intertwined disciplines. The oscilloscope is often recognised as one of the first examples of “computer graphics”, the cathode-ray versions emitting a beam of electrons onto a phosphorescent screen. By using magnetic fields to change the beam’s direction, we can sweep from left to right and move up and down — the basic idea behind most CG! (I highly recommend watching this ","position":{"start":{"line":10,"column":1,"offset":277},"end":{"line":10,"column":426,"offset":702},"indent":[]}},{"type":"link","title":null,"url":"https://archive.org/details/introductiontothecathoderayoscilloscope","children":[{"type":"text","value":"video","position":{"start":{"line":10,"column":427,"offset":703},"end":{"line":10,"column":432,"offset":708},"indent":[]}}],"position":{"start":{"line":10,"column":426,"offset":702},"end":{"line":10,"column":502,"offset":778},"indent":[]}},{"type":"text","value":" from 1970).","position":{"start":{"line":10,"column":502,"offset":778},"end":{"line":10,"column":514,"offset":790},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":277},"end":{"line":10,"column":514,"offset":790},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We’ve come a long way since then — modern day graphics is a complicated science as well as an art, and the barrier to entry is constantly increasing. Graphics programming can be so complex, that a simple program to draw a triangle can be over ","position":{"start":{"line":12,"column":1,"offset":792},"end":{"line":12,"column":244,"offset":1035},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/SaschaWillems/Vulkan/blob/master/examples/triangle/triangle.cpp","children":[{"type":"text","value":"1000 lines of code","position":{"start":{"line":12,"column":245,"offset":1036},"end":{"line":12,"column":263,"offset":1054},"indent":[]}}],"position":{"start":{"line":12,"column":244,"offset":1035},"end":{"line":12,"column":348,"offset":1139},"indent":[]}},{"type":"text","value":"! However, this article will introduce you to ","position":{"start":{"line":12,"column":348,"offset":1139},"end":{"line":12,"column":394,"offset":1185},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/","children":[{"type":"text","value":"p5.js","position":{"start":{"line":12,"column":395,"offset":1186},"end":{"line":12,"column":400,"offset":1191},"indent":[]}}],"position":{"start":{"line":12,"column":394,"offset":1185},"end":{"line":12,"column":420,"offset":1211},"indent":[]}},{"type":"text","value":" (also known as p5). A simpler, less complex solution for people who want to start making computer graphics, but don’t want the headache of streams of boiler-plate code.","position":{"start":{"line":12,"column":420,"offset":1211},"end":{"line":12,"column":589,"offset":1380},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":792},"end":{"line":12,"column":589,"offset":1380},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Straight from the landing page of the p5.js website.","position":{"start":{"line":14,"column":1,"offset":1382},"end":{"line":14,"column":53,"offset":1434},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":1382},"end":{"line":14,"column":53,"offset":1434},"indent":[]}},{"type":"blockquote","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"…make coding accessible for artists, designers, educators and beginners…","position":{"start":{"line":15,"column":5,"offset":1439},"end":{"line":15,"column":77,"offset":1511},"indent":[]}}],"position":{"start":{"line":15,"column":3,"offset":1437},"end":{"line":15,"column":77,"offset":1511},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":1435},"end":{"line":15,"column":77,"offset":1511},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"p5.js is the result of hard-work of the ","position":{"start":{"line":17,"column":1,"offset":1513},"end":{"line":17,"column":41,"offset":1553},"indent":[]}},{"type":"link","title":null,"url":"https://processingfoundation.org/","children":[{"type":"text","value":"Processing Foundation","position":{"start":{"line":17,"column":42,"offset":1554},"end":{"line":17,"column":63,"offset":1575},"indent":[]}}],"position":{"start":{"line":17,"column":41,"offset":1553},"end":{"line":17,"column":99,"offset":1611},"indent":[]}},{"type":"text","value":", a group focused on spreading computer and visual literacy. It distills their ","position":{"start":{"line":17,"column":99,"offset":1611},"end":{"line":17,"column":178,"offset":1690},"indent":[]}},{"type":"link","title":null,"url":"https://en.wikipedia.org/wiki/Processing_(programming_language)","children":[{"type":"text","value":"Processing","position":{"start":{"line":17,"column":179,"offset":1691},"end":{"line":17,"column":189,"offset":1701},"indent":[]}}],"position":{"start":{"line":17,"column":178,"offset":1690},"end":{"line":17,"column":255,"offset":1767},"indent":[]}},{"type":"text","value":" language into a JavaScript library that makes creating graphics easy and accessible whilst providing an ideal platform to springboard people’s careers in computer graphics. It should be mentioned now that a lot of inspiration has been taken from ","position":{"start":{"line":17,"column":255,"offset":1767},"end":{"line":17,"column":502,"offset":2014},"indent":[]}},{"type":"link","title":null,"url":"http://shiffman.net/","children":[{"type":"text","value":"Daniel Shiffman’s","position":{"start":{"line":17,"column":503,"offset":2015},"end":{"line":17,"column":520,"offset":2032},"indent":[]}}],"position":{"start":{"line":17,"column":502,"offset":2014},"end":{"line":17,"column":543,"offset":2055},"indent":[]}},{"type":"text","value":" p5 projects (from the ","position":{"start":{"line":17,"column":543,"offset":2055},"end":{"line":17,"column":566,"offset":2078},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/CodingTrain/website/tree/master/CodingChallenges/CC_03_Snake_game_p5.js","children":[{"type":"text","value":"classic snake game","position":{"start":{"line":17,"column":567,"offset":2079},"end":{"line":17,"column":585,"offset":2097},"indent":[]}}],"position":{"start":{"line":17,"column":566,"offset":2078},"end":{"line":17,"column":678,"offset":2190},"indent":[]}},{"type":"text","value":", to a ","position":{"start":{"line":17,"column":678,"offset":2190},"end":{"line":17,"column":685,"offset":2197},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/CodingTrain/website/tree/master/CodingChallenges/CC_93_DoublePendulum_p5.js","children":[{"type":"text","value":"double pendulum","position":{"start":{"line":17,"column":686,"offset":2198},"end":{"line":17,"column":701,"offset":2213},"indent":[]}}],"position":{"start":{"line":17,"column":685,"offset":2197},"end":{"line":17,"column":798,"offset":2310},"indent":[]}},{"type":"text","value":"). I can’t urge you enough to follow these projects to really improve your understanding of coding concepts and the p5 library.","position":{"start":{"line":17,"column":798,"offset":2310},"end":{"line":17,"column":925,"offset":2437},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":1513},"end":{"line":17,"column":925,"offset":2437},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Some prerequisites:","position":{"start":{"line":19,"column":5,"offset":2443},"end":{"line":19,"column":24,"offset":2462},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":2439},"end":{"line":19,"column":24,"offset":2462},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Before jumping into the p5 code I first want to make clear that there is assumed knowledge of HTML5 and JavaScript including arrays, functions, variables etc. in the rest of this article. If you have a good grasp of JavaScript then skip to the p5 code below, otherwise here are few resources to get you up to scratch.","position":{"start":{"line":21,"column":1,"offset":2464},"end":{"line":21,"column":318,"offset":2781},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":2464},"end":{"line":21,"column":318,"offset":2781},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":true,"children":[{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.youtube.com/watch?v=spIVWmv1jnw","children":[{"type":"text","value":"HaC Intro to Programming","position":{"start":{"line":23,"column":4,"offset":2786},"end":{"line":23,"column":28,"offset":2810},"indent":[]}}],"position":{"start":{"line":23,"column":3,"offset":2785},"end":{"line":23,"column":74,"offset":2856},"indent":[]}},{"type":"text","value":" — A workshop that is being run by Hackers at Cambridge to help anyone start learning to program (which uses JavaScript).","position":{"start":{"line":23,"column":74,"offset":2856},"end":{"line":23,"column":195,"offset":2977},"indent":[]}}],"position":{"start":{"line":23,"column":3,"offset":2785},"end":{"line":23,"column":195,"offset":2977},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":2783},"end":{"line":24,"column":1,"offset":2978},"indent":[1]}},{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.codecademy.com/learn/introduction-to-javascript","children":[{"type":"text","value":"Codecademy","position":{"start":{"line":25,"column":4,"offset":2982},"end":{"line":25,"column":14,"offset":2992},"indent":[]}}],"position":{"start":{"line":25,"column":3,"offset":2981},"end":{"line":25,"column":76,"offset":3054},"indent":[]}},{"type":"text","value":" — a great resource for learning how to code with instant feedback in your browser.","position":{"start":{"line":25,"column":76,"offset":3054},"end":{"line":25,"column":159,"offset":3137},"indent":[]}}],"position":{"start":{"line":25,"column":3,"offset":2981},"end":{"line":25,"column":159,"offset":3137},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":2979},"end":{"line":26,"column":1,"offset":3138},"indent":[1]}},{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript","children":[{"type":"text","value":"MDN","position":{"start":{"line":27,"column":4,"offset":3142},"end":{"line":27,"column":7,"offset":3145},"indent":[]}}],"position":{"start":{"line":27,"column":3,"offset":3141},"end":{"line":27,"column":65,"offset":3203},"indent":[]}},{"type":"text","value":" — a great resource for learning about all aspects of web development.","position":{"start":{"line":27,"column":65,"offset":3203},"end":{"line":27,"column":135,"offset":3273},"indent":[]}}],"position":{"start":{"line":27,"column":3,"offset":3141},"end":{"line":27,"column":135,"offset":3273},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":3139},"end":{"line":28,"column":1,"offset":3274},"indent":[1]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://codepen.io/","children":[{"type":"text","value":"Codepen","position":{"start":{"line":29,"column":4,"offset":3278},"end":{"line":29,"column":11,"offset":3285},"indent":[]}}],"position":{"start":{"line":29,"column":3,"offset":3277},"end":{"line":29,"column":33,"offset":3307},"indent":[]}},{"type":"text","value":" — a brilliant online text-editor for creating cool projects in HTML, CSS and JavaScript. Equally good for getting inspiration from a lot of talented users. Another possible solution would be ","position":{"start":{"line":29,"column":33,"offset":3307},"end":{"line":29,"column":225,"offset":3499},"indent":[]}},{"type":"link","title":null,"url":"https://jsfiddle.net/","children":[{"type":"text","value":"JSFiddle","position":{"start":{"line":29,"column":226,"offset":3500},"end":{"line":29,"column":234,"offset":3508},"indent":[]}}],"position":{"start":{"line":29,"column":225,"offset":3499},"end":{"line":29,"column":258,"offset":3532},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":29,"column":258,"offset":3532},"end":{"line":29,"column":259,"offset":3533},"indent":[]}}],"position":{"start":{"line":29,"column":3,"offset":3277},"end":{"line":29,"column":259,"offset":3533},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":3275},"end":{"line":29,"column":259,"offset":3533},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":2783},"end":{"line":29,"column":259,"offset":3533},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"What follows is a series of steps that will introduce you to p5 concepts. With code examples and explanations I hope to give you enough information to understand the ideas, but to fully grasp the concepts you will have to dive into the code, experiment with it, break it and learn from it. So without further ado, let’s get coding.","position":{"start":{"line":31,"column":1,"offset":3535},"end":{"line":31,"column":332,"offset":3866},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":3535},"end":{"line":31,"column":332,"offset":3866},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Step 1: The Setup","position":{"start":{"line":33,"column":5,"offset":3872},"end":{"line":33,"column":22,"offset":3889},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":3868},"end":{"line":33,"column":22,"offset":3889},"indent":[]}},{"type":"html","value":"<high-light className='JavaScript'>\nfunction setup(){\n  //Initialisation of canvas, objects, variables etc.\n}\nfunction draw(){\n  //The drawing loop - updates at a constant rate declared in setup\n}\n</high-light>","position":{"start":{"line":35,"column":1,"offset":3891},"end":{"line":42,"column":14,"offset":4101},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"p5 is really simple to setup once you know what to do. There are two files shown above — an index.html and a template.js. The index.html file gets the libraries for us and the template.js is the barebones structure of a p5 project and at the moment it does nothing! Within this we have two functions:","position":{"start":{"line":44,"column":1,"offset":4103},"end":{"line":44,"column":301,"offset":4403},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":4103},"end":{"line":44,"column":301,"offset":4403},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":true,"children":[{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"setup() — a function for creating what we will need for our graphic or project. Like creating a canvas, initialising some objects or arrays etc.","position":{"start":{"line":46,"column":3,"offset":4407},"end":{"line":46,"column":147,"offset":4551},"indent":[]}}],"position":{"start":{"line":46,"column":3,"offset":4407},"end":{"line":46,"column":147,"offset":4551},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":4405},"end":{"line":47,"column":1,"offset":4552},"indent":[1]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"draw() — a function which will be called periodically like a loop. This is where will call draw functions and update functions to make graphics and animations.","position":{"start":{"line":48,"column":3,"offset":4555},"end":{"line":48,"column":162,"offset":4714},"indent":[]}}],"position":{"start":{"line":48,"column":3,"offset":4555},"end":{"line":48,"column":162,"offset":4714},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":4553},"end":{"line":48,"column":162,"offset":4714},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":4405},"end":{"line":48,"column":162,"offset":4714},"indent":[1,1]}},{"type":"html","value":"<iframe height='400' scrolling='no' title='Simple Triangle Tutorial' src='//codepen.io/patricoferris/embed/dddxjr/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/dddxjr/'>Simple Triangle Tutorial</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":50,"column":1,"offset":4716},"end":{"line":51,"column":10,"offset":5210},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Let’s first look at the setup function. We used the p5 function createCanvas(width, height) which created and initialised a ","position":{"start":{"line":53,"column":1,"offset":5212},"end":{"line":53,"column":125,"offset":5336},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API","children":[{"type":"text","value":"canvas","position":{"start":{"line":53,"column":126,"offset":5337},"end":{"line":53,"column":132,"offset":5343},"indent":[]}}],"position":{"start":{"line":53,"column":125,"offset":5336},"end":{"line":53,"column":194,"offset":5405},"indent":[]}},{"type":"text","value":" with arguments width and height. Now within our setup() and createCanvas() functions we can reference the variables width and height without ever instantiating them!","position":{"start":{"line":53,"column":194,"offset":5405},"end":{"line":53,"column":360,"offset":5571},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":5212},"end":{"line":53,"column":360,"offset":5571},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Next comes the meaty, draw function. I have purposefully put extra code in here so we can learn more about what p5 has to offer. Firstly always remember that draw() is a loop that runs from top to bottom. Initially, we set the background (of our canvas) to white with background(255) which is the same as background(255, 255, 255) (maximising the red, green and blue values to give white). This may seem simple, but implicitly we are also clearing our canvas every loop… in one line of code! This will be useful for animations later as we want to redraw objects in a new location rather than have the ","position":{"start":{"line":55,"column":1,"offset":5573},"end":{"line":55,"column":602,"offset":6174},"indent":[]}},{"type":"link","title":null,"url":"https://codepen.io/patricoferris/pen/paxZaw","children":[{"type":"text","value":"build-up on the same canvas","position":{"start":{"line":55,"column":603,"offset":6175},"end":{"line":55,"column":630,"offset":6202},"indent":[]}}],"position":{"start":{"line":55,"column":602,"offset":6174},"end":{"line":55,"column":676,"offset":6248},"indent":[]}},{"type":"text","value":" (click to see it go spectacularly wrong). Next is a translate(width/2, height/2) which moves our current drawing location to the centre of our canvas. We then declare the fill colour of our triangle with fill(255, 0, 0)(making it red).","position":{"start":{"line":55,"column":676,"offset":6248},"end":{"line":55,"column":912,"offset":6484},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":5573},"end":{"line":55,"column":912,"offset":6484},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We want to create an equilateral triangle with side length s. The triangle itself is a function that takes the vertex coordinates as arguments — triangle(x1, y1, x2, y2, x3, y3) and in this example starting from the centre we have one vertex at (-s/2, 0) another at (s/2, 0) giving a bottom length of s . Now comes the trickier part. A very important aspect of most computer graphics is that the coordinate system starts in the top left corner (or wherever your origin is) and x increases left to right, whilst y increases top to bottom. To move of the screen we need a negative y value. Our last coordinate is given as (0, -sin(PI/3)) (if you’re stuck, think about cutting the triangle in two and using trigonometry).","position":{"start":{"line":57,"column":1,"offset":6486},"end":{"line":57,"column":719,"offset":7204},"indent":[]}}],"position":{"start":{"line":57,"column":1,"offset":6486},"end":{"line":57,"column":719,"offset":7204},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Step 2: Get Creative","position":{"start":{"line":59,"column":5,"offset":7210},"end":{"line":59,"column":25,"offset":7230},"indent":[]}}],"position":{"start":{"line":59,"column":1,"offset":7206},"end":{"line":59,"column":25,"offset":7230},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We’ve learnt how to set up our canvas and start drawing. Armed with the p5 ","position":{"start":{"line":61,"column":1,"offset":7232},"end":{"line":61,"column":76,"offset":7307},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/reference/","children":[{"type":"text","value":"reference page","position":{"start":{"line":61,"column":77,"offset":7308},"end":{"line":61,"column":91,"offset":7322},"indent":[]}}],"position":{"start":{"line":61,"column":76,"offset":7307},"end":{"line":61,"column":121,"offset":7352},"indent":[]}},{"type":"text","value":" and our creativity, we can make some truly stunning graphics. How about a bouncing ball animation?","position":{"start":{"line":61,"column":121,"offset":7352},"end":{"line":61,"column":220,"offset":7451},"indent":[]}}],"position":{"start":{"line":61,"column":1,"offset":7232},"end":{"line":61,"column":220,"offset":7451},"indent":[]}},{"type":"html","value":"<iframe height='400' scrolling='no' title='Bouncing Balls' src='//codepen.io/patricoferris/embed/PQpOrB/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/PQpOrB/'>Bouncing Balls</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":63,"column":1,"offset":7453},"end":{"line":64,"column":10,"offset":7927},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Let’s look at the interesting p5 aspects that we didn’t know before:","position":{"start":{"line":66,"column":1,"offset":7929},"end":{"line":66,"column":69,"offset":7997},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":7929},"end":{"line":66,"column":69,"offset":7997},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":true,"children":[{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"frameRate(20) — This enables us to specify the frame rate of our drawing loop, that is, how many times per second it redraws everything for us.","position":{"start":{"line":68,"column":3,"offset":8001},"end":{"line":68,"column":146,"offset":8144},"indent":[]}}],"position":{"start":{"line":68,"column":3,"offset":8001},"end":{"line":68,"column":146,"offset":8144},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":7999},"end":{"line":69,"column":1,"offset":8145},"indent":[1]}},{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"gravity = createVector(0, 9) — p5 allows us to ","position":{"start":{"line":70,"column":3,"offset":8148},"end":{"line":70,"column":50,"offset":8195},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/reference/#/p5.Vector","children":[{"type":"text","value":"create vector objects","position":{"start":{"line":70,"column":51,"offset":8196},"end":{"line":70,"column":72,"offset":8217},"indent":[]}}],"position":{"start":{"line":70,"column":50,"offset":8195},"end":{"line":70,"column":113,"offset":8258},"indent":[]}},{"type":"text","value":" with which we can perform vector operations like addition, multiplication, dot-product and cross-product. This is useful when we want to simulate physics like forces.","position":{"start":{"line":70,"column":113,"offset":8258},"end":{"line":70,"column":280,"offset":8425},"indent":[]}}],"position":{"start":{"line":70,"column":3,"offset":8148},"end":{"line":70,"column":280,"offset":8425},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":8146},"end":{"line":71,"column":1,"offset":8426},"indent":[1]}},{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"floor(random(50)) — Here we’re using p5 math functions. floor() takes a real number and rounds it down to the nearest integer. random(arg) produces a random number as small as 0 or up to 49. In this example, we are giving it to the ellipse(x, y, w)function to create randomly sized balls by setting the width to a random number. If we gave another argument it would set the ellipse’s height, but here it infers that we want a circle.","position":{"start":{"line":72,"column":3,"offset":8429},"end":{"line":72,"column":436,"offset":8862},"indent":[]}}],"position":{"start":{"line":72,"column":3,"offset":8429},"end":{"line":72,"column":436,"offset":8862},"indent":[]}}],"position":{"start":{"line":72,"column":1,"offset":8427},"end":{"line":73,"column":1,"offset":8863},"indent":[1]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"stroke(0) — This function sets the colour of our shape’s outline. If you don’t want any border you can add noStroke() .","position":{"start":{"line":74,"column":3,"offset":8866},"end":{"line":74,"column":122,"offset":8985},"indent":[]}}],"position":{"start":{"line":74,"column":3,"offset":8866},"end":{"line":74,"column":122,"offset":8985},"indent":[]}}],"position":{"start":{"line":74,"column":1,"offset":8864},"end":{"line":74,"column":122,"offset":8985},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":7999},"end":{"line":74,"column":122,"offset":8985},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"All you need now is to add some physics to these ideas and you have yourself a bouncing ball animation.","position":{"start":{"line":76,"column":1,"offset":8987},"end":{"line":76,"column":104,"offset":9090},"indent":[]}}],"position":{"start":{"line":76,"column":1,"offset":8987},"end":{"line":76,"column":104,"offset":9090},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Step 3: Experiment with p5","position":{"start":{"line":78,"column":5,"offset":9096},"end":{"line":78,"column":31,"offset":9122},"indent":[]}}],"position":{"start":{"line":78,"column":1,"offset":9092},"end":{"line":78,"column":31,"offset":9122},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Hopefully now you have a good understanding of the p5 fundamentals, but we’ve barely scratched the surface. This last example will use two extra features of p5: ","position":{"start":{"line":80,"column":1,"offset":9124},"end":{"line":80,"column":162,"offset":9285},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"interactivity","position":{"start":{"line":80,"column":163,"offset":9286},"end":{"line":80,"column":176,"offset":9299},"indent":[]}}],"position":{"start":{"line":80,"column":162,"offset":9285},"end":{"line":80,"column":177,"offset":9300},"indent":[]}},{"type":"text","value":" and* ","position":{"start":{"line":80,"column":177,"offset":9300},"end":{"line":80,"column":183,"offset":9306},"indent":[]}},{"type":"link","title":null,"url":"http://flafla2.github.io/2014/08/09/perlinnoise.html","children":[{"type":"text","value":"Perlin Noise","position":{"start":{"line":80,"column":184,"offset":9307},"end":{"line":80,"column":196,"offset":9319},"indent":[]}}],"position":{"start":{"line":80,"column":183,"offset":9306},"end":{"line":80,"column":251,"offset":9374},"indent":[]}},{"type":"text","value":"*. Keep reading to find out more on these two concepts.","position":{"start":{"line":80,"column":251,"offset":9374},"end":{"line":80,"column":306,"offset":9429},"indent":[]}}],"position":{"start":{"line":80,"column":1,"offset":9124},"end":{"line":80,"column":306,"offset":9429},"indent":[]}},{"type":"html","value":"<iframe height='400' scrolling='no' title='Pixel Fire' src='//codepen.io/patricoferris/embed/XZMxmV/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/XZMxmV/'>Pixel Fire</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":82,"column":1,"offset":9431},"end":{"line":83,"column":10,"offset":9897},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"In this CodePen I have created a relatively simple flame model using squares and Perlin Noise. First of all, how do we get user input? Lucky for us p5 has some functions that can help.","position":{"start":{"line":85,"column":1,"offset":9899},"end":{"line":85,"column":185,"offset":10083},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":9899},"end":{"line":85,"column":185,"offset":10083},"indent":[]}},{"type":"html","value":"<high-light className='JavaScript'>\nvar touch = false;\nfunction setup(){\n  createCanvas(640, 640);\n}\nfunction draw(){\n  if(touch){\n    fill(255, 0, 0);\n    rect(mouseX, mouseY, 20, 20);\n  }\n}\nfunction touchStarted(){\n  touch = true;\n}\nfunction touchEnded(){\n  touch = false;\n}\n</high-light>","position":{"start":{"line":87,"column":1,"offset":10085},"end":{"line":104,"column":14,"offset":10375},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"At the top of the code we have declared a boolean “flag” as to whether or not our mouse is being pressed — this allows us to do things if the mouse is being held down. The touchStarted() and touchEnded() are p5 functions that are executed whenever the mouse is pressed or released or the screen is touched and released. Lastly, in our rect() function we have the variables mouseX and mouseY which are p5 variables corresponding to the mouse’s current position. Oddly, these also refer to your ","position":{"start":{"line":106,"column":1,"offset":10377},"end":{"line":106,"column":494,"offset":10870},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/processing/p5.js/issues/1705","children":[{"type":"text","value":"“touch” coordinates","position":{"start":{"line":106,"column":495,"offset":10871},"end":{"line":106,"column":514,"offset":10890},"indent":[]}}],"position":{"start":{"line":106,"column":494,"offset":10870},"end":{"line":106,"column":564,"offset":10940},"indent":[]}},{"type":"text","value":". With all these variables and functions predefined for us we can focus on making visually stunning graphics, whilst not being hampered by having to code extra functions unrelated to the graphic we’re producing.","position":{"start":{"line":106,"column":564,"offset":10940},"end":{"line":106,"column":775,"offset":11151},"indent":[]}}],"position":{"start":{"line":106,"column":1,"offset":10377},"end":{"line":106,"column":775,"offset":11151},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now for the Perlin Noise. In 1983, tired with the artificial look of computer graphics, Ken Perlin developed a type of *gradient noise. *The basic idea being you create a big grid of gradients randomly and then use the dot product to interpolate between them. In short, we get random values based on the coordinate system we’re drawing on. Great! For each of our squares we can start them at a random position near our mouse, and generate a random upward vector using their position and Perlin Noise. Let’s look at the code:","position":{"start":{"line":108,"column":1,"offset":11153},"end":{"line":108,"column":525,"offset":11677},"indent":[]}}],"position":{"start":{"line":108,"column":1,"offset":11153},"end":{"line":108,"column":525,"offset":11677},"indent":[]}},{"type":"html","value":"<high-light className='JavaScript'>\nfunction Particle(x, y, color){\n  this.pos = createVector(x + random(-10, 10), y + random(-10, 10));\n  this.vel = createVector(floor(random(-1, 1))*noise(this.pos.x), -noise(this.pos.y)*7);\n  this.alpha = 255;\n  this.r = random(170, 255);\n  this.g = random(10, 255);\n  this.b = random(0, 100);\n  this.update = function(){\n    this.pos.add(this.vel);\n    this.alpha -= 5;\n  }\n  this.show = function(){\n    noStroke();\n    fill(this.r, this.g, this.b, this.alpha);\n    rect(this.pos.x, this.pos.y, 5, 5);\n  }\n  this.dead = function(){\n    if(this.alpha < 0){\n      return true;\n    }else{\n      return false;\n    }\n  }\n}\n</high-light>","position":{"start":{"line":110,"column":1,"offset":11679},"end":{"line":135,"column":14,"offset":12347},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Some key things to notice:","position":{"start":{"line":137,"column":1,"offset":12349},"end":{"line":137,"column":27,"offset":12375},"indent":[]}}],"position":{"start":{"line":137,"column":1,"offset":12349},"end":{"line":137,"column":27,"offset":12375},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":true,"children":[{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"noise(this.pos.x) — The Perlin Noise ","position":{"start":{"line":139,"column":3,"offset":12379},"end":{"line":139,"column":40,"offset":12416},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/reference/#/p5/noise","children":[{"type":"text","value":"function","position":{"start":{"line":139,"column":41,"offset":12417},"end":{"line":139,"column":49,"offset":12425},"indent":[]}}],"position":{"start":{"line":139,"column":40,"offset":12416},"end":{"line":139,"column":89,"offset":12465},"indent":[]}},{"type":"text","value":" that gets a random number based on the square’s current x position. It returns a value between 0 and 1.","position":{"start":{"line":139,"column":89,"offset":12465},"end":{"line":139,"column":193,"offset":12569},"indent":[]}}],"position":{"start":{"line":139,"column":3,"offset":12379},"end":{"line":139,"column":193,"offset":12569},"indent":[]}}],"position":{"start":{"line":139,"column":1,"offset":12377},"end":{"line":140,"column":1,"offset":12570},"indent":[1]}},{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"fill(this.r, this.g, this.b, this.alpha) — Here we have extended fill’s ability by including an alpha value for the objects transparency, by decreasing alpha in the update() function we get a nice fade out like a flame.","position":{"start":{"line":141,"column":3,"offset":12573},"end":{"line":141,"column":222,"offset":12792},"indent":[]}}],"position":{"start":{"line":141,"column":3,"offset":12573},"end":{"line":141,"column":222,"offset":12792},"indent":[]}}],"position":{"start":{"line":141,"column":1,"offset":12571},"end":{"line":142,"column":1,"offset":12793},"indent":[1]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"dead() — This function allows us to keep track of which particles have disappeared as their alpha is now less than zero. We can then splice() them out of our array to ensure we’re not drawing an unbounded number of particles over time which would cause performance issues.","position":{"start":{"line":143,"column":3,"offset":12796},"end":{"line":143,"column":275,"offset":13068},"indent":[]}}],"position":{"start":{"line":143,"column":3,"offset":12796},"end":{"line":143,"column":275,"offset":13068},"indent":[]}}],"position":{"start":{"line":143,"column":1,"offset":12794},"end":{"line":143,"column":275,"offset":13068},"indent":[]}}],"position":{"start":{"line":139,"column":1,"offset":12377},"end":{"line":143,"column":275,"offset":13068},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"As a challenge, you can also use blendMode() to make it seem even more realistic — check this ","position":{"start":{"line":145,"column":1,"offset":13070},"end":{"line":145,"column":95,"offset":13164},"indent":[]}},{"type":"link","title":null,"url":"https://codepen.io/anon/pen/YeOaJX","children":[{"type":"text","value":"alteration","position":{"start":{"line":145,"column":96,"offset":13165},"end":{"line":145,"column":106,"offset":13175},"indent":[]}}],"position":{"start":{"line":145,"column":95,"offset":13164},"end":{"line":145,"column":143,"offset":13212},"indent":[]}},{"type":"text","value":" to see it in action.","position":{"start":{"line":145,"column":143,"offset":13212},"end":{"line":145,"column":164,"offset":13233},"indent":[]}}],"position":{"start":{"line":145,"column":1,"offset":13070},"end":{"line":145,"column":164,"offset":13233},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"With only a few concepts and the p5 library, it is incredibly straightforward to start building anything you want. Be sure to checkout what else is possible with the library. Here are few cool ideas to get you started: ","position":{"start":{"line":147,"column":1,"offset":13235},"end":{"line":147,"column":220,"offset":13454},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/examples/3d-geometries.html","children":[{"type":"text","value":"3D graphics","position":{"start":{"line":147,"column":221,"offset":13455},"end":{"line":147,"column":232,"offset":13466},"indent":[]}}],"position":{"start":{"line":147,"column":220,"offset":13454},"end":{"line":147,"column":279,"offset":13513},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":147,"column":279,"offset":13513},"end":{"line":147,"column":281,"offset":13515},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/examples/dom-slider.html","children":[{"type":"text","value":"sliders","position":{"start":{"line":147,"column":282,"offset":13516},"end":{"line":147,"column":289,"offset":13523},"indent":[]}}],"position":{"start":{"line":147,"column":281,"offset":13515},"end":{"line":147,"column":333,"offset":13567},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":147,"column":333,"offset":13567},"end":{"line":147,"column":338,"offset":13572},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/examples/image-load-and-display-image.html","children":[{"type":"text","value":"images","position":{"start":{"line":147,"column":339,"offset":13573},"end":{"line":147,"column":345,"offset":13579},"indent":[]}}],"position":{"start":{"line":147,"column":338,"offset":13572},"end":{"line":147,"column":407,"offset":13641},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":147,"column":407,"offset":13641},"end":{"line":147,"column":408,"offset":13642},"indent":[]}}],"position":{"start":{"line":147,"column":1,"offset":13235},"end":{"line":147,"column":408,"offset":13642},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":149,"column":5,"offset":13648},"end":{"line":149,"column":15,"offset":13658},"indent":[]}}],"position":{"start":{"line":149,"column":1,"offset":13644},"end":{"line":149,"column":15,"offset":13658},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As computers and technology become ubiquitous in our daily lives and an increasing number of professions are now relying on computer literacy, p5.js is a beautiful example of how we can ensure as many people as possible have an entry-point to the wonderful world of computer programming. It also acts as a reminder to some more experienced programmers that creativity and imagination are vital in producing meaningful code and ultimately making the tech world a better place.","position":{"start":{"line":151,"column":1,"offset":13660},"end":{"line":151,"column":476,"offset":14135},"indent":[]}}],"position":{"start":{"line":151,"column":1,"offset":13660},"end":{"line":151,"column":476,"offset":14135},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Hopefully this intro to p5 has convinced you of its usefulness and has encouraged you to start taking your first steps into the world of graphics programming. Here are my recommendations for where to go next:","position":{"start":{"line":153,"column":1,"offset":14137},"end":{"line":153,"column":209,"offset":14345},"indent":[]}}],"position":{"start":{"line":153,"column":1,"offset":14137},"end":{"line":153,"column":209,"offset":14345},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":true,"children":[{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.youtube.com/user/shiffman","children":[{"type":"text","value":"The Coding Train","position":{"start":{"line":155,"column":4,"offset":14350},"end":{"line":155,"column":20,"offset":14366},"indent":[]}}],"position":{"start":{"line":155,"column":3,"offset":14349},"end":{"line":155,"column":60,"offset":14406},"indent":[]}},{"type":"text","value":" — A brilliant YouTube channel by Daniel Shiffman where he teaches JavaScript and p5.js amongst many other incredible things!","position":{"start":{"line":155,"column":60,"offset":14406},"end":{"line":155,"column":185,"offset":14531},"indent":[]}}],"position":{"start":{"line":155,"column":3,"offset":14349},"end":{"line":155,"column":185,"offset":14531},"indent":[]}}],"position":{"start":{"line":155,"column":1,"offset":14347},"end":{"line":156,"column":1,"offset":14532},"indent":[1]}},{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://p5js.org/examples/","children":[{"type":"text","value":"p5js.org ","position":{"start":{"line":157,"column":4,"offset":14536},"end":{"line":157,"column":13,"offset":14545},"indent":[]}}],"position":{"start":{"line":157,"column":3,"offset":14535},"end":{"line":157,"column":42,"offset":14574},"indent":[]}},{"type":"text","value":"— The examples page on this website is full of inspiring projects which you could recreate and extend further.","position":{"start":{"line":157,"column":42,"offset":14574},"end":{"line":157,"column":152,"offset":14684},"indent":[]}}],"position":{"start":{"line":157,"column":3,"offset":14535},"end":{"line":157,"column":152,"offset":14684},"indent":[]}}],"position":{"start":{"line":157,"column":1,"offset":14533},"end":{"line":158,"column":1,"offset":14685},"indent":[1]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.scratchapixel.com/index.php","children":[{"type":"text","value":"Sratchapixel","position":{"start":{"line":159,"column":4,"offset":14689},"end":{"line":159,"column":16,"offset":14701},"indent":[]}}],"position":{"start":{"line":159,"column":3,"offset":14688},"end":{"line":159,"column":58,"offset":14743},"indent":[]}},{"type":"text","value":" — If you feel ready to delve into the deeper concepts and implementations of computer graphics then this website is an incredible resource for you to use.","position":{"start":{"line":159,"column":58,"offset":14743},"end":{"line":159,"column":213,"offset":14898},"indent":[]}}],"position":{"start":{"line":159,"column":3,"offset":14688},"end":{"line":159,"column":213,"offset":14898},"indent":[]}}],"position":{"start":{"line":159,"column":1,"offset":14686},"end":{"line":159,"column":213,"offset":14898},"indent":[]}}],"position":{"start":{"line":155,"column":1,"offset":14347},"end":{"line":159,"column":213,"offset":14898},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"A special thanks to ","position":{"start":{"line":161,"column":1,"offset":14900},"end":{"line":161,"column":21,"offset":14920},"indent":[]}},{"type":"link","title":null,"url":"undefined","children":[{"type":"text","value":"Tom Read Cutting","position":{"start":{"line":161,"column":22,"offset":14921},"end":{"line":161,"column":38,"offset":14937},"indent":[]}}],"position":{"start":{"line":161,"column":21,"offset":14920},"end":{"line":161,"column":50,"offset":14949},"indent":[]}},{"type":"text","value":" for editing this article and ","position":{"start":{"line":161,"column":50,"offset":14949},"end":{"line":161,"column":80,"offset":14979},"indent":[]}},{"type":"link","title":null,"url":"undefined","children":[{"type":"text","value":"Christian Silver","position":{"start":{"line":161,"column":81,"offset":14980},"end":{"line":161,"column":97,"offset":14996},"indent":[]}}],"position":{"start":{"line":161,"column":80,"offset":14979},"end":{"line":161,"column":109,"offset":15008},"indent":[]}},{"type":"text","value":" for helping get it off the ground.","position":{"start":{"line":161,"column":109,"offset":15008},"end":{"line":161,"column":144,"offset":15043},"indent":[]}}],"position":{"start":{"line":161,"column":1,"offset":14900},"end":{"line":161,"column":144,"offset":15043},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":162,"column":1,"offset":15044}}}},{"id":"transformer-remark-markdown-html-ast-3f006e644e19741a63484fdacc517353-gatsby-remark-imagesgatsby-remark-prismjs-","value":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/patricoferris/image/upload/v1532857964/pf2018/blogposts/27-02-2018/tree.png","alt":"Recursive Tree"},"children":[],"position":{"start":{"line":8,"column":1,"offset":154},"end":{"line":8,"column":122,"offset":275}}}],"position":{"start":{"line":8,"column":1,"offset":154},"end":{"line":8,"column":122,"offset":275}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Graphics and computer programming are two dearly intertwined disciplines. The oscilloscope is often recognised as one of the first examples of “computer graphics”, the cathode-ray versions emitting a beam of electrons onto a phosphorescent screen. By using magnetic fields to change the beam’s direction, we can sweep from left to right and move up and down — the basic idea behind most CG! (I highly recommend watching this ","position":{"start":{"line":10,"column":1,"offset":277},"end":{"line":10,"column":426,"offset":702}}},{"type":"element","tagName":"a","properties":{"href":"https://archive.org/details/introductiontothecathoderayoscilloscope"},"children":[{"type":"text","value":"video","position":{"start":{"line":10,"column":427,"offset":703},"end":{"line":10,"column":432,"offset":708}}}],"position":{"start":{"line":10,"column":426,"offset":702},"end":{"line":10,"column":502,"offset":778}}},{"type":"text","value":" from 1970).","position":{"start":{"line":10,"column":502,"offset":778},"end":{"line":10,"column":514,"offset":790}}}],"position":{"start":{"line":10,"column":1,"offset":277},"end":{"line":10,"column":514,"offset":790}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We’ve come a long way since then — modern day graphics is a complicated science as well as an art, and the barrier to entry is constantly increasing. Graphics programming can be so complex, that a simple program to draw a triangle can be over ","position":{"start":{"line":12,"column":1,"offset":792},"end":{"line":12,"column":244,"offset":1035}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/SaschaWillems/Vulkan/blob/master/examples/triangle/triangle.cpp"},"children":[{"type":"text","value":"1000 lines of code","position":{"start":{"line":12,"column":245,"offset":1036},"end":{"line":12,"column":263,"offset":1054}}}],"position":{"start":{"line":12,"column":244,"offset":1035},"end":{"line":12,"column":348,"offset":1139}}},{"type":"text","value":"! However, this article will introduce you to ","position":{"start":{"line":12,"column":348,"offset":1139},"end":{"line":12,"column":394,"offset":1185}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/"},"children":[{"type":"text","value":"p5.js","position":{"start":{"line":12,"column":395,"offset":1186},"end":{"line":12,"column":400,"offset":1191}}}],"position":{"start":{"line":12,"column":394,"offset":1185},"end":{"line":12,"column":420,"offset":1211}}},{"type":"text","value":" (also known as p5). A simpler, less complex solution for people who want to start making computer graphics, but don’t want the headache of streams of boiler-plate code.","position":{"start":{"line":12,"column":420,"offset":1211},"end":{"line":12,"column":589,"offset":1380}}}],"position":{"start":{"line":12,"column":1,"offset":792},"end":{"line":12,"column":589,"offset":1380}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Straight from the landing page of the p5.js website.","position":{"start":{"line":14,"column":1,"offset":1382},"end":{"line":14,"column":53,"offset":1434}}}],"position":{"start":{"line":14,"column":1,"offset":1382},"end":{"line":14,"column":53,"offset":1434}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"…make coding accessible for artists, designers, educators and beginners…","position":{"start":{"line":15,"column":5,"offset":1439},"end":{"line":15,"column":77,"offset":1511}}}],"position":{"start":{"line":15,"column":3,"offset":1437},"end":{"line":15,"column":77,"offset":1511}}},{"type":"text","value":"\n"}],"position":{"start":{"line":15,"column":1,"offset":1435},"end":{"line":15,"column":77,"offset":1511}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"p5.js is the result of hard-work of the ","position":{"start":{"line":17,"column":1,"offset":1513},"end":{"line":17,"column":41,"offset":1553}}},{"type":"element","tagName":"a","properties":{"href":"https://processingfoundation.org/"},"children":[{"type":"text","value":"Processing Foundation","position":{"start":{"line":17,"column":42,"offset":1554},"end":{"line":17,"column":63,"offset":1575}}}],"position":{"start":{"line":17,"column":41,"offset":1553},"end":{"line":17,"column":99,"offset":1611}}},{"type":"text","value":", a group focused on spreading computer and visual literacy. It distills their ","position":{"start":{"line":17,"column":99,"offset":1611},"end":{"line":17,"column":178,"offset":1690}}},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/Processing_(programming_language)"},"children":[{"type":"text","value":"Processing","position":{"start":{"line":17,"column":179,"offset":1691},"end":{"line":17,"column":189,"offset":1701}}}],"position":{"start":{"line":17,"column":178,"offset":1690},"end":{"line":17,"column":255,"offset":1767}}},{"type":"text","value":" language into a JavaScript library that makes creating graphics easy and accessible whilst providing an ideal platform to springboard people’s careers in computer graphics. It should be mentioned now that a lot of inspiration has been taken from ","position":{"start":{"line":17,"column":255,"offset":1767},"end":{"line":17,"column":502,"offset":2014}}},{"type":"element","tagName":"a","properties":{"href":"http://shiffman.net/"},"children":[{"type":"text","value":"Daniel Shiffman’s","position":{"start":{"line":17,"column":503,"offset":2015},"end":{"line":17,"column":520,"offset":2032}}}],"position":{"start":{"line":17,"column":502,"offset":2014},"end":{"line":17,"column":543,"offset":2055}}},{"type":"text","value":" p5 projects (from the ","position":{"start":{"line":17,"column":543,"offset":2055},"end":{"line":17,"column":566,"offset":2078}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/CodingTrain/website/tree/master/CodingChallenges/CC_03_Snake_game_p5.js"},"children":[{"type":"text","value":"classic snake game","position":{"start":{"line":17,"column":567,"offset":2079},"end":{"line":17,"column":585,"offset":2097}}}],"position":{"start":{"line":17,"column":566,"offset":2078},"end":{"line":17,"column":678,"offset":2190}}},{"type":"text","value":", to a ","position":{"start":{"line":17,"column":678,"offset":2190},"end":{"line":17,"column":685,"offset":2197}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/CodingTrain/website/tree/master/CodingChallenges/CC_93_DoublePendulum_p5.js"},"children":[{"type":"text","value":"double pendulum","position":{"start":{"line":17,"column":686,"offset":2198},"end":{"line":17,"column":701,"offset":2213}}}],"position":{"start":{"line":17,"column":685,"offset":2197},"end":{"line":17,"column":798,"offset":2310}}},{"type":"text","value":"). I can’t urge you enough to follow these projects to really improve your understanding of coding concepts and the p5 library.","position":{"start":{"line":17,"column":798,"offset":2310},"end":{"line":17,"column":925,"offset":2437}}}],"position":{"start":{"line":17,"column":1,"offset":1513},"end":{"line":17,"column":925,"offset":2437}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Some prerequisites:","position":{"start":{"line":19,"column":5,"offset":2443},"end":{"line":19,"column":24,"offset":2462}}}],"position":{"start":{"line":19,"column":1,"offset":2439},"end":{"line":19,"column":24,"offset":2462}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Before jumping into the p5 code I first want to make clear that there is assumed knowledge of HTML5 and JavaScript including arrays, functions, variables etc. in the rest of this article. If you have a good grasp of JavaScript then skip to the p5 code below, otherwise here are few resources to get you up to scratch.","position":{"start":{"line":21,"column":1,"offset":2464},"end":{"line":21,"column":318,"offset":2781}}}],"position":{"start":{"line":21,"column":1,"offset":2464},"end":{"line":21,"column":318,"offset":2781}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.youtube.com/watch?v=spIVWmv1jnw"},"children":[{"type":"text","value":"HaC Intro to Programming","position":{"start":{"line":23,"column":4,"offset":2786},"end":{"line":23,"column":28,"offset":2810}}}],"position":{"start":{"line":23,"column":3,"offset":2785},"end":{"line":23,"column":74,"offset":2856}}},{"type":"text","value":" — A workshop that is being run by Hackers at Cambridge to help anyone start learning to program (which uses JavaScript).","position":{"start":{"line":23,"column":74,"offset":2856},"end":{"line":23,"column":195,"offset":2977}}}],"position":{"start":{"line":23,"column":3,"offset":2785},"end":{"line":23,"column":195,"offset":2977}}},{"type":"text","value":"\n"}],"position":{"start":{"line":23,"column":1,"offset":2783},"end":{"line":24,"column":1,"offset":2978}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.codecademy.com/learn/introduction-to-javascript"},"children":[{"type":"text","value":"Codecademy","position":{"start":{"line":25,"column":4,"offset":2982},"end":{"line":25,"column":14,"offset":2992}}}],"position":{"start":{"line":25,"column":3,"offset":2981},"end":{"line":25,"column":76,"offset":3054}}},{"type":"text","value":" — a great resource for learning how to code with instant feedback in your browser.","position":{"start":{"line":25,"column":76,"offset":3054},"end":{"line":25,"column":159,"offset":3137}}}],"position":{"start":{"line":25,"column":3,"offset":2981},"end":{"line":25,"column":159,"offset":3137}}},{"type":"text","value":"\n"}],"position":{"start":{"line":25,"column":1,"offset":2979},"end":{"line":26,"column":1,"offset":3138}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Web/JavaScript"},"children":[{"type":"text","value":"MDN","position":{"start":{"line":27,"column":4,"offset":3142},"end":{"line":27,"column":7,"offset":3145}}}],"position":{"start":{"line":27,"column":3,"offset":3141},"end":{"line":27,"column":65,"offset":3203}}},{"type":"text","value":" — a great resource for learning about all aspects of web development.","position":{"start":{"line":27,"column":65,"offset":3203},"end":{"line":27,"column":135,"offset":3273}}}],"position":{"start":{"line":27,"column":3,"offset":3141},"end":{"line":27,"column":135,"offset":3273}}},{"type":"text","value":"\n"}],"position":{"start":{"line":27,"column":1,"offset":3139},"end":{"line":28,"column":1,"offset":3274}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://codepen.io/"},"children":[{"type":"text","value":"Codepen","position":{"start":{"line":29,"column":4,"offset":3278},"end":{"line":29,"column":11,"offset":3285}}}],"position":{"start":{"line":29,"column":3,"offset":3277},"end":{"line":29,"column":33,"offset":3307}}},{"type":"text","value":" — a brilliant online text-editor for creating cool projects in HTML, CSS and JavaScript. Equally good for getting inspiration from a lot of talented users. Another possible solution would be ","position":{"start":{"line":29,"column":33,"offset":3307},"end":{"line":29,"column":225,"offset":3499}}},{"type":"element","tagName":"a","properties":{"href":"https://jsfiddle.net/"},"children":[{"type":"text","value":"JSFiddle","position":{"start":{"line":29,"column":226,"offset":3500},"end":{"line":29,"column":234,"offset":3508}}}],"position":{"start":{"line":29,"column":225,"offset":3499},"end":{"line":29,"column":258,"offset":3532}}},{"type":"text","value":".","position":{"start":{"line":29,"column":258,"offset":3532},"end":{"line":29,"column":259,"offset":3533}}}],"position":{"start":{"line":29,"column":3,"offset":3277},"end":{"line":29,"column":259,"offset":3533}}},{"type":"text","value":"\n"}],"position":{"start":{"line":29,"column":1,"offset":3275},"end":{"line":29,"column":259,"offset":3533}}},{"type":"text","value":"\n"}],"position":{"start":{"line":23,"column":1,"offset":2783},"end":{"line":29,"column":259,"offset":3533}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"What follows is a series of steps that will introduce you to p5 concepts. With code examples and explanations I hope to give you enough information to understand the ideas, but to fully grasp the concepts you will have to dive into the code, experiment with it, break it and learn from it. So without further ado, let’s get coding.","position":{"start":{"line":31,"column":1,"offset":3535},"end":{"line":31,"column":332,"offset":3866}}}],"position":{"start":{"line":31,"column":1,"offset":3535},"end":{"line":31,"column":332,"offset":3866}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Step 1: The Setup","position":{"start":{"line":33,"column":5,"offset":3872},"end":{"line":33,"column":22,"offset":3889}}}],"position":{"start":{"line":33,"column":1,"offset":3868},"end":{"line":33,"column":22,"offset":3889}}},{"type":"text","value":"\n"},{"type":"raw","value":"<high-light className='JavaScript'>\nfunction setup(){\n  //Initialisation of canvas, objects, variables etc.\n}\nfunction draw(){\n  //The drawing loop - updates at a constant rate declared in setup\n}\n</high-light>","position":{"start":{"line":35,"column":1,"offset":3891},"end":{"line":42,"column":14,"offset":4101}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"p5 is really simple to setup once you know what to do. There are two files shown above — an index.html and a template.js. The index.html file gets the libraries for us and the template.js is the barebones structure of a p5 project and at the moment it does nothing! Within this we have two functions:","position":{"start":{"line":44,"column":1,"offset":4103},"end":{"line":44,"column":301,"offset":4403}}}],"position":{"start":{"line":44,"column":1,"offset":4103},"end":{"line":44,"column":301,"offset":4403}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"setup() — a function for creating what we will need for our graphic or project. Like creating a canvas, initialising some objects or arrays etc.","position":{"start":{"line":46,"column":3,"offset":4407},"end":{"line":46,"column":147,"offset":4551}}}],"position":{"start":{"line":46,"column":3,"offset":4407},"end":{"line":46,"column":147,"offset":4551}}},{"type":"text","value":"\n"}],"position":{"start":{"line":46,"column":1,"offset":4405},"end":{"line":47,"column":1,"offset":4552}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"draw() — a function which will be called periodically like a loop. This is where will call draw functions and update functions to make graphics and animations.","position":{"start":{"line":48,"column":3,"offset":4555},"end":{"line":48,"column":162,"offset":4714}}}],"position":{"start":{"line":48,"column":3,"offset":4555},"end":{"line":48,"column":162,"offset":4714}}},{"type":"text","value":"\n"}],"position":{"start":{"line":48,"column":1,"offset":4553},"end":{"line":48,"column":162,"offset":4714}}},{"type":"text","value":"\n"}],"position":{"start":{"line":46,"column":1,"offset":4405},"end":{"line":48,"column":162,"offset":4714}}},{"type":"text","value":"\n"},{"type":"raw","value":"<iframe height='400' scrolling='no' title='Simple Triangle Tutorial' src='//codepen.io/patricoferris/embed/dddxjr/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/dddxjr/'>Simple Triangle Tutorial</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":50,"column":1,"offset":4716},"end":{"line":51,"column":10,"offset":5210}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let’s first look at the setup function. We used the p5 function createCanvas(width, height) which created and initialised a ","position":{"start":{"line":53,"column":1,"offset":5212},"end":{"line":53,"column":125,"offset":5336}}},{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API"},"children":[{"type":"text","value":"canvas","position":{"start":{"line":53,"column":126,"offset":5337},"end":{"line":53,"column":132,"offset":5343}}}],"position":{"start":{"line":53,"column":125,"offset":5336},"end":{"line":53,"column":194,"offset":5405}}},{"type":"text","value":" with arguments width and height. Now within our setup() and createCanvas() functions we can reference the variables width and height without ever instantiating them!","position":{"start":{"line":53,"column":194,"offset":5405},"end":{"line":53,"column":360,"offset":5571}}}],"position":{"start":{"line":53,"column":1,"offset":5212},"end":{"line":53,"column":360,"offset":5571}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Next comes the meaty, draw function. I have purposefully put extra code in here so we can learn more about what p5 has to offer. Firstly always remember that draw() is a loop that runs from top to bottom. Initially, we set the background (of our canvas) to white with background(255) which is the same as background(255, 255, 255) (maximising the red, green and blue values to give white). This may seem simple, but implicitly we are also clearing our canvas every loop… in one line of code! This will be useful for animations later as we want to redraw objects in a new location rather than have the ","position":{"start":{"line":55,"column":1,"offset":5573},"end":{"line":55,"column":602,"offset":6174}}},{"type":"element","tagName":"a","properties":{"href":"https://codepen.io/patricoferris/pen/paxZaw"},"children":[{"type":"text","value":"build-up on the same canvas","position":{"start":{"line":55,"column":603,"offset":6175},"end":{"line":55,"column":630,"offset":6202}}}],"position":{"start":{"line":55,"column":602,"offset":6174},"end":{"line":55,"column":676,"offset":6248}}},{"type":"text","value":" (click to see it go spectacularly wrong). Next is a translate(width/2, height/2) which moves our current drawing location to the centre of our canvas. We then declare the fill colour of our triangle with fill(255, 0, 0)(making it red).","position":{"start":{"line":55,"column":676,"offset":6248},"end":{"line":55,"column":912,"offset":6484}}}],"position":{"start":{"line":55,"column":1,"offset":5573},"end":{"line":55,"column":912,"offset":6484}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We want to create an equilateral triangle with side length s. The triangle itself is a function that takes the vertex coordinates as arguments — triangle(x1, y1, x2, y2, x3, y3) and in this example starting from the centre we have one vertex at (-s/2, 0) another at (s/2, 0) giving a bottom length of s . Now comes the trickier part. A very important aspect of most computer graphics is that the coordinate system starts in the top left corner (or wherever your origin is) and x increases left to right, whilst y increases top to bottom. To move of the screen we need a negative y value. Our last coordinate is given as (0, -sin(PI/3)) (if you’re stuck, think about cutting the triangle in two and using trigonometry).","position":{"start":{"line":57,"column":1,"offset":6486},"end":{"line":57,"column":719,"offset":7204}}}],"position":{"start":{"line":57,"column":1,"offset":6486},"end":{"line":57,"column":719,"offset":7204}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Step 2: Get Creative","position":{"start":{"line":59,"column":5,"offset":7210},"end":{"line":59,"column":25,"offset":7230}}}],"position":{"start":{"line":59,"column":1,"offset":7206},"end":{"line":59,"column":25,"offset":7230}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We’ve learnt how to set up our canvas and start drawing. Armed with the p5 ","position":{"start":{"line":61,"column":1,"offset":7232},"end":{"line":61,"column":76,"offset":7307}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/reference/"},"children":[{"type":"text","value":"reference page","position":{"start":{"line":61,"column":77,"offset":7308},"end":{"line":61,"column":91,"offset":7322}}}],"position":{"start":{"line":61,"column":76,"offset":7307},"end":{"line":61,"column":121,"offset":7352}}},{"type":"text","value":" and our creativity, we can make some truly stunning graphics. How about a bouncing ball animation?","position":{"start":{"line":61,"column":121,"offset":7352},"end":{"line":61,"column":220,"offset":7451}}}],"position":{"start":{"line":61,"column":1,"offset":7232},"end":{"line":61,"column":220,"offset":7451}}},{"type":"text","value":"\n"},{"type":"raw","value":"<iframe height='400' scrolling='no' title='Bouncing Balls' src='//codepen.io/patricoferris/embed/PQpOrB/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/PQpOrB/'>Bouncing Balls</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":63,"column":1,"offset":7453},"end":{"line":64,"column":10,"offset":7927}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let’s look at the interesting p5 aspects that we didn’t know before:","position":{"start":{"line":66,"column":1,"offset":7929},"end":{"line":66,"column":69,"offset":7997}}}],"position":{"start":{"line":66,"column":1,"offset":7929},"end":{"line":66,"column":69,"offset":7997}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"frameRate(20) — This enables us to specify the frame rate of our drawing loop, that is, how many times per second it redraws everything for us.","position":{"start":{"line":68,"column":3,"offset":8001},"end":{"line":68,"column":146,"offset":8144}}}],"position":{"start":{"line":68,"column":3,"offset":8001},"end":{"line":68,"column":146,"offset":8144}}},{"type":"text","value":"\n"}],"position":{"start":{"line":68,"column":1,"offset":7999},"end":{"line":69,"column":1,"offset":8145}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"gravity = createVector(0, 9) — p5 allows us to ","position":{"start":{"line":70,"column":3,"offset":8148},"end":{"line":70,"column":50,"offset":8195}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/reference/#/p5.Vector"},"children":[{"type":"text","value":"create vector objects","position":{"start":{"line":70,"column":51,"offset":8196},"end":{"line":70,"column":72,"offset":8217}}}],"position":{"start":{"line":70,"column":50,"offset":8195},"end":{"line":70,"column":113,"offset":8258}}},{"type":"text","value":" with which we can perform vector operations like addition, multiplication, dot-product and cross-product. This is useful when we want to simulate physics like forces.","position":{"start":{"line":70,"column":113,"offset":8258},"end":{"line":70,"column":280,"offset":8425}}}],"position":{"start":{"line":70,"column":3,"offset":8148},"end":{"line":70,"column":280,"offset":8425}}},{"type":"text","value":"\n"}],"position":{"start":{"line":70,"column":1,"offset":8146},"end":{"line":71,"column":1,"offset":8426}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"floor(random(50)) — Here we’re using p5 math functions. floor() takes a real number and rounds it down to the nearest integer. random(arg) produces a random number as small as 0 or up to 49. In this example, we are giving it to the ellipse(x, y, w)function to create randomly sized balls by setting the width to a random number. If we gave another argument it would set the ellipse’s height, but here it infers that we want a circle.","position":{"start":{"line":72,"column":3,"offset":8429},"end":{"line":72,"column":436,"offset":8862}}}],"position":{"start":{"line":72,"column":3,"offset":8429},"end":{"line":72,"column":436,"offset":8862}}},{"type":"text","value":"\n"}],"position":{"start":{"line":72,"column":1,"offset":8427},"end":{"line":73,"column":1,"offset":8863}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"stroke(0) — This function sets the colour of our shape’s outline. If you don’t want any border you can add noStroke() .","position":{"start":{"line":74,"column":3,"offset":8866},"end":{"line":74,"column":122,"offset":8985}}}],"position":{"start":{"line":74,"column":3,"offset":8866},"end":{"line":74,"column":122,"offset":8985}}},{"type":"text","value":"\n"}],"position":{"start":{"line":74,"column":1,"offset":8864},"end":{"line":74,"column":122,"offset":8985}}},{"type":"text","value":"\n"}],"position":{"start":{"line":68,"column":1,"offset":7999},"end":{"line":74,"column":122,"offset":8985}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"All you need now is to add some physics to these ideas and you have yourself a bouncing ball animation.","position":{"start":{"line":76,"column":1,"offset":8987},"end":{"line":76,"column":104,"offset":9090}}}],"position":{"start":{"line":76,"column":1,"offset":8987},"end":{"line":76,"column":104,"offset":9090}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Step 3: Experiment with p5","position":{"start":{"line":78,"column":5,"offset":9096},"end":{"line":78,"column":31,"offset":9122}}}],"position":{"start":{"line":78,"column":1,"offset":9092},"end":{"line":78,"column":31,"offset":9122}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Hopefully now you have a good understanding of the p5 fundamentals, but we’ve barely scratched the surface. This last example will use two extra features of p5: ","position":{"start":{"line":80,"column":1,"offset":9124},"end":{"line":80,"column":162,"offset":9285}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"interactivity","position":{"start":{"line":80,"column":163,"offset":9286},"end":{"line":80,"column":176,"offset":9299}}}],"position":{"start":{"line":80,"column":162,"offset":9285},"end":{"line":80,"column":177,"offset":9300}}},{"type":"text","value":" and* ","position":{"start":{"line":80,"column":177,"offset":9300},"end":{"line":80,"column":183,"offset":9306}}},{"type":"element","tagName":"a","properties":{"href":"http://flafla2.github.io/2014/08/09/perlinnoise.html"},"children":[{"type":"text","value":"Perlin Noise","position":{"start":{"line":80,"column":184,"offset":9307},"end":{"line":80,"column":196,"offset":9319}}}],"position":{"start":{"line":80,"column":183,"offset":9306},"end":{"line":80,"column":251,"offset":9374}}},{"type":"text","value":"*. Keep reading to find out more on these two concepts.","position":{"start":{"line":80,"column":251,"offset":9374},"end":{"line":80,"column":306,"offset":9429}}}],"position":{"start":{"line":80,"column":1,"offset":9124},"end":{"line":80,"column":306,"offset":9429}}},{"type":"text","value":"\n"},{"type":"raw","value":"<iframe height='400' scrolling='no' title='Pixel Fire' src='//codepen.io/patricoferris/embed/XZMxmV/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/XZMxmV/'>Pixel Fire</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":82,"column":1,"offset":9431},"end":{"line":83,"column":10,"offset":9897}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In this CodePen I have created a relatively simple flame model using squares and Perlin Noise. First of all, how do we get user input? Lucky for us p5 has some functions that can help.","position":{"start":{"line":85,"column":1,"offset":9899},"end":{"line":85,"column":185,"offset":10083}}}],"position":{"start":{"line":85,"column":1,"offset":9899},"end":{"line":85,"column":185,"offset":10083}}},{"type":"text","value":"\n"},{"type":"raw","value":"<high-light className='JavaScript'>\nvar touch = false;\nfunction setup(){\n  createCanvas(640, 640);\n}\nfunction draw(){\n  if(touch){\n    fill(255, 0, 0);\n    rect(mouseX, mouseY, 20, 20);\n  }\n}\nfunction touchStarted(){\n  touch = true;\n}\nfunction touchEnded(){\n  touch = false;\n}\n</high-light>","position":{"start":{"line":87,"column":1,"offset":10085},"end":{"line":104,"column":14,"offset":10375}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"At the top of the code we have declared a boolean “flag” as to whether or not our mouse is being pressed — this allows us to do things if the mouse is being held down. The touchStarted() and touchEnded() are p5 functions that are executed whenever the mouse is pressed or released or the screen is touched and released. Lastly, in our rect() function we have the variables mouseX and mouseY which are p5 variables corresponding to the mouse’s current position. Oddly, these also refer to your ","position":{"start":{"line":106,"column":1,"offset":10377},"end":{"line":106,"column":494,"offset":10870}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/processing/p5.js/issues/1705"},"children":[{"type":"text","value":"“touch” coordinates","position":{"start":{"line":106,"column":495,"offset":10871},"end":{"line":106,"column":514,"offset":10890}}}],"position":{"start":{"line":106,"column":494,"offset":10870},"end":{"line":106,"column":564,"offset":10940}}},{"type":"text","value":". With all these variables and functions predefined for us we can focus on making visually stunning graphics, whilst not being hampered by having to code extra functions unrelated to the graphic we’re producing.","position":{"start":{"line":106,"column":564,"offset":10940},"end":{"line":106,"column":775,"offset":11151}}}],"position":{"start":{"line":106,"column":1,"offset":10377},"end":{"line":106,"column":775,"offset":11151}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now for the Perlin Noise. In 1983, tired with the artificial look of computer graphics, Ken Perlin developed a type of *gradient noise. *The basic idea being you create a big grid of gradients randomly and then use the dot product to interpolate between them. In short, we get random values based on the coordinate system we’re drawing on. Great! For each of our squares we can start them at a random position near our mouse, and generate a random upward vector using their position and Perlin Noise. Let’s look at the code:","position":{"start":{"line":108,"column":1,"offset":11153},"end":{"line":108,"column":525,"offset":11677}}}],"position":{"start":{"line":108,"column":1,"offset":11153},"end":{"line":108,"column":525,"offset":11677}}},{"type":"text","value":"\n"},{"type":"raw","value":"<high-light className='JavaScript'>\nfunction Particle(x, y, color){\n  this.pos = createVector(x + random(-10, 10), y + random(-10, 10));\n  this.vel = createVector(floor(random(-1, 1))*noise(this.pos.x), -noise(this.pos.y)*7);\n  this.alpha = 255;\n  this.r = random(170, 255);\n  this.g = random(10, 255);\n  this.b = random(0, 100);\n  this.update = function(){\n    this.pos.add(this.vel);\n    this.alpha -= 5;\n  }\n  this.show = function(){\n    noStroke();\n    fill(this.r, this.g, this.b, this.alpha);\n    rect(this.pos.x, this.pos.y, 5, 5);\n  }\n  this.dead = function(){\n    if(this.alpha < 0){\n      return true;\n    }else{\n      return false;\n    }\n  }\n}\n</high-light>","position":{"start":{"line":110,"column":1,"offset":11679},"end":{"line":135,"column":14,"offset":12347}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Some key things to notice:","position":{"start":{"line":137,"column":1,"offset":12349},"end":{"line":137,"column":27,"offset":12375}}}],"position":{"start":{"line":137,"column":1,"offset":12349},"end":{"line":137,"column":27,"offset":12375}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"noise(this.pos.x) — The Perlin Noise ","position":{"start":{"line":139,"column":3,"offset":12379},"end":{"line":139,"column":40,"offset":12416}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/reference/#/p5/noise"},"children":[{"type":"text","value":"function","position":{"start":{"line":139,"column":41,"offset":12417},"end":{"line":139,"column":49,"offset":12425}}}],"position":{"start":{"line":139,"column":40,"offset":12416},"end":{"line":139,"column":89,"offset":12465}}},{"type":"text","value":" that gets a random number based on the square’s current x position. It returns a value between 0 and 1.","position":{"start":{"line":139,"column":89,"offset":12465},"end":{"line":139,"column":193,"offset":12569}}}],"position":{"start":{"line":139,"column":3,"offset":12379},"end":{"line":139,"column":193,"offset":12569}}},{"type":"text","value":"\n"}],"position":{"start":{"line":139,"column":1,"offset":12377},"end":{"line":140,"column":1,"offset":12570}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"fill(this.r, this.g, this.b, this.alpha) — Here we have extended fill’s ability by including an alpha value for the objects transparency, by decreasing alpha in the update() function we get a nice fade out like a flame.","position":{"start":{"line":141,"column":3,"offset":12573},"end":{"line":141,"column":222,"offset":12792}}}],"position":{"start":{"line":141,"column":3,"offset":12573},"end":{"line":141,"column":222,"offset":12792}}},{"type":"text","value":"\n"}],"position":{"start":{"line":141,"column":1,"offset":12571},"end":{"line":142,"column":1,"offset":12793}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"dead() — This function allows us to keep track of which particles have disappeared as their alpha is now less than zero. We can then splice() them out of our array to ensure we’re not drawing an unbounded number of particles over time which would cause performance issues.","position":{"start":{"line":143,"column":3,"offset":12796},"end":{"line":143,"column":275,"offset":13068}}}],"position":{"start":{"line":143,"column":3,"offset":12796},"end":{"line":143,"column":275,"offset":13068}}},{"type":"text","value":"\n"}],"position":{"start":{"line":143,"column":1,"offset":12794},"end":{"line":143,"column":275,"offset":13068}}},{"type":"text","value":"\n"}],"position":{"start":{"line":139,"column":1,"offset":12377},"end":{"line":143,"column":275,"offset":13068}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As a challenge, you can also use blendMode() to make it seem even more realistic — check this ","position":{"start":{"line":145,"column":1,"offset":13070},"end":{"line":145,"column":95,"offset":13164}}},{"type":"element","tagName":"a","properties":{"href":"https://codepen.io/anon/pen/YeOaJX"},"children":[{"type":"text","value":"alteration","position":{"start":{"line":145,"column":96,"offset":13165},"end":{"line":145,"column":106,"offset":13175}}}],"position":{"start":{"line":145,"column":95,"offset":13164},"end":{"line":145,"column":143,"offset":13212}}},{"type":"text","value":" to see it in action.","position":{"start":{"line":145,"column":143,"offset":13212},"end":{"line":145,"column":164,"offset":13233}}}],"position":{"start":{"line":145,"column":1,"offset":13070},"end":{"line":145,"column":164,"offset":13233}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"With only a few concepts and the p5 library, it is incredibly straightforward to start building anything you want. Be sure to checkout what else is possible with the library. Here are few cool ideas to get you started: ","position":{"start":{"line":147,"column":1,"offset":13235},"end":{"line":147,"column":220,"offset":13454}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/examples/3d-geometries.html"},"children":[{"type":"text","value":"3D graphics","position":{"start":{"line":147,"column":221,"offset":13455},"end":{"line":147,"column":232,"offset":13466}}}],"position":{"start":{"line":147,"column":220,"offset":13454},"end":{"line":147,"column":279,"offset":13513}}},{"type":"text","value":", ","position":{"start":{"line":147,"column":279,"offset":13513},"end":{"line":147,"column":281,"offset":13515}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/examples/dom-slider.html"},"children":[{"type":"text","value":"sliders","position":{"start":{"line":147,"column":282,"offset":13516},"end":{"line":147,"column":289,"offset":13523}}}],"position":{"start":{"line":147,"column":281,"offset":13515},"end":{"line":147,"column":333,"offset":13567}}},{"type":"text","value":" and ","position":{"start":{"line":147,"column":333,"offset":13567},"end":{"line":147,"column":338,"offset":13572}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/examples/image-load-and-display-image.html"},"children":[{"type":"text","value":"images","position":{"start":{"line":147,"column":339,"offset":13573},"end":{"line":147,"column":345,"offset":13579}}}],"position":{"start":{"line":147,"column":338,"offset":13572},"end":{"line":147,"column":407,"offset":13641}}},{"type":"text","value":".","position":{"start":{"line":147,"column":407,"offset":13641},"end":{"line":147,"column":408,"offset":13642}}}],"position":{"start":{"line":147,"column":1,"offset":13235},"end":{"line":147,"column":408,"offset":13642}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":149,"column":5,"offset":13648},"end":{"line":149,"column":15,"offset":13658}}}],"position":{"start":{"line":149,"column":1,"offset":13644},"end":{"line":149,"column":15,"offset":13658}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As computers and technology become ubiquitous in our daily lives and an increasing number of professions are now relying on computer literacy, p5.js is a beautiful example of how we can ensure as many people as possible have an entry-point to the wonderful world of computer programming. It also acts as a reminder to some more experienced programmers that creativity and imagination are vital in producing meaningful code and ultimately making the tech world a better place.","position":{"start":{"line":151,"column":1,"offset":13660},"end":{"line":151,"column":476,"offset":14135}}}],"position":{"start":{"line":151,"column":1,"offset":13660},"end":{"line":151,"column":476,"offset":14135}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Hopefully this intro to p5 has convinced you of its usefulness and has encouraged you to start taking your first steps into the world of graphics programming. Here are my recommendations for where to go next:","position":{"start":{"line":153,"column":1,"offset":14137},"end":{"line":153,"column":209,"offset":14345}}}],"position":{"start":{"line":153,"column":1,"offset":14137},"end":{"line":153,"column":209,"offset":14345}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.youtube.com/user/shiffman"},"children":[{"type":"text","value":"The Coding Train","position":{"start":{"line":155,"column":4,"offset":14350},"end":{"line":155,"column":20,"offset":14366}}}],"position":{"start":{"line":155,"column":3,"offset":14349},"end":{"line":155,"column":60,"offset":14406}}},{"type":"text","value":" — A brilliant YouTube channel by Daniel Shiffman where he teaches JavaScript and p5.js amongst many other incredible things!","position":{"start":{"line":155,"column":60,"offset":14406},"end":{"line":155,"column":185,"offset":14531}}}],"position":{"start":{"line":155,"column":3,"offset":14349},"end":{"line":155,"column":185,"offset":14531}}},{"type":"text","value":"\n"}],"position":{"start":{"line":155,"column":1,"offset":14347},"end":{"line":156,"column":1,"offset":14532}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/examples/"},"children":[{"type":"text","value":"p5js.org ","position":{"start":{"line":157,"column":4,"offset":14536},"end":{"line":157,"column":13,"offset":14545}}}],"position":{"start":{"line":157,"column":3,"offset":14535},"end":{"line":157,"column":42,"offset":14574}}},{"type":"text","value":"— The examples page on this website is full of inspiring projects which you could recreate and extend further.","position":{"start":{"line":157,"column":42,"offset":14574},"end":{"line":157,"column":152,"offset":14684}}}],"position":{"start":{"line":157,"column":3,"offset":14535},"end":{"line":157,"column":152,"offset":14684}}},{"type":"text","value":"\n"}],"position":{"start":{"line":157,"column":1,"offset":14533},"end":{"line":158,"column":1,"offset":14685}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.scratchapixel.com/index.php"},"children":[{"type":"text","value":"Sratchapixel","position":{"start":{"line":159,"column":4,"offset":14689},"end":{"line":159,"column":16,"offset":14701}}}],"position":{"start":{"line":159,"column":3,"offset":14688},"end":{"line":159,"column":58,"offset":14743}}},{"type":"text","value":" — If you feel ready to delve into the deeper concepts and implementations of computer graphics then this website is an incredible resource for you to use.","position":{"start":{"line":159,"column":58,"offset":14743},"end":{"line":159,"column":213,"offset":14898}}}],"position":{"start":{"line":159,"column":3,"offset":14688},"end":{"line":159,"column":213,"offset":14898}}},{"type":"text","value":"\n"}],"position":{"start":{"line":159,"column":1,"offset":14686},"end":{"line":159,"column":213,"offset":14898}}},{"type":"text","value":"\n"}],"position":{"start":{"line":155,"column":1,"offset":14347},"end":{"line":159,"column":213,"offset":14898}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A special thanks to ","position":{"start":{"line":161,"column":1,"offset":14900},"end":{"line":161,"column":21,"offset":14920}}},{"type":"element","tagName":"a","properties":{"href":"undefined"},"children":[{"type":"text","value":"Tom Read Cutting","position":{"start":{"line":161,"column":22,"offset":14921},"end":{"line":161,"column":38,"offset":14937}}}],"position":{"start":{"line":161,"column":21,"offset":14920},"end":{"line":161,"column":50,"offset":14949}}},{"type":"text","value":" for editing this article and ","position":{"start":{"line":161,"column":50,"offset":14949},"end":{"line":161,"column":80,"offset":14979}}},{"type":"element","tagName":"a","properties":{"href":"undefined"},"children":[{"type":"text","value":"Christian Silver","position":{"start":{"line":161,"column":81,"offset":14980},"end":{"line":161,"column":97,"offset":14996}}}],"position":{"start":{"line":161,"column":80,"offset":14979},"end":{"line":161,"column":109,"offset":15008}}},{"type":"text","value":" for helping get it off the ground.","position":{"start":{"line":161,"column":109,"offset":15008},"end":{"line":161,"column":144,"offset":15043}}}],"position":{"start":{"line":161,"column":1,"offset":14900},"end":{"line":161,"column":144,"offset":15043}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":162,"column":1,"offset":15044}}}},{"id":"transformer-remark-markdown-html-3f006e644e19741a63484fdacc517353-gatsby-remark-imagesgatsby-remark-prismjs-","value":"<p><img src=\"https://res.cloudinary.com/patricoferris/image/upload/v1532857964/pf2018/blogposts/27-02-2018/tree.png\" alt=\"Recursive Tree\"></p>\n<p>Graphics and computer programming are two dearly intertwined disciplines. The oscilloscope is often recognised as one of the first examples of “computer graphics”, the cathode-ray versions emitting a beam of electrons onto a phosphorescent screen. By using magnetic fields to change the beam’s direction, we can sweep from left to right and move up and down — the basic idea behind most CG! (I highly recommend watching this <a href=\"https://archive.org/details/introductiontothecathoderayoscilloscope\">video</a> from 1970).</p>\n<p>We’ve come a long way since then — modern day graphics is a complicated science as well as an art, and the barrier to entry is constantly increasing. Graphics programming can be so complex, that a simple program to draw a triangle can be over <a href=\"https://github.com/SaschaWillems/Vulkan/blob/master/examples/triangle/triangle.cpp\">1000 lines of code</a>! However, this article will introduce you to <a href=\"https://p5js.org/\">p5.js</a> (also known as p5). A simpler, less complex solution for people who want to start making computer graphics, but don’t want the headache of streams of boiler-plate code.</p>\n<p>Straight from the landing page of the p5.js website.</p>\n<blockquote>\n<h1>…make coding accessible for artists, designers, educators and beginners…</h1>\n</blockquote>\n<p>p5.js is the result of hard-work of the <a href=\"https://processingfoundation.org/\">Processing Foundation</a>, a group focused on spreading computer and visual literacy. It distills their <a href=\"https://en.wikipedia.org/wiki/Processing_(programming_language)\">Processing</a> language into a JavaScript library that makes creating graphics easy and accessible whilst providing an ideal platform to springboard people’s careers in computer graphics. It should be mentioned now that a lot of inspiration has been taken from <a href=\"http://shiffman.net/\">Daniel Shiffman’s</a> p5 projects (from the <a href=\"https://github.com/CodingTrain/website/tree/master/CodingChallenges/CC_03_Snake_game_p5.js\">classic snake game</a>, to a <a href=\"https://github.com/CodingTrain/website/tree/master/CodingChallenges/CC_93_DoublePendulum_p5.js\">double pendulum</a>). I can’t urge you enough to follow these projects to really improve your understanding of coding concepts and the p5 library.</p>\n<h3>Some prerequisites:</h3>\n<p>Before jumping into the p5 code I first want to make clear that there is assumed knowledge of HTML5 and JavaScript including arrays, functions, variables etc. in the rest of this article. If you have a good grasp of JavaScript then skip to the p5 code below, otherwise here are few resources to get you up to scratch.</p>\n<ul>\n<li>\n<p><a href=\"https://www.youtube.com/watch?v=spIVWmv1jnw\">HaC Intro to Programming</a> — A workshop that is being run by Hackers at Cambridge to help anyone start learning to program (which uses JavaScript).</p>\n</li>\n<li>\n<p><a href=\"https://www.codecademy.com/learn/introduction-to-javascript\">Codecademy</a> — a great resource for learning how to code with instant feedback in your browser.</p>\n</li>\n<li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript\">MDN</a> — a great resource for learning about all aspects of web development.</p>\n</li>\n<li>\n<p><a href=\"https://codepen.io/\">Codepen</a> — a brilliant online text-editor for creating cool projects in HTML, CSS and JavaScript. Equally good for getting inspiration from a lot of talented users. Another possible solution would be <a href=\"https://jsfiddle.net/\">JSFiddle</a>.</p>\n</li>\n</ul>\n<p>What follows is a series of steps that will introduce you to p5 concepts. With code examples and explanations I hope to give you enough information to understand the ideas, but to fully grasp the concepts you will have to dive into the code, experiment with it, break it and learn from it. So without further ado, let’s get coding.</p>\n<h3>Step 1: The Setup</h3>\n<high-light className='JavaScript'>\nfunction setup(){\n  //Initialisation of canvas, objects, variables etc.\n}\nfunction draw(){\n  //The drawing loop - updates at a constant rate declared in setup\n}\n</high-light>\n<p>p5 is really simple to setup once you know what to do. There are two files shown above — an index.html and a template.js. The index.html file gets the libraries for us and the template.js is the barebones structure of a p5 project and at the moment it does nothing! Within this we have two functions:</p>\n<ul>\n<li>\n<p>setup() — a function for creating what we will need for our graphic or project. Like creating a canvas, initialising some objects or arrays etc.</p>\n</li>\n<li>\n<p>draw() — a function which will be called periodically like a loop. This is where will call draw functions and update functions to make graphics and animations.</p>\n</li>\n</ul>\n<iframe height='400' scrolling='no' title='Simple Triangle Tutorial' src='//codepen.io/patricoferris/embed/dddxjr/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/dddxjr/'>Simple Triangle Tutorial</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>Let’s first look at the setup function. We used the p5 function createCanvas(width, height) which created and initialised a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API\">canvas</a> with arguments width and height. Now within our setup() and createCanvas() functions we can reference the variables width and height without ever instantiating them!</p>\n<p>Next comes the meaty, draw function. I have purposefully put extra code in here so we can learn more about what p5 has to offer. Firstly always remember that draw() is a loop that runs from top to bottom. Initially, we set the background (of our canvas) to white with background(255) which is the same as background(255, 255, 255) (maximising the red, green and blue values to give white). This may seem simple, but implicitly we are also clearing our canvas every loop… in one line of code! This will be useful for animations later as we want to redraw objects in a new location rather than have the <a href=\"https://codepen.io/patricoferris/pen/paxZaw\">build-up on the same canvas</a> (click to see it go spectacularly wrong). Next is a translate(width/2, height/2) which moves our current drawing location to the centre of our canvas. We then declare the fill colour of our triangle with fill(255, 0, 0)(making it red).</p>\n<p>We want to create an equilateral triangle with side length s. The triangle itself is a function that takes the vertex coordinates as arguments — triangle(x1, y1, x2, y2, x3, y3) and in this example starting from the centre we have one vertex at (-s/2, 0) another at (s/2, 0) giving a bottom length of s . Now comes the trickier part. A very important aspect of most computer graphics is that the coordinate system starts in the top left corner (or wherever your origin is) and x increases left to right, whilst y increases top to bottom. To move of the screen we need a negative y value. Our last coordinate is given as (0, -sin(PI/3)) (if you’re stuck, think about cutting the triangle in two and using trigonometry).</p>\n<h3>Step 2: Get Creative</h3>\n<p>We’ve learnt how to set up our canvas and start drawing. Armed with the p5 <a href=\"https://p5js.org/reference/\">reference page</a> and our creativity, we can make some truly stunning graphics. How about a bouncing ball animation?</p>\n<iframe height='400' scrolling='no' title='Bouncing Balls' src='//codepen.io/patricoferris/embed/PQpOrB/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/PQpOrB/'>Bouncing Balls</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>Let’s look at the interesting p5 aspects that we didn’t know before:</p>\n<ul>\n<li>\n<p>frameRate(20) — This enables us to specify the frame rate of our drawing loop, that is, how many times per second it redraws everything for us.</p>\n</li>\n<li>\n<p>gravity = createVector(0, 9) — p5 allows us to <a href=\"https://p5js.org/reference/#/p5.Vector\">create vector objects</a> with which we can perform vector operations like addition, multiplication, dot-product and cross-product. This is useful when we want to simulate physics like forces.</p>\n</li>\n<li>\n<p>floor(random(50)) — Here we’re using p5 math functions. floor() takes a real number and rounds it down to the nearest integer. random(arg) produces a random number as small as 0 or up to 49. In this example, we are giving it to the ellipse(x, y, w)function to create randomly sized balls by setting the width to a random number. If we gave another argument it would set the ellipse’s height, but here it infers that we want a circle.</p>\n</li>\n<li>\n<p>stroke(0) — This function sets the colour of our shape’s outline. If you don’t want any border you can add noStroke() .</p>\n</li>\n</ul>\n<p>All you need now is to add some physics to these ideas and you have yourself a bouncing ball animation.</p>\n<h3>Step 3: Experiment with p5</h3>\n<p>Hopefully now you have a good understanding of the p5 fundamentals, but we’ve barely scratched the surface. This last example will use two extra features of p5: <em>interactivity</em> and* <a href=\"http://flafla2.github.io/2014/08/09/perlinnoise.html\">Perlin Noise</a>*. Keep reading to find out more on these two concepts.</p>\n<iframe height='400' scrolling='no' title='Pixel Fire' src='//codepen.io/patricoferris/embed/XZMxmV/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/XZMxmV/'>Pixel Fire</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>In this CodePen I have created a relatively simple flame model using squares and Perlin Noise. First of all, how do we get user input? Lucky for us p5 has some functions that can help.</p>\n<high-light className='JavaScript'>\nvar touch = false;\nfunction setup(){\n  createCanvas(640, 640);\n}\nfunction draw(){\n  if(touch){\n    fill(255, 0, 0);\n    rect(mouseX, mouseY, 20, 20);\n  }\n}\nfunction touchStarted(){\n  touch = true;\n}\nfunction touchEnded(){\n  touch = false;\n}\n</high-light>\n<p>At the top of the code we have declared a boolean “flag” as to whether or not our mouse is being pressed — this allows us to do things if the mouse is being held down. The touchStarted() and touchEnded() are p5 functions that are executed whenever the mouse is pressed or released or the screen is touched and released. Lastly, in our rect() function we have the variables mouseX and mouseY which are p5 variables corresponding to the mouse’s current position. Oddly, these also refer to your <a href=\"https://github.com/processing/p5.js/issues/1705\">“touch” coordinates</a>. With all these variables and functions predefined for us we can focus on making visually stunning graphics, whilst not being hampered by having to code extra functions unrelated to the graphic we’re producing.</p>\n<p>Now for the Perlin Noise. In 1983, tired with the artificial look of computer graphics, Ken Perlin developed a type of *gradient noise. *The basic idea being you create a big grid of gradients randomly and then use the dot product to interpolate between them. In short, we get random values based on the coordinate system we’re drawing on. Great! For each of our squares we can start them at a random position near our mouse, and generate a random upward vector using their position and Perlin Noise. Let’s look at the code:</p>\n<high-light className='JavaScript'>\nfunction Particle(x, y, color){\n  this.pos = createVector(x + random(-10, 10), y + random(-10, 10));\n  this.vel = createVector(floor(random(-1, 1))*noise(this.pos.x), -noise(this.pos.y)*7);\n  this.alpha = 255;\n  this.r = random(170, 255);\n  this.g = random(10, 255);\n  this.b = random(0, 100);\n  this.update = function(){\n    this.pos.add(this.vel);\n    this.alpha -= 5;\n  }\n  this.show = function(){\n    noStroke();\n    fill(this.r, this.g, this.b, this.alpha);\n    rect(this.pos.x, this.pos.y, 5, 5);\n  }\n  this.dead = function(){\n    if(this.alpha < 0){\n      return true;\n    }else{\n      return false;\n    }\n  }\n}\n</high-light>\n<p>Some key things to notice:</p>\n<ul>\n<li>\n<p>noise(this.pos.x) — The Perlin Noise <a href=\"https://p5js.org/reference/#/p5/noise\">function</a> that gets a random number based on the square’s current x position. It returns a value between 0 and 1.</p>\n</li>\n<li>\n<p>fill(this.r, this.g, this.b, this.alpha) — Here we have extended fill’s ability by including an alpha value for the objects transparency, by decreasing alpha in the update() function we get a nice fade out like a flame.</p>\n</li>\n<li>\n<p>dead() — This function allows us to keep track of which particles have disappeared as their alpha is now less than zero. We can then splice() them out of our array to ensure we’re not drawing an unbounded number of particles over time which would cause performance issues.</p>\n</li>\n</ul>\n<p>As a challenge, you can also use blendMode() to make it seem even more realistic — check this <a href=\"https://codepen.io/anon/pen/YeOaJX\">alteration</a> to see it in action.</p>\n<p>With only a few concepts and the p5 library, it is incredibly straightforward to start building anything you want. Be sure to checkout what else is possible with the library. Here are few cool ideas to get you started: <a href=\"https://p5js.org/examples/3d-geometries.html\">3D graphics</a>, <a href=\"https://p5js.org/examples/dom-slider.html\">sliders</a> and <a href=\"https://p5js.org/examples/image-load-and-display-image.html\">images</a>.</p>\n<h3>Conclusion</h3>\n<p>As computers and technology become ubiquitous in our daily lives and an increasing number of professions are now relying on computer literacy, p5.js is a beautiful example of how we can ensure as many people as possible have an entry-point to the wonderful world of computer programming. It also acts as a reminder to some more experienced programmers that creativity and imagination are vital in producing meaningful code and ultimately making the tech world a better place.</p>\n<p>Hopefully this intro to p5 has convinced you of its usefulness and has encouraged you to start taking your first steps into the world of graphics programming. Here are my recommendations for where to go next:</p>\n<ul>\n<li>\n<p><a href=\"https://www.youtube.com/user/shiffman\">The Coding Train</a> — A brilliant YouTube channel by Daniel Shiffman where he teaches JavaScript and p5.js amongst many other incredible things!</p>\n</li>\n<li>\n<p><a href=\"https://p5js.org/examples/\">p5js.org </a>— The examples page on this website is full of inspiring projects which you could recreate and extend further.</p>\n</li>\n<li>\n<p><a href=\"https://www.scratchapixel.com/index.php\">Sratchapixel</a> — If you feel ready to delve into the deeper concepts and implementations of computer graphics then this website is an incredible resource for you to use.</p>\n</li>\n</ul>\n<p>A special thanks to <a href=\"undefined\">Tom Read Cutting</a> for editing this article and <a href=\"undefined\">Christian Silver</a> for helping get it off the ground.</p>"},{"id":"transformer-remark-markdown-ast-8cbd46de40cd7b69af650c089846cc33-gatsby-remark-imagesgatsby-remark-prismjs-","value":{"type":"root","children":[{"type":"yaml","value":"path: '/graphics-and-p5'\ntitle: 'Computer Graphics for Everyone'\nsubtitle: 'An Introduction to Computer Graphics using p5.js'\ndate: '2018-02-27'","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":6,"column":4,"offset":152},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://res.cloudinary.com/patricoferris/image/upload/v1532857964/pf2018/blogposts/27-02-2018/tree.png","alt":"Recursive Tree","position":{"start":{"line":8,"column":1,"offset":154},"end":{"line":8,"column":122,"offset":275},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":154},"end":{"line":8,"column":122,"offset":275},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Graphics and computer programming are two dearly intertwined disciplines. The oscilloscope is often recognised as one of the first examples of “computer graphics”, the cathode-ray versions emitting a beam of electrons onto a phosphorescent screen. By using magnetic fields to change the beam’s direction, we can sweep from left to right and move up and down — the basic idea behind most CG! (I highly recommend watching this ","position":{"start":{"line":10,"column":1,"offset":277},"end":{"line":10,"column":426,"offset":702},"indent":[]}},{"type":"link","title":null,"url":"https://archive.org/details/introductiontothecathoderayoscilloscope","children":[{"type":"text","value":"video","position":{"start":{"line":10,"column":427,"offset":703},"end":{"line":10,"column":432,"offset":708},"indent":[]}}],"position":{"start":{"line":10,"column":426,"offset":702},"end":{"line":10,"column":502,"offset":778},"indent":[]}},{"type":"text","value":" from 1970).","position":{"start":{"line":10,"column":502,"offset":778},"end":{"line":10,"column":514,"offset":790},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":277},"end":{"line":10,"column":514,"offset":790},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We’ve come a long way since then — modern day graphics is a complicated science as well as an art, and the barrier to entry is constantly increasing. Graphics programming can be so complex, that a simple program to draw a triangle can be over ","position":{"start":{"line":12,"column":1,"offset":792},"end":{"line":12,"column":244,"offset":1035},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/SaschaWillems/Vulkan/blob/master/examples/triangle/triangle.cpp","children":[{"type":"text","value":"1000 lines of code","position":{"start":{"line":12,"column":245,"offset":1036},"end":{"line":12,"column":263,"offset":1054},"indent":[]}}],"position":{"start":{"line":12,"column":244,"offset":1035},"end":{"line":12,"column":348,"offset":1139},"indent":[]}},{"type":"text","value":"! However, this article will introduce you to ","position":{"start":{"line":12,"column":348,"offset":1139},"end":{"line":12,"column":394,"offset":1185},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/","children":[{"type":"text","value":"p5.js","position":{"start":{"line":12,"column":395,"offset":1186},"end":{"line":12,"column":400,"offset":1191},"indent":[]}}],"position":{"start":{"line":12,"column":394,"offset":1185},"end":{"line":12,"column":420,"offset":1211},"indent":[]}},{"type":"text","value":" (also known as p5). A simpler, less complex solution for people who want to start making computer graphics, but don’t want the headache of streams of boiler-plate code.","position":{"start":{"line":12,"column":420,"offset":1211},"end":{"line":12,"column":589,"offset":1380},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":792},"end":{"line":12,"column":589,"offset":1380},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Straight from the landing page of the p5.js website.","position":{"start":{"line":14,"column":1,"offset":1382},"end":{"line":14,"column":53,"offset":1434},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":1382},"end":{"line":14,"column":53,"offset":1434},"indent":[]}},{"type":"blockquote","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"…make coding accessible for artists, designers, educators and beginners…","position":{"start":{"line":15,"column":5,"offset":1439},"end":{"line":15,"column":77,"offset":1511},"indent":[]}}],"position":{"start":{"line":15,"column":3,"offset":1437},"end":{"line":15,"column":77,"offset":1511},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":1435},"end":{"line":15,"column":77,"offset":1511},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"p5.js is the result of hard-work of the ","position":{"start":{"line":17,"column":1,"offset":1513},"end":{"line":17,"column":41,"offset":1553},"indent":[]}},{"type":"link","title":null,"url":"https://processingfoundation.org/","children":[{"type":"text","value":"Processing Foundation","position":{"start":{"line":17,"column":42,"offset":1554},"end":{"line":17,"column":63,"offset":1575},"indent":[]}}],"position":{"start":{"line":17,"column":41,"offset":1553},"end":{"line":17,"column":99,"offset":1611},"indent":[]}},{"type":"text","value":", a group focused on spreading computer and visual literacy. It distills their ","position":{"start":{"line":17,"column":99,"offset":1611},"end":{"line":17,"column":178,"offset":1690},"indent":[]}},{"type":"link","title":null,"url":"https://en.wikipedia.org/wiki/Processing_(programming_language)","children":[{"type":"text","value":"Processing","position":{"start":{"line":17,"column":179,"offset":1691},"end":{"line":17,"column":189,"offset":1701},"indent":[]}}],"position":{"start":{"line":17,"column":178,"offset":1690},"end":{"line":17,"column":255,"offset":1767},"indent":[]}},{"type":"text","value":" language into a JavaScript library that makes creating graphics easy and accessible whilst providing an ideal platform to springboard people’s careers in computer graphics. It should be mentioned now that a lot of inspiration has been taken from ","position":{"start":{"line":17,"column":255,"offset":1767},"end":{"line":17,"column":502,"offset":2014},"indent":[]}},{"type":"link","title":null,"url":"http://shiffman.net/","children":[{"type":"text","value":"Daniel Shiffman’s","position":{"start":{"line":17,"column":503,"offset":2015},"end":{"line":17,"column":520,"offset":2032},"indent":[]}}],"position":{"start":{"line":17,"column":502,"offset":2014},"end":{"line":17,"column":543,"offset":2055},"indent":[]}},{"type":"text","value":" p5 projects (from the ","position":{"start":{"line":17,"column":543,"offset":2055},"end":{"line":17,"column":566,"offset":2078},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/CodingTrain/website/tree/master/CodingChallenges/CC_03_Snake_game_p5.js","children":[{"type":"text","value":"classic snake game","position":{"start":{"line":17,"column":567,"offset":2079},"end":{"line":17,"column":585,"offset":2097},"indent":[]}}],"position":{"start":{"line":17,"column":566,"offset":2078},"end":{"line":17,"column":678,"offset":2190},"indent":[]}},{"type":"text","value":", to a ","position":{"start":{"line":17,"column":678,"offset":2190},"end":{"line":17,"column":685,"offset":2197},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/CodingTrain/website/tree/master/CodingChallenges/CC_93_DoublePendulum_p5.js","children":[{"type":"text","value":"double pendulum","position":{"start":{"line":17,"column":686,"offset":2198},"end":{"line":17,"column":701,"offset":2213},"indent":[]}}],"position":{"start":{"line":17,"column":685,"offset":2197},"end":{"line":17,"column":798,"offset":2310},"indent":[]}},{"type":"text","value":"). I can’t urge you enough to follow these projects to really improve your understanding of coding concepts and the p5 library.","position":{"start":{"line":17,"column":798,"offset":2310},"end":{"line":17,"column":925,"offset":2437},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":1513},"end":{"line":17,"column":925,"offset":2437},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Some prerequisites:","position":{"start":{"line":19,"column":5,"offset":2443},"end":{"line":19,"column":24,"offset":2462},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":2439},"end":{"line":19,"column":24,"offset":2462},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Before jumping into the p5 code I first want to make clear that there is assumed knowledge of HTML5 and JavaScript including arrays, functions, variables etc. in the rest of this article. If you have a good grasp of JavaScript then skip to the p5 code below, otherwise here are few resources to get you up to scratch.","position":{"start":{"line":21,"column":1,"offset":2464},"end":{"line":21,"column":318,"offset":2781},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":2464},"end":{"line":21,"column":318,"offset":2781},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":true,"children":[{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.youtube.com/watch?v=spIVWmv1jnw","children":[{"type":"text","value":"HaC Intro to Programming","position":{"start":{"line":23,"column":4,"offset":2786},"end":{"line":23,"column":28,"offset":2810},"indent":[]}}],"position":{"start":{"line":23,"column":3,"offset":2785},"end":{"line":23,"column":74,"offset":2856},"indent":[]}},{"type":"text","value":" — A workshop that is being run by Hackers at Cambridge to help anyone start learning to program (which uses JavaScript).","position":{"start":{"line":23,"column":74,"offset":2856},"end":{"line":23,"column":195,"offset":2977},"indent":[]}}],"position":{"start":{"line":23,"column":3,"offset":2785},"end":{"line":23,"column":195,"offset":2977},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":2783},"end":{"line":24,"column":1,"offset":2978},"indent":[1]}},{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.codecademy.com/learn/introduction-to-javascript","children":[{"type":"text","value":"Codecademy","position":{"start":{"line":25,"column":4,"offset":2982},"end":{"line":25,"column":14,"offset":2992},"indent":[]}}],"position":{"start":{"line":25,"column":3,"offset":2981},"end":{"line":25,"column":76,"offset":3054},"indent":[]}},{"type":"text","value":" — a great resource for learning how to code with instant feedback in your browser.","position":{"start":{"line":25,"column":76,"offset":3054},"end":{"line":25,"column":159,"offset":3137},"indent":[]}}],"position":{"start":{"line":25,"column":3,"offset":2981},"end":{"line":25,"column":159,"offset":3137},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":2979},"end":{"line":26,"column":1,"offset":3138},"indent":[1]}},{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript","children":[{"type":"text","value":"MDN","position":{"start":{"line":27,"column":4,"offset":3142},"end":{"line":27,"column":7,"offset":3145},"indent":[]}}],"position":{"start":{"line":27,"column":3,"offset":3141},"end":{"line":27,"column":65,"offset":3203},"indent":[]}},{"type":"text","value":" — a great resource for learning about all aspects of web development.","position":{"start":{"line":27,"column":65,"offset":3203},"end":{"line":27,"column":135,"offset":3273},"indent":[]}}],"position":{"start":{"line":27,"column":3,"offset":3141},"end":{"line":27,"column":135,"offset":3273},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":3139},"end":{"line":28,"column":1,"offset":3274},"indent":[1]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://codepen.io/","children":[{"type":"text","value":"Codepen","position":{"start":{"line":29,"column":4,"offset":3278},"end":{"line":29,"column":11,"offset":3285},"indent":[]}}],"position":{"start":{"line":29,"column":3,"offset":3277},"end":{"line":29,"column":33,"offset":3307},"indent":[]}},{"type":"text","value":" — a brilliant online text-editor for creating cool projects in HTML, CSS and JavaScript. Equally good for getting inspiration from a lot of talented users. Another possible solution would be ","position":{"start":{"line":29,"column":33,"offset":3307},"end":{"line":29,"column":225,"offset":3499},"indent":[]}},{"type":"link","title":null,"url":"https://jsfiddle.net/","children":[{"type":"text","value":"JSFiddle","position":{"start":{"line":29,"column":226,"offset":3500},"end":{"line":29,"column":234,"offset":3508},"indent":[]}}],"position":{"start":{"line":29,"column":225,"offset":3499},"end":{"line":29,"column":258,"offset":3532},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":29,"column":258,"offset":3532},"end":{"line":29,"column":259,"offset":3533},"indent":[]}}],"position":{"start":{"line":29,"column":3,"offset":3277},"end":{"line":29,"column":259,"offset":3533},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":3275},"end":{"line":29,"column":259,"offset":3533},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":2783},"end":{"line":29,"column":259,"offset":3533},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"What follows is a series of steps that will introduce you to p5 concepts. With code examples and explanations I hope to give you enough information to understand the ideas, but to fully grasp the concepts you will have to dive into the code, experiment with it, break it and learn from it. So without further ado, let’s get coding.","position":{"start":{"line":31,"column":1,"offset":3535},"end":{"line":31,"column":332,"offset":3866},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":3535},"end":{"line":31,"column":332,"offset":3866},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Step 1: The Setup","position":{"start":{"line":33,"column":5,"offset":3872},"end":{"line":33,"column":22,"offset":3889},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":3868},"end":{"line":33,"column":22,"offset":3889},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//Initialisation of canvas, objects, variables etc.</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//The drawing loop - updates at a constant rate declared in setup</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":35,"column":1,"offset":3891},"end":{"line":42,"column":4,"offset":4069},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"p5 is really simple to setup once you know what to do. There are two files shown above — an index.html and a template.js. The index.html file gets the libraries for us and the template.js is the barebones structure of a p5 project and at the moment it does nothing! Within this we have two functions:","position":{"start":{"line":44,"column":1,"offset":4071},"end":{"line":44,"column":301,"offset":4371},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":4071},"end":{"line":44,"column":301,"offset":4371},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":true,"children":[{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"setup() — a function for creating what we will need for our graphic or project. Like creating a canvas, initialising some objects or arrays etc.","position":{"start":{"line":46,"column":3,"offset":4375},"end":{"line":46,"column":147,"offset":4519},"indent":[]}}],"position":{"start":{"line":46,"column":3,"offset":4375},"end":{"line":46,"column":147,"offset":4519},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":4373},"end":{"line":47,"column":1,"offset":4520},"indent":[1]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"draw() — a function which will be called periodically like a loop. This is where will call draw functions and update functions to make graphics and animations.","position":{"start":{"line":48,"column":3,"offset":4523},"end":{"line":48,"column":162,"offset":4682},"indent":[]}}],"position":{"start":{"line":48,"column":3,"offset":4523},"end":{"line":48,"column":162,"offset":4682},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":4521},"end":{"line":48,"column":162,"offset":4682},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":4373},"end":{"line":48,"column":162,"offset":4682},"indent":[1,1]}},{"type":"html","value":"<iframe height='400' scrolling='no' title='Simple Triangle Tutorial' src='//codepen.io/patricoferris/embed/dddxjr/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/dddxjr/'>Simple Triangle Tutorial</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":50,"column":1,"offset":4684},"end":{"line":51,"column":10,"offset":5178},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Let’s first look at the setup function. We used the p5 function createCanvas(width, height) which created and initialised a ","position":{"start":{"line":53,"column":1,"offset":5180},"end":{"line":53,"column":125,"offset":5304},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API","children":[{"type":"text","value":"canvas","position":{"start":{"line":53,"column":126,"offset":5305},"end":{"line":53,"column":132,"offset":5311},"indent":[]}}],"position":{"start":{"line":53,"column":125,"offset":5304},"end":{"line":53,"column":194,"offset":5373},"indent":[]}},{"type":"text","value":" with arguments width and height. Now within our setup() and createCanvas() functions we can reference the variables width and height without ever instantiating them!","position":{"start":{"line":53,"column":194,"offset":5373},"end":{"line":53,"column":360,"offset":5539},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":5180},"end":{"line":53,"column":360,"offset":5539},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Next comes the meaty, draw function. I have purposefully put extra code in here so we can learn more about what p5 has to offer. Firstly always remember that draw() is a loop that runs from top to bottom. Initially, we set the background (of our canvas) to white with background(255) which is the same as background(255, 255, 255) (maximising the red, green and blue values to give white). This may seem simple, but implicitly we are also clearing our canvas every loop… in one line of code! This will be useful for animations later as we want to redraw objects in a new location rather than have the ","position":{"start":{"line":55,"column":1,"offset":5541},"end":{"line":55,"column":602,"offset":6142},"indent":[]}},{"type":"link","title":null,"url":"https://codepen.io/patricoferris/pen/paxZaw","children":[{"type":"text","value":"build-up on the same canvas","position":{"start":{"line":55,"column":603,"offset":6143},"end":{"line":55,"column":630,"offset":6170},"indent":[]}}],"position":{"start":{"line":55,"column":602,"offset":6142},"end":{"line":55,"column":676,"offset":6216},"indent":[]}},{"type":"text","value":" (click to see it go spectacularly wrong). Next is a translate(width/2, height/2) which moves our current drawing location to the centre of our canvas. We then declare the fill colour of our triangle with fill(255, 0, 0)(making it red).","position":{"start":{"line":55,"column":676,"offset":6216},"end":{"line":55,"column":912,"offset":6452},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":5541},"end":{"line":55,"column":912,"offset":6452},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We want to create an equilateral triangle with side length s. The triangle itself is a function that takes the vertex coordinates as arguments — triangle(x1, y1, x2, y2, x3, y3) and in this example starting from the centre we have one vertex at (-s/2, 0) another at (s/2, 0) giving a bottom length of s . Now comes the trickier part. A very important aspect of most computer graphics is that the coordinate system starts in the top left corner (or wherever your origin is) and x increases left to right, whilst y increases top to bottom. To move of the screen we need a negative y value. Our last coordinate is given as (0, -sin(PI/3)) (if you’re stuck, think about cutting the triangle in two and using trigonometry).","position":{"start":{"line":57,"column":1,"offset":6454},"end":{"line":57,"column":719,"offset":7172},"indent":[]}}],"position":{"start":{"line":57,"column":1,"offset":6454},"end":{"line":57,"column":719,"offset":7172},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Step 2: Get Creative","position":{"start":{"line":59,"column":5,"offset":7178},"end":{"line":59,"column":25,"offset":7198},"indent":[]}}],"position":{"start":{"line":59,"column":1,"offset":7174},"end":{"line":59,"column":25,"offset":7198},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We’ve learnt how to set up our canvas and start drawing. Armed with the p5 ","position":{"start":{"line":61,"column":1,"offset":7200},"end":{"line":61,"column":76,"offset":7275},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/reference/","children":[{"type":"text","value":"reference page","position":{"start":{"line":61,"column":77,"offset":7276},"end":{"line":61,"column":91,"offset":7290},"indent":[]}}],"position":{"start":{"line":61,"column":76,"offset":7275},"end":{"line":61,"column":121,"offset":7320},"indent":[]}},{"type":"text","value":" and our creativity, we can make some truly stunning graphics. How about a bouncing ball animation?","position":{"start":{"line":61,"column":121,"offset":7320},"end":{"line":61,"column":220,"offset":7419},"indent":[]}}],"position":{"start":{"line":61,"column":1,"offset":7200},"end":{"line":61,"column":220,"offset":7419},"indent":[]}},{"type":"html","value":"<iframe height='400' scrolling='no' title='Bouncing Balls' src='//codepen.io/patricoferris/embed/PQpOrB/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/PQpOrB/'>Bouncing Balls</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":63,"column":1,"offset":7421},"end":{"line":64,"column":10,"offset":7895},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Let’s look at the interesting p5 aspects that we didn’t know before:","position":{"start":{"line":66,"column":1,"offset":7897},"end":{"line":66,"column":69,"offset":7965},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":7897},"end":{"line":66,"column":69,"offset":7965},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":true,"children":[{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"frameRate(20) — This enables us to specify the frame rate of our drawing loop, that is, how many times per second it redraws everything for us.","position":{"start":{"line":68,"column":3,"offset":7969},"end":{"line":68,"column":146,"offset":8112},"indent":[]}}],"position":{"start":{"line":68,"column":3,"offset":7969},"end":{"line":68,"column":146,"offset":8112},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":7967},"end":{"line":69,"column":1,"offset":8113},"indent":[1]}},{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"gravity = createVector(0, 9) — p5 allows us to ","position":{"start":{"line":70,"column":3,"offset":8116},"end":{"line":70,"column":50,"offset":8163},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/reference/#/p5.Vector","children":[{"type":"text","value":"create vector objects","position":{"start":{"line":70,"column":51,"offset":8164},"end":{"line":70,"column":72,"offset":8185},"indent":[]}}],"position":{"start":{"line":70,"column":50,"offset":8163},"end":{"line":70,"column":113,"offset":8226},"indent":[]}},{"type":"text","value":" with which we can perform vector operations like addition, multiplication, dot-product and cross-product. This is useful when we want to simulate physics like forces.","position":{"start":{"line":70,"column":113,"offset":8226},"end":{"line":70,"column":280,"offset":8393},"indent":[]}}],"position":{"start":{"line":70,"column":3,"offset":8116},"end":{"line":70,"column":280,"offset":8393},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":8114},"end":{"line":71,"column":1,"offset":8394},"indent":[1]}},{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"floor(random(50)) — Here we’re using p5 math functions. floor() takes a real number and rounds it down to the nearest integer. random(arg) produces a random number as small as 0 or up to 49. In this example, we are giving it to the ellipse(x, y, w)function to create randomly sized balls by setting the width to a random number. If we gave another argument it would set the ellipse’s height, but here it infers that we want a circle.","position":{"start":{"line":72,"column":3,"offset":8397},"end":{"line":72,"column":436,"offset":8830},"indent":[]}}],"position":{"start":{"line":72,"column":3,"offset":8397},"end":{"line":72,"column":436,"offset":8830},"indent":[]}}],"position":{"start":{"line":72,"column":1,"offset":8395},"end":{"line":73,"column":1,"offset":8831},"indent":[1]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"stroke(0) — This function sets the colour of our shape’s outline. If you don’t want any border you can add noStroke() .","position":{"start":{"line":74,"column":3,"offset":8834},"end":{"line":74,"column":122,"offset":8953},"indent":[]}}],"position":{"start":{"line":74,"column":3,"offset":8834},"end":{"line":74,"column":122,"offset":8953},"indent":[]}}],"position":{"start":{"line":74,"column":1,"offset":8832},"end":{"line":74,"column":122,"offset":8953},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":7967},"end":{"line":74,"column":122,"offset":8953},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"All you need now is to add some physics to these ideas and you have yourself a bouncing ball animation.","position":{"start":{"line":76,"column":1,"offset":8955},"end":{"line":76,"column":104,"offset":9058},"indent":[]}}],"position":{"start":{"line":76,"column":1,"offset":8955},"end":{"line":76,"column":104,"offset":9058},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Step 3: Experiment with p5","position":{"start":{"line":78,"column":5,"offset":9064},"end":{"line":78,"column":31,"offset":9090},"indent":[]}}],"position":{"start":{"line":78,"column":1,"offset":9060},"end":{"line":78,"column":31,"offset":9090},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Hopefully now you have a good understanding of the p5 fundamentals, but we’ve barely scratched the surface. This last example will use two extra features of p5: ","position":{"start":{"line":80,"column":1,"offset":9092},"end":{"line":80,"column":162,"offset":9253},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"interactivity","position":{"start":{"line":80,"column":163,"offset":9254},"end":{"line":80,"column":176,"offset":9267},"indent":[]}}],"position":{"start":{"line":80,"column":162,"offset":9253},"end":{"line":80,"column":177,"offset":9268},"indent":[]}},{"type":"text","value":" and* ","position":{"start":{"line":80,"column":177,"offset":9268},"end":{"line":80,"column":183,"offset":9274},"indent":[]}},{"type":"link","title":null,"url":"http://flafla2.github.io/2014/08/09/perlinnoise.html","children":[{"type":"text","value":"Perlin Noise","position":{"start":{"line":80,"column":184,"offset":9275},"end":{"line":80,"column":196,"offset":9287},"indent":[]}}],"position":{"start":{"line":80,"column":183,"offset":9274},"end":{"line":80,"column":251,"offset":9342},"indent":[]}},{"type":"text","value":"*. Keep reading to find out more on these two concepts.","position":{"start":{"line":80,"column":251,"offset":9342},"end":{"line":80,"column":306,"offset":9397},"indent":[]}}],"position":{"start":{"line":80,"column":1,"offset":9092},"end":{"line":80,"column":306,"offset":9397},"indent":[]}},{"type":"html","value":"<iframe height='400' scrolling='no' title='Pixel Fire' src='//codepen.io/patricoferris/embed/XZMxmV/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/XZMxmV/'>Pixel Fire</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":82,"column":1,"offset":9399},"end":{"line":83,"column":10,"offset":9865},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"In this CodePen I have created a relatively simple flame model using squares and Perlin Noise. First of all, how do we get user input? Lucky for us p5 has some functions that can help.","position":{"start":{"line":85,"column":1,"offset":9867},"end":{"line":85,"column":185,"offset":10051},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":9867},"end":{"line":85,"column":185,"offset":10051},"indent":[]}},{"type":"html","value":"<high-light className='JavaScript'>\nvar touch = false;\nfunction setup(){\n  createCanvas(640, 640);\n}\nfunction draw(){\n  if(touch){\n    fill(255, 0, 0);\n    rect(mouseX, mouseY, 20, 20);\n  }\n}\nfunction touchStarted(){\n  touch = true;\n}\nfunction touchEnded(){\n  touch = false;\n}\n</high-light>","position":{"start":{"line":87,"column":1,"offset":10053},"end":{"line":104,"column":14,"offset":10343},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"At the top of the code we have declared a boolean “flag” as to whether or not our mouse is being pressed — this allows us to do things if the mouse is being held down. The touchStarted() and touchEnded() are p5 functions that are executed whenever the mouse is pressed or released or the screen is touched and released. Lastly, in our rect() function we have the variables mouseX and mouseY which are p5 variables corresponding to the mouse’s current position. Oddly, these also refer to your ","position":{"start":{"line":106,"column":1,"offset":10345},"end":{"line":106,"column":494,"offset":10838},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/processing/p5.js/issues/1705","children":[{"type":"text","value":"“touch” coordinates","position":{"start":{"line":106,"column":495,"offset":10839},"end":{"line":106,"column":514,"offset":10858},"indent":[]}}],"position":{"start":{"line":106,"column":494,"offset":10838},"end":{"line":106,"column":564,"offset":10908},"indent":[]}},{"type":"text","value":". With all these variables and functions predefined for us we can focus on making visually stunning graphics, whilst not being hampered by having to code extra functions unrelated to the graphic we’re producing.","position":{"start":{"line":106,"column":564,"offset":10908},"end":{"line":106,"column":775,"offset":11119},"indent":[]}}],"position":{"start":{"line":106,"column":1,"offset":10345},"end":{"line":106,"column":775,"offset":11119},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now for the Perlin Noise. In 1983, tired with the artificial look of computer graphics, Ken Perlin developed a type of *gradient noise. *The basic idea being you create a big grid of gradients randomly and then use the dot product to interpolate between them. In short, we get random values based on the coordinate system we’re drawing on. Great! For each of our squares we can start them at a random position near our mouse, and generate a random upward vector using their position and Perlin Noise. Let’s look at the code:","position":{"start":{"line":108,"column":1,"offset":11121},"end":{"line":108,"column":525,"offset":11645},"indent":[]}}],"position":{"start":{"line":108,"column":1,"offset":11121},"end":{"line":108,"column":525,"offset":11645},"indent":[]}},{"type":"html","value":"<high-light className='JavaScript'>\nfunction Particle(x, y, color){\n  this.pos = createVector(x + random(-10, 10), y + random(-10, 10));\n  this.vel = createVector(floor(random(-1, 1))*noise(this.pos.x), -noise(this.pos.y)*7);\n  this.alpha = 255;\n  this.r = random(170, 255);\n  this.g = random(10, 255);\n  this.b = random(0, 100);\n  this.update = function(){\n    this.pos.add(this.vel);\n    this.alpha -= 5;\n  }\n  this.show = function(){\n    noStroke();\n    fill(this.r, this.g, this.b, this.alpha);\n    rect(this.pos.x, this.pos.y, 5, 5);\n  }\n  this.dead = function(){\n    if(this.alpha < 0){\n      return true;\n    }else{\n      return false;\n    }\n  }\n}\n</high-light>","position":{"start":{"line":110,"column":1,"offset":11647},"end":{"line":135,"column":14,"offset":12315},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Some key things to notice:","position":{"start":{"line":137,"column":1,"offset":12317},"end":{"line":137,"column":27,"offset":12343},"indent":[]}}],"position":{"start":{"line":137,"column":1,"offset":12317},"end":{"line":137,"column":27,"offset":12343},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":true,"children":[{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"noise(this.pos.x) — The Perlin Noise ","position":{"start":{"line":139,"column":3,"offset":12347},"end":{"line":139,"column":40,"offset":12384},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/reference/#/p5/noise","children":[{"type":"text","value":"function","position":{"start":{"line":139,"column":41,"offset":12385},"end":{"line":139,"column":49,"offset":12393},"indent":[]}}],"position":{"start":{"line":139,"column":40,"offset":12384},"end":{"line":139,"column":89,"offset":12433},"indent":[]}},{"type":"text","value":" that gets a random number based on the square’s current x position. It returns a value between 0 and 1.","position":{"start":{"line":139,"column":89,"offset":12433},"end":{"line":139,"column":193,"offset":12537},"indent":[]}}],"position":{"start":{"line":139,"column":3,"offset":12347},"end":{"line":139,"column":193,"offset":12537},"indent":[]}}],"position":{"start":{"line":139,"column":1,"offset":12345},"end":{"line":140,"column":1,"offset":12538},"indent":[1]}},{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"fill(this.r, this.g, this.b, this.alpha) — Here we have extended fill’s ability by including an alpha value for the objects transparency, by decreasing alpha in the update() function we get a nice fade out like a flame.","position":{"start":{"line":141,"column":3,"offset":12541},"end":{"line":141,"column":222,"offset":12760},"indent":[]}}],"position":{"start":{"line":141,"column":3,"offset":12541},"end":{"line":141,"column":222,"offset":12760},"indent":[]}}],"position":{"start":{"line":141,"column":1,"offset":12539},"end":{"line":142,"column":1,"offset":12761},"indent":[1]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"dead() — This function allows us to keep track of which particles have disappeared as their alpha is now less than zero. We can then splice() them out of our array to ensure we’re not drawing an unbounded number of particles over time which would cause performance issues.","position":{"start":{"line":143,"column":3,"offset":12764},"end":{"line":143,"column":275,"offset":13036},"indent":[]}}],"position":{"start":{"line":143,"column":3,"offset":12764},"end":{"line":143,"column":275,"offset":13036},"indent":[]}}],"position":{"start":{"line":143,"column":1,"offset":12762},"end":{"line":143,"column":275,"offset":13036},"indent":[]}}],"position":{"start":{"line":139,"column":1,"offset":12345},"end":{"line":143,"column":275,"offset":13036},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"As a challenge, you can also use blendMode() to make it seem even more realistic — check this ","position":{"start":{"line":145,"column":1,"offset":13038},"end":{"line":145,"column":95,"offset":13132},"indent":[]}},{"type":"link","title":null,"url":"https://codepen.io/anon/pen/YeOaJX","children":[{"type":"text","value":"alteration","position":{"start":{"line":145,"column":96,"offset":13133},"end":{"line":145,"column":106,"offset":13143},"indent":[]}}],"position":{"start":{"line":145,"column":95,"offset":13132},"end":{"line":145,"column":143,"offset":13180},"indent":[]}},{"type":"text","value":" to see it in action.","position":{"start":{"line":145,"column":143,"offset":13180},"end":{"line":145,"column":164,"offset":13201},"indent":[]}}],"position":{"start":{"line":145,"column":1,"offset":13038},"end":{"line":145,"column":164,"offset":13201},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"With only a few concepts and the p5 library, it is incredibly straightforward to start building anything you want. Be sure to checkout what else is possible with the library. Here are few cool ideas to get you started: ","position":{"start":{"line":147,"column":1,"offset":13203},"end":{"line":147,"column":220,"offset":13422},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/examples/3d-geometries.html","children":[{"type":"text","value":"3D graphics","position":{"start":{"line":147,"column":221,"offset":13423},"end":{"line":147,"column":232,"offset":13434},"indent":[]}}],"position":{"start":{"line":147,"column":220,"offset":13422},"end":{"line":147,"column":279,"offset":13481},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":147,"column":279,"offset":13481},"end":{"line":147,"column":281,"offset":13483},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/examples/dom-slider.html","children":[{"type":"text","value":"sliders","position":{"start":{"line":147,"column":282,"offset":13484},"end":{"line":147,"column":289,"offset":13491},"indent":[]}}],"position":{"start":{"line":147,"column":281,"offset":13483},"end":{"line":147,"column":333,"offset":13535},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":147,"column":333,"offset":13535},"end":{"line":147,"column":338,"offset":13540},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/examples/image-load-and-display-image.html","children":[{"type":"text","value":"images","position":{"start":{"line":147,"column":339,"offset":13541},"end":{"line":147,"column":345,"offset":13547},"indent":[]}}],"position":{"start":{"line":147,"column":338,"offset":13540},"end":{"line":147,"column":407,"offset":13609},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":147,"column":407,"offset":13609},"end":{"line":147,"column":408,"offset":13610},"indent":[]}}],"position":{"start":{"line":147,"column":1,"offset":13203},"end":{"line":147,"column":408,"offset":13610},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":149,"column":5,"offset":13616},"end":{"line":149,"column":15,"offset":13626},"indent":[]}}],"position":{"start":{"line":149,"column":1,"offset":13612},"end":{"line":149,"column":15,"offset":13626},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As computers and technology become ubiquitous in our daily lives and an increasing number of professions are now relying on computer literacy, p5.js is a beautiful example of how we can ensure as many people as possible have an entry-point to the wonderful world of computer programming. It also acts as a reminder to some more experienced programmers that creativity and imagination are vital in producing meaningful code and ultimately making the tech world a better place.","position":{"start":{"line":151,"column":1,"offset":13628},"end":{"line":151,"column":476,"offset":14103},"indent":[]}}],"position":{"start":{"line":151,"column":1,"offset":13628},"end":{"line":151,"column":476,"offset":14103},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Hopefully this intro to p5 has convinced you of its usefulness and has encouraged you to start taking your first steps into the world of graphics programming. Here are my recommendations for where to go next:","position":{"start":{"line":153,"column":1,"offset":14105},"end":{"line":153,"column":209,"offset":14313},"indent":[]}}],"position":{"start":{"line":153,"column":1,"offset":14105},"end":{"line":153,"column":209,"offset":14313},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":true,"children":[{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.youtube.com/user/shiffman","children":[{"type":"text","value":"The Coding Train","position":{"start":{"line":155,"column":4,"offset":14318},"end":{"line":155,"column":20,"offset":14334},"indent":[]}}],"position":{"start":{"line":155,"column":3,"offset":14317},"end":{"line":155,"column":60,"offset":14374},"indent":[]}},{"type":"text","value":" — A brilliant YouTube channel by Daniel Shiffman where he teaches JavaScript and p5.js amongst many other incredible things!","position":{"start":{"line":155,"column":60,"offset":14374},"end":{"line":155,"column":185,"offset":14499},"indent":[]}}],"position":{"start":{"line":155,"column":3,"offset":14317},"end":{"line":155,"column":185,"offset":14499},"indent":[]}}],"position":{"start":{"line":155,"column":1,"offset":14315},"end":{"line":156,"column":1,"offset":14500},"indent":[1]}},{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://p5js.org/examples/","children":[{"type":"text","value":"p5js.org ","position":{"start":{"line":157,"column":4,"offset":14504},"end":{"line":157,"column":13,"offset":14513},"indent":[]}}],"position":{"start":{"line":157,"column":3,"offset":14503},"end":{"line":157,"column":42,"offset":14542},"indent":[]}},{"type":"text","value":"— The examples page on this website is full of inspiring projects which you could recreate and extend further.","position":{"start":{"line":157,"column":42,"offset":14542},"end":{"line":157,"column":152,"offset":14652},"indent":[]}}],"position":{"start":{"line":157,"column":3,"offset":14503},"end":{"line":157,"column":152,"offset":14652},"indent":[]}}],"position":{"start":{"line":157,"column":1,"offset":14501},"end":{"line":158,"column":1,"offset":14653},"indent":[1]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.scratchapixel.com/index.php","children":[{"type":"text","value":"Sratchapixel","position":{"start":{"line":159,"column":4,"offset":14657},"end":{"line":159,"column":16,"offset":14669},"indent":[]}}],"position":{"start":{"line":159,"column":3,"offset":14656},"end":{"line":159,"column":58,"offset":14711},"indent":[]}},{"type":"text","value":" — If you feel ready to delve into the deeper concepts and implementations of computer graphics then this website is an incredible resource for you to use.","position":{"start":{"line":159,"column":58,"offset":14711},"end":{"line":159,"column":213,"offset":14866},"indent":[]}}],"position":{"start":{"line":159,"column":3,"offset":14656},"end":{"line":159,"column":213,"offset":14866},"indent":[]}}],"position":{"start":{"line":159,"column":1,"offset":14654},"end":{"line":159,"column":213,"offset":14866},"indent":[]}}],"position":{"start":{"line":155,"column":1,"offset":14315},"end":{"line":159,"column":213,"offset":14866},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"A special thanks to ","position":{"start":{"line":161,"column":1,"offset":14868},"end":{"line":161,"column":21,"offset":14888},"indent":[]}},{"type":"link","title":null,"url":"undefined","children":[{"type":"text","value":"Tom Read Cutting","position":{"start":{"line":161,"column":22,"offset":14889},"end":{"line":161,"column":38,"offset":14905},"indent":[]}}],"position":{"start":{"line":161,"column":21,"offset":14888},"end":{"line":161,"column":50,"offset":14917},"indent":[]}},{"type":"text","value":" for editing this article and ","position":{"start":{"line":161,"column":50,"offset":14917},"end":{"line":161,"column":80,"offset":14947},"indent":[]}},{"type":"link","title":null,"url":"undefined","children":[{"type":"text","value":"Christian Silver","position":{"start":{"line":161,"column":81,"offset":14948},"end":{"line":161,"column":97,"offset":14964},"indent":[]}}],"position":{"start":{"line":161,"column":80,"offset":14947},"end":{"line":161,"column":109,"offset":14976},"indent":[]}},{"type":"text","value":" for helping get it off the ground.","position":{"start":{"line":161,"column":109,"offset":14976},"end":{"line":161,"column":144,"offset":15011},"indent":[]}}],"position":{"start":{"line":161,"column":1,"offset":14868},"end":{"line":161,"column":144,"offset":15011},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":162,"column":1,"offset":15012}}}},{"id":"transformer-remark-markdown-html-ast-8cbd46de40cd7b69af650c089846cc33-gatsby-remark-imagesgatsby-remark-prismjs-","value":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/patricoferris/image/upload/v1532857964/pf2018/blogposts/27-02-2018/tree.png","alt":"Recursive Tree"},"children":[],"position":{"start":{"line":8,"column":1,"offset":154},"end":{"line":8,"column":122,"offset":275}}}],"position":{"start":{"line":8,"column":1,"offset":154},"end":{"line":8,"column":122,"offset":275}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Graphics and computer programming are two dearly intertwined disciplines. The oscilloscope is often recognised as one of the first examples of “computer graphics”, the cathode-ray versions emitting a beam of electrons onto a phosphorescent screen. By using magnetic fields to change the beam’s direction, we can sweep from left to right and move up and down — the basic idea behind most CG! (I highly recommend watching this ","position":{"start":{"line":10,"column":1,"offset":277},"end":{"line":10,"column":426,"offset":702}}},{"type":"element","tagName":"a","properties":{"href":"https://archive.org/details/introductiontothecathoderayoscilloscope"},"children":[{"type":"text","value":"video","position":{"start":{"line":10,"column":427,"offset":703},"end":{"line":10,"column":432,"offset":708}}}],"position":{"start":{"line":10,"column":426,"offset":702},"end":{"line":10,"column":502,"offset":778}}},{"type":"text","value":" from 1970).","position":{"start":{"line":10,"column":502,"offset":778},"end":{"line":10,"column":514,"offset":790}}}],"position":{"start":{"line":10,"column":1,"offset":277},"end":{"line":10,"column":514,"offset":790}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We’ve come a long way since then — modern day graphics is a complicated science as well as an art, and the barrier to entry is constantly increasing. Graphics programming can be so complex, that a simple program to draw a triangle can be over ","position":{"start":{"line":12,"column":1,"offset":792},"end":{"line":12,"column":244,"offset":1035}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/SaschaWillems/Vulkan/blob/master/examples/triangle/triangle.cpp"},"children":[{"type":"text","value":"1000 lines of code","position":{"start":{"line":12,"column":245,"offset":1036},"end":{"line":12,"column":263,"offset":1054}}}],"position":{"start":{"line":12,"column":244,"offset":1035},"end":{"line":12,"column":348,"offset":1139}}},{"type":"text","value":"! However, this article will introduce you to ","position":{"start":{"line":12,"column":348,"offset":1139},"end":{"line":12,"column":394,"offset":1185}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/"},"children":[{"type":"text","value":"p5.js","position":{"start":{"line":12,"column":395,"offset":1186},"end":{"line":12,"column":400,"offset":1191}}}],"position":{"start":{"line":12,"column":394,"offset":1185},"end":{"line":12,"column":420,"offset":1211}}},{"type":"text","value":" (also known as p5). A simpler, less complex solution for people who want to start making computer graphics, but don’t want the headache of streams of boiler-plate code.","position":{"start":{"line":12,"column":420,"offset":1211},"end":{"line":12,"column":589,"offset":1380}}}],"position":{"start":{"line":12,"column":1,"offset":792},"end":{"line":12,"column":589,"offset":1380}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Straight from the landing page of the p5.js website.","position":{"start":{"line":14,"column":1,"offset":1382},"end":{"line":14,"column":53,"offset":1434}}}],"position":{"start":{"line":14,"column":1,"offset":1382},"end":{"line":14,"column":53,"offset":1434}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"…make coding accessible for artists, designers, educators and beginners…","position":{"start":{"line":15,"column":5,"offset":1439},"end":{"line":15,"column":77,"offset":1511}}}],"position":{"start":{"line":15,"column":3,"offset":1437},"end":{"line":15,"column":77,"offset":1511}}},{"type":"text","value":"\n"}],"position":{"start":{"line":15,"column":1,"offset":1435},"end":{"line":15,"column":77,"offset":1511}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"p5.js is the result of hard-work of the ","position":{"start":{"line":17,"column":1,"offset":1513},"end":{"line":17,"column":41,"offset":1553}}},{"type":"element","tagName":"a","properties":{"href":"https://processingfoundation.org/"},"children":[{"type":"text","value":"Processing Foundation","position":{"start":{"line":17,"column":42,"offset":1554},"end":{"line":17,"column":63,"offset":1575}}}],"position":{"start":{"line":17,"column":41,"offset":1553},"end":{"line":17,"column":99,"offset":1611}}},{"type":"text","value":", a group focused on spreading computer and visual literacy. It distills their ","position":{"start":{"line":17,"column":99,"offset":1611},"end":{"line":17,"column":178,"offset":1690}}},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/Processing_(programming_language)"},"children":[{"type":"text","value":"Processing","position":{"start":{"line":17,"column":179,"offset":1691},"end":{"line":17,"column":189,"offset":1701}}}],"position":{"start":{"line":17,"column":178,"offset":1690},"end":{"line":17,"column":255,"offset":1767}}},{"type":"text","value":" language into a JavaScript library that makes creating graphics easy and accessible whilst providing an ideal platform to springboard people’s careers in computer graphics. It should be mentioned now that a lot of inspiration has been taken from ","position":{"start":{"line":17,"column":255,"offset":1767},"end":{"line":17,"column":502,"offset":2014}}},{"type":"element","tagName":"a","properties":{"href":"http://shiffman.net/"},"children":[{"type":"text","value":"Daniel Shiffman’s","position":{"start":{"line":17,"column":503,"offset":2015},"end":{"line":17,"column":520,"offset":2032}}}],"position":{"start":{"line":17,"column":502,"offset":2014},"end":{"line":17,"column":543,"offset":2055}}},{"type":"text","value":" p5 projects (from the ","position":{"start":{"line":17,"column":543,"offset":2055},"end":{"line":17,"column":566,"offset":2078}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/CodingTrain/website/tree/master/CodingChallenges/CC_03_Snake_game_p5.js"},"children":[{"type":"text","value":"classic snake game","position":{"start":{"line":17,"column":567,"offset":2079},"end":{"line":17,"column":585,"offset":2097}}}],"position":{"start":{"line":17,"column":566,"offset":2078},"end":{"line":17,"column":678,"offset":2190}}},{"type":"text","value":", to a ","position":{"start":{"line":17,"column":678,"offset":2190},"end":{"line":17,"column":685,"offset":2197}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/CodingTrain/website/tree/master/CodingChallenges/CC_93_DoublePendulum_p5.js"},"children":[{"type":"text","value":"double pendulum","position":{"start":{"line":17,"column":686,"offset":2198},"end":{"line":17,"column":701,"offset":2213}}}],"position":{"start":{"line":17,"column":685,"offset":2197},"end":{"line":17,"column":798,"offset":2310}}},{"type":"text","value":"). I can’t urge you enough to follow these projects to really improve your understanding of coding concepts and the p5 library.","position":{"start":{"line":17,"column":798,"offset":2310},"end":{"line":17,"column":925,"offset":2437}}}],"position":{"start":{"line":17,"column":1,"offset":1513},"end":{"line":17,"column":925,"offset":2437}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Some prerequisites:","position":{"start":{"line":19,"column":5,"offset":2443},"end":{"line":19,"column":24,"offset":2462}}}],"position":{"start":{"line":19,"column":1,"offset":2439},"end":{"line":19,"column":24,"offset":2462}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Before jumping into the p5 code I first want to make clear that there is assumed knowledge of HTML5 and JavaScript including arrays, functions, variables etc. in the rest of this article. If you have a good grasp of JavaScript then skip to the p5 code below, otherwise here are few resources to get you up to scratch.","position":{"start":{"line":21,"column":1,"offset":2464},"end":{"line":21,"column":318,"offset":2781}}}],"position":{"start":{"line":21,"column":1,"offset":2464},"end":{"line":21,"column":318,"offset":2781}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.youtube.com/watch?v=spIVWmv1jnw"},"children":[{"type":"text","value":"HaC Intro to Programming","position":{"start":{"line":23,"column":4,"offset":2786},"end":{"line":23,"column":28,"offset":2810}}}],"position":{"start":{"line":23,"column":3,"offset":2785},"end":{"line":23,"column":74,"offset":2856}}},{"type":"text","value":" — A workshop that is being run by Hackers at Cambridge to help anyone start learning to program (which uses JavaScript).","position":{"start":{"line":23,"column":74,"offset":2856},"end":{"line":23,"column":195,"offset":2977}}}],"position":{"start":{"line":23,"column":3,"offset":2785},"end":{"line":23,"column":195,"offset":2977}}},{"type":"text","value":"\n"}],"position":{"start":{"line":23,"column":1,"offset":2783},"end":{"line":24,"column":1,"offset":2978}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.codecademy.com/learn/introduction-to-javascript"},"children":[{"type":"text","value":"Codecademy","position":{"start":{"line":25,"column":4,"offset":2982},"end":{"line":25,"column":14,"offset":2992}}}],"position":{"start":{"line":25,"column":3,"offset":2981},"end":{"line":25,"column":76,"offset":3054}}},{"type":"text","value":" — a great resource for learning how to code with instant feedback in your browser.","position":{"start":{"line":25,"column":76,"offset":3054},"end":{"line":25,"column":159,"offset":3137}}}],"position":{"start":{"line":25,"column":3,"offset":2981},"end":{"line":25,"column":159,"offset":3137}}},{"type":"text","value":"\n"}],"position":{"start":{"line":25,"column":1,"offset":2979},"end":{"line":26,"column":1,"offset":3138}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Web/JavaScript"},"children":[{"type":"text","value":"MDN","position":{"start":{"line":27,"column":4,"offset":3142},"end":{"line":27,"column":7,"offset":3145}}}],"position":{"start":{"line":27,"column":3,"offset":3141},"end":{"line":27,"column":65,"offset":3203}}},{"type":"text","value":" — a great resource for learning about all aspects of web development.","position":{"start":{"line":27,"column":65,"offset":3203},"end":{"line":27,"column":135,"offset":3273}}}],"position":{"start":{"line":27,"column":3,"offset":3141},"end":{"line":27,"column":135,"offset":3273}}},{"type":"text","value":"\n"}],"position":{"start":{"line":27,"column":1,"offset":3139},"end":{"line":28,"column":1,"offset":3274}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://codepen.io/"},"children":[{"type":"text","value":"Codepen","position":{"start":{"line":29,"column":4,"offset":3278},"end":{"line":29,"column":11,"offset":3285}}}],"position":{"start":{"line":29,"column":3,"offset":3277},"end":{"line":29,"column":33,"offset":3307}}},{"type":"text","value":" — a brilliant online text-editor for creating cool projects in HTML, CSS and JavaScript. Equally good for getting inspiration from a lot of talented users. Another possible solution would be ","position":{"start":{"line":29,"column":33,"offset":3307},"end":{"line":29,"column":225,"offset":3499}}},{"type":"element","tagName":"a","properties":{"href":"https://jsfiddle.net/"},"children":[{"type":"text","value":"JSFiddle","position":{"start":{"line":29,"column":226,"offset":3500},"end":{"line":29,"column":234,"offset":3508}}}],"position":{"start":{"line":29,"column":225,"offset":3499},"end":{"line":29,"column":258,"offset":3532}}},{"type":"text","value":".","position":{"start":{"line":29,"column":258,"offset":3532},"end":{"line":29,"column":259,"offset":3533}}}],"position":{"start":{"line":29,"column":3,"offset":3277},"end":{"line":29,"column":259,"offset":3533}}},{"type":"text","value":"\n"}],"position":{"start":{"line":29,"column":1,"offset":3275},"end":{"line":29,"column":259,"offset":3533}}},{"type":"text","value":"\n"}],"position":{"start":{"line":23,"column":1,"offset":2783},"end":{"line":29,"column":259,"offset":3533}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"What follows is a series of steps that will introduce you to p5 concepts. With code examples and explanations I hope to give you enough information to understand the ideas, but to fully grasp the concepts you will have to dive into the code, experiment with it, break it and learn from it. So without further ado, let’s get coding.","position":{"start":{"line":31,"column":1,"offset":3535},"end":{"line":31,"column":332,"offset":3866}}}],"position":{"start":{"line":31,"column":1,"offset":3535},"end":{"line":31,"column":332,"offset":3866}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Step 1: The Setup","position":{"start":{"line":33,"column":5,"offset":3872},"end":{"line":33,"column":22,"offset":3889}}}],"position":{"start":{"line":33,"column":1,"offset":3868},"end":{"line":33,"column":22,"offset":3889}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//Initialisation of canvas, objects, variables etc.</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//The drawing loop - updates at a constant rate declared in setup</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":35,"column":1,"offset":3891},"end":{"line":42,"column":4,"offset":4069}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"p5 is really simple to setup once you know what to do. There are two files shown above — an index.html and a template.js. The index.html file gets the libraries for us and the template.js is the barebones structure of a p5 project and at the moment it does nothing! Within this we have two functions:","position":{"start":{"line":44,"column":1,"offset":4071},"end":{"line":44,"column":301,"offset":4371}}}],"position":{"start":{"line":44,"column":1,"offset":4071},"end":{"line":44,"column":301,"offset":4371}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"setup() — a function for creating what we will need for our graphic or project. Like creating a canvas, initialising some objects or arrays etc.","position":{"start":{"line":46,"column":3,"offset":4375},"end":{"line":46,"column":147,"offset":4519}}}],"position":{"start":{"line":46,"column":3,"offset":4375},"end":{"line":46,"column":147,"offset":4519}}},{"type":"text","value":"\n"}],"position":{"start":{"line":46,"column":1,"offset":4373},"end":{"line":47,"column":1,"offset":4520}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"draw() — a function which will be called periodically like a loop. This is where will call draw functions and update functions to make graphics and animations.","position":{"start":{"line":48,"column":3,"offset":4523},"end":{"line":48,"column":162,"offset":4682}}}],"position":{"start":{"line":48,"column":3,"offset":4523},"end":{"line":48,"column":162,"offset":4682}}},{"type":"text","value":"\n"}],"position":{"start":{"line":48,"column":1,"offset":4521},"end":{"line":48,"column":162,"offset":4682}}},{"type":"text","value":"\n"}],"position":{"start":{"line":46,"column":1,"offset":4373},"end":{"line":48,"column":162,"offset":4682}}},{"type":"text","value":"\n"},{"type":"raw","value":"<iframe height='400' scrolling='no' title='Simple Triangle Tutorial' src='//codepen.io/patricoferris/embed/dddxjr/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/dddxjr/'>Simple Triangle Tutorial</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":50,"column":1,"offset":4684},"end":{"line":51,"column":10,"offset":5178}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let’s first look at the setup function. We used the p5 function createCanvas(width, height) which created and initialised a ","position":{"start":{"line":53,"column":1,"offset":5180},"end":{"line":53,"column":125,"offset":5304}}},{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API"},"children":[{"type":"text","value":"canvas","position":{"start":{"line":53,"column":126,"offset":5305},"end":{"line":53,"column":132,"offset":5311}}}],"position":{"start":{"line":53,"column":125,"offset":5304},"end":{"line":53,"column":194,"offset":5373}}},{"type":"text","value":" with arguments width and height. Now within our setup() and createCanvas() functions we can reference the variables width and height without ever instantiating them!","position":{"start":{"line":53,"column":194,"offset":5373},"end":{"line":53,"column":360,"offset":5539}}}],"position":{"start":{"line":53,"column":1,"offset":5180},"end":{"line":53,"column":360,"offset":5539}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Next comes the meaty, draw function. I have purposefully put extra code in here so we can learn more about what p5 has to offer. Firstly always remember that draw() is a loop that runs from top to bottom. Initially, we set the background (of our canvas) to white with background(255) which is the same as background(255, 255, 255) (maximising the red, green and blue values to give white). This may seem simple, but implicitly we are also clearing our canvas every loop… in one line of code! This will be useful for animations later as we want to redraw objects in a new location rather than have the ","position":{"start":{"line":55,"column":1,"offset":5541},"end":{"line":55,"column":602,"offset":6142}}},{"type":"element","tagName":"a","properties":{"href":"https://codepen.io/patricoferris/pen/paxZaw"},"children":[{"type":"text","value":"build-up on the same canvas","position":{"start":{"line":55,"column":603,"offset":6143},"end":{"line":55,"column":630,"offset":6170}}}],"position":{"start":{"line":55,"column":602,"offset":6142},"end":{"line":55,"column":676,"offset":6216}}},{"type":"text","value":" (click to see it go spectacularly wrong). Next is a translate(width/2, height/2) which moves our current drawing location to the centre of our canvas. We then declare the fill colour of our triangle with fill(255, 0, 0)(making it red).","position":{"start":{"line":55,"column":676,"offset":6216},"end":{"line":55,"column":912,"offset":6452}}}],"position":{"start":{"line":55,"column":1,"offset":5541},"end":{"line":55,"column":912,"offset":6452}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We want to create an equilateral triangle with side length s. The triangle itself is a function that takes the vertex coordinates as arguments — triangle(x1, y1, x2, y2, x3, y3) and in this example starting from the centre we have one vertex at (-s/2, 0) another at (s/2, 0) giving a bottom length of s . Now comes the trickier part. A very important aspect of most computer graphics is that the coordinate system starts in the top left corner (or wherever your origin is) and x increases left to right, whilst y increases top to bottom. To move of the screen we need a negative y value. Our last coordinate is given as (0, -sin(PI/3)) (if you’re stuck, think about cutting the triangle in two and using trigonometry).","position":{"start":{"line":57,"column":1,"offset":6454},"end":{"line":57,"column":719,"offset":7172}}}],"position":{"start":{"line":57,"column":1,"offset":6454},"end":{"line":57,"column":719,"offset":7172}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Step 2: Get Creative","position":{"start":{"line":59,"column":5,"offset":7178},"end":{"line":59,"column":25,"offset":7198}}}],"position":{"start":{"line":59,"column":1,"offset":7174},"end":{"line":59,"column":25,"offset":7198}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We’ve learnt how to set up our canvas and start drawing. Armed with the p5 ","position":{"start":{"line":61,"column":1,"offset":7200},"end":{"line":61,"column":76,"offset":7275}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/reference/"},"children":[{"type":"text","value":"reference page","position":{"start":{"line":61,"column":77,"offset":7276},"end":{"line":61,"column":91,"offset":7290}}}],"position":{"start":{"line":61,"column":76,"offset":7275},"end":{"line":61,"column":121,"offset":7320}}},{"type":"text","value":" and our creativity, we can make some truly stunning graphics. How about a bouncing ball animation?","position":{"start":{"line":61,"column":121,"offset":7320},"end":{"line":61,"column":220,"offset":7419}}}],"position":{"start":{"line":61,"column":1,"offset":7200},"end":{"line":61,"column":220,"offset":7419}}},{"type":"text","value":"\n"},{"type":"raw","value":"<iframe height='400' scrolling='no' title='Bouncing Balls' src='//codepen.io/patricoferris/embed/PQpOrB/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/PQpOrB/'>Bouncing Balls</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":63,"column":1,"offset":7421},"end":{"line":64,"column":10,"offset":7895}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let’s look at the interesting p5 aspects that we didn’t know before:","position":{"start":{"line":66,"column":1,"offset":7897},"end":{"line":66,"column":69,"offset":7965}}}],"position":{"start":{"line":66,"column":1,"offset":7897},"end":{"line":66,"column":69,"offset":7965}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"frameRate(20) — This enables us to specify the frame rate of our drawing loop, that is, how many times per second it redraws everything for us.","position":{"start":{"line":68,"column":3,"offset":7969},"end":{"line":68,"column":146,"offset":8112}}}],"position":{"start":{"line":68,"column":3,"offset":7969},"end":{"line":68,"column":146,"offset":8112}}},{"type":"text","value":"\n"}],"position":{"start":{"line":68,"column":1,"offset":7967},"end":{"line":69,"column":1,"offset":8113}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"gravity = createVector(0, 9) — p5 allows us to ","position":{"start":{"line":70,"column":3,"offset":8116},"end":{"line":70,"column":50,"offset":8163}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/reference/#/p5.Vector"},"children":[{"type":"text","value":"create vector objects","position":{"start":{"line":70,"column":51,"offset":8164},"end":{"line":70,"column":72,"offset":8185}}}],"position":{"start":{"line":70,"column":50,"offset":8163},"end":{"line":70,"column":113,"offset":8226}}},{"type":"text","value":" with which we can perform vector operations like addition, multiplication, dot-product and cross-product. This is useful when we want to simulate physics like forces.","position":{"start":{"line":70,"column":113,"offset":8226},"end":{"line":70,"column":280,"offset":8393}}}],"position":{"start":{"line":70,"column":3,"offset":8116},"end":{"line":70,"column":280,"offset":8393}}},{"type":"text","value":"\n"}],"position":{"start":{"line":70,"column":1,"offset":8114},"end":{"line":71,"column":1,"offset":8394}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"floor(random(50)) — Here we’re using p5 math functions. floor() takes a real number and rounds it down to the nearest integer. random(arg) produces a random number as small as 0 or up to 49. In this example, we are giving it to the ellipse(x, y, w)function to create randomly sized balls by setting the width to a random number. If we gave another argument it would set the ellipse’s height, but here it infers that we want a circle.","position":{"start":{"line":72,"column":3,"offset":8397},"end":{"line":72,"column":436,"offset":8830}}}],"position":{"start":{"line":72,"column":3,"offset":8397},"end":{"line":72,"column":436,"offset":8830}}},{"type":"text","value":"\n"}],"position":{"start":{"line":72,"column":1,"offset":8395},"end":{"line":73,"column":1,"offset":8831}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"stroke(0) — This function sets the colour of our shape’s outline. If you don’t want any border you can add noStroke() .","position":{"start":{"line":74,"column":3,"offset":8834},"end":{"line":74,"column":122,"offset":8953}}}],"position":{"start":{"line":74,"column":3,"offset":8834},"end":{"line":74,"column":122,"offset":8953}}},{"type":"text","value":"\n"}],"position":{"start":{"line":74,"column":1,"offset":8832},"end":{"line":74,"column":122,"offset":8953}}},{"type":"text","value":"\n"}],"position":{"start":{"line":68,"column":1,"offset":7967},"end":{"line":74,"column":122,"offset":8953}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"All you need now is to add some physics to these ideas and you have yourself a bouncing ball animation.","position":{"start":{"line":76,"column":1,"offset":8955},"end":{"line":76,"column":104,"offset":9058}}}],"position":{"start":{"line":76,"column":1,"offset":8955},"end":{"line":76,"column":104,"offset":9058}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Step 3: Experiment with p5","position":{"start":{"line":78,"column":5,"offset":9064},"end":{"line":78,"column":31,"offset":9090}}}],"position":{"start":{"line":78,"column":1,"offset":9060},"end":{"line":78,"column":31,"offset":9090}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Hopefully now you have a good understanding of the p5 fundamentals, but we’ve barely scratched the surface. This last example will use two extra features of p5: ","position":{"start":{"line":80,"column":1,"offset":9092},"end":{"line":80,"column":162,"offset":9253}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"interactivity","position":{"start":{"line":80,"column":163,"offset":9254},"end":{"line":80,"column":176,"offset":9267}}}],"position":{"start":{"line":80,"column":162,"offset":9253},"end":{"line":80,"column":177,"offset":9268}}},{"type":"text","value":" and* ","position":{"start":{"line":80,"column":177,"offset":9268},"end":{"line":80,"column":183,"offset":9274}}},{"type":"element","tagName":"a","properties":{"href":"http://flafla2.github.io/2014/08/09/perlinnoise.html"},"children":[{"type":"text","value":"Perlin Noise","position":{"start":{"line":80,"column":184,"offset":9275},"end":{"line":80,"column":196,"offset":9287}}}],"position":{"start":{"line":80,"column":183,"offset":9274},"end":{"line":80,"column":251,"offset":9342}}},{"type":"text","value":"*. Keep reading to find out more on these two concepts.","position":{"start":{"line":80,"column":251,"offset":9342},"end":{"line":80,"column":306,"offset":9397}}}],"position":{"start":{"line":80,"column":1,"offset":9092},"end":{"line":80,"column":306,"offset":9397}}},{"type":"text","value":"\n"},{"type":"raw","value":"<iframe height='400' scrolling='no' title='Pixel Fire' src='//codepen.io/patricoferris/embed/XZMxmV/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/XZMxmV/'>Pixel Fire</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":82,"column":1,"offset":9399},"end":{"line":83,"column":10,"offset":9865}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In this CodePen I have created a relatively simple flame model using squares and Perlin Noise. First of all, how do we get user input? Lucky for us p5 has some functions that can help.","position":{"start":{"line":85,"column":1,"offset":9867},"end":{"line":85,"column":185,"offset":10051}}}],"position":{"start":{"line":85,"column":1,"offset":9867},"end":{"line":85,"column":185,"offset":10051}}},{"type":"text","value":"\n"},{"type":"raw","value":"<high-light className='JavaScript'>\nvar touch = false;\nfunction setup(){\n  createCanvas(640, 640);\n}\nfunction draw(){\n  if(touch){\n    fill(255, 0, 0);\n    rect(mouseX, mouseY, 20, 20);\n  }\n}\nfunction touchStarted(){\n  touch = true;\n}\nfunction touchEnded(){\n  touch = false;\n}\n</high-light>","position":{"start":{"line":87,"column":1,"offset":10053},"end":{"line":104,"column":14,"offset":10343}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"At the top of the code we have declared a boolean “flag” as to whether or not our mouse is being pressed — this allows us to do things if the mouse is being held down. The touchStarted() and touchEnded() are p5 functions that are executed whenever the mouse is pressed or released or the screen is touched and released. Lastly, in our rect() function we have the variables mouseX and mouseY which are p5 variables corresponding to the mouse’s current position. Oddly, these also refer to your ","position":{"start":{"line":106,"column":1,"offset":10345},"end":{"line":106,"column":494,"offset":10838}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/processing/p5.js/issues/1705"},"children":[{"type":"text","value":"“touch” coordinates","position":{"start":{"line":106,"column":495,"offset":10839},"end":{"line":106,"column":514,"offset":10858}}}],"position":{"start":{"line":106,"column":494,"offset":10838},"end":{"line":106,"column":564,"offset":10908}}},{"type":"text","value":". With all these variables and functions predefined for us we can focus on making visually stunning graphics, whilst not being hampered by having to code extra functions unrelated to the graphic we’re producing.","position":{"start":{"line":106,"column":564,"offset":10908},"end":{"line":106,"column":775,"offset":11119}}}],"position":{"start":{"line":106,"column":1,"offset":10345},"end":{"line":106,"column":775,"offset":11119}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now for the Perlin Noise. In 1983, tired with the artificial look of computer graphics, Ken Perlin developed a type of *gradient noise. *The basic idea being you create a big grid of gradients randomly and then use the dot product to interpolate between them. In short, we get random values based on the coordinate system we’re drawing on. Great! For each of our squares we can start them at a random position near our mouse, and generate a random upward vector using their position and Perlin Noise. Let’s look at the code:","position":{"start":{"line":108,"column":1,"offset":11121},"end":{"line":108,"column":525,"offset":11645}}}],"position":{"start":{"line":108,"column":1,"offset":11121},"end":{"line":108,"column":525,"offset":11645}}},{"type":"text","value":"\n"},{"type":"raw","value":"<high-light className='JavaScript'>\nfunction Particle(x, y, color){\n  this.pos = createVector(x + random(-10, 10), y + random(-10, 10));\n  this.vel = createVector(floor(random(-1, 1))*noise(this.pos.x), -noise(this.pos.y)*7);\n  this.alpha = 255;\n  this.r = random(170, 255);\n  this.g = random(10, 255);\n  this.b = random(0, 100);\n  this.update = function(){\n    this.pos.add(this.vel);\n    this.alpha -= 5;\n  }\n  this.show = function(){\n    noStroke();\n    fill(this.r, this.g, this.b, this.alpha);\n    rect(this.pos.x, this.pos.y, 5, 5);\n  }\n  this.dead = function(){\n    if(this.alpha < 0){\n      return true;\n    }else{\n      return false;\n    }\n  }\n}\n</high-light>","position":{"start":{"line":110,"column":1,"offset":11647},"end":{"line":135,"column":14,"offset":12315}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Some key things to notice:","position":{"start":{"line":137,"column":1,"offset":12317},"end":{"line":137,"column":27,"offset":12343}}}],"position":{"start":{"line":137,"column":1,"offset":12317},"end":{"line":137,"column":27,"offset":12343}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"noise(this.pos.x) — The Perlin Noise ","position":{"start":{"line":139,"column":3,"offset":12347},"end":{"line":139,"column":40,"offset":12384}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/reference/#/p5/noise"},"children":[{"type":"text","value":"function","position":{"start":{"line":139,"column":41,"offset":12385},"end":{"line":139,"column":49,"offset":12393}}}],"position":{"start":{"line":139,"column":40,"offset":12384},"end":{"line":139,"column":89,"offset":12433}}},{"type":"text","value":" that gets a random number based on the square’s current x position. It returns a value between 0 and 1.","position":{"start":{"line":139,"column":89,"offset":12433},"end":{"line":139,"column":193,"offset":12537}}}],"position":{"start":{"line":139,"column":3,"offset":12347},"end":{"line":139,"column":193,"offset":12537}}},{"type":"text","value":"\n"}],"position":{"start":{"line":139,"column":1,"offset":12345},"end":{"line":140,"column":1,"offset":12538}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"fill(this.r, this.g, this.b, this.alpha) — Here we have extended fill’s ability by including an alpha value for the objects transparency, by decreasing alpha in the update() function we get a nice fade out like a flame.","position":{"start":{"line":141,"column":3,"offset":12541},"end":{"line":141,"column":222,"offset":12760}}}],"position":{"start":{"line":141,"column":3,"offset":12541},"end":{"line":141,"column":222,"offset":12760}}},{"type":"text","value":"\n"}],"position":{"start":{"line":141,"column":1,"offset":12539},"end":{"line":142,"column":1,"offset":12761}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"dead() — This function allows us to keep track of which particles have disappeared as their alpha is now less than zero. We can then splice() them out of our array to ensure we’re not drawing an unbounded number of particles over time which would cause performance issues.","position":{"start":{"line":143,"column":3,"offset":12764},"end":{"line":143,"column":275,"offset":13036}}}],"position":{"start":{"line":143,"column":3,"offset":12764},"end":{"line":143,"column":275,"offset":13036}}},{"type":"text","value":"\n"}],"position":{"start":{"line":143,"column":1,"offset":12762},"end":{"line":143,"column":275,"offset":13036}}},{"type":"text","value":"\n"}],"position":{"start":{"line":139,"column":1,"offset":12345},"end":{"line":143,"column":275,"offset":13036}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As a challenge, you can also use blendMode() to make it seem even more realistic — check this ","position":{"start":{"line":145,"column":1,"offset":13038},"end":{"line":145,"column":95,"offset":13132}}},{"type":"element","tagName":"a","properties":{"href":"https://codepen.io/anon/pen/YeOaJX"},"children":[{"type":"text","value":"alteration","position":{"start":{"line":145,"column":96,"offset":13133},"end":{"line":145,"column":106,"offset":13143}}}],"position":{"start":{"line":145,"column":95,"offset":13132},"end":{"line":145,"column":143,"offset":13180}}},{"type":"text","value":" to see it in action.","position":{"start":{"line":145,"column":143,"offset":13180},"end":{"line":145,"column":164,"offset":13201}}}],"position":{"start":{"line":145,"column":1,"offset":13038},"end":{"line":145,"column":164,"offset":13201}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"With only a few concepts and the p5 library, it is incredibly straightforward to start building anything you want. Be sure to checkout what else is possible with the library. Here are few cool ideas to get you started: ","position":{"start":{"line":147,"column":1,"offset":13203},"end":{"line":147,"column":220,"offset":13422}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/examples/3d-geometries.html"},"children":[{"type":"text","value":"3D graphics","position":{"start":{"line":147,"column":221,"offset":13423},"end":{"line":147,"column":232,"offset":13434}}}],"position":{"start":{"line":147,"column":220,"offset":13422},"end":{"line":147,"column":279,"offset":13481}}},{"type":"text","value":", ","position":{"start":{"line":147,"column":279,"offset":13481},"end":{"line":147,"column":281,"offset":13483}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/examples/dom-slider.html"},"children":[{"type":"text","value":"sliders","position":{"start":{"line":147,"column":282,"offset":13484},"end":{"line":147,"column":289,"offset":13491}}}],"position":{"start":{"line":147,"column":281,"offset":13483},"end":{"line":147,"column":333,"offset":13535}}},{"type":"text","value":" and ","position":{"start":{"line":147,"column":333,"offset":13535},"end":{"line":147,"column":338,"offset":13540}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/examples/image-load-and-display-image.html"},"children":[{"type":"text","value":"images","position":{"start":{"line":147,"column":339,"offset":13541},"end":{"line":147,"column":345,"offset":13547}}}],"position":{"start":{"line":147,"column":338,"offset":13540},"end":{"line":147,"column":407,"offset":13609}}},{"type":"text","value":".","position":{"start":{"line":147,"column":407,"offset":13609},"end":{"line":147,"column":408,"offset":13610}}}],"position":{"start":{"line":147,"column":1,"offset":13203},"end":{"line":147,"column":408,"offset":13610}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":149,"column":5,"offset":13616},"end":{"line":149,"column":15,"offset":13626}}}],"position":{"start":{"line":149,"column":1,"offset":13612},"end":{"line":149,"column":15,"offset":13626}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As computers and technology become ubiquitous in our daily lives and an increasing number of professions are now relying on computer literacy, p5.js is a beautiful example of how we can ensure as many people as possible have an entry-point to the wonderful world of computer programming. It also acts as a reminder to some more experienced programmers that creativity and imagination are vital in producing meaningful code and ultimately making the tech world a better place.","position":{"start":{"line":151,"column":1,"offset":13628},"end":{"line":151,"column":476,"offset":14103}}}],"position":{"start":{"line":151,"column":1,"offset":13628},"end":{"line":151,"column":476,"offset":14103}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Hopefully this intro to p5 has convinced you of its usefulness and has encouraged you to start taking your first steps into the world of graphics programming. Here are my recommendations for where to go next:","position":{"start":{"line":153,"column":1,"offset":14105},"end":{"line":153,"column":209,"offset":14313}}}],"position":{"start":{"line":153,"column":1,"offset":14105},"end":{"line":153,"column":209,"offset":14313}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.youtube.com/user/shiffman"},"children":[{"type":"text","value":"The Coding Train","position":{"start":{"line":155,"column":4,"offset":14318},"end":{"line":155,"column":20,"offset":14334}}}],"position":{"start":{"line":155,"column":3,"offset":14317},"end":{"line":155,"column":60,"offset":14374}}},{"type":"text","value":" — A brilliant YouTube channel by Daniel Shiffman where he teaches JavaScript and p5.js amongst many other incredible things!","position":{"start":{"line":155,"column":60,"offset":14374},"end":{"line":155,"column":185,"offset":14499}}}],"position":{"start":{"line":155,"column":3,"offset":14317},"end":{"line":155,"column":185,"offset":14499}}},{"type":"text","value":"\n"}],"position":{"start":{"line":155,"column":1,"offset":14315},"end":{"line":156,"column":1,"offset":14500}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/examples/"},"children":[{"type":"text","value":"p5js.org ","position":{"start":{"line":157,"column":4,"offset":14504},"end":{"line":157,"column":13,"offset":14513}}}],"position":{"start":{"line":157,"column":3,"offset":14503},"end":{"line":157,"column":42,"offset":14542}}},{"type":"text","value":"— The examples page on this website is full of inspiring projects which you could recreate and extend further.","position":{"start":{"line":157,"column":42,"offset":14542},"end":{"line":157,"column":152,"offset":14652}}}],"position":{"start":{"line":157,"column":3,"offset":14503},"end":{"line":157,"column":152,"offset":14652}}},{"type":"text","value":"\n"}],"position":{"start":{"line":157,"column":1,"offset":14501},"end":{"line":158,"column":1,"offset":14653}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.scratchapixel.com/index.php"},"children":[{"type":"text","value":"Sratchapixel","position":{"start":{"line":159,"column":4,"offset":14657},"end":{"line":159,"column":16,"offset":14669}}}],"position":{"start":{"line":159,"column":3,"offset":14656},"end":{"line":159,"column":58,"offset":14711}}},{"type":"text","value":" — If you feel ready to delve into the deeper concepts and implementations of computer graphics then this website is an incredible resource for you to use.","position":{"start":{"line":159,"column":58,"offset":14711},"end":{"line":159,"column":213,"offset":14866}}}],"position":{"start":{"line":159,"column":3,"offset":14656},"end":{"line":159,"column":213,"offset":14866}}},{"type":"text","value":"\n"}],"position":{"start":{"line":159,"column":1,"offset":14654},"end":{"line":159,"column":213,"offset":14866}}},{"type":"text","value":"\n"}],"position":{"start":{"line":155,"column":1,"offset":14315},"end":{"line":159,"column":213,"offset":14866}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A special thanks to ","position":{"start":{"line":161,"column":1,"offset":14868},"end":{"line":161,"column":21,"offset":14888}}},{"type":"element","tagName":"a","properties":{"href":"undefined"},"children":[{"type":"text","value":"Tom Read Cutting","position":{"start":{"line":161,"column":22,"offset":14889},"end":{"line":161,"column":38,"offset":14905}}}],"position":{"start":{"line":161,"column":21,"offset":14888},"end":{"line":161,"column":50,"offset":14917}}},{"type":"text","value":" for editing this article and ","position":{"start":{"line":161,"column":50,"offset":14917},"end":{"line":161,"column":80,"offset":14947}}},{"type":"element","tagName":"a","properties":{"href":"undefined"},"children":[{"type":"text","value":"Christian Silver","position":{"start":{"line":161,"column":81,"offset":14948},"end":{"line":161,"column":97,"offset":14964}}}],"position":{"start":{"line":161,"column":80,"offset":14947},"end":{"line":161,"column":109,"offset":14976}}},{"type":"text","value":" for helping get it off the ground.","position":{"start":{"line":161,"column":109,"offset":14976},"end":{"line":161,"column":144,"offset":15011}}}],"position":{"start":{"line":161,"column":1,"offset":14868},"end":{"line":161,"column":144,"offset":15011}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":162,"column":1,"offset":15012}}}},{"id":"transformer-remark-markdown-html-8cbd46de40cd7b69af650c089846cc33-gatsby-remark-imagesgatsby-remark-prismjs-","value":"<p><img src=\"https://res.cloudinary.com/patricoferris/image/upload/v1532857964/pf2018/blogposts/27-02-2018/tree.png\" alt=\"Recursive Tree\"></p>\n<p>Graphics and computer programming are two dearly intertwined disciplines. The oscilloscope is often recognised as one of the first examples of “computer graphics”, the cathode-ray versions emitting a beam of electrons onto a phosphorescent screen. By using magnetic fields to change the beam’s direction, we can sweep from left to right and move up and down — the basic idea behind most CG! (I highly recommend watching this <a href=\"https://archive.org/details/introductiontothecathoderayoscilloscope\">video</a> from 1970).</p>\n<p>We’ve come a long way since then — modern day graphics is a complicated science as well as an art, and the barrier to entry is constantly increasing. Graphics programming can be so complex, that a simple program to draw a triangle can be over <a href=\"https://github.com/SaschaWillems/Vulkan/blob/master/examples/triangle/triangle.cpp\">1000 lines of code</a>! However, this article will introduce you to <a href=\"https://p5js.org/\">p5.js</a> (also known as p5). A simpler, less complex solution for people who want to start making computer graphics, but don’t want the headache of streams of boiler-plate code.</p>\n<p>Straight from the landing page of the p5.js website.</p>\n<blockquote>\n<h1>…make coding accessible for artists, designers, educators and beginners…</h1>\n</blockquote>\n<p>p5.js is the result of hard-work of the <a href=\"https://processingfoundation.org/\">Processing Foundation</a>, a group focused on spreading computer and visual literacy. It distills their <a href=\"https://en.wikipedia.org/wiki/Processing_(programming_language)\">Processing</a> language into a JavaScript library that makes creating graphics easy and accessible whilst providing an ideal platform to springboard people’s careers in computer graphics. It should be mentioned now that a lot of inspiration has been taken from <a href=\"http://shiffman.net/\">Daniel Shiffman’s</a> p5 projects (from the <a href=\"https://github.com/CodingTrain/website/tree/master/CodingChallenges/CC_03_Snake_game_p5.js\">classic snake game</a>, to a <a href=\"https://github.com/CodingTrain/website/tree/master/CodingChallenges/CC_93_DoublePendulum_p5.js\">double pendulum</a>). I can’t urge you enough to follow these projects to really improve your understanding of coding concepts and the p5 library.</p>\n<h3>Some prerequisites:</h3>\n<p>Before jumping into the p5 code I first want to make clear that there is assumed knowledge of HTML5 and JavaScript including arrays, functions, variables etc. in the rest of this article. If you have a good grasp of JavaScript then skip to the p5 code below, otherwise here are few resources to get you up to scratch.</p>\n<ul>\n<li>\n<p><a href=\"https://www.youtube.com/watch?v=spIVWmv1jnw\">HaC Intro to Programming</a> — A workshop that is being run by Hackers at Cambridge to help anyone start learning to program (which uses JavaScript).</p>\n</li>\n<li>\n<p><a href=\"https://www.codecademy.com/learn/introduction-to-javascript\">Codecademy</a> — a great resource for learning how to code with instant feedback in your browser.</p>\n</li>\n<li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript\">MDN</a> — a great resource for learning about all aspects of web development.</p>\n</li>\n<li>\n<p><a href=\"https://codepen.io/\">Codepen</a> — a brilliant online text-editor for creating cool projects in HTML, CSS and JavaScript. Equally good for getting inspiration from a lot of talented users. Another possible solution would be <a href=\"https://jsfiddle.net/\">JSFiddle</a>.</p>\n</li>\n</ul>\n<p>What follows is a series of steps that will introduce you to p5 concepts. With code examples and explanations I hope to give you enough information to understand the ideas, but to fully grasp the concepts you will have to dive into the code, experiment with it, break it and learn from it. So without further ado, let’s get coding.</p>\n<h3>Step 1: The Setup</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//Initialisation of canvas, objects, variables etc.</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//The drawing loop - updates at a constant rate declared in setup</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>p5 is really simple to setup once you know what to do. There are two files shown above — an index.html and a template.js. The index.html file gets the libraries for us and the template.js is the barebones structure of a p5 project and at the moment it does nothing! Within this we have two functions:</p>\n<ul>\n<li>\n<p>setup() — a function for creating what we will need for our graphic or project. Like creating a canvas, initialising some objects or arrays etc.</p>\n</li>\n<li>\n<p>draw() — a function which will be called periodically like a loop. This is where will call draw functions and update functions to make graphics and animations.</p>\n</li>\n</ul>\n<iframe height='400' scrolling='no' title='Simple Triangle Tutorial' src='//codepen.io/patricoferris/embed/dddxjr/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/dddxjr/'>Simple Triangle Tutorial</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>Let’s first look at the setup function. We used the p5 function createCanvas(width, height) which created and initialised a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API\">canvas</a> with arguments width and height. Now within our setup() and createCanvas() functions we can reference the variables width and height without ever instantiating them!</p>\n<p>Next comes the meaty, draw function. I have purposefully put extra code in here so we can learn more about what p5 has to offer. Firstly always remember that draw() is a loop that runs from top to bottom. Initially, we set the background (of our canvas) to white with background(255) which is the same as background(255, 255, 255) (maximising the red, green and blue values to give white). This may seem simple, but implicitly we are also clearing our canvas every loop… in one line of code! This will be useful for animations later as we want to redraw objects in a new location rather than have the <a href=\"https://codepen.io/patricoferris/pen/paxZaw\">build-up on the same canvas</a> (click to see it go spectacularly wrong). Next is a translate(width/2, height/2) which moves our current drawing location to the centre of our canvas. We then declare the fill colour of our triangle with fill(255, 0, 0)(making it red).</p>\n<p>We want to create an equilateral triangle with side length s. The triangle itself is a function that takes the vertex coordinates as arguments — triangle(x1, y1, x2, y2, x3, y3) and in this example starting from the centre we have one vertex at (-s/2, 0) another at (s/2, 0) giving a bottom length of s . Now comes the trickier part. A very important aspect of most computer graphics is that the coordinate system starts in the top left corner (or wherever your origin is) and x increases left to right, whilst y increases top to bottom. To move of the screen we need a negative y value. Our last coordinate is given as (0, -sin(PI/3)) (if you’re stuck, think about cutting the triangle in two and using trigonometry).</p>\n<h3>Step 2: Get Creative</h3>\n<p>We’ve learnt how to set up our canvas and start drawing. Armed with the p5 <a href=\"https://p5js.org/reference/\">reference page</a> and our creativity, we can make some truly stunning graphics. How about a bouncing ball animation?</p>\n<iframe height='400' scrolling='no' title='Bouncing Balls' src='//codepen.io/patricoferris/embed/PQpOrB/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/PQpOrB/'>Bouncing Balls</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>Let’s look at the interesting p5 aspects that we didn’t know before:</p>\n<ul>\n<li>\n<p>frameRate(20) — This enables us to specify the frame rate of our drawing loop, that is, how many times per second it redraws everything for us.</p>\n</li>\n<li>\n<p>gravity = createVector(0, 9) — p5 allows us to <a href=\"https://p5js.org/reference/#/p5.Vector\">create vector objects</a> with which we can perform vector operations like addition, multiplication, dot-product and cross-product. This is useful when we want to simulate physics like forces.</p>\n</li>\n<li>\n<p>floor(random(50)) — Here we’re using p5 math functions. floor() takes a real number and rounds it down to the nearest integer. random(arg) produces a random number as small as 0 or up to 49. In this example, we are giving it to the ellipse(x, y, w)function to create randomly sized balls by setting the width to a random number. If we gave another argument it would set the ellipse’s height, but here it infers that we want a circle.</p>\n</li>\n<li>\n<p>stroke(0) — This function sets the colour of our shape’s outline. If you don’t want any border you can add noStroke() .</p>\n</li>\n</ul>\n<p>All you need now is to add some physics to these ideas and you have yourself a bouncing ball animation.</p>\n<h3>Step 3: Experiment with p5</h3>\n<p>Hopefully now you have a good understanding of the p5 fundamentals, but we’ve barely scratched the surface. This last example will use two extra features of p5: <em>interactivity</em> and* <a href=\"http://flafla2.github.io/2014/08/09/perlinnoise.html\">Perlin Noise</a>*. Keep reading to find out more on these two concepts.</p>\n<iframe height='400' scrolling='no' title='Pixel Fire' src='//codepen.io/patricoferris/embed/XZMxmV/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/XZMxmV/'>Pixel Fire</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>In this CodePen I have created a relatively simple flame model using squares and Perlin Noise. First of all, how do we get user input? Lucky for us p5 has some functions that can help.</p>\n<high-light className='JavaScript'>\nvar touch = false;\nfunction setup(){\n  createCanvas(640, 640);\n}\nfunction draw(){\n  if(touch){\n    fill(255, 0, 0);\n    rect(mouseX, mouseY, 20, 20);\n  }\n}\nfunction touchStarted(){\n  touch = true;\n}\nfunction touchEnded(){\n  touch = false;\n}\n</high-light>\n<p>At the top of the code we have declared a boolean “flag” as to whether or not our mouse is being pressed — this allows us to do things if the mouse is being held down. The touchStarted() and touchEnded() are p5 functions that are executed whenever the mouse is pressed or released or the screen is touched and released. Lastly, in our rect() function we have the variables mouseX and mouseY which are p5 variables corresponding to the mouse’s current position. Oddly, these also refer to your <a href=\"https://github.com/processing/p5.js/issues/1705\">“touch” coordinates</a>. With all these variables and functions predefined for us we can focus on making visually stunning graphics, whilst not being hampered by having to code extra functions unrelated to the graphic we’re producing.</p>\n<p>Now for the Perlin Noise. In 1983, tired with the artificial look of computer graphics, Ken Perlin developed a type of *gradient noise. *The basic idea being you create a big grid of gradients randomly and then use the dot product to interpolate between them. In short, we get random values based on the coordinate system we’re drawing on. Great! For each of our squares we can start them at a random position near our mouse, and generate a random upward vector using their position and Perlin Noise. Let’s look at the code:</p>\n<high-light className='JavaScript'>\nfunction Particle(x, y, color){\n  this.pos = createVector(x + random(-10, 10), y + random(-10, 10));\n  this.vel = createVector(floor(random(-1, 1))*noise(this.pos.x), -noise(this.pos.y)*7);\n  this.alpha = 255;\n  this.r = random(170, 255);\n  this.g = random(10, 255);\n  this.b = random(0, 100);\n  this.update = function(){\n    this.pos.add(this.vel);\n    this.alpha -= 5;\n  }\n  this.show = function(){\n    noStroke();\n    fill(this.r, this.g, this.b, this.alpha);\n    rect(this.pos.x, this.pos.y, 5, 5);\n  }\n  this.dead = function(){\n    if(this.alpha < 0){\n      return true;\n    }else{\n      return false;\n    }\n  }\n}\n</high-light>\n<p>Some key things to notice:</p>\n<ul>\n<li>\n<p>noise(this.pos.x) — The Perlin Noise <a href=\"https://p5js.org/reference/#/p5/noise\">function</a> that gets a random number based on the square’s current x position. It returns a value between 0 and 1.</p>\n</li>\n<li>\n<p>fill(this.r, this.g, this.b, this.alpha) — Here we have extended fill’s ability by including an alpha value for the objects transparency, by decreasing alpha in the update() function we get a nice fade out like a flame.</p>\n</li>\n<li>\n<p>dead() — This function allows us to keep track of which particles have disappeared as their alpha is now less than zero. We can then splice() them out of our array to ensure we’re not drawing an unbounded number of particles over time which would cause performance issues.</p>\n</li>\n</ul>\n<p>As a challenge, you can also use blendMode() to make it seem even more realistic — check this <a href=\"https://codepen.io/anon/pen/YeOaJX\">alteration</a> to see it in action.</p>\n<p>With only a few concepts and the p5 library, it is incredibly straightforward to start building anything you want. Be sure to checkout what else is possible with the library. Here are few cool ideas to get you started: <a href=\"https://p5js.org/examples/3d-geometries.html\">3D graphics</a>, <a href=\"https://p5js.org/examples/dom-slider.html\">sliders</a> and <a href=\"https://p5js.org/examples/image-load-and-display-image.html\">images</a>.</p>\n<h3>Conclusion</h3>\n<p>As computers and technology become ubiquitous in our daily lives and an increasing number of professions are now relying on computer literacy, p5.js is a beautiful example of how we can ensure as many people as possible have an entry-point to the wonderful world of computer programming. It also acts as a reminder to some more experienced programmers that creativity and imagination are vital in producing meaningful code and ultimately making the tech world a better place.</p>\n<p>Hopefully this intro to p5 has convinced you of its usefulness and has encouraged you to start taking your first steps into the world of graphics programming. Here are my recommendations for where to go next:</p>\n<ul>\n<li>\n<p><a href=\"https://www.youtube.com/user/shiffman\">The Coding Train</a> — A brilliant YouTube channel by Daniel Shiffman where he teaches JavaScript and p5.js amongst many other incredible things!</p>\n</li>\n<li>\n<p><a href=\"https://p5js.org/examples/\">p5js.org </a>— The examples page on this website is full of inspiring projects which you could recreate and extend further.</p>\n</li>\n<li>\n<p><a href=\"https://www.scratchapixel.com/index.php\">Sratchapixel</a> — If you feel ready to delve into the deeper concepts and implementations of computer graphics then this website is an incredible resource for you to use.</p>\n</li>\n</ul>\n<p>A special thanks to <a href=\"undefined\">Tom Read Cutting</a> for editing this article and <a href=\"undefined\">Christian Silver</a> for helping get it off the ground.</p>"},{"id":"transformer-remark-markdown-ast-459e6ec5230ae1bc11ba08acae14c583-gatsby-remark-imagesgatsby-remark-prismjs-","value":{"type":"root","children":[{"type":"yaml","value":"path: '/graphics-and-p5'\ntitle: 'Computer Graphics for Everyone'\nsubtitle: 'An Introduction to Computer Graphics using p5.js'\ndate: '2018-02-27'","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":6,"column":4,"offset":152},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://res.cloudinary.com/patricoferris/image/upload/v1532857964/pf2018/blogposts/27-02-2018/tree.png","alt":"Recursive Tree","position":{"start":{"line":8,"column":1,"offset":154},"end":{"line":8,"column":122,"offset":275},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":154},"end":{"line":8,"column":122,"offset":275},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Graphics and computer programming are two dearly intertwined disciplines. The oscilloscope is often recognised as one of the first examples of “computer graphics”, the cathode-ray versions emitting a beam of electrons onto a phosphorescent screen. By using magnetic fields to change the beam’s direction, we can sweep from left to right and move up and down — the basic idea behind most CG! (I highly recommend watching this ","position":{"start":{"line":10,"column":1,"offset":277},"end":{"line":10,"column":426,"offset":702},"indent":[]}},{"type":"link","title":null,"url":"https://archive.org/details/introductiontothecathoderayoscilloscope","children":[{"type":"text","value":"video","position":{"start":{"line":10,"column":427,"offset":703},"end":{"line":10,"column":432,"offset":708},"indent":[]}}],"position":{"start":{"line":10,"column":426,"offset":702},"end":{"line":10,"column":502,"offset":778},"indent":[]}},{"type":"text","value":" from 1970).","position":{"start":{"line":10,"column":502,"offset":778},"end":{"line":10,"column":514,"offset":790},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":277},"end":{"line":10,"column":514,"offset":790},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We’ve come a long way since then — modern day graphics is a complicated science as well as an art, and the barrier to entry is constantly increasing. Graphics programming can be so complex, that a simple program to draw a triangle can be over ","position":{"start":{"line":12,"column":1,"offset":792},"end":{"line":12,"column":244,"offset":1035},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/SaschaWillems/Vulkan/blob/master/examples/triangle/triangle.cpp","children":[{"type":"text","value":"1000 lines of code","position":{"start":{"line":12,"column":245,"offset":1036},"end":{"line":12,"column":263,"offset":1054},"indent":[]}}],"position":{"start":{"line":12,"column":244,"offset":1035},"end":{"line":12,"column":348,"offset":1139},"indent":[]}},{"type":"text","value":"! However, this article will introduce you to ","position":{"start":{"line":12,"column":348,"offset":1139},"end":{"line":12,"column":394,"offset":1185},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/","children":[{"type":"text","value":"p5.js","position":{"start":{"line":12,"column":395,"offset":1186},"end":{"line":12,"column":400,"offset":1191},"indent":[]}}],"position":{"start":{"line":12,"column":394,"offset":1185},"end":{"line":12,"column":420,"offset":1211},"indent":[]}},{"type":"text","value":" (also known as p5). A simpler, less complex solution for people who want to start making computer graphics, but don’t want the headache of streams of boiler-plate code.","position":{"start":{"line":12,"column":420,"offset":1211},"end":{"line":12,"column":589,"offset":1380},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":792},"end":{"line":12,"column":589,"offset":1380},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Straight from the landing page of the p5.js website.","position":{"start":{"line":14,"column":1,"offset":1382},"end":{"line":14,"column":53,"offset":1434},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":1382},"end":{"line":14,"column":53,"offset":1434},"indent":[]}},{"type":"blockquote","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"…make coding accessible for artists, designers, educators and beginners…","position":{"start":{"line":15,"column":5,"offset":1439},"end":{"line":15,"column":77,"offset":1511},"indent":[]}}],"position":{"start":{"line":15,"column":3,"offset":1437},"end":{"line":15,"column":77,"offset":1511},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":1435},"end":{"line":15,"column":77,"offset":1511},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"p5.js is the result of hard-work of the ","position":{"start":{"line":17,"column":1,"offset":1513},"end":{"line":17,"column":41,"offset":1553},"indent":[]}},{"type":"link","title":null,"url":"https://processingfoundation.org/","children":[{"type":"text","value":"Processing Foundation","position":{"start":{"line":17,"column":42,"offset":1554},"end":{"line":17,"column":63,"offset":1575},"indent":[]}}],"position":{"start":{"line":17,"column":41,"offset":1553},"end":{"line":17,"column":99,"offset":1611},"indent":[]}},{"type":"text","value":", a group focused on spreading computer and visual literacy. It distills their ","position":{"start":{"line":17,"column":99,"offset":1611},"end":{"line":17,"column":178,"offset":1690},"indent":[]}},{"type":"link","title":null,"url":"https://en.wikipedia.org/wiki/Processing_(programming_language)","children":[{"type":"text","value":"Processing","position":{"start":{"line":17,"column":179,"offset":1691},"end":{"line":17,"column":189,"offset":1701},"indent":[]}}],"position":{"start":{"line":17,"column":178,"offset":1690},"end":{"line":17,"column":255,"offset":1767},"indent":[]}},{"type":"text","value":" language into a JavaScript library that makes creating graphics easy and accessible whilst providing an ideal platform to springboard people’s careers in computer graphics. It should be mentioned now that a lot of inspiration has been taken from ","position":{"start":{"line":17,"column":255,"offset":1767},"end":{"line":17,"column":502,"offset":2014},"indent":[]}},{"type":"link","title":null,"url":"http://shiffman.net/","children":[{"type":"text","value":"Daniel Shiffman’s","position":{"start":{"line":17,"column":503,"offset":2015},"end":{"line":17,"column":520,"offset":2032},"indent":[]}}],"position":{"start":{"line":17,"column":502,"offset":2014},"end":{"line":17,"column":543,"offset":2055},"indent":[]}},{"type":"text","value":" p5 projects (from the ","position":{"start":{"line":17,"column":543,"offset":2055},"end":{"line":17,"column":566,"offset":2078},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/CodingTrain/website/tree/master/CodingChallenges/CC_03_Snake_game_p5.js","children":[{"type":"text","value":"classic snake game","position":{"start":{"line":17,"column":567,"offset":2079},"end":{"line":17,"column":585,"offset":2097},"indent":[]}}],"position":{"start":{"line":17,"column":566,"offset":2078},"end":{"line":17,"column":678,"offset":2190},"indent":[]}},{"type":"text","value":", to a ","position":{"start":{"line":17,"column":678,"offset":2190},"end":{"line":17,"column":685,"offset":2197},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/CodingTrain/website/tree/master/CodingChallenges/CC_93_DoublePendulum_p5.js","children":[{"type":"text","value":"double pendulum","position":{"start":{"line":17,"column":686,"offset":2198},"end":{"line":17,"column":701,"offset":2213},"indent":[]}}],"position":{"start":{"line":17,"column":685,"offset":2197},"end":{"line":17,"column":798,"offset":2310},"indent":[]}},{"type":"text","value":"). I can’t urge you enough to follow these projects to really improve your understanding of coding concepts and the p5 library.","position":{"start":{"line":17,"column":798,"offset":2310},"end":{"line":17,"column":925,"offset":2437},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":1513},"end":{"line":17,"column":925,"offset":2437},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Some prerequisites:","position":{"start":{"line":19,"column":5,"offset":2443},"end":{"line":19,"column":24,"offset":2462},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":2439},"end":{"line":19,"column":24,"offset":2462},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Before jumping into the p5 code I first want to make clear that there is assumed knowledge of HTML5 and JavaScript including arrays, functions, variables etc. in the rest of this article. If you have a good grasp of JavaScript then skip to the p5 code below, otherwise here are few resources to get you up to scratch.","position":{"start":{"line":21,"column":1,"offset":2464},"end":{"line":21,"column":318,"offset":2781},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":2464},"end":{"line":21,"column":318,"offset":2781},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":true,"children":[{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.youtube.com/watch?v=spIVWmv1jnw","children":[{"type":"text","value":"HaC Intro to Programming","position":{"start":{"line":23,"column":4,"offset":2786},"end":{"line":23,"column":28,"offset":2810},"indent":[]}}],"position":{"start":{"line":23,"column":3,"offset":2785},"end":{"line":23,"column":74,"offset":2856},"indent":[]}},{"type":"text","value":" — A workshop that is being run by Hackers at Cambridge to help anyone start learning to program (which uses JavaScript).","position":{"start":{"line":23,"column":74,"offset":2856},"end":{"line":23,"column":195,"offset":2977},"indent":[]}}],"position":{"start":{"line":23,"column":3,"offset":2785},"end":{"line":23,"column":195,"offset":2977},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":2783},"end":{"line":24,"column":1,"offset":2978},"indent":[1]}},{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.codecademy.com/learn/introduction-to-javascript","children":[{"type":"text","value":"Codecademy","position":{"start":{"line":25,"column":4,"offset":2982},"end":{"line":25,"column":14,"offset":2992},"indent":[]}}],"position":{"start":{"line":25,"column":3,"offset":2981},"end":{"line":25,"column":76,"offset":3054},"indent":[]}},{"type":"text","value":" — a great resource for learning how to code with instant feedback in your browser.","position":{"start":{"line":25,"column":76,"offset":3054},"end":{"line":25,"column":159,"offset":3137},"indent":[]}}],"position":{"start":{"line":25,"column":3,"offset":2981},"end":{"line":25,"column":159,"offset":3137},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":2979},"end":{"line":26,"column":1,"offset":3138},"indent":[1]}},{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript","children":[{"type":"text","value":"MDN","position":{"start":{"line":27,"column":4,"offset":3142},"end":{"line":27,"column":7,"offset":3145},"indent":[]}}],"position":{"start":{"line":27,"column":3,"offset":3141},"end":{"line":27,"column":65,"offset":3203},"indent":[]}},{"type":"text","value":" — a great resource for learning about all aspects of web development.","position":{"start":{"line":27,"column":65,"offset":3203},"end":{"line":27,"column":135,"offset":3273},"indent":[]}}],"position":{"start":{"line":27,"column":3,"offset":3141},"end":{"line":27,"column":135,"offset":3273},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":3139},"end":{"line":28,"column":1,"offset":3274},"indent":[1]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://codepen.io/","children":[{"type":"text","value":"Codepen","position":{"start":{"line":29,"column":4,"offset":3278},"end":{"line":29,"column":11,"offset":3285},"indent":[]}}],"position":{"start":{"line":29,"column":3,"offset":3277},"end":{"line":29,"column":33,"offset":3307},"indent":[]}},{"type":"text","value":" — a brilliant online text-editor for creating cool projects in HTML, CSS and JavaScript. Equally good for getting inspiration from a lot of talented users. Another possible solution would be ","position":{"start":{"line":29,"column":33,"offset":3307},"end":{"line":29,"column":225,"offset":3499},"indent":[]}},{"type":"link","title":null,"url":"https://jsfiddle.net/","children":[{"type":"text","value":"JSFiddle","position":{"start":{"line":29,"column":226,"offset":3500},"end":{"line":29,"column":234,"offset":3508},"indent":[]}}],"position":{"start":{"line":29,"column":225,"offset":3499},"end":{"line":29,"column":258,"offset":3532},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":29,"column":258,"offset":3532},"end":{"line":29,"column":259,"offset":3533},"indent":[]}}],"position":{"start":{"line":29,"column":3,"offset":3277},"end":{"line":29,"column":259,"offset":3533},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":3275},"end":{"line":29,"column":259,"offset":3533},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":2783},"end":{"line":29,"column":259,"offset":3533},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"What follows is a series of steps that will introduce you to p5 concepts. With code examples and explanations I hope to give you enough information to understand the ideas, but to fully grasp the concepts you will have to dive into the code, experiment with it, break it and learn from it. So without further ado, let’s get coding.","position":{"start":{"line":31,"column":1,"offset":3535},"end":{"line":31,"column":332,"offset":3866},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":3535},"end":{"line":31,"column":332,"offset":3866},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Step 1: The Setup","position":{"start":{"line":33,"column":5,"offset":3872},"end":{"line":33,"column":22,"offset":3889},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":3868},"end":{"line":33,"column":22,"offset":3889},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//Initialisation of canvas, objects, variables etc.</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//The drawing loop - updates at a constant rate declared in setup</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":35,"column":1,"offset":3891},"end":{"line":42,"column":4,"offset":4069},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"p5 is really simple to setup once you know what to do. There are two files shown above — an index.html and a template.js. The index.html file gets the libraries for us and the template.js is the barebones structure of a p5 project and at the moment it does nothing! Within this we have two functions:","position":{"start":{"line":44,"column":1,"offset":4071},"end":{"line":44,"column":301,"offset":4371},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":4071},"end":{"line":44,"column":301,"offset":4371},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":true,"children":[{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"setup() — a function for creating what we will need for our graphic or project. Like creating a canvas, initialising some objects or arrays etc.","position":{"start":{"line":46,"column":3,"offset":4375},"end":{"line":46,"column":147,"offset":4519},"indent":[]}}],"position":{"start":{"line":46,"column":3,"offset":4375},"end":{"line":46,"column":147,"offset":4519},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":4373},"end":{"line":47,"column":1,"offset":4520},"indent":[1]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"draw() — a function which will be called periodically like a loop. This is where will call draw functions and update functions to make graphics and animations.","position":{"start":{"line":48,"column":3,"offset":4523},"end":{"line":48,"column":162,"offset":4682},"indent":[]}}],"position":{"start":{"line":48,"column":3,"offset":4523},"end":{"line":48,"column":162,"offset":4682},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":4521},"end":{"line":48,"column":162,"offset":4682},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":4373},"end":{"line":48,"column":162,"offset":4682},"indent":[1,1]}},{"type":"html","value":"<iframe height='400' scrolling='no' title='Simple Triangle Tutorial' src='//codepen.io/patricoferris/embed/dddxjr/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/dddxjr/'>Simple Triangle Tutorial</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":50,"column":1,"offset":4684},"end":{"line":51,"column":10,"offset":5178},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Let’s first look at the setup function. We used the p5 function createCanvas(width, height) which created and initialised a ","position":{"start":{"line":53,"column":1,"offset":5180},"end":{"line":53,"column":125,"offset":5304},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API","children":[{"type":"text","value":"canvas","position":{"start":{"line":53,"column":126,"offset":5305},"end":{"line":53,"column":132,"offset":5311},"indent":[]}}],"position":{"start":{"line":53,"column":125,"offset":5304},"end":{"line":53,"column":194,"offset":5373},"indent":[]}},{"type":"text","value":" with arguments width and height. Now within our setup() and createCanvas() functions we can reference the variables width and height without ever instantiating them!","position":{"start":{"line":53,"column":194,"offset":5373},"end":{"line":53,"column":360,"offset":5539},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":5180},"end":{"line":53,"column":360,"offset":5539},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Next comes the meaty, draw function. I have purposefully put extra code in here so we can learn more about what p5 has to offer. Firstly always remember that draw() is a loop that runs from top to bottom. Initially, we set the background (of our canvas) to white with background(255) which is the same as background(255, 255, 255) (maximising the red, green and blue values to give white). This may seem simple, but implicitly we are also clearing our canvas every loop… in one line of code! This will be useful for animations later as we want to redraw objects in a new location rather than have the ","position":{"start":{"line":55,"column":1,"offset":5541},"end":{"line":55,"column":602,"offset":6142},"indent":[]}},{"type":"link","title":null,"url":"https://codepen.io/patricoferris/pen/paxZaw","children":[{"type":"text","value":"build-up on the same canvas","position":{"start":{"line":55,"column":603,"offset":6143},"end":{"line":55,"column":630,"offset":6170},"indent":[]}}],"position":{"start":{"line":55,"column":602,"offset":6142},"end":{"line":55,"column":676,"offset":6216},"indent":[]}},{"type":"text","value":" (click to see it go spectacularly wrong). Next is a translate(width/2, height/2) which moves our current drawing location to the centre of our canvas. We then declare the fill colour of our triangle with fill(255, 0, 0)(making it red).","position":{"start":{"line":55,"column":676,"offset":6216},"end":{"line":55,"column":912,"offset":6452},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":5541},"end":{"line":55,"column":912,"offset":6452},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We want to create an equilateral triangle with side length s. The triangle itself is a function that takes the vertex coordinates as arguments — triangle(x1, y1, x2, y2, x3, y3) and in this example starting from the centre we have one vertex at (-s/2, 0) another at (s/2, 0) giving a bottom length of s . Now comes the trickier part. A very important aspect of most computer graphics is that the coordinate system starts in the top left corner (or wherever your origin is) and x increases left to right, whilst y increases top to bottom. To move of the screen we need a negative y value. Our last coordinate is given as (0, -sin(PI/3)) (if you’re stuck, think about cutting the triangle in two and using trigonometry).","position":{"start":{"line":57,"column":1,"offset":6454},"end":{"line":57,"column":719,"offset":7172},"indent":[]}}],"position":{"start":{"line":57,"column":1,"offset":6454},"end":{"line":57,"column":719,"offset":7172},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Step 2: Get Creative","position":{"start":{"line":59,"column":5,"offset":7178},"end":{"line":59,"column":25,"offset":7198},"indent":[]}}],"position":{"start":{"line":59,"column":1,"offset":7174},"end":{"line":59,"column":25,"offset":7198},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We’ve learnt how to set up our canvas and start drawing. Armed with the p5 ","position":{"start":{"line":61,"column":1,"offset":7200},"end":{"line":61,"column":76,"offset":7275},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/reference/","children":[{"type":"text","value":"reference page","position":{"start":{"line":61,"column":77,"offset":7276},"end":{"line":61,"column":91,"offset":7290},"indent":[]}}],"position":{"start":{"line":61,"column":76,"offset":7275},"end":{"line":61,"column":121,"offset":7320},"indent":[]}},{"type":"text","value":" and our creativity, we can make some truly stunning graphics. How about a bouncing ball animation?","position":{"start":{"line":61,"column":121,"offset":7320},"end":{"line":61,"column":220,"offset":7419},"indent":[]}}],"position":{"start":{"line":61,"column":1,"offset":7200},"end":{"line":61,"column":220,"offset":7419},"indent":[]}},{"type":"html","value":"<iframe height='400' scrolling='no' title='Bouncing Balls' src='//codepen.io/patricoferris/embed/PQpOrB/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/PQpOrB/'>Bouncing Balls</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":63,"column":1,"offset":7421},"end":{"line":64,"column":10,"offset":7895},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Let’s look at the interesting p5 aspects that we didn’t know before:","position":{"start":{"line":66,"column":1,"offset":7897},"end":{"line":66,"column":69,"offset":7965},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":7897},"end":{"line":66,"column":69,"offset":7965},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":true,"children":[{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"frameRate(20) — This enables us to specify the frame rate of our drawing loop, that is, how many times per second it redraws everything for us.","position":{"start":{"line":68,"column":3,"offset":7969},"end":{"line":68,"column":146,"offset":8112},"indent":[]}}],"position":{"start":{"line":68,"column":3,"offset":7969},"end":{"line":68,"column":146,"offset":8112},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":7967},"end":{"line":69,"column":1,"offset":8113},"indent":[1]}},{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"gravity = createVector(0, 9) — p5 allows us to ","position":{"start":{"line":70,"column":3,"offset":8116},"end":{"line":70,"column":50,"offset":8163},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/reference/#/p5.Vector","children":[{"type":"text","value":"create vector objects","position":{"start":{"line":70,"column":51,"offset":8164},"end":{"line":70,"column":72,"offset":8185},"indent":[]}}],"position":{"start":{"line":70,"column":50,"offset":8163},"end":{"line":70,"column":113,"offset":8226},"indent":[]}},{"type":"text","value":" with which we can perform vector operations like addition, multiplication, dot-product and cross-product. This is useful when we want to simulate physics like forces.","position":{"start":{"line":70,"column":113,"offset":8226},"end":{"line":70,"column":280,"offset":8393},"indent":[]}}],"position":{"start":{"line":70,"column":3,"offset":8116},"end":{"line":70,"column":280,"offset":8393},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":8114},"end":{"line":71,"column":1,"offset":8394},"indent":[1]}},{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"floor(random(50)) — Here we’re using p5 math functions. floor() takes a real number and rounds it down to the nearest integer. random(arg) produces a random number as small as 0 or up to 49. In this example, we are giving it to the ellipse(x, y, w)function to create randomly sized balls by setting the width to a random number. If we gave another argument it would set the ellipse’s height, but here it infers that we want a circle.","position":{"start":{"line":72,"column":3,"offset":8397},"end":{"line":72,"column":436,"offset":8830},"indent":[]}}],"position":{"start":{"line":72,"column":3,"offset":8397},"end":{"line":72,"column":436,"offset":8830},"indent":[]}}],"position":{"start":{"line":72,"column":1,"offset":8395},"end":{"line":73,"column":1,"offset":8831},"indent":[1]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"stroke(0) — This function sets the colour of our shape’s outline. If you don’t want any border you can add noStroke() .","position":{"start":{"line":74,"column":3,"offset":8834},"end":{"line":74,"column":122,"offset":8953},"indent":[]}}],"position":{"start":{"line":74,"column":3,"offset":8834},"end":{"line":74,"column":122,"offset":8953},"indent":[]}}],"position":{"start":{"line":74,"column":1,"offset":8832},"end":{"line":74,"column":122,"offset":8953},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":7967},"end":{"line":74,"column":122,"offset":8953},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"All you need now is to add some physics to these ideas and you have yourself a bouncing ball animation.","position":{"start":{"line":76,"column":1,"offset":8955},"end":{"line":76,"column":104,"offset":9058},"indent":[]}}],"position":{"start":{"line":76,"column":1,"offset":8955},"end":{"line":76,"column":104,"offset":9058},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Step 3: Experiment with p5","position":{"start":{"line":78,"column":5,"offset":9064},"end":{"line":78,"column":31,"offset":9090},"indent":[]}}],"position":{"start":{"line":78,"column":1,"offset":9060},"end":{"line":78,"column":31,"offset":9090},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Hopefully now you have a good understanding of the p5 fundamentals, but we’ve barely scratched the surface. This last example will use two extra features of p5: interactivity and ","position":{"start":{"line":80,"column":1,"offset":9092},"end":{"line":80,"column":180,"offset":9271},"indent":[]}},{"type":"link","title":null,"url":"http://flafla2.github.io/2014/08/09/perlinnoise.html","children":[{"type":"text","value":"Perlin Noise","position":{"start":{"line":80,"column":181,"offset":9272},"end":{"line":80,"column":193,"offset":9284},"indent":[]}}],"position":{"start":{"line":80,"column":180,"offset":9271},"end":{"line":80,"column":248,"offset":9339},"indent":[]}},{"type":"text","value":". Keep reading to find out more on these two concepts.","position":{"start":{"line":80,"column":248,"offset":9339},"end":{"line":80,"column":302,"offset":9393},"indent":[]}}],"position":{"start":{"line":80,"column":1,"offset":9092},"end":{"line":80,"column":302,"offset":9393},"indent":[]}},{"type":"html","value":"<iframe height='400' scrolling='no' title='Pixel Fire' src='//codepen.io/patricoferris/embed/XZMxmV/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/XZMxmV/'>Pixel Fire</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":82,"column":1,"offset":9395},"end":{"line":83,"column":10,"offset":9861},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"In this CodePen I have created a relatively simple flame model using squares and Perlin Noise. First of all, how do we get user input? Lucky for us p5 has some functions that can help.","position":{"start":{"line":85,"column":1,"offset":9863},"end":{"line":85,"column":185,"offset":10047},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":9863},"end":{"line":85,"column":185,"offset":10047},"indent":[]}},{"type":"html","value":"<high-light className='JavaScript'>\nvar touch = false;\nfunction setup(){\n  createCanvas(640, 640);\n}\nfunction draw(){\n  if(touch){\n    fill(255, 0, 0);\n    rect(mouseX, mouseY, 20, 20);\n  }\n}\nfunction touchStarted(){\n  touch = true;\n}\nfunction touchEnded(){\n  touch = false;\n}\n</high-light>","position":{"start":{"line":87,"column":1,"offset":10049},"end":{"line":104,"column":14,"offset":10339},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"At the top of the code we have declared a boolean “flag” as to whether or not our mouse is being pressed — this allows us to do things if the mouse is being held down. The touchStarted() and touchEnded() are p5 functions that are executed whenever the mouse is pressed or released or the screen is touched and released. Lastly, in our rect() function we have the variables mouseX and mouseY which are p5 variables corresponding to the mouse’s current position. Oddly, these also refer to your ","position":{"start":{"line":106,"column":1,"offset":10341},"end":{"line":106,"column":494,"offset":10834},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/processing/p5.js/issues/1705","children":[{"type":"text","value":"“touch” coordinates","position":{"start":{"line":106,"column":495,"offset":10835},"end":{"line":106,"column":514,"offset":10854},"indent":[]}}],"position":{"start":{"line":106,"column":494,"offset":10834},"end":{"line":106,"column":564,"offset":10904},"indent":[]}},{"type":"text","value":". With all these variables and functions predefined for us we can focus on making visually stunning graphics, whilst not being hampered by having to code extra functions unrelated to the graphic we’re producing.","position":{"start":{"line":106,"column":564,"offset":10904},"end":{"line":106,"column":775,"offset":11115},"indent":[]}}],"position":{"start":{"line":106,"column":1,"offset":10341},"end":{"line":106,"column":775,"offset":11115},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now for the Perlin Noise. In 1983, tired with the artificial look of computer graphics, Ken Perlin developed a type of *gradient noise. *The basic idea being you create a big grid of gradients randomly and then use the dot product to interpolate between them. In short, we get random values based on the coordinate system we’re drawing on. Great! For each of our squares we can start them at a random position near our mouse, and generate a random upward vector using their position and Perlin Noise. Let’s look at the code:","position":{"start":{"line":108,"column":1,"offset":11117},"end":{"line":108,"column":525,"offset":11641},"indent":[]}}],"position":{"start":{"line":108,"column":1,"offset":11117},"end":{"line":108,"column":525,"offset":11641},"indent":[]}},{"type":"html","value":"<high-light className='JavaScript'>\nfunction Particle(x, y, color){\n  this.pos = createVector(x + random(-10, 10), y + random(-10, 10));\n  this.vel = createVector(floor(random(-1, 1))*noise(this.pos.x), -noise(this.pos.y)*7);\n  this.alpha = 255;\n  this.r = random(170, 255);\n  this.g = random(10, 255);\n  this.b = random(0, 100);\n  this.update = function(){\n    this.pos.add(this.vel);\n    this.alpha -= 5;\n  }\n  this.show = function(){\n    noStroke();\n    fill(this.r, this.g, this.b, this.alpha);\n    rect(this.pos.x, this.pos.y, 5, 5);\n  }\n  this.dead = function(){\n    if(this.alpha < 0){\n      return true;\n    }else{\n      return false;\n    }\n  }\n}\n</high-light>","position":{"start":{"line":110,"column":1,"offset":11643},"end":{"line":135,"column":14,"offset":12311},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Some key things to notice:","position":{"start":{"line":137,"column":1,"offset":12313},"end":{"line":137,"column":27,"offset":12339},"indent":[]}}],"position":{"start":{"line":137,"column":1,"offset":12313},"end":{"line":137,"column":27,"offset":12339},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":true,"children":[{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"noise(this.pos.x) — The Perlin Noise ","position":{"start":{"line":139,"column":3,"offset":12343},"end":{"line":139,"column":40,"offset":12380},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/reference/#/p5/noise","children":[{"type":"text","value":"function","position":{"start":{"line":139,"column":41,"offset":12381},"end":{"line":139,"column":49,"offset":12389},"indent":[]}}],"position":{"start":{"line":139,"column":40,"offset":12380},"end":{"line":139,"column":89,"offset":12429},"indent":[]}},{"type":"text","value":" that gets a random number based on the square’s current x position. It returns a value between 0 and 1.","position":{"start":{"line":139,"column":89,"offset":12429},"end":{"line":139,"column":193,"offset":12533},"indent":[]}}],"position":{"start":{"line":139,"column":3,"offset":12343},"end":{"line":139,"column":193,"offset":12533},"indent":[]}}],"position":{"start":{"line":139,"column":1,"offset":12341},"end":{"line":140,"column":1,"offset":12534},"indent":[1]}},{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"fill(this.r, this.g, this.b, this.alpha) — Here we have extended fill’s ability by including an alpha value for the objects transparency, by decreasing alpha in the update() function we get a nice fade out like a flame.","position":{"start":{"line":141,"column":3,"offset":12537},"end":{"line":141,"column":222,"offset":12756},"indent":[]}}],"position":{"start":{"line":141,"column":3,"offset":12537},"end":{"line":141,"column":222,"offset":12756},"indent":[]}}],"position":{"start":{"line":141,"column":1,"offset":12535},"end":{"line":142,"column":1,"offset":12757},"indent":[1]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"dead() — This function allows us to keep track of which particles have disappeared as their alpha is now less than zero. We can then splice() them out of our array to ensure we’re not drawing an unbounded number of particles over time which would cause performance issues.","position":{"start":{"line":143,"column":3,"offset":12760},"end":{"line":143,"column":275,"offset":13032},"indent":[]}}],"position":{"start":{"line":143,"column":3,"offset":12760},"end":{"line":143,"column":275,"offset":13032},"indent":[]}}],"position":{"start":{"line":143,"column":1,"offset":12758},"end":{"line":143,"column":275,"offset":13032},"indent":[]}}],"position":{"start":{"line":139,"column":1,"offset":12341},"end":{"line":143,"column":275,"offset":13032},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"As a challenge, you can also use blendMode() to make it seem even more realistic — check this ","position":{"start":{"line":145,"column":1,"offset":13034},"end":{"line":145,"column":95,"offset":13128},"indent":[]}},{"type":"link","title":null,"url":"https://codepen.io/anon/pen/YeOaJX","children":[{"type":"text","value":"alteration","position":{"start":{"line":145,"column":96,"offset":13129},"end":{"line":145,"column":106,"offset":13139},"indent":[]}}],"position":{"start":{"line":145,"column":95,"offset":13128},"end":{"line":145,"column":143,"offset":13176},"indent":[]}},{"type":"text","value":" to see it in action.","position":{"start":{"line":145,"column":143,"offset":13176},"end":{"line":145,"column":164,"offset":13197},"indent":[]}}],"position":{"start":{"line":145,"column":1,"offset":13034},"end":{"line":145,"column":164,"offset":13197},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"With only a few concepts and the p5 library, it is incredibly straightforward to start building anything you want. Be sure to checkout what else is possible with the library. Here are few cool ideas to get you started: ","position":{"start":{"line":147,"column":1,"offset":13199},"end":{"line":147,"column":220,"offset":13418},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/examples/3d-geometries.html","children":[{"type":"text","value":"3D graphics","position":{"start":{"line":147,"column":221,"offset":13419},"end":{"line":147,"column":232,"offset":13430},"indent":[]}}],"position":{"start":{"line":147,"column":220,"offset":13418},"end":{"line":147,"column":279,"offset":13477},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":147,"column":279,"offset":13477},"end":{"line":147,"column":281,"offset":13479},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/examples/dom-slider.html","children":[{"type":"text","value":"sliders","position":{"start":{"line":147,"column":282,"offset":13480},"end":{"line":147,"column":289,"offset":13487},"indent":[]}}],"position":{"start":{"line":147,"column":281,"offset":13479},"end":{"line":147,"column":333,"offset":13531},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":147,"column":333,"offset":13531},"end":{"line":147,"column":338,"offset":13536},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/examples/image-load-and-display-image.html","children":[{"type":"text","value":"images","position":{"start":{"line":147,"column":339,"offset":13537},"end":{"line":147,"column":345,"offset":13543},"indent":[]}}],"position":{"start":{"line":147,"column":338,"offset":13536},"end":{"line":147,"column":407,"offset":13605},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":147,"column":407,"offset":13605},"end":{"line":147,"column":408,"offset":13606},"indent":[]}}],"position":{"start":{"line":147,"column":1,"offset":13199},"end":{"line":147,"column":408,"offset":13606},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":149,"column":5,"offset":13612},"end":{"line":149,"column":15,"offset":13622},"indent":[]}}],"position":{"start":{"line":149,"column":1,"offset":13608},"end":{"line":149,"column":15,"offset":13622},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As computers and technology become ubiquitous in our daily lives and an increasing number of professions are now relying on computer literacy, p5.js is a beautiful example of how we can ensure as many people as possible have an entry-point to the wonderful world of computer programming. It also acts as a reminder to some more experienced programmers that creativity and imagination are vital in producing meaningful code and ultimately making the tech world a better place.","position":{"start":{"line":151,"column":1,"offset":13624},"end":{"line":151,"column":476,"offset":14099},"indent":[]}}],"position":{"start":{"line":151,"column":1,"offset":13624},"end":{"line":151,"column":476,"offset":14099},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Hopefully this intro to p5 has convinced you of its usefulness and has encouraged you to start taking your first steps into the world of graphics programming. Here are my recommendations for where to go next:","position":{"start":{"line":153,"column":1,"offset":14101},"end":{"line":153,"column":209,"offset":14309},"indent":[]}}],"position":{"start":{"line":153,"column":1,"offset":14101},"end":{"line":153,"column":209,"offset":14309},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":true,"children":[{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.youtube.com/user/shiffman","children":[{"type":"text","value":"The Coding Train","position":{"start":{"line":155,"column":4,"offset":14314},"end":{"line":155,"column":20,"offset":14330},"indent":[]}}],"position":{"start":{"line":155,"column":3,"offset":14313},"end":{"line":155,"column":60,"offset":14370},"indent":[]}},{"type":"text","value":" — A brilliant YouTube channel by Daniel Shiffman where he teaches JavaScript and p5.js amongst many other incredible things!","position":{"start":{"line":155,"column":60,"offset":14370},"end":{"line":155,"column":185,"offset":14495},"indent":[]}}],"position":{"start":{"line":155,"column":3,"offset":14313},"end":{"line":155,"column":185,"offset":14495},"indent":[]}}],"position":{"start":{"line":155,"column":1,"offset":14311},"end":{"line":156,"column":1,"offset":14496},"indent":[1]}},{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://p5js.org/examples/","children":[{"type":"text","value":"p5js.org ","position":{"start":{"line":157,"column":4,"offset":14500},"end":{"line":157,"column":13,"offset":14509},"indent":[]}}],"position":{"start":{"line":157,"column":3,"offset":14499},"end":{"line":157,"column":42,"offset":14538},"indent":[]}},{"type":"text","value":"— The examples page on this website is full of inspiring projects which you could recreate and extend further.","position":{"start":{"line":157,"column":42,"offset":14538},"end":{"line":157,"column":152,"offset":14648},"indent":[]}}],"position":{"start":{"line":157,"column":3,"offset":14499},"end":{"line":157,"column":152,"offset":14648},"indent":[]}}],"position":{"start":{"line":157,"column":1,"offset":14497},"end":{"line":158,"column":1,"offset":14649},"indent":[1]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.scratchapixel.com/index.php","children":[{"type":"text","value":"Sratchapixel","position":{"start":{"line":159,"column":4,"offset":14653},"end":{"line":159,"column":16,"offset":14665},"indent":[]}}],"position":{"start":{"line":159,"column":3,"offset":14652},"end":{"line":159,"column":58,"offset":14707},"indent":[]}},{"type":"text","value":" — If you feel ready to delve into the deeper concepts and implementations of computer graphics then this website is an incredible resource for you to use.","position":{"start":{"line":159,"column":58,"offset":14707},"end":{"line":159,"column":213,"offset":14862},"indent":[]}}],"position":{"start":{"line":159,"column":3,"offset":14652},"end":{"line":159,"column":213,"offset":14862},"indent":[]}}],"position":{"start":{"line":159,"column":1,"offset":14650},"end":{"line":159,"column":213,"offset":14862},"indent":[]}}],"position":{"start":{"line":155,"column":1,"offset":14311},"end":{"line":159,"column":213,"offset":14862},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"A special thanks to ","position":{"start":{"line":161,"column":1,"offset":14864},"end":{"line":161,"column":21,"offset":14884},"indent":[]}},{"type":"link","title":null,"url":"undefined","children":[{"type":"text","value":"Tom Read Cutting","position":{"start":{"line":161,"column":22,"offset":14885},"end":{"line":161,"column":38,"offset":14901},"indent":[]}}],"position":{"start":{"line":161,"column":21,"offset":14884},"end":{"line":161,"column":50,"offset":14913},"indent":[]}},{"type":"text","value":" for editing this article and ","position":{"start":{"line":161,"column":50,"offset":14913},"end":{"line":161,"column":80,"offset":14943},"indent":[]}},{"type":"link","title":null,"url":"undefined","children":[{"type":"text","value":"Christian Silver","position":{"start":{"line":161,"column":81,"offset":14944},"end":{"line":161,"column":97,"offset":14960},"indent":[]}}],"position":{"start":{"line":161,"column":80,"offset":14943},"end":{"line":161,"column":109,"offset":14972},"indent":[]}},{"type":"text","value":" for helping get it off the ground.","position":{"start":{"line":161,"column":109,"offset":14972},"end":{"line":161,"column":144,"offset":15007},"indent":[]}}],"position":{"start":{"line":161,"column":1,"offset":14864},"end":{"line":161,"column":144,"offset":15007},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":162,"column":1,"offset":15008}}}},{"id":"transformer-remark-markdown-html-ast-459e6ec5230ae1bc11ba08acae14c583-gatsby-remark-imagesgatsby-remark-prismjs-","value":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/patricoferris/image/upload/v1532857964/pf2018/blogposts/27-02-2018/tree.png","alt":"Recursive Tree"},"children":[],"position":{"start":{"line":8,"column":1,"offset":154},"end":{"line":8,"column":122,"offset":275}}}],"position":{"start":{"line":8,"column":1,"offset":154},"end":{"line":8,"column":122,"offset":275}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Graphics and computer programming are two dearly intertwined disciplines. The oscilloscope is often recognised as one of the first examples of “computer graphics”, the cathode-ray versions emitting a beam of electrons onto a phosphorescent screen. By using magnetic fields to change the beam’s direction, we can sweep from left to right and move up and down — the basic idea behind most CG! (I highly recommend watching this ","position":{"start":{"line":10,"column":1,"offset":277},"end":{"line":10,"column":426,"offset":702}}},{"type":"element","tagName":"a","properties":{"href":"https://archive.org/details/introductiontothecathoderayoscilloscope"},"children":[{"type":"text","value":"video","position":{"start":{"line":10,"column":427,"offset":703},"end":{"line":10,"column":432,"offset":708}}}],"position":{"start":{"line":10,"column":426,"offset":702},"end":{"line":10,"column":502,"offset":778}}},{"type":"text","value":" from 1970).","position":{"start":{"line":10,"column":502,"offset":778},"end":{"line":10,"column":514,"offset":790}}}],"position":{"start":{"line":10,"column":1,"offset":277},"end":{"line":10,"column":514,"offset":790}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We’ve come a long way since then — modern day graphics is a complicated science as well as an art, and the barrier to entry is constantly increasing. Graphics programming can be so complex, that a simple program to draw a triangle can be over ","position":{"start":{"line":12,"column":1,"offset":792},"end":{"line":12,"column":244,"offset":1035}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/SaschaWillems/Vulkan/blob/master/examples/triangle/triangle.cpp"},"children":[{"type":"text","value":"1000 lines of code","position":{"start":{"line":12,"column":245,"offset":1036},"end":{"line":12,"column":263,"offset":1054}}}],"position":{"start":{"line":12,"column":244,"offset":1035},"end":{"line":12,"column":348,"offset":1139}}},{"type":"text","value":"! However, this article will introduce you to ","position":{"start":{"line":12,"column":348,"offset":1139},"end":{"line":12,"column":394,"offset":1185}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/"},"children":[{"type":"text","value":"p5.js","position":{"start":{"line":12,"column":395,"offset":1186},"end":{"line":12,"column":400,"offset":1191}}}],"position":{"start":{"line":12,"column":394,"offset":1185},"end":{"line":12,"column":420,"offset":1211}}},{"type":"text","value":" (also known as p5). A simpler, less complex solution for people who want to start making computer graphics, but don’t want the headache of streams of boiler-plate code.","position":{"start":{"line":12,"column":420,"offset":1211},"end":{"line":12,"column":589,"offset":1380}}}],"position":{"start":{"line":12,"column":1,"offset":792},"end":{"line":12,"column":589,"offset":1380}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Straight from the landing page of the p5.js website.","position":{"start":{"line":14,"column":1,"offset":1382},"end":{"line":14,"column":53,"offset":1434}}}],"position":{"start":{"line":14,"column":1,"offset":1382},"end":{"line":14,"column":53,"offset":1434}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"…make coding accessible for artists, designers, educators and beginners…","position":{"start":{"line":15,"column":5,"offset":1439},"end":{"line":15,"column":77,"offset":1511}}}],"position":{"start":{"line":15,"column":3,"offset":1437},"end":{"line":15,"column":77,"offset":1511}}},{"type":"text","value":"\n"}],"position":{"start":{"line":15,"column":1,"offset":1435},"end":{"line":15,"column":77,"offset":1511}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"p5.js is the result of hard-work of the ","position":{"start":{"line":17,"column":1,"offset":1513},"end":{"line":17,"column":41,"offset":1553}}},{"type":"element","tagName":"a","properties":{"href":"https://processingfoundation.org/"},"children":[{"type":"text","value":"Processing Foundation","position":{"start":{"line":17,"column":42,"offset":1554},"end":{"line":17,"column":63,"offset":1575}}}],"position":{"start":{"line":17,"column":41,"offset":1553},"end":{"line":17,"column":99,"offset":1611}}},{"type":"text","value":", a group focused on spreading computer and visual literacy. It distills their ","position":{"start":{"line":17,"column":99,"offset":1611},"end":{"line":17,"column":178,"offset":1690}}},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/Processing_(programming_language)"},"children":[{"type":"text","value":"Processing","position":{"start":{"line":17,"column":179,"offset":1691},"end":{"line":17,"column":189,"offset":1701}}}],"position":{"start":{"line":17,"column":178,"offset":1690},"end":{"line":17,"column":255,"offset":1767}}},{"type":"text","value":" language into a JavaScript library that makes creating graphics easy and accessible whilst providing an ideal platform to springboard people’s careers in computer graphics. It should be mentioned now that a lot of inspiration has been taken from ","position":{"start":{"line":17,"column":255,"offset":1767},"end":{"line":17,"column":502,"offset":2014}}},{"type":"element","tagName":"a","properties":{"href":"http://shiffman.net/"},"children":[{"type":"text","value":"Daniel Shiffman’s","position":{"start":{"line":17,"column":503,"offset":2015},"end":{"line":17,"column":520,"offset":2032}}}],"position":{"start":{"line":17,"column":502,"offset":2014},"end":{"line":17,"column":543,"offset":2055}}},{"type":"text","value":" p5 projects (from the ","position":{"start":{"line":17,"column":543,"offset":2055},"end":{"line":17,"column":566,"offset":2078}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/CodingTrain/website/tree/master/CodingChallenges/CC_03_Snake_game_p5.js"},"children":[{"type":"text","value":"classic snake game","position":{"start":{"line":17,"column":567,"offset":2079},"end":{"line":17,"column":585,"offset":2097}}}],"position":{"start":{"line":17,"column":566,"offset":2078},"end":{"line":17,"column":678,"offset":2190}}},{"type":"text","value":", to a ","position":{"start":{"line":17,"column":678,"offset":2190},"end":{"line":17,"column":685,"offset":2197}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/CodingTrain/website/tree/master/CodingChallenges/CC_93_DoublePendulum_p5.js"},"children":[{"type":"text","value":"double pendulum","position":{"start":{"line":17,"column":686,"offset":2198},"end":{"line":17,"column":701,"offset":2213}}}],"position":{"start":{"line":17,"column":685,"offset":2197},"end":{"line":17,"column":798,"offset":2310}}},{"type":"text","value":"). I can’t urge you enough to follow these projects to really improve your understanding of coding concepts and the p5 library.","position":{"start":{"line":17,"column":798,"offset":2310},"end":{"line":17,"column":925,"offset":2437}}}],"position":{"start":{"line":17,"column":1,"offset":1513},"end":{"line":17,"column":925,"offset":2437}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Some prerequisites:","position":{"start":{"line":19,"column":5,"offset":2443},"end":{"line":19,"column":24,"offset":2462}}}],"position":{"start":{"line":19,"column":1,"offset":2439},"end":{"line":19,"column":24,"offset":2462}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Before jumping into the p5 code I first want to make clear that there is assumed knowledge of HTML5 and JavaScript including arrays, functions, variables etc. in the rest of this article. If you have a good grasp of JavaScript then skip to the p5 code below, otherwise here are few resources to get you up to scratch.","position":{"start":{"line":21,"column":1,"offset":2464},"end":{"line":21,"column":318,"offset":2781}}}],"position":{"start":{"line":21,"column":1,"offset":2464},"end":{"line":21,"column":318,"offset":2781}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.youtube.com/watch?v=spIVWmv1jnw"},"children":[{"type":"text","value":"HaC Intro to Programming","position":{"start":{"line":23,"column":4,"offset":2786},"end":{"line":23,"column":28,"offset":2810}}}],"position":{"start":{"line":23,"column":3,"offset":2785},"end":{"line":23,"column":74,"offset":2856}}},{"type":"text","value":" — A workshop that is being run by Hackers at Cambridge to help anyone start learning to program (which uses JavaScript).","position":{"start":{"line":23,"column":74,"offset":2856},"end":{"line":23,"column":195,"offset":2977}}}],"position":{"start":{"line":23,"column":3,"offset":2785},"end":{"line":23,"column":195,"offset":2977}}},{"type":"text","value":"\n"}],"position":{"start":{"line":23,"column":1,"offset":2783},"end":{"line":24,"column":1,"offset":2978}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.codecademy.com/learn/introduction-to-javascript"},"children":[{"type":"text","value":"Codecademy","position":{"start":{"line":25,"column":4,"offset":2982},"end":{"line":25,"column":14,"offset":2992}}}],"position":{"start":{"line":25,"column":3,"offset":2981},"end":{"line":25,"column":76,"offset":3054}}},{"type":"text","value":" — a great resource for learning how to code with instant feedback in your browser.","position":{"start":{"line":25,"column":76,"offset":3054},"end":{"line":25,"column":159,"offset":3137}}}],"position":{"start":{"line":25,"column":3,"offset":2981},"end":{"line":25,"column":159,"offset":3137}}},{"type":"text","value":"\n"}],"position":{"start":{"line":25,"column":1,"offset":2979},"end":{"line":26,"column":1,"offset":3138}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Web/JavaScript"},"children":[{"type":"text","value":"MDN","position":{"start":{"line":27,"column":4,"offset":3142},"end":{"line":27,"column":7,"offset":3145}}}],"position":{"start":{"line":27,"column":3,"offset":3141},"end":{"line":27,"column":65,"offset":3203}}},{"type":"text","value":" — a great resource for learning about all aspects of web development.","position":{"start":{"line":27,"column":65,"offset":3203},"end":{"line":27,"column":135,"offset":3273}}}],"position":{"start":{"line":27,"column":3,"offset":3141},"end":{"line":27,"column":135,"offset":3273}}},{"type":"text","value":"\n"}],"position":{"start":{"line":27,"column":1,"offset":3139},"end":{"line":28,"column":1,"offset":3274}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://codepen.io/"},"children":[{"type":"text","value":"Codepen","position":{"start":{"line":29,"column":4,"offset":3278},"end":{"line":29,"column":11,"offset":3285}}}],"position":{"start":{"line":29,"column":3,"offset":3277},"end":{"line":29,"column":33,"offset":3307}}},{"type":"text","value":" — a brilliant online text-editor for creating cool projects in HTML, CSS and JavaScript. Equally good for getting inspiration from a lot of talented users. Another possible solution would be ","position":{"start":{"line":29,"column":33,"offset":3307},"end":{"line":29,"column":225,"offset":3499}}},{"type":"element","tagName":"a","properties":{"href":"https://jsfiddle.net/"},"children":[{"type":"text","value":"JSFiddle","position":{"start":{"line":29,"column":226,"offset":3500},"end":{"line":29,"column":234,"offset":3508}}}],"position":{"start":{"line":29,"column":225,"offset":3499},"end":{"line":29,"column":258,"offset":3532}}},{"type":"text","value":".","position":{"start":{"line":29,"column":258,"offset":3532},"end":{"line":29,"column":259,"offset":3533}}}],"position":{"start":{"line":29,"column":3,"offset":3277},"end":{"line":29,"column":259,"offset":3533}}},{"type":"text","value":"\n"}],"position":{"start":{"line":29,"column":1,"offset":3275},"end":{"line":29,"column":259,"offset":3533}}},{"type":"text","value":"\n"}],"position":{"start":{"line":23,"column":1,"offset":2783},"end":{"line":29,"column":259,"offset":3533}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"What follows is a series of steps that will introduce you to p5 concepts. With code examples and explanations I hope to give you enough information to understand the ideas, but to fully grasp the concepts you will have to dive into the code, experiment with it, break it and learn from it. So without further ado, let’s get coding.","position":{"start":{"line":31,"column":1,"offset":3535},"end":{"line":31,"column":332,"offset":3866}}}],"position":{"start":{"line":31,"column":1,"offset":3535},"end":{"line":31,"column":332,"offset":3866}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Step 1: The Setup","position":{"start":{"line":33,"column":5,"offset":3872},"end":{"line":33,"column":22,"offset":3889}}}],"position":{"start":{"line":33,"column":1,"offset":3868},"end":{"line":33,"column":22,"offset":3889}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//Initialisation of canvas, objects, variables etc.</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//The drawing loop - updates at a constant rate declared in setup</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":35,"column":1,"offset":3891},"end":{"line":42,"column":4,"offset":4069}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"p5 is really simple to setup once you know what to do. There are two files shown above — an index.html and a template.js. The index.html file gets the libraries for us and the template.js is the barebones structure of a p5 project and at the moment it does nothing! Within this we have two functions:","position":{"start":{"line":44,"column":1,"offset":4071},"end":{"line":44,"column":301,"offset":4371}}}],"position":{"start":{"line":44,"column":1,"offset":4071},"end":{"line":44,"column":301,"offset":4371}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"setup() — a function for creating what we will need for our graphic or project. Like creating a canvas, initialising some objects or arrays etc.","position":{"start":{"line":46,"column":3,"offset":4375},"end":{"line":46,"column":147,"offset":4519}}}],"position":{"start":{"line":46,"column":3,"offset":4375},"end":{"line":46,"column":147,"offset":4519}}},{"type":"text","value":"\n"}],"position":{"start":{"line":46,"column":1,"offset":4373},"end":{"line":47,"column":1,"offset":4520}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"draw() — a function which will be called periodically like a loop. This is where will call draw functions and update functions to make graphics and animations.","position":{"start":{"line":48,"column":3,"offset":4523},"end":{"line":48,"column":162,"offset":4682}}}],"position":{"start":{"line":48,"column":3,"offset":4523},"end":{"line":48,"column":162,"offset":4682}}},{"type":"text","value":"\n"}],"position":{"start":{"line":48,"column":1,"offset":4521},"end":{"line":48,"column":162,"offset":4682}}},{"type":"text","value":"\n"}],"position":{"start":{"line":46,"column":1,"offset":4373},"end":{"line":48,"column":162,"offset":4682}}},{"type":"text","value":"\n"},{"type":"raw","value":"<iframe height='400' scrolling='no' title='Simple Triangle Tutorial' src='//codepen.io/patricoferris/embed/dddxjr/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/dddxjr/'>Simple Triangle Tutorial</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":50,"column":1,"offset":4684},"end":{"line":51,"column":10,"offset":5178}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let’s first look at the setup function. We used the p5 function createCanvas(width, height) which created and initialised a ","position":{"start":{"line":53,"column":1,"offset":5180},"end":{"line":53,"column":125,"offset":5304}}},{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API"},"children":[{"type":"text","value":"canvas","position":{"start":{"line":53,"column":126,"offset":5305},"end":{"line":53,"column":132,"offset":5311}}}],"position":{"start":{"line":53,"column":125,"offset":5304},"end":{"line":53,"column":194,"offset":5373}}},{"type":"text","value":" with arguments width and height. Now within our setup() and createCanvas() functions we can reference the variables width and height without ever instantiating them!","position":{"start":{"line":53,"column":194,"offset":5373},"end":{"line":53,"column":360,"offset":5539}}}],"position":{"start":{"line":53,"column":1,"offset":5180},"end":{"line":53,"column":360,"offset":5539}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Next comes the meaty, draw function. I have purposefully put extra code in here so we can learn more about what p5 has to offer. Firstly always remember that draw() is a loop that runs from top to bottom. Initially, we set the background (of our canvas) to white with background(255) which is the same as background(255, 255, 255) (maximising the red, green and blue values to give white). This may seem simple, but implicitly we are also clearing our canvas every loop… in one line of code! This will be useful for animations later as we want to redraw objects in a new location rather than have the ","position":{"start":{"line":55,"column":1,"offset":5541},"end":{"line":55,"column":602,"offset":6142}}},{"type":"element","tagName":"a","properties":{"href":"https://codepen.io/patricoferris/pen/paxZaw"},"children":[{"type":"text","value":"build-up on the same canvas","position":{"start":{"line":55,"column":603,"offset":6143},"end":{"line":55,"column":630,"offset":6170}}}],"position":{"start":{"line":55,"column":602,"offset":6142},"end":{"line":55,"column":676,"offset":6216}}},{"type":"text","value":" (click to see it go spectacularly wrong). Next is a translate(width/2, height/2) which moves our current drawing location to the centre of our canvas. We then declare the fill colour of our triangle with fill(255, 0, 0)(making it red).","position":{"start":{"line":55,"column":676,"offset":6216},"end":{"line":55,"column":912,"offset":6452}}}],"position":{"start":{"line":55,"column":1,"offset":5541},"end":{"line":55,"column":912,"offset":6452}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We want to create an equilateral triangle with side length s. The triangle itself is a function that takes the vertex coordinates as arguments — triangle(x1, y1, x2, y2, x3, y3) and in this example starting from the centre we have one vertex at (-s/2, 0) another at (s/2, 0) giving a bottom length of s . Now comes the trickier part. A very important aspect of most computer graphics is that the coordinate system starts in the top left corner (or wherever your origin is) and x increases left to right, whilst y increases top to bottom. To move of the screen we need a negative y value. Our last coordinate is given as (0, -sin(PI/3)) (if you’re stuck, think about cutting the triangle in two and using trigonometry).","position":{"start":{"line":57,"column":1,"offset":6454},"end":{"line":57,"column":719,"offset":7172}}}],"position":{"start":{"line":57,"column":1,"offset":6454},"end":{"line":57,"column":719,"offset":7172}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Step 2: Get Creative","position":{"start":{"line":59,"column":5,"offset":7178},"end":{"line":59,"column":25,"offset":7198}}}],"position":{"start":{"line":59,"column":1,"offset":7174},"end":{"line":59,"column":25,"offset":7198}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We’ve learnt how to set up our canvas and start drawing. Armed with the p5 ","position":{"start":{"line":61,"column":1,"offset":7200},"end":{"line":61,"column":76,"offset":7275}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/reference/"},"children":[{"type":"text","value":"reference page","position":{"start":{"line":61,"column":77,"offset":7276},"end":{"line":61,"column":91,"offset":7290}}}],"position":{"start":{"line":61,"column":76,"offset":7275},"end":{"line":61,"column":121,"offset":7320}}},{"type":"text","value":" and our creativity, we can make some truly stunning graphics. How about a bouncing ball animation?","position":{"start":{"line":61,"column":121,"offset":7320},"end":{"line":61,"column":220,"offset":7419}}}],"position":{"start":{"line":61,"column":1,"offset":7200},"end":{"line":61,"column":220,"offset":7419}}},{"type":"text","value":"\n"},{"type":"raw","value":"<iframe height='400' scrolling='no' title='Bouncing Balls' src='//codepen.io/patricoferris/embed/PQpOrB/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/PQpOrB/'>Bouncing Balls</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":63,"column":1,"offset":7421},"end":{"line":64,"column":10,"offset":7895}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let’s look at the interesting p5 aspects that we didn’t know before:","position":{"start":{"line":66,"column":1,"offset":7897},"end":{"line":66,"column":69,"offset":7965}}}],"position":{"start":{"line":66,"column":1,"offset":7897},"end":{"line":66,"column":69,"offset":7965}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"frameRate(20) — This enables us to specify the frame rate of our drawing loop, that is, how many times per second it redraws everything for us.","position":{"start":{"line":68,"column":3,"offset":7969},"end":{"line":68,"column":146,"offset":8112}}}],"position":{"start":{"line":68,"column":3,"offset":7969},"end":{"line":68,"column":146,"offset":8112}}},{"type":"text","value":"\n"}],"position":{"start":{"line":68,"column":1,"offset":7967},"end":{"line":69,"column":1,"offset":8113}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"gravity = createVector(0, 9) — p5 allows us to ","position":{"start":{"line":70,"column":3,"offset":8116},"end":{"line":70,"column":50,"offset":8163}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/reference/#/p5.Vector"},"children":[{"type":"text","value":"create vector objects","position":{"start":{"line":70,"column":51,"offset":8164},"end":{"line":70,"column":72,"offset":8185}}}],"position":{"start":{"line":70,"column":50,"offset":8163},"end":{"line":70,"column":113,"offset":8226}}},{"type":"text","value":" with which we can perform vector operations like addition, multiplication, dot-product and cross-product. This is useful when we want to simulate physics like forces.","position":{"start":{"line":70,"column":113,"offset":8226},"end":{"line":70,"column":280,"offset":8393}}}],"position":{"start":{"line":70,"column":3,"offset":8116},"end":{"line":70,"column":280,"offset":8393}}},{"type":"text","value":"\n"}],"position":{"start":{"line":70,"column":1,"offset":8114},"end":{"line":71,"column":1,"offset":8394}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"floor(random(50)) — Here we’re using p5 math functions. floor() takes a real number and rounds it down to the nearest integer. random(arg) produces a random number as small as 0 or up to 49. In this example, we are giving it to the ellipse(x, y, w)function to create randomly sized balls by setting the width to a random number. If we gave another argument it would set the ellipse’s height, but here it infers that we want a circle.","position":{"start":{"line":72,"column":3,"offset":8397},"end":{"line":72,"column":436,"offset":8830}}}],"position":{"start":{"line":72,"column":3,"offset":8397},"end":{"line":72,"column":436,"offset":8830}}},{"type":"text","value":"\n"}],"position":{"start":{"line":72,"column":1,"offset":8395},"end":{"line":73,"column":1,"offset":8831}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"stroke(0) — This function sets the colour of our shape’s outline. If you don’t want any border you can add noStroke() .","position":{"start":{"line":74,"column":3,"offset":8834},"end":{"line":74,"column":122,"offset":8953}}}],"position":{"start":{"line":74,"column":3,"offset":8834},"end":{"line":74,"column":122,"offset":8953}}},{"type":"text","value":"\n"}],"position":{"start":{"line":74,"column":1,"offset":8832},"end":{"line":74,"column":122,"offset":8953}}},{"type":"text","value":"\n"}],"position":{"start":{"line":68,"column":1,"offset":7967},"end":{"line":74,"column":122,"offset":8953}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"All you need now is to add some physics to these ideas and you have yourself a bouncing ball animation.","position":{"start":{"line":76,"column":1,"offset":8955},"end":{"line":76,"column":104,"offset":9058}}}],"position":{"start":{"line":76,"column":1,"offset":8955},"end":{"line":76,"column":104,"offset":9058}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Step 3: Experiment with p5","position":{"start":{"line":78,"column":5,"offset":9064},"end":{"line":78,"column":31,"offset":9090}}}],"position":{"start":{"line":78,"column":1,"offset":9060},"end":{"line":78,"column":31,"offset":9090}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Hopefully now you have a good understanding of the p5 fundamentals, but we’ve barely scratched the surface. This last example will use two extra features of p5: interactivity and ","position":{"start":{"line":80,"column":1,"offset":9092},"end":{"line":80,"column":180,"offset":9271}}},{"type":"element","tagName":"a","properties":{"href":"http://flafla2.github.io/2014/08/09/perlinnoise.html"},"children":[{"type":"text","value":"Perlin Noise","position":{"start":{"line":80,"column":181,"offset":9272},"end":{"line":80,"column":193,"offset":9284}}}],"position":{"start":{"line":80,"column":180,"offset":9271},"end":{"line":80,"column":248,"offset":9339}}},{"type":"text","value":". Keep reading to find out more on these two concepts.","position":{"start":{"line":80,"column":248,"offset":9339},"end":{"line":80,"column":302,"offset":9393}}}],"position":{"start":{"line":80,"column":1,"offset":9092},"end":{"line":80,"column":302,"offset":9393}}},{"type":"text","value":"\n"},{"type":"raw","value":"<iframe height='400' scrolling='no' title='Pixel Fire' src='//codepen.io/patricoferris/embed/XZMxmV/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/XZMxmV/'>Pixel Fire</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":82,"column":1,"offset":9395},"end":{"line":83,"column":10,"offset":9861}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In this CodePen I have created a relatively simple flame model using squares and Perlin Noise. First of all, how do we get user input? Lucky for us p5 has some functions that can help.","position":{"start":{"line":85,"column":1,"offset":9863},"end":{"line":85,"column":185,"offset":10047}}}],"position":{"start":{"line":85,"column":1,"offset":9863},"end":{"line":85,"column":185,"offset":10047}}},{"type":"text","value":"\n"},{"type":"raw","value":"<high-light className='JavaScript'>\nvar touch = false;\nfunction setup(){\n  createCanvas(640, 640);\n}\nfunction draw(){\n  if(touch){\n    fill(255, 0, 0);\n    rect(mouseX, mouseY, 20, 20);\n  }\n}\nfunction touchStarted(){\n  touch = true;\n}\nfunction touchEnded(){\n  touch = false;\n}\n</high-light>","position":{"start":{"line":87,"column":1,"offset":10049},"end":{"line":104,"column":14,"offset":10339}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"At the top of the code we have declared a boolean “flag” as to whether or not our mouse is being pressed — this allows us to do things if the mouse is being held down. The touchStarted() and touchEnded() are p5 functions that are executed whenever the mouse is pressed or released or the screen is touched and released. Lastly, in our rect() function we have the variables mouseX and mouseY which are p5 variables corresponding to the mouse’s current position. Oddly, these also refer to your ","position":{"start":{"line":106,"column":1,"offset":10341},"end":{"line":106,"column":494,"offset":10834}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/processing/p5.js/issues/1705"},"children":[{"type":"text","value":"“touch” coordinates","position":{"start":{"line":106,"column":495,"offset":10835},"end":{"line":106,"column":514,"offset":10854}}}],"position":{"start":{"line":106,"column":494,"offset":10834},"end":{"line":106,"column":564,"offset":10904}}},{"type":"text","value":". With all these variables and functions predefined for us we can focus on making visually stunning graphics, whilst not being hampered by having to code extra functions unrelated to the graphic we’re producing.","position":{"start":{"line":106,"column":564,"offset":10904},"end":{"line":106,"column":775,"offset":11115}}}],"position":{"start":{"line":106,"column":1,"offset":10341},"end":{"line":106,"column":775,"offset":11115}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now for the Perlin Noise. In 1983, tired with the artificial look of computer graphics, Ken Perlin developed a type of *gradient noise. *The basic idea being you create a big grid of gradients randomly and then use the dot product to interpolate between them. In short, we get random values based on the coordinate system we’re drawing on. Great! For each of our squares we can start them at a random position near our mouse, and generate a random upward vector using their position and Perlin Noise. Let’s look at the code:","position":{"start":{"line":108,"column":1,"offset":11117},"end":{"line":108,"column":525,"offset":11641}}}],"position":{"start":{"line":108,"column":1,"offset":11117},"end":{"line":108,"column":525,"offset":11641}}},{"type":"text","value":"\n"},{"type":"raw","value":"<high-light className='JavaScript'>\nfunction Particle(x, y, color){\n  this.pos = createVector(x + random(-10, 10), y + random(-10, 10));\n  this.vel = createVector(floor(random(-1, 1))*noise(this.pos.x), -noise(this.pos.y)*7);\n  this.alpha = 255;\n  this.r = random(170, 255);\n  this.g = random(10, 255);\n  this.b = random(0, 100);\n  this.update = function(){\n    this.pos.add(this.vel);\n    this.alpha -= 5;\n  }\n  this.show = function(){\n    noStroke();\n    fill(this.r, this.g, this.b, this.alpha);\n    rect(this.pos.x, this.pos.y, 5, 5);\n  }\n  this.dead = function(){\n    if(this.alpha < 0){\n      return true;\n    }else{\n      return false;\n    }\n  }\n}\n</high-light>","position":{"start":{"line":110,"column":1,"offset":11643},"end":{"line":135,"column":14,"offset":12311}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Some key things to notice:","position":{"start":{"line":137,"column":1,"offset":12313},"end":{"line":137,"column":27,"offset":12339}}}],"position":{"start":{"line":137,"column":1,"offset":12313},"end":{"line":137,"column":27,"offset":12339}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"noise(this.pos.x) — The Perlin Noise ","position":{"start":{"line":139,"column":3,"offset":12343},"end":{"line":139,"column":40,"offset":12380}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/reference/#/p5/noise"},"children":[{"type":"text","value":"function","position":{"start":{"line":139,"column":41,"offset":12381},"end":{"line":139,"column":49,"offset":12389}}}],"position":{"start":{"line":139,"column":40,"offset":12380},"end":{"line":139,"column":89,"offset":12429}}},{"type":"text","value":" that gets a random number based on the square’s current x position. It returns a value between 0 and 1.","position":{"start":{"line":139,"column":89,"offset":12429},"end":{"line":139,"column":193,"offset":12533}}}],"position":{"start":{"line":139,"column":3,"offset":12343},"end":{"line":139,"column":193,"offset":12533}}},{"type":"text","value":"\n"}],"position":{"start":{"line":139,"column":1,"offset":12341},"end":{"line":140,"column":1,"offset":12534}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"fill(this.r, this.g, this.b, this.alpha) — Here we have extended fill’s ability by including an alpha value for the objects transparency, by decreasing alpha in the update() function we get a nice fade out like a flame.","position":{"start":{"line":141,"column":3,"offset":12537},"end":{"line":141,"column":222,"offset":12756}}}],"position":{"start":{"line":141,"column":3,"offset":12537},"end":{"line":141,"column":222,"offset":12756}}},{"type":"text","value":"\n"}],"position":{"start":{"line":141,"column":1,"offset":12535},"end":{"line":142,"column":1,"offset":12757}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"dead() — This function allows us to keep track of which particles have disappeared as their alpha is now less than zero. We can then splice() them out of our array to ensure we’re not drawing an unbounded number of particles over time which would cause performance issues.","position":{"start":{"line":143,"column":3,"offset":12760},"end":{"line":143,"column":275,"offset":13032}}}],"position":{"start":{"line":143,"column":3,"offset":12760},"end":{"line":143,"column":275,"offset":13032}}},{"type":"text","value":"\n"}],"position":{"start":{"line":143,"column":1,"offset":12758},"end":{"line":143,"column":275,"offset":13032}}},{"type":"text","value":"\n"}],"position":{"start":{"line":139,"column":1,"offset":12341},"end":{"line":143,"column":275,"offset":13032}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As a challenge, you can also use blendMode() to make it seem even more realistic — check this ","position":{"start":{"line":145,"column":1,"offset":13034},"end":{"line":145,"column":95,"offset":13128}}},{"type":"element","tagName":"a","properties":{"href":"https://codepen.io/anon/pen/YeOaJX"},"children":[{"type":"text","value":"alteration","position":{"start":{"line":145,"column":96,"offset":13129},"end":{"line":145,"column":106,"offset":13139}}}],"position":{"start":{"line":145,"column":95,"offset":13128},"end":{"line":145,"column":143,"offset":13176}}},{"type":"text","value":" to see it in action.","position":{"start":{"line":145,"column":143,"offset":13176},"end":{"line":145,"column":164,"offset":13197}}}],"position":{"start":{"line":145,"column":1,"offset":13034},"end":{"line":145,"column":164,"offset":13197}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"With only a few concepts and the p5 library, it is incredibly straightforward to start building anything you want. Be sure to checkout what else is possible with the library. Here are few cool ideas to get you started: ","position":{"start":{"line":147,"column":1,"offset":13199},"end":{"line":147,"column":220,"offset":13418}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/examples/3d-geometries.html"},"children":[{"type":"text","value":"3D graphics","position":{"start":{"line":147,"column":221,"offset":13419},"end":{"line":147,"column":232,"offset":13430}}}],"position":{"start":{"line":147,"column":220,"offset":13418},"end":{"line":147,"column":279,"offset":13477}}},{"type":"text","value":", ","position":{"start":{"line":147,"column":279,"offset":13477},"end":{"line":147,"column":281,"offset":13479}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/examples/dom-slider.html"},"children":[{"type":"text","value":"sliders","position":{"start":{"line":147,"column":282,"offset":13480},"end":{"line":147,"column":289,"offset":13487}}}],"position":{"start":{"line":147,"column":281,"offset":13479},"end":{"line":147,"column":333,"offset":13531}}},{"type":"text","value":" and ","position":{"start":{"line":147,"column":333,"offset":13531},"end":{"line":147,"column":338,"offset":13536}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/examples/image-load-and-display-image.html"},"children":[{"type":"text","value":"images","position":{"start":{"line":147,"column":339,"offset":13537},"end":{"line":147,"column":345,"offset":13543}}}],"position":{"start":{"line":147,"column":338,"offset":13536},"end":{"line":147,"column":407,"offset":13605}}},{"type":"text","value":".","position":{"start":{"line":147,"column":407,"offset":13605},"end":{"line":147,"column":408,"offset":13606}}}],"position":{"start":{"line":147,"column":1,"offset":13199},"end":{"line":147,"column":408,"offset":13606}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":149,"column":5,"offset":13612},"end":{"line":149,"column":15,"offset":13622}}}],"position":{"start":{"line":149,"column":1,"offset":13608},"end":{"line":149,"column":15,"offset":13622}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As computers and technology become ubiquitous in our daily lives and an increasing number of professions are now relying on computer literacy, p5.js is a beautiful example of how we can ensure as many people as possible have an entry-point to the wonderful world of computer programming. It also acts as a reminder to some more experienced programmers that creativity and imagination are vital in producing meaningful code and ultimately making the tech world a better place.","position":{"start":{"line":151,"column":1,"offset":13624},"end":{"line":151,"column":476,"offset":14099}}}],"position":{"start":{"line":151,"column":1,"offset":13624},"end":{"line":151,"column":476,"offset":14099}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Hopefully this intro to p5 has convinced you of its usefulness and has encouraged you to start taking your first steps into the world of graphics programming. Here are my recommendations for where to go next:","position":{"start":{"line":153,"column":1,"offset":14101},"end":{"line":153,"column":209,"offset":14309}}}],"position":{"start":{"line":153,"column":1,"offset":14101},"end":{"line":153,"column":209,"offset":14309}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.youtube.com/user/shiffman"},"children":[{"type":"text","value":"The Coding Train","position":{"start":{"line":155,"column":4,"offset":14314},"end":{"line":155,"column":20,"offset":14330}}}],"position":{"start":{"line":155,"column":3,"offset":14313},"end":{"line":155,"column":60,"offset":14370}}},{"type":"text","value":" — A brilliant YouTube channel by Daniel Shiffman where he teaches JavaScript and p5.js amongst many other incredible things!","position":{"start":{"line":155,"column":60,"offset":14370},"end":{"line":155,"column":185,"offset":14495}}}],"position":{"start":{"line":155,"column":3,"offset":14313},"end":{"line":155,"column":185,"offset":14495}}},{"type":"text","value":"\n"}],"position":{"start":{"line":155,"column":1,"offset":14311},"end":{"line":156,"column":1,"offset":14496}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/examples/"},"children":[{"type":"text","value":"p5js.org ","position":{"start":{"line":157,"column":4,"offset":14500},"end":{"line":157,"column":13,"offset":14509}}}],"position":{"start":{"line":157,"column":3,"offset":14499},"end":{"line":157,"column":42,"offset":14538}}},{"type":"text","value":"— The examples page on this website is full of inspiring projects which you could recreate and extend further.","position":{"start":{"line":157,"column":42,"offset":14538},"end":{"line":157,"column":152,"offset":14648}}}],"position":{"start":{"line":157,"column":3,"offset":14499},"end":{"line":157,"column":152,"offset":14648}}},{"type":"text","value":"\n"}],"position":{"start":{"line":157,"column":1,"offset":14497},"end":{"line":158,"column":1,"offset":14649}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.scratchapixel.com/index.php"},"children":[{"type":"text","value":"Sratchapixel","position":{"start":{"line":159,"column":4,"offset":14653},"end":{"line":159,"column":16,"offset":14665}}}],"position":{"start":{"line":159,"column":3,"offset":14652},"end":{"line":159,"column":58,"offset":14707}}},{"type":"text","value":" — If you feel ready to delve into the deeper concepts and implementations of computer graphics then this website is an incredible resource for you to use.","position":{"start":{"line":159,"column":58,"offset":14707},"end":{"line":159,"column":213,"offset":14862}}}],"position":{"start":{"line":159,"column":3,"offset":14652},"end":{"line":159,"column":213,"offset":14862}}},{"type":"text","value":"\n"}],"position":{"start":{"line":159,"column":1,"offset":14650},"end":{"line":159,"column":213,"offset":14862}}},{"type":"text","value":"\n"}],"position":{"start":{"line":155,"column":1,"offset":14311},"end":{"line":159,"column":213,"offset":14862}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A special thanks to ","position":{"start":{"line":161,"column":1,"offset":14864},"end":{"line":161,"column":21,"offset":14884}}},{"type":"element","tagName":"a","properties":{"href":"undefined"},"children":[{"type":"text","value":"Tom Read Cutting","position":{"start":{"line":161,"column":22,"offset":14885},"end":{"line":161,"column":38,"offset":14901}}}],"position":{"start":{"line":161,"column":21,"offset":14884},"end":{"line":161,"column":50,"offset":14913}}},{"type":"text","value":" for editing this article and ","position":{"start":{"line":161,"column":50,"offset":14913},"end":{"line":161,"column":80,"offset":14943}}},{"type":"element","tagName":"a","properties":{"href":"undefined"},"children":[{"type":"text","value":"Christian Silver","position":{"start":{"line":161,"column":81,"offset":14944},"end":{"line":161,"column":97,"offset":14960}}}],"position":{"start":{"line":161,"column":80,"offset":14943},"end":{"line":161,"column":109,"offset":14972}}},{"type":"text","value":" for helping get it off the ground.","position":{"start":{"line":161,"column":109,"offset":14972},"end":{"line":161,"column":144,"offset":15007}}}],"position":{"start":{"line":161,"column":1,"offset":14864},"end":{"line":161,"column":144,"offset":15007}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":162,"column":1,"offset":15008}}}},{"id":"transformer-remark-markdown-html-459e6ec5230ae1bc11ba08acae14c583-gatsby-remark-imagesgatsby-remark-prismjs-","value":"<p><img src=\"https://res.cloudinary.com/patricoferris/image/upload/v1532857964/pf2018/blogposts/27-02-2018/tree.png\" alt=\"Recursive Tree\"></p>\n<p>Graphics and computer programming are two dearly intertwined disciplines. The oscilloscope is often recognised as one of the first examples of “computer graphics”, the cathode-ray versions emitting a beam of electrons onto a phosphorescent screen. By using magnetic fields to change the beam’s direction, we can sweep from left to right and move up and down — the basic idea behind most CG! (I highly recommend watching this <a href=\"https://archive.org/details/introductiontothecathoderayoscilloscope\">video</a> from 1970).</p>\n<p>We’ve come a long way since then — modern day graphics is a complicated science as well as an art, and the barrier to entry is constantly increasing. Graphics programming can be so complex, that a simple program to draw a triangle can be over <a href=\"https://github.com/SaschaWillems/Vulkan/blob/master/examples/triangle/triangle.cpp\">1000 lines of code</a>! However, this article will introduce you to <a href=\"https://p5js.org/\">p5.js</a> (also known as p5). A simpler, less complex solution for people who want to start making computer graphics, but don’t want the headache of streams of boiler-plate code.</p>\n<p>Straight from the landing page of the p5.js website.</p>\n<blockquote>\n<h1>…make coding accessible for artists, designers, educators and beginners…</h1>\n</blockquote>\n<p>p5.js is the result of hard-work of the <a href=\"https://processingfoundation.org/\">Processing Foundation</a>, a group focused on spreading computer and visual literacy. It distills their <a href=\"https://en.wikipedia.org/wiki/Processing_(programming_language)\">Processing</a> language into a JavaScript library that makes creating graphics easy and accessible whilst providing an ideal platform to springboard people’s careers in computer graphics. It should be mentioned now that a lot of inspiration has been taken from <a href=\"http://shiffman.net/\">Daniel Shiffman’s</a> p5 projects (from the <a href=\"https://github.com/CodingTrain/website/tree/master/CodingChallenges/CC_03_Snake_game_p5.js\">classic snake game</a>, to a <a href=\"https://github.com/CodingTrain/website/tree/master/CodingChallenges/CC_93_DoublePendulum_p5.js\">double pendulum</a>). I can’t urge you enough to follow these projects to really improve your understanding of coding concepts and the p5 library.</p>\n<h3>Some prerequisites:</h3>\n<p>Before jumping into the p5 code I first want to make clear that there is assumed knowledge of HTML5 and JavaScript including arrays, functions, variables etc. in the rest of this article. If you have a good grasp of JavaScript then skip to the p5 code below, otherwise here are few resources to get you up to scratch.</p>\n<ul>\n<li>\n<p><a href=\"https://www.youtube.com/watch?v=spIVWmv1jnw\">HaC Intro to Programming</a> — A workshop that is being run by Hackers at Cambridge to help anyone start learning to program (which uses JavaScript).</p>\n</li>\n<li>\n<p><a href=\"https://www.codecademy.com/learn/introduction-to-javascript\">Codecademy</a> — a great resource for learning how to code with instant feedback in your browser.</p>\n</li>\n<li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript\">MDN</a> — a great resource for learning about all aspects of web development.</p>\n</li>\n<li>\n<p><a href=\"https://codepen.io/\">Codepen</a> — a brilliant online text-editor for creating cool projects in HTML, CSS and JavaScript. Equally good for getting inspiration from a lot of talented users. Another possible solution would be <a href=\"https://jsfiddle.net/\">JSFiddle</a>.</p>\n</li>\n</ul>\n<p>What follows is a series of steps that will introduce you to p5 concepts. With code examples and explanations I hope to give you enough information to understand the ideas, but to fully grasp the concepts you will have to dive into the code, experiment with it, break it and learn from it. So without further ado, let’s get coding.</p>\n<h3>Step 1: The Setup</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//Initialisation of canvas, objects, variables etc.</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//The drawing loop - updates at a constant rate declared in setup</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>p5 is really simple to setup once you know what to do. There are two files shown above — an index.html and a template.js. The index.html file gets the libraries for us and the template.js is the barebones structure of a p5 project and at the moment it does nothing! Within this we have two functions:</p>\n<ul>\n<li>\n<p>setup() — a function for creating what we will need for our graphic or project. Like creating a canvas, initialising some objects or arrays etc.</p>\n</li>\n<li>\n<p>draw() — a function which will be called periodically like a loop. This is where will call draw functions and update functions to make graphics and animations.</p>\n</li>\n</ul>\n<iframe height='400' scrolling='no' title='Simple Triangle Tutorial' src='//codepen.io/patricoferris/embed/dddxjr/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/dddxjr/'>Simple Triangle Tutorial</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>Let’s first look at the setup function. We used the p5 function createCanvas(width, height) which created and initialised a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API\">canvas</a> with arguments width and height. Now within our setup() and createCanvas() functions we can reference the variables width and height without ever instantiating them!</p>\n<p>Next comes the meaty, draw function. I have purposefully put extra code in here so we can learn more about what p5 has to offer. Firstly always remember that draw() is a loop that runs from top to bottom. Initially, we set the background (of our canvas) to white with background(255) which is the same as background(255, 255, 255) (maximising the red, green and blue values to give white). This may seem simple, but implicitly we are also clearing our canvas every loop… in one line of code! This will be useful for animations later as we want to redraw objects in a new location rather than have the <a href=\"https://codepen.io/patricoferris/pen/paxZaw\">build-up on the same canvas</a> (click to see it go spectacularly wrong). Next is a translate(width/2, height/2) which moves our current drawing location to the centre of our canvas. We then declare the fill colour of our triangle with fill(255, 0, 0)(making it red).</p>\n<p>We want to create an equilateral triangle with side length s. The triangle itself is a function that takes the vertex coordinates as arguments — triangle(x1, y1, x2, y2, x3, y3) and in this example starting from the centre we have one vertex at (-s/2, 0) another at (s/2, 0) giving a bottom length of s . Now comes the trickier part. A very important aspect of most computer graphics is that the coordinate system starts in the top left corner (or wherever your origin is) and x increases left to right, whilst y increases top to bottom. To move of the screen we need a negative y value. Our last coordinate is given as (0, -sin(PI/3)) (if you’re stuck, think about cutting the triangle in two and using trigonometry).</p>\n<h3>Step 2: Get Creative</h3>\n<p>We’ve learnt how to set up our canvas and start drawing. Armed with the p5 <a href=\"https://p5js.org/reference/\">reference page</a> and our creativity, we can make some truly stunning graphics. How about a bouncing ball animation?</p>\n<iframe height='400' scrolling='no' title='Bouncing Balls' src='//codepen.io/patricoferris/embed/PQpOrB/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/PQpOrB/'>Bouncing Balls</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>Let’s look at the interesting p5 aspects that we didn’t know before:</p>\n<ul>\n<li>\n<p>frameRate(20) — This enables us to specify the frame rate of our drawing loop, that is, how many times per second it redraws everything for us.</p>\n</li>\n<li>\n<p>gravity = createVector(0, 9) — p5 allows us to <a href=\"https://p5js.org/reference/#/p5.Vector\">create vector objects</a> with which we can perform vector operations like addition, multiplication, dot-product and cross-product. This is useful when we want to simulate physics like forces.</p>\n</li>\n<li>\n<p>floor(random(50)) — Here we’re using p5 math functions. floor() takes a real number and rounds it down to the nearest integer. random(arg) produces a random number as small as 0 or up to 49. In this example, we are giving it to the ellipse(x, y, w)function to create randomly sized balls by setting the width to a random number. If we gave another argument it would set the ellipse’s height, but here it infers that we want a circle.</p>\n</li>\n<li>\n<p>stroke(0) — This function sets the colour of our shape’s outline. If you don’t want any border you can add noStroke() .</p>\n</li>\n</ul>\n<p>All you need now is to add some physics to these ideas and you have yourself a bouncing ball animation.</p>\n<h3>Step 3: Experiment with p5</h3>\n<p>Hopefully now you have a good understanding of the p5 fundamentals, but we’ve barely scratched the surface. This last example will use two extra features of p5: interactivity and <a href=\"http://flafla2.github.io/2014/08/09/perlinnoise.html\">Perlin Noise</a>. Keep reading to find out more on these two concepts.</p>\n<iframe height='400' scrolling='no' title='Pixel Fire' src='//codepen.io/patricoferris/embed/XZMxmV/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/XZMxmV/'>Pixel Fire</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>In this CodePen I have created a relatively simple flame model using squares and Perlin Noise. First of all, how do we get user input? Lucky for us p5 has some functions that can help.</p>\n<high-light className='JavaScript'>\nvar touch = false;\nfunction setup(){\n  createCanvas(640, 640);\n}\nfunction draw(){\n  if(touch){\n    fill(255, 0, 0);\n    rect(mouseX, mouseY, 20, 20);\n  }\n}\nfunction touchStarted(){\n  touch = true;\n}\nfunction touchEnded(){\n  touch = false;\n}\n</high-light>\n<p>At the top of the code we have declared a boolean “flag” as to whether or not our mouse is being pressed — this allows us to do things if the mouse is being held down. The touchStarted() and touchEnded() are p5 functions that are executed whenever the mouse is pressed or released or the screen is touched and released. Lastly, in our rect() function we have the variables mouseX and mouseY which are p5 variables corresponding to the mouse’s current position. Oddly, these also refer to your <a href=\"https://github.com/processing/p5.js/issues/1705\">“touch” coordinates</a>. With all these variables and functions predefined for us we can focus on making visually stunning graphics, whilst not being hampered by having to code extra functions unrelated to the graphic we’re producing.</p>\n<p>Now for the Perlin Noise. In 1983, tired with the artificial look of computer graphics, Ken Perlin developed a type of *gradient noise. *The basic idea being you create a big grid of gradients randomly and then use the dot product to interpolate between them. In short, we get random values based on the coordinate system we’re drawing on. Great! For each of our squares we can start them at a random position near our mouse, and generate a random upward vector using their position and Perlin Noise. Let’s look at the code:</p>\n<high-light className='JavaScript'>\nfunction Particle(x, y, color){\n  this.pos = createVector(x + random(-10, 10), y + random(-10, 10));\n  this.vel = createVector(floor(random(-1, 1))*noise(this.pos.x), -noise(this.pos.y)*7);\n  this.alpha = 255;\n  this.r = random(170, 255);\n  this.g = random(10, 255);\n  this.b = random(0, 100);\n  this.update = function(){\n    this.pos.add(this.vel);\n    this.alpha -= 5;\n  }\n  this.show = function(){\n    noStroke();\n    fill(this.r, this.g, this.b, this.alpha);\n    rect(this.pos.x, this.pos.y, 5, 5);\n  }\n  this.dead = function(){\n    if(this.alpha < 0){\n      return true;\n    }else{\n      return false;\n    }\n  }\n}\n</high-light>\n<p>Some key things to notice:</p>\n<ul>\n<li>\n<p>noise(this.pos.x) — The Perlin Noise <a href=\"https://p5js.org/reference/#/p5/noise\">function</a> that gets a random number based on the square’s current x position. It returns a value between 0 and 1.</p>\n</li>\n<li>\n<p>fill(this.r, this.g, this.b, this.alpha) — Here we have extended fill’s ability by including an alpha value for the objects transparency, by decreasing alpha in the update() function we get a nice fade out like a flame.</p>\n</li>\n<li>\n<p>dead() — This function allows us to keep track of which particles have disappeared as their alpha is now less than zero. We can then splice() them out of our array to ensure we’re not drawing an unbounded number of particles over time which would cause performance issues.</p>\n</li>\n</ul>\n<p>As a challenge, you can also use blendMode() to make it seem even more realistic — check this <a href=\"https://codepen.io/anon/pen/YeOaJX\">alteration</a> to see it in action.</p>\n<p>With only a few concepts and the p5 library, it is incredibly straightforward to start building anything you want. Be sure to checkout what else is possible with the library. Here are few cool ideas to get you started: <a href=\"https://p5js.org/examples/3d-geometries.html\">3D graphics</a>, <a href=\"https://p5js.org/examples/dom-slider.html\">sliders</a> and <a href=\"https://p5js.org/examples/image-load-and-display-image.html\">images</a>.</p>\n<h3>Conclusion</h3>\n<p>As computers and technology become ubiquitous in our daily lives and an increasing number of professions are now relying on computer literacy, p5.js is a beautiful example of how we can ensure as many people as possible have an entry-point to the wonderful world of computer programming. It also acts as a reminder to some more experienced programmers that creativity and imagination are vital in producing meaningful code and ultimately making the tech world a better place.</p>\n<p>Hopefully this intro to p5 has convinced you of its usefulness and has encouraged you to start taking your first steps into the world of graphics programming. Here are my recommendations for where to go next:</p>\n<ul>\n<li>\n<p><a href=\"https://www.youtube.com/user/shiffman\">The Coding Train</a> — A brilliant YouTube channel by Daniel Shiffman where he teaches JavaScript and p5.js amongst many other incredible things!</p>\n</li>\n<li>\n<p><a href=\"https://p5js.org/examples/\">p5js.org </a>— The examples page on this website is full of inspiring projects which you could recreate and extend further.</p>\n</li>\n<li>\n<p><a href=\"https://www.scratchapixel.com/index.php\">Sratchapixel</a> — If you feel ready to delve into the deeper concepts and implementations of computer graphics then this website is an incredible resource for you to use.</p>\n</li>\n</ul>\n<p>A special thanks to <a href=\"undefined\">Tom Read Cutting</a> for editing this article and <a href=\"undefined\">Christian Silver</a> for helping get it off the ground.</p>"},{"id":"transformer-remark-markdown-ast-e4e44af9bf82b38c4bfc0c7231e88c40-gatsby-remark-imagesgatsby-remark-prismjs-","value":{"type":"root","children":[{"type":"yaml","value":"path: '/graphics-and-p5'\ntitle: 'Computer Graphics for Everyone'\nsubtitle: 'An Introduction to Computer Graphics using p5.js'\ndate: '2018-02-27'","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":6,"column":4,"offset":152},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://res.cloudinary.com/patricoferris/image/upload/v1532857964/pf2018/blogposts/27-02-2018/tree.png","alt":"Recursive Tree","position":{"start":{"line":8,"column":1,"offset":154},"end":{"line":8,"column":122,"offset":275},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":154},"end":{"line":8,"column":122,"offset":275},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Graphics and computer programming are two dearly intertwined disciplines. The oscilloscope is often recognised as one of the first examples of “computer graphics”, the cathode-ray versions emitting a beam of electrons onto a phosphorescent screen. By using magnetic fields to change the beam’s direction, we can sweep from left to right and move up and down — the basic idea behind most CG! (I highly recommend watching this ","position":{"start":{"line":10,"column":1,"offset":277},"end":{"line":10,"column":426,"offset":702},"indent":[]}},{"type":"link","title":null,"url":"https://archive.org/details/introductiontothecathoderayoscilloscope","children":[{"type":"text","value":"video","position":{"start":{"line":10,"column":427,"offset":703},"end":{"line":10,"column":432,"offset":708},"indent":[]}}],"position":{"start":{"line":10,"column":426,"offset":702},"end":{"line":10,"column":502,"offset":778},"indent":[]}},{"type":"text","value":" from 1970).","position":{"start":{"line":10,"column":502,"offset":778},"end":{"line":10,"column":514,"offset":790},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":277},"end":{"line":10,"column":514,"offset":790},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We’ve come a long way since then — modern day graphics is a complicated science as well as an art, and the barrier to entry is constantly increasing. Graphics programming can be so complex, that a simple program to draw a triangle can be over ","position":{"start":{"line":12,"column":1,"offset":792},"end":{"line":12,"column":244,"offset":1035},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/SaschaWillems/Vulkan/blob/master/examples/triangle/triangle.cpp","children":[{"type":"text","value":"1000 lines of code","position":{"start":{"line":12,"column":245,"offset":1036},"end":{"line":12,"column":263,"offset":1054},"indent":[]}}],"position":{"start":{"line":12,"column":244,"offset":1035},"end":{"line":12,"column":348,"offset":1139},"indent":[]}},{"type":"text","value":"! However, this article will introduce you to ","position":{"start":{"line":12,"column":348,"offset":1139},"end":{"line":12,"column":394,"offset":1185},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/","children":[{"type":"text","value":"p5.js","position":{"start":{"line":12,"column":395,"offset":1186},"end":{"line":12,"column":400,"offset":1191},"indent":[]}}],"position":{"start":{"line":12,"column":394,"offset":1185},"end":{"line":12,"column":420,"offset":1211},"indent":[]}},{"type":"text","value":" (also known as p5). A simpler, less complex solution for people who want to start making computer graphics, but don’t want the headache of streams of boiler-plate code.","position":{"start":{"line":12,"column":420,"offset":1211},"end":{"line":12,"column":589,"offset":1380},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":792},"end":{"line":12,"column":589,"offset":1380},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Straight from the landing page of the p5.js website.","position":{"start":{"line":14,"column":1,"offset":1382},"end":{"line":14,"column":53,"offset":1434},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":1382},"end":{"line":14,"column":53,"offset":1434},"indent":[]}},{"type":"blockquote","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"…make coding accessible for artists, designers, educators and beginners…","position":{"start":{"line":15,"column":5,"offset":1439},"end":{"line":15,"column":77,"offset":1511},"indent":[]}}],"position":{"start":{"line":15,"column":3,"offset":1437},"end":{"line":15,"column":77,"offset":1511},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":1435},"end":{"line":15,"column":77,"offset":1511},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"p5.js is the result of hard-work of the ","position":{"start":{"line":17,"column":1,"offset":1513},"end":{"line":17,"column":41,"offset":1553},"indent":[]}},{"type":"link","title":null,"url":"https://processingfoundation.org/","children":[{"type":"text","value":"Processing Foundation","position":{"start":{"line":17,"column":42,"offset":1554},"end":{"line":17,"column":63,"offset":1575},"indent":[]}}],"position":{"start":{"line":17,"column":41,"offset":1553},"end":{"line":17,"column":99,"offset":1611},"indent":[]}},{"type":"text","value":", a group focused on spreading computer and visual literacy. It distills their ","position":{"start":{"line":17,"column":99,"offset":1611},"end":{"line":17,"column":178,"offset":1690},"indent":[]}},{"type":"link","title":null,"url":"https://en.wikipedia.org/wiki/Processing_(programming_language)","children":[{"type":"text","value":"Processing","position":{"start":{"line":17,"column":179,"offset":1691},"end":{"line":17,"column":189,"offset":1701},"indent":[]}}],"position":{"start":{"line":17,"column":178,"offset":1690},"end":{"line":17,"column":255,"offset":1767},"indent":[]}},{"type":"text","value":" language into a JavaScript library that makes creating graphics easy and accessible whilst providing an ideal platform to springboard people’s careers in computer graphics. It should be mentioned now that a lot of inspiration has been taken from ","position":{"start":{"line":17,"column":255,"offset":1767},"end":{"line":17,"column":502,"offset":2014},"indent":[]}},{"type":"link","title":null,"url":"http://shiffman.net/","children":[{"type":"text","value":"Daniel Shiffman’s","position":{"start":{"line":17,"column":503,"offset":2015},"end":{"line":17,"column":520,"offset":2032},"indent":[]}}],"position":{"start":{"line":17,"column":502,"offset":2014},"end":{"line":17,"column":543,"offset":2055},"indent":[]}},{"type":"text","value":" p5 projects (from the ","position":{"start":{"line":17,"column":543,"offset":2055},"end":{"line":17,"column":566,"offset":2078},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/CodingTrain/website/tree/master/CodingChallenges/CC_03_Snake_game_p5.js","children":[{"type":"text","value":"classic snake game","position":{"start":{"line":17,"column":567,"offset":2079},"end":{"line":17,"column":585,"offset":2097},"indent":[]}}],"position":{"start":{"line":17,"column":566,"offset":2078},"end":{"line":17,"column":678,"offset":2190},"indent":[]}},{"type":"text","value":", to a ","position":{"start":{"line":17,"column":678,"offset":2190},"end":{"line":17,"column":685,"offset":2197},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/CodingTrain/website/tree/master/CodingChallenges/CC_93_DoublePendulum_p5.js","children":[{"type":"text","value":"double pendulum","position":{"start":{"line":17,"column":686,"offset":2198},"end":{"line":17,"column":701,"offset":2213},"indent":[]}}],"position":{"start":{"line":17,"column":685,"offset":2197},"end":{"line":17,"column":798,"offset":2310},"indent":[]}},{"type":"text","value":"). I can’t urge you enough to follow these projects to really improve your understanding of coding concepts and the p5 library.","position":{"start":{"line":17,"column":798,"offset":2310},"end":{"line":17,"column":925,"offset":2437},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":1513},"end":{"line":17,"column":925,"offset":2437},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Some prerequisites:","position":{"start":{"line":19,"column":5,"offset":2443},"end":{"line":19,"column":24,"offset":2462},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":2439},"end":{"line":19,"column":24,"offset":2462},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Before jumping into the p5 code I first want to make clear that there is assumed knowledge of HTML5 and JavaScript including arrays, functions, variables etc. in the rest of this article. If you have a good grasp of JavaScript then skip to the p5 code below, otherwise here are few resources to get you up to scratch.","position":{"start":{"line":21,"column":1,"offset":2464},"end":{"line":21,"column":318,"offset":2781},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":2464},"end":{"line":21,"column":318,"offset":2781},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":true,"children":[{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.youtube.com/watch?v=spIVWmv1jnw","children":[{"type":"text","value":"HaC Intro to Programming","position":{"start":{"line":23,"column":4,"offset":2786},"end":{"line":23,"column":28,"offset":2810},"indent":[]}}],"position":{"start":{"line":23,"column":3,"offset":2785},"end":{"line":23,"column":74,"offset":2856},"indent":[]}},{"type":"text","value":" — A workshop that is being run by Hackers at Cambridge to help anyone start learning to program (which uses JavaScript).","position":{"start":{"line":23,"column":74,"offset":2856},"end":{"line":23,"column":195,"offset":2977},"indent":[]}}],"position":{"start":{"line":23,"column":3,"offset":2785},"end":{"line":23,"column":195,"offset":2977},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":2783},"end":{"line":24,"column":1,"offset":2978},"indent":[1]}},{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.codecademy.com/learn/introduction-to-javascript","children":[{"type":"text","value":"Codecademy","position":{"start":{"line":25,"column":4,"offset":2982},"end":{"line":25,"column":14,"offset":2992},"indent":[]}}],"position":{"start":{"line":25,"column":3,"offset":2981},"end":{"line":25,"column":76,"offset":3054},"indent":[]}},{"type":"text","value":" — a great resource for learning how to code with instant feedback in your browser.","position":{"start":{"line":25,"column":76,"offset":3054},"end":{"line":25,"column":159,"offset":3137},"indent":[]}}],"position":{"start":{"line":25,"column":3,"offset":2981},"end":{"line":25,"column":159,"offset":3137},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":2979},"end":{"line":26,"column":1,"offset":3138},"indent":[1]}},{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript","children":[{"type":"text","value":"MDN","position":{"start":{"line":27,"column":4,"offset":3142},"end":{"line":27,"column":7,"offset":3145},"indent":[]}}],"position":{"start":{"line":27,"column":3,"offset":3141},"end":{"line":27,"column":65,"offset":3203},"indent":[]}},{"type":"text","value":" — a great resource for learning about all aspects of web development.","position":{"start":{"line":27,"column":65,"offset":3203},"end":{"line":27,"column":135,"offset":3273},"indent":[]}}],"position":{"start":{"line":27,"column":3,"offset":3141},"end":{"line":27,"column":135,"offset":3273},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":3139},"end":{"line":28,"column":1,"offset":3274},"indent":[1]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://codepen.io/","children":[{"type":"text","value":"Codepen","position":{"start":{"line":29,"column":4,"offset":3278},"end":{"line":29,"column":11,"offset":3285},"indent":[]}}],"position":{"start":{"line":29,"column":3,"offset":3277},"end":{"line":29,"column":33,"offset":3307},"indent":[]}},{"type":"text","value":" — a brilliant online text-editor for creating cool projects in HTML, CSS and JavaScript. Equally good for getting inspiration from a lot of talented users. Another possible solution would be ","position":{"start":{"line":29,"column":33,"offset":3307},"end":{"line":29,"column":225,"offset":3499},"indent":[]}},{"type":"link","title":null,"url":"https://jsfiddle.net/","children":[{"type":"text","value":"JSFiddle","position":{"start":{"line":29,"column":226,"offset":3500},"end":{"line":29,"column":234,"offset":3508},"indent":[]}}],"position":{"start":{"line":29,"column":225,"offset":3499},"end":{"line":29,"column":258,"offset":3532},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":29,"column":258,"offset":3532},"end":{"line":29,"column":259,"offset":3533},"indent":[]}}],"position":{"start":{"line":29,"column":3,"offset":3277},"end":{"line":29,"column":259,"offset":3533},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":3275},"end":{"line":29,"column":259,"offset":3533},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":2783},"end":{"line":29,"column":259,"offset":3533},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"What follows is a series of steps that will introduce you to p5 concepts. With code examples and explanations I hope to give you enough information to understand the ideas, but to fully grasp the concepts you will have to dive into the code, experiment with it, break it and learn from it. So without further ado, let’s get coding.","position":{"start":{"line":31,"column":1,"offset":3535},"end":{"line":31,"column":332,"offset":3866},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":3535},"end":{"line":31,"column":332,"offset":3866},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Step 1: The Setup","position":{"start":{"line":33,"column":5,"offset":3872},"end":{"line":33,"column":22,"offset":3889},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":3868},"end":{"line":33,"column":22,"offset":3889},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//Initialisation of canvas, objects, variables etc.</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//The drawing loop - updates at a constant rate declared in setup</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":35,"column":1,"offset":3891},"end":{"line":42,"column":4,"offset":4069},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"p5 is really simple to setup once you know what to do. There are two files shown above — an index.html and a template.js. The index.html file gets the libraries for us and the template.js is the barebones structure of a p5 project and at the moment it does nothing! Within this we have two functions:","position":{"start":{"line":44,"column":1,"offset":4071},"end":{"line":44,"column":301,"offset":4371},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":4071},"end":{"line":44,"column":301,"offset":4371},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":true,"children":[{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"setup() — a function for creating what we will need for our graphic or project. Like creating a canvas, initialising some objects or arrays etc.","position":{"start":{"line":46,"column":3,"offset":4375},"end":{"line":46,"column":147,"offset":4519},"indent":[]}}],"position":{"start":{"line":46,"column":3,"offset":4375},"end":{"line":46,"column":147,"offset":4519},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":4373},"end":{"line":47,"column":1,"offset":4520},"indent":[1]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"draw() — a function which will be called periodically like a loop. This is where will call draw functions and update functions to make graphics and animations.","position":{"start":{"line":48,"column":3,"offset":4523},"end":{"line":48,"column":162,"offset":4682},"indent":[]}}],"position":{"start":{"line":48,"column":3,"offset":4523},"end":{"line":48,"column":162,"offset":4682},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":4521},"end":{"line":48,"column":162,"offset":4682},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":4373},"end":{"line":48,"column":162,"offset":4682},"indent":[1,1]}},{"type":"html","value":"<iframe height='400' scrolling='no' title='Simple Triangle Tutorial' src='//codepen.io/patricoferris/embed/dddxjr/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/dddxjr/'>Simple Triangle Tutorial</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":50,"column":1,"offset":4684},"end":{"line":51,"column":10,"offset":5178},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Let’s first look at the setup function. We used the p5 function createCanvas(width, height) which created and initialised a ","position":{"start":{"line":53,"column":1,"offset":5180},"end":{"line":53,"column":125,"offset":5304},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API","children":[{"type":"text","value":"canvas","position":{"start":{"line":53,"column":126,"offset":5305},"end":{"line":53,"column":132,"offset":5311},"indent":[]}}],"position":{"start":{"line":53,"column":125,"offset":5304},"end":{"line":53,"column":194,"offset":5373},"indent":[]}},{"type":"text","value":" with arguments width and height. Now within our setup() and createCanvas() functions we can reference the variables width and height without ever instantiating them!","position":{"start":{"line":53,"column":194,"offset":5373},"end":{"line":53,"column":360,"offset":5539},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":5180},"end":{"line":53,"column":360,"offset":5539},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Next comes the meaty, draw function. I have purposefully put extra code in here so we can learn more about what p5 has to offer. Firstly always remember that draw() is a loop that runs from top to bottom. Initially, we set the background (of our canvas) to white with background(255) which is the same as background(255, 255, 255) (maximising the red, green and blue values to give white). This may seem simple, but implicitly we are also clearing our canvas every loop… in one line of code! This will be useful for animations later as we want to redraw objects in a new location rather than have the ","position":{"start":{"line":55,"column":1,"offset":5541},"end":{"line":55,"column":602,"offset":6142},"indent":[]}},{"type":"link","title":null,"url":"https://codepen.io/patricoferris/pen/paxZaw","children":[{"type":"text","value":"build-up on the same canvas","position":{"start":{"line":55,"column":603,"offset":6143},"end":{"line":55,"column":630,"offset":6170},"indent":[]}}],"position":{"start":{"line":55,"column":602,"offset":6142},"end":{"line":55,"column":676,"offset":6216},"indent":[]}},{"type":"text","value":" (click to see it go spectacularly wrong). Next is a translate(width/2, height/2) which moves our current drawing location to the centre of our canvas. We then declare the fill colour of our triangle with fill(255, 0, 0)(making it red).","position":{"start":{"line":55,"column":676,"offset":6216},"end":{"line":55,"column":912,"offset":6452},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":5541},"end":{"line":55,"column":912,"offset":6452},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We want to create an equilateral triangle with side length s. The triangle itself is a function that takes the vertex coordinates as arguments — triangle(x1, y1, x2, y2, x3, y3) and in this example starting from the centre we have one vertex at (-s/2, 0) another at (s/2, 0) giving a bottom length of s . Now comes the trickier part. A very important aspect of most computer graphics is that the coordinate system starts in the top left corner (or wherever your origin is) and x increases left to right, whilst y increases top to bottom. To move of the screen we need a negative y value. Our last coordinate is given as (0, -sin(PI/3)) (if you’re stuck, think about cutting the triangle in two and using trigonometry).","position":{"start":{"line":57,"column":1,"offset":6454},"end":{"line":57,"column":719,"offset":7172},"indent":[]}}],"position":{"start":{"line":57,"column":1,"offset":6454},"end":{"line":57,"column":719,"offset":7172},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Step 2: Get Creative","position":{"start":{"line":59,"column":5,"offset":7178},"end":{"line":59,"column":25,"offset":7198},"indent":[]}}],"position":{"start":{"line":59,"column":1,"offset":7174},"end":{"line":59,"column":25,"offset":7198},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We’ve learnt how to set up our canvas and start drawing. Armed with the p5 ","position":{"start":{"line":61,"column":1,"offset":7200},"end":{"line":61,"column":76,"offset":7275},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/reference/","children":[{"type":"text","value":"reference page","position":{"start":{"line":61,"column":77,"offset":7276},"end":{"line":61,"column":91,"offset":7290},"indent":[]}}],"position":{"start":{"line":61,"column":76,"offset":7275},"end":{"line":61,"column":121,"offset":7320},"indent":[]}},{"type":"text","value":" and our creativity, we can make some truly stunning graphics. How about a bouncing ball animation?","position":{"start":{"line":61,"column":121,"offset":7320},"end":{"line":61,"column":220,"offset":7419},"indent":[]}}],"position":{"start":{"line":61,"column":1,"offset":7200},"end":{"line":61,"column":220,"offset":7419},"indent":[]}},{"type":"html","value":"<iframe height='400' scrolling='no' title='Bouncing Balls' src='//codepen.io/patricoferris/embed/PQpOrB/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/PQpOrB/'>Bouncing Balls</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":63,"column":1,"offset":7421},"end":{"line":64,"column":10,"offset":7895},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Let’s look at the interesting p5 aspects that we didn’t know before:","position":{"start":{"line":66,"column":1,"offset":7897},"end":{"line":66,"column":69,"offset":7965},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":7897},"end":{"line":66,"column":69,"offset":7965},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":true,"children":[{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"frameRate(20) — This enables us to specify the frame rate of our drawing loop, that is, how many times per second it redraws everything for us.","position":{"start":{"line":68,"column":3,"offset":7969},"end":{"line":68,"column":146,"offset":8112},"indent":[]}}],"position":{"start":{"line":68,"column":3,"offset":7969},"end":{"line":68,"column":146,"offset":8112},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":7967},"end":{"line":69,"column":1,"offset":8113},"indent":[1]}},{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"gravity = createVector(0, 9) — p5 allows us to ","position":{"start":{"line":70,"column":3,"offset":8116},"end":{"line":70,"column":50,"offset":8163},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/reference/#/p5.Vector","children":[{"type":"text","value":"create vector objects","position":{"start":{"line":70,"column":51,"offset":8164},"end":{"line":70,"column":72,"offset":8185},"indent":[]}}],"position":{"start":{"line":70,"column":50,"offset":8163},"end":{"line":70,"column":113,"offset":8226},"indent":[]}},{"type":"text","value":" with which we can perform vector operations like addition, multiplication, dot-product and cross-product. This is useful when we want to simulate physics like forces.","position":{"start":{"line":70,"column":113,"offset":8226},"end":{"line":70,"column":280,"offset":8393},"indent":[]}}],"position":{"start":{"line":70,"column":3,"offset":8116},"end":{"line":70,"column":280,"offset":8393},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":8114},"end":{"line":71,"column":1,"offset":8394},"indent":[1]}},{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"floor(random(50)) — Here we’re using p5 math functions. floor() takes a real number and rounds it down to the nearest integer. random(arg) produces a random number as small as 0 or up to 49. In this example, we are giving it to the ellipse(x, y, w)function to create randomly sized balls by setting the width to a random number. If we gave another argument it would set the ellipse’s height, but here it infers that we want a circle.","position":{"start":{"line":72,"column":3,"offset":8397},"end":{"line":72,"column":436,"offset":8830},"indent":[]}}],"position":{"start":{"line":72,"column":3,"offset":8397},"end":{"line":72,"column":436,"offset":8830},"indent":[]}}],"position":{"start":{"line":72,"column":1,"offset":8395},"end":{"line":73,"column":1,"offset":8831},"indent":[1]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"stroke(0) — This function sets the colour of our shape’s outline. If you don’t want any border you can add noStroke() .","position":{"start":{"line":74,"column":3,"offset":8834},"end":{"line":74,"column":122,"offset":8953},"indent":[]}}],"position":{"start":{"line":74,"column":3,"offset":8834},"end":{"line":74,"column":122,"offset":8953},"indent":[]}}],"position":{"start":{"line":74,"column":1,"offset":8832},"end":{"line":74,"column":122,"offset":8953},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":7967},"end":{"line":74,"column":122,"offset":8953},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"All you need now is to add some physics to these ideas and you have yourself a bouncing ball animation.","position":{"start":{"line":76,"column":1,"offset":8955},"end":{"line":76,"column":104,"offset":9058},"indent":[]}}],"position":{"start":{"line":76,"column":1,"offset":8955},"end":{"line":76,"column":104,"offset":9058},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Step 3: Experiment with p5","position":{"start":{"line":78,"column":5,"offset":9064},"end":{"line":78,"column":31,"offset":9090},"indent":[]}}],"position":{"start":{"line":78,"column":1,"offset":9060},"end":{"line":78,"column":31,"offset":9090},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Hopefully now you have a good understanding of the p5 fundamentals, but we’ve barely scratched the surface. This last example will use two extra features of p5: interactivity and ","position":{"start":{"line":80,"column":1,"offset":9092},"end":{"line":80,"column":180,"offset":9271},"indent":[]}},{"type":"link","title":null,"url":"http://flafla2.github.io/2014/08/09/perlinnoise.html","children":[{"type":"text","value":"Perlin Noise","position":{"start":{"line":80,"column":181,"offset":9272},"end":{"line":80,"column":193,"offset":9284},"indent":[]}}],"position":{"start":{"line":80,"column":180,"offset":9271},"end":{"line":80,"column":248,"offset":9339},"indent":[]}},{"type":"text","value":". Keep reading to find out more on these two concepts.","position":{"start":{"line":80,"column":248,"offset":9339},"end":{"line":80,"column":302,"offset":9393},"indent":[]}}],"position":{"start":{"line":80,"column":1,"offset":9092},"end":{"line":80,"column":302,"offset":9393},"indent":[]}},{"type":"html","value":"<iframe height='400' scrolling='no' title='Pixel Fire' src='//codepen.io/patricoferris/embed/XZMxmV/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/XZMxmV/'>Pixel Fire</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":82,"column":1,"offset":9395},"end":{"line":83,"column":10,"offset":9861},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"In this CodePen I have created a relatively simple flame model using squares and Perlin Noise. First of all, how do we get user input? Lucky for us p5 has some functions that can help.","position":{"start":{"line":85,"column":1,"offset":9863},"end":{"line":85,"column":185,"offset":10047},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":9863},"end":{"line":85,"column":185,"offset":10047},"indent":[]}},{"type":"html","value":"<high-light className='JavaScript'>\nvar touch = false;\nfunction setup(){\n  createCanvas(640, 640);\n}\nfunction draw(){\n  if(touch){\n    fill(255, 0, 0);\n    rect(mouseX, mouseY, 20, 20);\n  }\n}\nfunction touchStarted(){\n  touch = true;\n}\nfunction touchEnded(){\n  touch = false;\n}\n</high-light>","position":{"start":{"line":87,"column":1,"offset":10049},"end":{"line":104,"column":14,"offset":10339},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"At the top of the code we have declared a boolean “flag” as to whether or not our mouse is being pressed — this allows us to do things if the mouse is being held down. The touchStarted() and touchEnded() are p5 functions that are executed whenever the mouse is pressed or released or the screen is touched and released. Lastly, in our rect() function we have the variables mouseX and mouseY which are p5 variables corresponding to the mouse’s current position. Oddly, these also refer to your ","position":{"start":{"line":106,"column":1,"offset":10341},"end":{"line":106,"column":494,"offset":10834},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/processing/p5.js/issues/1705","children":[{"type":"text","value":"“touch” coordinates","position":{"start":{"line":106,"column":495,"offset":10835},"end":{"line":106,"column":514,"offset":10854},"indent":[]}}],"position":{"start":{"line":106,"column":494,"offset":10834},"end":{"line":106,"column":564,"offset":10904},"indent":[]}},{"type":"text","value":". With all these variables and functions predefined for us we can focus on making visually stunning graphics, whilst not being hampered by having to code extra functions unrelated to the graphic we’re producing.","position":{"start":{"line":106,"column":564,"offset":10904},"end":{"line":106,"column":775,"offset":11115},"indent":[]}}],"position":{"start":{"line":106,"column":1,"offset":10341},"end":{"line":106,"column":775,"offset":11115},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now for the Perlin Noise. In 1983, tired with the artificial look of computer graphics, Ken Perlin developed a type of gradient noise. The basic idea being you create a big grid of gradients randomly and then use the dot product to interpolate between them. In short, we get random values based on the coordinate system we’re drawing on. Great! For each of our squares we can start them at a random position near our mouse, and generate a random upward vector using their position and Perlin Noise. Let’s look at the code:","position":{"start":{"line":108,"column":1,"offset":11117},"end":{"line":108,"column":523,"offset":11639},"indent":[]}}],"position":{"start":{"line":108,"column":1,"offset":11117},"end":{"line":108,"column":523,"offset":11639},"indent":[]}},{"type":"html","value":"<high-light className='JavaScript'>\nfunction Particle(x, y, color){\n  this.pos = createVector(x + random(-10, 10), y + random(-10, 10));\n  this.vel = createVector(floor(random(-1, 1))*noise(this.pos.x), -noise(this.pos.y)*7);\n  this.alpha = 255;\n  this.r = random(170, 255);\n  this.g = random(10, 255);\n  this.b = random(0, 100);\n  this.update = function(){\n    this.pos.add(this.vel);\n    this.alpha -= 5;\n  }\n  this.show = function(){\n    noStroke();\n    fill(this.r, this.g, this.b, this.alpha);\n    rect(this.pos.x, this.pos.y, 5, 5);\n  }\n  this.dead = function(){\n    if(this.alpha < 0){\n      return true;\n    }else{\n      return false;\n    }\n  }\n}\n</high-light>","position":{"start":{"line":110,"column":1,"offset":11641},"end":{"line":135,"column":14,"offset":12309},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Some key things to notice:","position":{"start":{"line":137,"column":1,"offset":12311},"end":{"line":137,"column":27,"offset":12337},"indent":[]}}],"position":{"start":{"line":137,"column":1,"offset":12311},"end":{"line":137,"column":27,"offset":12337},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":true,"children":[{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"noise(this.pos.x) — The Perlin Noise ","position":{"start":{"line":139,"column":3,"offset":12341},"end":{"line":139,"column":40,"offset":12378},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/reference/#/p5/noise","children":[{"type":"text","value":"function","position":{"start":{"line":139,"column":41,"offset":12379},"end":{"line":139,"column":49,"offset":12387},"indent":[]}}],"position":{"start":{"line":139,"column":40,"offset":12378},"end":{"line":139,"column":89,"offset":12427},"indent":[]}},{"type":"text","value":" that gets a random number based on the square’s current x position. It returns a value between 0 and 1.","position":{"start":{"line":139,"column":89,"offset":12427},"end":{"line":139,"column":193,"offset":12531},"indent":[]}}],"position":{"start":{"line":139,"column":3,"offset":12341},"end":{"line":139,"column":193,"offset":12531},"indent":[]}}],"position":{"start":{"line":139,"column":1,"offset":12339},"end":{"line":140,"column":1,"offset":12532},"indent":[1]}},{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"fill(this.r, this.g, this.b, this.alpha) — Here we have extended fill’s ability by including an alpha value for the objects transparency, by decreasing alpha in the update() function we get a nice fade out like a flame.","position":{"start":{"line":141,"column":3,"offset":12535},"end":{"line":141,"column":222,"offset":12754},"indent":[]}}],"position":{"start":{"line":141,"column":3,"offset":12535},"end":{"line":141,"column":222,"offset":12754},"indent":[]}}],"position":{"start":{"line":141,"column":1,"offset":12533},"end":{"line":142,"column":1,"offset":12755},"indent":[1]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"dead() — This function allows us to keep track of which particles have disappeared as their alpha is now less than zero. We can then splice() them out of our array to ensure we’re not drawing an unbounded number of particles over time which would cause performance issues.","position":{"start":{"line":143,"column":3,"offset":12758},"end":{"line":143,"column":275,"offset":13030},"indent":[]}}],"position":{"start":{"line":143,"column":3,"offset":12758},"end":{"line":143,"column":275,"offset":13030},"indent":[]}}],"position":{"start":{"line":143,"column":1,"offset":12756},"end":{"line":143,"column":275,"offset":13030},"indent":[]}}],"position":{"start":{"line":139,"column":1,"offset":12339},"end":{"line":143,"column":275,"offset":13030},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"As a challenge, you can also use blendMode() to make it seem even more realistic — check this ","position":{"start":{"line":145,"column":1,"offset":13032},"end":{"line":145,"column":95,"offset":13126},"indent":[]}},{"type":"link","title":null,"url":"https://codepen.io/anon/pen/YeOaJX","children":[{"type":"text","value":"alteration","position":{"start":{"line":145,"column":96,"offset":13127},"end":{"line":145,"column":106,"offset":13137},"indent":[]}}],"position":{"start":{"line":145,"column":95,"offset":13126},"end":{"line":145,"column":143,"offset":13174},"indent":[]}},{"type":"text","value":" to see it in action.","position":{"start":{"line":145,"column":143,"offset":13174},"end":{"line":145,"column":164,"offset":13195},"indent":[]}}],"position":{"start":{"line":145,"column":1,"offset":13032},"end":{"line":145,"column":164,"offset":13195},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"With only a few concepts and the p5 library, it is incredibly straightforward to start building anything you want. Be sure to checkout what else is possible with the library. Here are few cool ideas to get you started: ","position":{"start":{"line":147,"column":1,"offset":13197},"end":{"line":147,"column":220,"offset":13416},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/examples/3d-geometries.html","children":[{"type":"text","value":"3D graphics","position":{"start":{"line":147,"column":221,"offset":13417},"end":{"line":147,"column":232,"offset":13428},"indent":[]}}],"position":{"start":{"line":147,"column":220,"offset":13416},"end":{"line":147,"column":279,"offset":13475},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":147,"column":279,"offset":13475},"end":{"line":147,"column":281,"offset":13477},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/examples/dom-slider.html","children":[{"type":"text","value":"sliders","position":{"start":{"line":147,"column":282,"offset":13478},"end":{"line":147,"column":289,"offset":13485},"indent":[]}}],"position":{"start":{"line":147,"column":281,"offset":13477},"end":{"line":147,"column":333,"offset":13529},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":147,"column":333,"offset":13529},"end":{"line":147,"column":338,"offset":13534},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/examples/image-load-and-display-image.html","children":[{"type":"text","value":"images","position":{"start":{"line":147,"column":339,"offset":13535},"end":{"line":147,"column":345,"offset":13541},"indent":[]}}],"position":{"start":{"line":147,"column":338,"offset":13534},"end":{"line":147,"column":407,"offset":13603},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":147,"column":407,"offset":13603},"end":{"line":147,"column":408,"offset":13604},"indent":[]}}],"position":{"start":{"line":147,"column":1,"offset":13197},"end":{"line":147,"column":408,"offset":13604},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":149,"column":5,"offset":13610},"end":{"line":149,"column":15,"offset":13620},"indent":[]}}],"position":{"start":{"line":149,"column":1,"offset":13606},"end":{"line":149,"column":15,"offset":13620},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As computers and technology become ubiquitous in our daily lives and an increasing number of professions are now relying on computer literacy, p5.js is a beautiful example of how we can ensure as many people as possible have an entry-point to the wonderful world of computer programming. It also acts as a reminder to some more experienced programmers that creativity and imagination are vital in producing meaningful code and ultimately making the tech world a better place.","position":{"start":{"line":151,"column":1,"offset":13622},"end":{"line":151,"column":476,"offset":14097},"indent":[]}}],"position":{"start":{"line":151,"column":1,"offset":13622},"end":{"line":151,"column":476,"offset":14097},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Hopefully this intro to p5 has convinced you of its usefulness and has encouraged you to start taking your first steps into the world of graphics programming. Here are my recommendations for where to go next:","position":{"start":{"line":153,"column":1,"offset":14099},"end":{"line":153,"column":209,"offset":14307},"indent":[]}}],"position":{"start":{"line":153,"column":1,"offset":14099},"end":{"line":153,"column":209,"offset":14307},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":true,"children":[{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.youtube.com/user/shiffman","children":[{"type":"text","value":"The Coding Train","position":{"start":{"line":155,"column":4,"offset":14312},"end":{"line":155,"column":20,"offset":14328},"indent":[]}}],"position":{"start":{"line":155,"column":3,"offset":14311},"end":{"line":155,"column":60,"offset":14368},"indent":[]}},{"type":"text","value":" — A brilliant YouTube channel by Daniel Shiffman where he teaches JavaScript and p5.js amongst many other incredible things!","position":{"start":{"line":155,"column":60,"offset":14368},"end":{"line":155,"column":185,"offset":14493},"indent":[]}}],"position":{"start":{"line":155,"column":3,"offset":14311},"end":{"line":155,"column":185,"offset":14493},"indent":[]}}],"position":{"start":{"line":155,"column":1,"offset":14309},"end":{"line":156,"column":1,"offset":14494},"indent":[1]}},{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://p5js.org/examples/","children":[{"type":"text","value":"p5js.org ","position":{"start":{"line":157,"column":4,"offset":14498},"end":{"line":157,"column":13,"offset":14507},"indent":[]}}],"position":{"start":{"line":157,"column":3,"offset":14497},"end":{"line":157,"column":42,"offset":14536},"indent":[]}},{"type":"text","value":"— The examples page on this website is full of inspiring projects which you could recreate and extend further.","position":{"start":{"line":157,"column":42,"offset":14536},"end":{"line":157,"column":152,"offset":14646},"indent":[]}}],"position":{"start":{"line":157,"column":3,"offset":14497},"end":{"line":157,"column":152,"offset":14646},"indent":[]}}],"position":{"start":{"line":157,"column":1,"offset":14495},"end":{"line":158,"column":1,"offset":14647},"indent":[1]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.scratchapixel.com/index.php","children":[{"type":"text","value":"Sratchapixel","position":{"start":{"line":159,"column":4,"offset":14651},"end":{"line":159,"column":16,"offset":14663},"indent":[]}}],"position":{"start":{"line":159,"column":3,"offset":14650},"end":{"line":159,"column":58,"offset":14705},"indent":[]}},{"type":"text","value":" — If you feel ready to delve into the deeper concepts and implementations of computer graphics then this website is an incredible resource for you to use.","position":{"start":{"line":159,"column":58,"offset":14705},"end":{"line":159,"column":213,"offset":14860},"indent":[]}}],"position":{"start":{"line":159,"column":3,"offset":14650},"end":{"line":159,"column":213,"offset":14860},"indent":[]}}],"position":{"start":{"line":159,"column":1,"offset":14648},"end":{"line":159,"column":213,"offset":14860},"indent":[]}}],"position":{"start":{"line":155,"column":1,"offset":14309},"end":{"line":159,"column":213,"offset":14860},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"A special thanks to ","position":{"start":{"line":161,"column":1,"offset":14862},"end":{"line":161,"column":21,"offset":14882},"indent":[]}},{"type":"link","title":null,"url":"undefined","children":[{"type":"text","value":"Tom Read Cutting","position":{"start":{"line":161,"column":22,"offset":14883},"end":{"line":161,"column":38,"offset":14899},"indent":[]}}],"position":{"start":{"line":161,"column":21,"offset":14882},"end":{"line":161,"column":50,"offset":14911},"indent":[]}},{"type":"text","value":" for editing this article and ","position":{"start":{"line":161,"column":50,"offset":14911},"end":{"line":161,"column":80,"offset":14941},"indent":[]}},{"type":"link","title":null,"url":"undefined","children":[{"type":"text","value":"Christian Silver","position":{"start":{"line":161,"column":81,"offset":14942},"end":{"line":161,"column":97,"offset":14958},"indent":[]}}],"position":{"start":{"line":161,"column":80,"offset":14941},"end":{"line":161,"column":109,"offset":14970},"indent":[]}},{"type":"text","value":" for helping get it off the ground.","position":{"start":{"line":161,"column":109,"offset":14970},"end":{"line":161,"column":144,"offset":15005},"indent":[]}}],"position":{"start":{"line":161,"column":1,"offset":14862},"end":{"line":161,"column":144,"offset":15005},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":162,"column":1,"offset":15006}}}},{"id":"transformer-remark-markdown-html-ast-e4e44af9bf82b38c4bfc0c7231e88c40-gatsby-remark-imagesgatsby-remark-prismjs-","value":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/patricoferris/image/upload/v1532857964/pf2018/blogposts/27-02-2018/tree.png","alt":"Recursive Tree"},"children":[],"position":{"start":{"line":8,"column":1,"offset":154},"end":{"line":8,"column":122,"offset":275}}}],"position":{"start":{"line":8,"column":1,"offset":154},"end":{"line":8,"column":122,"offset":275}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Graphics and computer programming are two dearly intertwined disciplines. The oscilloscope is often recognised as one of the first examples of “computer graphics”, the cathode-ray versions emitting a beam of electrons onto a phosphorescent screen. By using magnetic fields to change the beam’s direction, we can sweep from left to right and move up and down — the basic idea behind most CG! (I highly recommend watching this ","position":{"start":{"line":10,"column":1,"offset":277},"end":{"line":10,"column":426,"offset":702}}},{"type":"element","tagName":"a","properties":{"href":"https://archive.org/details/introductiontothecathoderayoscilloscope"},"children":[{"type":"text","value":"video","position":{"start":{"line":10,"column":427,"offset":703},"end":{"line":10,"column":432,"offset":708}}}],"position":{"start":{"line":10,"column":426,"offset":702},"end":{"line":10,"column":502,"offset":778}}},{"type":"text","value":" from 1970).","position":{"start":{"line":10,"column":502,"offset":778},"end":{"line":10,"column":514,"offset":790}}}],"position":{"start":{"line":10,"column":1,"offset":277},"end":{"line":10,"column":514,"offset":790}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We’ve come a long way since then — modern day graphics is a complicated science as well as an art, and the barrier to entry is constantly increasing. Graphics programming can be so complex, that a simple program to draw a triangle can be over ","position":{"start":{"line":12,"column":1,"offset":792},"end":{"line":12,"column":244,"offset":1035}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/SaschaWillems/Vulkan/blob/master/examples/triangle/triangle.cpp"},"children":[{"type":"text","value":"1000 lines of code","position":{"start":{"line":12,"column":245,"offset":1036},"end":{"line":12,"column":263,"offset":1054}}}],"position":{"start":{"line":12,"column":244,"offset":1035},"end":{"line":12,"column":348,"offset":1139}}},{"type":"text","value":"! However, this article will introduce you to ","position":{"start":{"line":12,"column":348,"offset":1139},"end":{"line":12,"column":394,"offset":1185}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/"},"children":[{"type":"text","value":"p5.js","position":{"start":{"line":12,"column":395,"offset":1186},"end":{"line":12,"column":400,"offset":1191}}}],"position":{"start":{"line":12,"column":394,"offset":1185},"end":{"line":12,"column":420,"offset":1211}}},{"type":"text","value":" (also known as p5). A simpler, less complex solution for people who want to start making computer graphics, but don’t want the headache of streams of boiler-plate code.","position":{"start":{"line":12,"column":420,"offset":1211},"end":{"line":12,"column":589,"offset":1380}}}],"position":{"start":{"line":12,"column":1,"offset":792},"end":{"line":12,"column":589,"offset":1380}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Straight from the landing page of the p5.js website.","position":{"start":{"line":14,"column":1,"offset":1382},"end":{"line":14,"column":53,"offset":1434}}}],"position":{"start":{"line":14,"column":1,"offset":1382},"end":{"line":14,"column":53,"offset":1434}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"…make coding accessible for artists, designers, educators and beginners…","position":{"start":{"line":15,"column":5,"offset":1439},"end":{"line":15,"column":77,"offset":1511}}}],"position":{"start":{"line":15,"column":3,"offset":1437},"end":{"line":15,"column":77,"offset":1511}}},{"type":"text","value":"\n"}],"position":{"start":{"line":15,"column":1,"offset":1435},"end":{"line":15,"column":77,"offset":1511}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"p5.js is the result of hard-work of the ","position":{"start":{"line":17,"column":1,"offset":1513},"end":{"line":17,"column":41,"offset":1553}}},{"type":"element","tagName":"a","properties":{"href":"https://processingfoundation.org/"},"children":[{"type":"text","value":"Processing Foundation","position":{"start":{"line":17,"column":42,"offset":1554},"end":{"line":17,"column":63,"offset":1575}}}],"position":{"start":{"line":17,"column":41,"offset":1553},"end":{"line":17,"column":99,"offset":1611}}},{"type":"text","value":", a group focused on spreading computer and visual literacy. It distills their ","position":{"start":{"line":17,"column":99,"offset":1611},"end":{"line":17,"column":178,"offset":1690}}},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/Processing_(programming_language)"},"children":[{"type":"text","value":"Processing","position":{"start":{"line":17,"column":179,"offset":1691},"end":{"line":17,"column":189,"offset":1701}}}],"position":{"start":{"line":17,"column":178,"offset":1690},"end":{"line":17,"column":255,"offset":1767}}},{"type":"text","value":" language into a JavaScript library that makes creating graphics easy and accessible whilst providing an ideal platform to springboard people’s careers in computer graphics. It should be mentioned now that a lot of inspiration has been taken from ","position":{"start":{"line":17,"column":255,"offset":1767},"end":{"line":17,"column":502,"offset":2014}}},{"type":"element","tagName":"a","properties":{"href":"http://shiffman.net/"},"children":[{"type":"text","value":"Daniel Shiffman’s","position":{"start":{"line":17,"column":503,"offset":2015},"end":{"line":17,"column":520,"offset":2032}}}],"position":{"start":{"line":17,"column":502,"offset":2014},"end":{"line":17,"column":543,"offset":2055}}},{"type":"text","value":" p5 projects (from the ","position":{"start":{"line":17,"column":543,"offset":2055},"end":{"line":17,"column":566,"offset":2078}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/CodingTrain/website/tree/master/CodingChallenges/CC_03_Snake_game_p5.js"},"children":[{"type":"text","value":"classic snake game","position":{"start":{"line":17,"column":567,"offset":2079},"end":{"line":17,"column":585,"offset":2097}}}],"position":{"start":{"line":17,"column":566,"offset":2078},"end":{"line":17,"column":678,"offset":2190}}},{"type":"text","value":", to a ","position":{"start":{"line":17,"column":678,"offset":2190},"end":{"line":17,"column":685,"offset":2197}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/CodingTrain/website/tree/master/CodingChallenges/CC_93_DoublePendulum_p5.js"},"children":[{"type":"text","value":"double pendulum","position":{"start":{"line":17,"column":686,"offset":2198},"end":{"line":17,"column":701,"offset":2213}}}],"position":{"start":{"line":17,"column":685,"offset":2197},"end":{"line":17,"column":798,"offset":2310}}},{"type":"text","value":"). I can’t urge you enough to follow these projects to really improve your understanding of coding concepts and the p5 library.","position":{"start":{"line":17,"column":798,"offset":2310},"end":{"line":17,"column":925,"offset":2437}}}],"position":{"start":{"line":17,"column":1,"offset":1513},"end":{"line":17,"column":925,"offset":2437}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Some prerequisites:","position":{"start":{"line":19,"column":5,"offset":2443},"end":{"line":19,"column":24,"offset":2462}}}],"position":{"start":{"line":19,"column":1,"offset":2439},"end":{"line":19,"column":24,"offset":2462}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Before jumping into the p5 code I first want to make clear that there is assumed knowledge of HTML5 and JavaScript including arrays, functions, variables etc. in the rest of this article. If you have a good grasp of JavaScript then skip to the p5 code below, otherwise here are few resources to get you up to scratch.","position":{"start":{"line":21,"column":1,"offset":2464},"end":{"line":21,"column":318,"offset":2781}}}],"position":{"start":{"line":21,"column":1,"offset":2464},"end":{"line":21,"column":318,"offset":2781}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.youtube.com/watch?v=spIVWmv1jnw"},"children":[{"type":"text","value":"HaC Intro to Programming","position":{"start":{"line":23,"column":4,"offset":2786},"end":{"line":23,"column":28,"offset":2810}}}],"position":{"start":{"line":23,"column":3,"offset":2785},"end":{"line":23,"column":74,"offset":2856}}},{"type":"text","value":" — A workshop that is being run by Hackers at Cambridge to help anyone start learning to program (which uses JavaScript).","position":{"start":{"line":23,"column":74,"offset":2856},"end":{"line":23,"column":195,"offset":2977}}}],"position":{"start":{"line":23,"column":3,"offset":2785},"end":{"line":23,"column":195,"offset":2977}}},{"type":"text","value":"\n"}],"position":{"start":{"line":23,"column":1,"offset":2783},"end":{"line":24,"column":1,"offset":2978}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.codecademy.com/learn/introduction-to-javascript"},"children":[{"type":"text","value":"Codecademy","position":{"start":{"line":25,"column":4,"offset":2982},"end":{"line":25,"column":14,"offset":2992}}}],"position":{"start":{"line":25,"column":3,"offset":2981},"end":{"line":25,"column":76,"offset":3054}}},{"type":"text","value":" — a great resource for learning how to code with instant feedback in your browser.","position":{"start":{"line":25,"column":76,"offset":3054},"end":{"line":25,"column":159,"offset":3137}}}],"position":{"start":{"line":25,"column":3,"offset":2981},"end":{"line":25,"column":159,"offset":3137}}},{"type":"text","value":"\n"}],"position":{"start":{"line":25,"column":1,"offset":2979},"end":{"line":26,"column":1,"offset":3138}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Web/JavaScript"},"children":[{"type":"text","value":"MDN","position":{"start":{"line":27,"column":4,"offset":3142},"end":{"line":27,"column":7,"offset":3145}}}],"position":{"start":{"line":27,"column":3,"offset":3141},"end":{"line":27,"column":65,"offset":3203}}},{"type":"text","value":" — a great resource for learning about all aspects of web development.","position":{"start":{"line":27,"column":65,"offset":3203},"end":{"line":27,"column":135,"offset":3273}}}],"position":{"start":{"line":27,"column":3,"offset":3141},"end":{"line":27,"column":135,"offset":3273}}},{"type":"text","value":"\n"}],"position":{"start":{"line":27,"column":1,"offset":3139},"end":{"line":28,"column":1,"offset":3274}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://codepen.io/"},"children":[{"type":"text","value":"Codepen","position":{"start":{"line":29,"column":4,"offset":3278},"end":{"line":29,"column":11,"offset":3285}}}],"position":{"start":{"line":29,"column":3,"offset":3277},"end":{"line":29,"column":33,"offset":3307}}},{"type":"text","value":" — a brilliant online text-editor for creating cool projects in HTML, CSS and JavaScript. Equally good for getting inspiration from a lot of talented users. Another possible solution would be ","position":{"start":{"line":29,"column":33,"offset":3307},"end":{"line":29,"column":225,"offset":3499}}},{"type":"element","tagName":"a","properties":{"href":"https://jsfiddle.net/"},"children":[{"type":"text","value":"JSFiddle","position":{"start":{"line":29,"column":226,"offset":3500},"end":{"line":29,"column":234,"offset":3508}}}],"position":{"start":{"line":29,"column":225,"offset":3499},"end":{"line":29,"column":258,"offset":3532}}},{"type":"text","value":".","position":{"start":{"line":29,"column":258,"offset":3532},"end":{"line":29,"column":259,"offset":3533}}}],"position":{"start":{"line":29,"column":3,"offset":3277},"end":{"line":29,"column":259,"offset":3533}}},{"type":"text","value":"\n"}],"position":{"start":{"line":29,"column":1,"offset":3275},"end":{"line":29,"column":259,"offset":3533}}},{"type":"text","value":"\n"}],"position":{"start":{"line":23,"column":1,"offset":2783},"end":{"line":29,"column":259,"offset":3533}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"What follows is a series of steps that will introduce you to p5 concepts. With code examples and explanations I hope to give you enough information to understand the ideas, but to fully grasp the concepts you will have to dive into the code, experiment with it, break it and learn from it. So without further ado, let’s get coding.","position":{"start":{"line":31,"column":1,"offset":3535},"end":{"line":31,"column":332,"offset":3866}}}],"position":{"start":{"line":31,"column":1,"offset":3535},"end":{"line":31,"column":332,"offset":3866}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Step 1: The Setup","position":{"start":{"line":33,"column":5,"offset":3872},"end":{"line":33,"column":22,"offset":3889}}}],"position":{"start":{"line":33,"column":1,"offset":3868},"end":{"line":33,"column":22,"offset":3889}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//Initialisation of canvas, objects, variables etc.</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//The drawing loop - updates at a constant rate declared in setup</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":35,"column":1,"offset":3891},"end":{"line":42,"column":4,"offset":4069}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"p5 is really simple to setup once you know what to do. There are two files shown above — an index.html and a template.js. The index.html file gets the libraries for us and the template.js is the barebones structure of a p5 project and at the moment it does nothing! Within this we have two functions:","position":{"start":{"line":44,"column":1,"offset":4071},"end":{"line":44,"column":301,"offset":4371}}}],"position":{"start":{"line":44,"column":1,"offset":4071},"end":{"line":44,"column":301,"offset":4371}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"setup() — a function for creating what we will need for our graphic or project. Like creating a canvas, initialising some objects or arrays etc.","position":{"start":{"line":46,"column":3,"offset":4375},"end":{"line":46,"column":147,"offset":4519}}}],"position":{"start":{"line":46,"column":3,"offset":4375},"end":{"line":46,"column":147,"offset":4519}}},{"type":"text","value":"\n"}],"position":{"start":{"line":46,"column":1,"offset":4373},"end":{"line":47,"column":1,"offset":4520}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"draw() — a function which will be called periodically like a loop. This is where will call draw functions and update functions to make graphics and animations.","position":{"start":{"line":48,"column":3,"offset":4523},"end":{"line":48,"column":162,"offset":4682}}}],"position":{"start":{"line":48,"column":3,"offset":4523},"end":{"line":48,"column":162,"offset":4682}}},{"type":"text","value":"\n"}],"position":{"start":{"line":48,"column":1,"offset":4521},"end":{"line":48,"column":162,"offset":4682}}},{"type":"text","value":"\n"}],"position":{"start":{"line":46,"column":1,"offset":4373},"end":{"line":48,"column":162,"offset":4682}}},{"type":"text","value":"\n"},{"type":"raw","value":"<iframe height='400' scrolling='no' title='Simple Triangle Tutorial' src='//codepen.io/patricoferris/embed/dddxjr/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/dddxjr/'>Simple Triangle Tutorial</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":50,"column":1,"offset":4684},"end":{"line":51,"column":10,"offset":5178}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let’s first look at the setup function. We used the p5 function createCanvas(width, height) which created and initialised a ","position":{"start":{"line":53,"column":1,"offset":5180},"end":{"line":53,"column":125,"offset":5304}}},{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API"},"children":[{"type":"text","value":"canvas","position":{"start":{"line":53,"column":126,"offset":5305},"end":{"line":53,"column":132,"offset":5311}}}],"position":{"start":{"line":53,"column":125,"offset":5304},"end":{"line":53,"column":194,"offset":5373}}},{"type":"text","value":" with arguments width and height. Now within our setup() and createCanvas() functions we can reference the variables width and height without ever instantiating them!","position":{"start":{"line":53,"column":194,"offset":5373},"end":{"line":53,"column":360,"offset":5539}}}],"position":{"start":{"line":53,"column":1,"offset":5180},"end":{"line":53,"column":360,"offset":5539}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Next comes the meaty, draw function. I have purposefully put extra code in here so we can learn more about what p5 has to offer. Firstly always remember that draw() is a loop that runs from top to bottom. Initially, we set the background (of our canvas) to white with background(255) which is the same as background(255, 255, 255) (maximising the red, green and blue values to give white). This may seem simple, but implicitly we are also clearing our canvas every loop… in one line of code! This will be useful for animations later as we want to redraw objects in a new location rather than have the ","position":{"start":{"line":55,"column":1,"offset":5541},"end":{"line":55,"column":602,"offset":6142}}},{"type":"element","tagName":"a","properties":{"href":"https://codepen.io/patricoferris/pen/paxZaw"},"children":[{"type":"text","value":"build-up on the same canvas","position":{"start":{"line":55,"column":603,"offset":6143},"end":{"line":55,"column":630,"offset":6170}}}],"position":{"start":{"line":55,"column":602,"offset":6142},"end":{"line":55,"column":676,"offset":6216}}},{"type":"text","value":" (click to see it go spectacularly wrong). Next is a translate(width/2, height/2) which moves our current drawing location to the centre of our canvas. We then declare the fill colour of our triangle with fill(255, 0, 0)(making it red).","position":{"start":{"line":55,"column":676,"offset":6216},"end":{"line":55,"column":912,"offset":6452}}}],"position":{"start":{"line":55,"column":1,"offset":5541},"end":{"line":55,"column":912,"offset":6452}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We want to create an equilateral triangle with side length s. The triangle itself is a function that takes the vertex coordinates as arguments — triangle(x1, y1, x2, y2, x3, y3) and in this example starting from the centre we have one vertex at (-s/2, 0) another at (s/2, 0) giving a bottom length of s . Now comes the trickier part. A very important aspect of most computer graphics is that the coordinate system starts in the top left corner (or wherever your origin is) and x increases left to right, whilst y increases top to bottom. To move of the screen we need a negative y value. Our last coordinate is given as (0, -sin(PI/3)) (if you’re stuck, think about cutting the triangle in two and using trigonometry).","position":{"start":{"line":57,"column":1,"offset":6454},"end":{"line":57,"column":719,"offset":7172}}}],"position":{"start":{"line":57,"column":1,"offset":6454},"end":{"line":57,"column":719,"offset":7172}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Step 2: Get Creative","position":{"start":{"line":59,"column":5,"offset":7178},"end":{"line":59,"column":25,"offset":7198}}}],"position":{"start":{"line":59,"column":1,"offset":7174},"end":{"line":59,"column":25,"offset":7198}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We’ve learnt how to set up our canvas and start drawing. Armed with the p5 ","position":{"start":{"line":61,"column":1,"offset":7200},"end":{"line":61,"column":76,"offset":7275}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/reference/"},"children":[{"type":"text","value":"reference page","position":{"start":{"line":61,"column":77,"offset":7276},"end":{"line":61,"column":91,"offset":7290}}}],"position":{"start":{"line":61,"column":76,"offset":7275},"end":{"line":61,"column":121,"offset":7320}}},{"type":"text","value":" and our creativity, we can make some truly stunning graphics. How about a bouncing ball animation?","position":{"start":{"line":61,"column":121,"offset":7320},"end":{"line":61,"column":220,"offset":7419}}}],"position":{"start":{"line":61,"column":1,"offset":7200},"end":{"line":61,"column":220,"offset":7419}}},{"type":"text","value":"\n"},{"type":"raw","value":"<iframe height='400' scrolling='no' title='Bouncing Balls' src='//codepen.io/patricoferris/embed/PQpOrB/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/PQpOrB/'>Bouncing Balls</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":63,"column":1,"offset":7421},"end":{"line":64,"column":10,"offset":7895}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let’s look at the interesting p5 aspects that we didn’t know before:","position":{"start":{"line":66,"column":1,"offset":7897},"end":{"line":66,"column":69,"offset":7965}}}],"position":{"start":{"line":66,"column":1,"offset":7897},"end":{"line":66,"column":69,"offset":7965}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"frameRate(20) — This enables us to specify the frame rate of our drawing loop, that is, how many times per second it redraws everything for us.","position":{"start":{"line":68,"column":3,"offset":7969},"end":{"line":68,"column":146,"offset":8112}}}],"position":{"start":{"line":68,"column":3,"offset":7969},"end":{"line":68,"column":146,"offset":8112}}},{"type":"text","value":"\n"}],"position":{"start":{"line":68,"column":1,"offset":7967},"end":{"line":69,"column":1,"offset":8113}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"gravity = createVector(0, 9) — p5 allows us to ","position":{"start":{"line":70,"column":3,"offset":8116},"end":{"line":70,"column":50,"offset":8163}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/reference/#/p5.Vector"},"children":[{"type":"text","value":"create vector objects","position":{"start":{"line":70,"column":51,"offset":8164},"end":{"line":70,"column":72,"offset":8185}}}],"position":{"start":{"line":70,"column":50,"offset":8163},"end":{"line":70,"column":113,"offset":8226}}},{"type":"text","value":" with which we can perform vector operations like addition, multiplication, dot-product and cross-product. This is useful when we want to simulate physics like forces.","position":{"start":{"line":70,"column":113,"offset":8226},"end":{"line":70,"column":280,"offset":8393}}}],"position":{"start":{"line":70,"column":3,"offset":8116},"end":{"line":70,"column":280,"offset":8393}}},{"type":"text","value":"\n"}],"position":{"start":{"line":70,"column":1,"offset":8114},"end":{"line":71,"column":1,"offset":8394}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"floor(random(50)) — Here we’re using p5 math functions. floor() takes a real number and rounds it down to the nearest integer. random(arg) produces a random number as small as 0 or up to 49. In this example, we are giving it to the ellipse(x, y, w)function to create randomly sized balls by setting the width to a random number. If we gave another argument it would set the ellipse’s height, but here it infers that we want a circle.","position":{"start":{"line":72,"column":3,"offset":8397},"end":{"line":72,"column":436,"offset":8830}}}],"position":{"start":{"line":72,"column":3,"offset":8397},"end":{"line":72,"column":436,"offset":8830}}},{"type":"text","value":"\n"}],"position":{"start":{"line":72,"column":1,"offset":8395},"end":{"line":73,"column":1,"offset":8831}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"stroke(0) — This function sets the colour of our shape’s outline. If you don’t want any border you can add noStroke() .","position":{"start":{"line":74,"column":3,"offset":8834},"end":{"line":74,"column":122,"offset":8953}}}],"position":{"start":{"line":74,"column":3,"offset":8834},"end":{"line":74,"column":122,"offset":8953}}},{"type":"text","value":"\n"}],"position":{"start":{"line":74,"column":1,"offset":8832},"end":{"line":74,"column":122,"offset":8953}}},{"type":"text","value":"\n"}],"position":{"start":{"line":68,"column":1,"offset":7967},"end":{"line":74,"column":122,"offset":8953}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"All you need now is to add some physics to these ideas and you have yourself a bouncing ball animation.","position":{"start":{"line":76,"column":1,"offset":8955},"end":{"line":76,"column":104,"offset":9058}}}],"position":{"start":{"line":76,"column":1,"offset":8955},"end":{"line":76,"column":104,"offset":9058}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Step 3: Experiment with p5","position":{"start":{"line":78,"column":5,"offset":9064},"end":{"line":78,"column":31,"offset":9090}}}],"position":{"start":{"line":78,"column":1,"offset":9060},"end":{"line":78,"column":31,"offset":9090}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Hopefully now you have a good understanding of the p5 fundamentals, but we’ve barely scratched the surface. This last example will use two extra features of p5: interactivity and ","position":{"start":{"line":80,"column":1,"offset":9092},"end":{"line":80,"column":180,"offset":9271}}},{"type":"element","tagName":"a","properties":{"href":"http://flafla2.github.io/2014/08/09/perlinnoise.html"},"children":[{"type":"text","value":"Perlin Noise","position":{"start":{"line":80,"column":181,"offset":9272},"end":{"line":80,"column":193,"offset":9284}}}],"position":{"start":{"line":80,"column":180,"offset":9271},"end":{"line":80,"column":248,"offset":9339}}},{"type":"text","value":". Keep reading to find out more on these two concepts.","position":{"start":{"line":80,"column":248,"offset":9339},"end":{"line":80,"column":302,"offset":9393}}}],"position":{"start":{"line":80,"column":1,"offset":9092},"end":{"line":80,"column":302,"offset":9393}}},{"type":"text","value":"\n"},{"type":"raw","value":"<iframe height='400' scrolling='no' title='Pixel Fire' src='//codepen.io/patricoferris/embed/XZMxmV/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/XZMxmV/'>Pixel Fire</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":82,"column":1,"offset":9395},"end":{"line":83,"column":10,"offset":9861}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In this CodePen I have created a relatively simple flame model using squares and Perlin Noise. First of all, how do we get user input? Lucky for us p5 has some functions that can help.","position":{"start":{"line":85,"column":1,"offset":9863},"end":{"line":85,"column":185,"offset":10047}}}],"position":{"start":{"line":85,"column":1,"offset":9863},"end":{"line":85,"column":185,"offset":10047}}},{"type":"text","value":"\n"},{"type":"raw","value":"<high-light className='JavaScript'>\nvar touch = false;\nfunction setup(){\n  createCanvas(640, 640);\n}\nfunction draw(){\n  if(touch){\n    fill(255, 0, 0);\n    rect(mouseX, mouseY, 20, 20);\n  }\n}\nfunction touchStarted(){\n  touch = true;\n}\nfunction touchEnded(){\n  touch = false;\n}\n</high-light>","position":{"start":{"line":87,"column":1,"offset":10049},"end":{"line":104,"column":14,"offset":10339}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"At the top of the code we have declared a boolean “flag” as to whether or not our mouse is being pressed — this allows us to do things if the mouse is being held down. The touchStarted() and touchEnded() are p5 functions that are executed whenever the mouse is pressed or released or the screen is touched and released. Lastly, in our rect() function we have the variables mouseX and mouseY which are p5 variables corresponding to the mouse’s current position. Oddly, these also refer to your ","position":{"start":{"line":106,"column":1,"offset":10341},"end":{"line":106,"column":494,"offset":10834}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/processing/p5.js/issues/1705"},"children":[{"type":"text","value":"“touch” coordinates","position":{"start":{"line":106,"column":495,"offset":10835},"end":{"line":106,"column":514,"offset":10854}}}],"position":{"start":{"line":106,"column":494,"offset":10834},"end":{"line":106,"column":564,"offset":10904}}},{"type":"text","value":". With all these variables and functions predefined for us we can focus on making visually stunning graphics, whilst not being hampered by having to code extra functions unrelated to the graphic we’re producing.","position":{"start":{"line":106,"column":564,"offset":10904},"end":{"line":106,"column":775,"offset":11115}}}],"position":{"start":{"line":106,"column":1,"offset":10341},"end":{"line":106,"column":775,"offset":11115}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now for the Perlin Noise. In 1983, tired with the artificial look of computer graphics, Ken Perlin developed a type of gradient noise. The basic idea being you create a big grid of gradients randomly and then use the dot product to interpolate between them. In short, we get random values based on the coordinate system we’re drawing on. Great! For each of our squares we can start them at a random position near our mouse, and generate a random upward vector using their position and Perlin Noise. Let’s look at the code:","position":{"start":{"line":108,"column":1,"offset":11117},"end":{"line":108,"column":523,"offset":11639}}}],"position":{"start":{"line":108,"column":1,"offset":11117},"end":{"line":108,"column":523,"offset":11639}}},{"type":"text","value":"\n"},{"type":"raw","value":"<high-light className='JavaScript'>\nfunction Particle(x, y, color){\n  this.pos = createVector(x + random(-10, 10), y + random(-10, 10));\n  this.vel = createVector(floor(random(-1, 1))*noise(this.pos.x), -noise(this.pos.y)*7);\n  this.alpha = 255;\n  this.r = random(170, 255);\n  this.g = random(10, 255);\n  this.b = random(0, 100);\n  this.update = function(){\n    this.pos.add(this.vel);\n    this.alpha -= 5;\n  }\n  this.show = function(){\n    noStroke();\n    fill(this.r, this.g, this.b, this.alpha);\n    rect(this.pos.x, this.pos.y, 5, 5);\n  }\n  this.dead = function(){\n    if(this.alpha < 0){\n      return true;\n    }else{\n      return false;\n    }\n  }\n}\n</high-light>","position":{"start":{"line":110,"column":1,"offset":11641},"end":{"line":135,"column":14,"offset":12309}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Some key things to notice:","position":{"start":{"line":137,"column":1,"offset":12311},"end":{"line":137,"column":27,"offset":12337}}}],"position":{"start":{"line":137,"column":1,"offset":12311},"end":{"line":137,"column":27,"offset":12337}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"noise(this.pos.x) — The Perlin Noise ","position":{"start":{"line":139,"column":3,"offset":12341},"end":{"line":139,"column":40,"offset":12378}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/reference/#/p5/noise"},"children":[{"type":"text","value":"function","position":{"start":{"line":139,"column":41,"offset":12379},"end":{"line":139,"column":49,"offset":12387}}}],"position":{"start":{"line":139,"column":40,"offset":12378},"end":{"line":139,"column":89,"offset":12427}}},{"type":"text","value":" that gets a random number based on the square’s current x position. It returns a value between 0 and 1.","position":{"start":{"line":139,"column":89,"offset":12427},"end":{"line":139,"column":193,"offset":12531}}}],"position":{"start":{"line":139,"column":3,"offset":12341},"end":{"line":139,"column":193,"offset":12531}}},{"type":"text","value":"\n"}],"position":{"start":{"line":139,"column":1,"offset":12339},"end":{"line":140,"column":1,"offset":12532}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"fill(this.r, this.g, this.b, this.alpha) — Here we have extended fill’s ability by including an alpha value for the objects transparency, by decreasing alpha in the update() function we get a nice fade out like a flame.","position":{"start":{"line":141,"column":3,"offset":12535},"end":{"line":141,"column":222,"offset":12754}}}],"position":{"start":{"line":141,"column":3,"offset":12535},"end":{"line":141,"column":222,"offset":12754}}},{"type":"text","value":"\n"}],"position":{"start":{"line":141,"column":1,"offset":12533},"end":{"line":142,"column":1,"offset":12755}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"dead() — This function allows us to keep track of which particles have disappeared as their alpha is now less than zero. We can then splice() them out of our array to ensure we’re not drawing an unbounded number of particles over time which would cause performance issues.","position":{"start":{"line":143,"column":3,"offset":12758},"end":{"line":143,"column":275,"offset":13030}}}],"position":{"start":{"line":143,"column":3,"offset":12758},"end":{"line":143,"column":275,"offset":13030}}},{"type":"text","value":"\n"}],"position":{"start":{"line":143,"column":1,"offset":12756},"end":{"line":143,"column":275,"offset":13030}}},{"type":"text","value":"\n"}],"position":{"start":{"line":139,"column":1,"offset":12339},"end":{"line":143,"column":275,"offset":13030}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As a challenge, you can also use blendMode() to make it seem even more realistic — check this ","position":{"start":{"line":145,"column":1,"offset":13032},"end":{"line":145,"column":95,"offset":13126}}},{"type":"element","tagName":"a","properties":{"href":"https://codepen.io/anon/pen/YeOaJX"},"children":[{"type":"text","value":"alteration","position":{"start":{"line":145,"column":96,"offset":13127},"end":{"line":145,"column":106,"offset":13137}}}],"position":{"start":{"line":145,"column":95,"offset":13126},"end":{"line":145,"column":143,"offset":13174}}},{"type":"text","value":" to see it in action.","position":{"start":{"line":145,"column":143,"offset":13174},"end":{"line":145,"column":164,"offset":13195}}}],"position":{"start":{"line":145,"column":1,"offset":13032},"end":{"line":145,"column":164,"offset":13195}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"With only a few concepts and the p5 library, it is incredibly straightforward to start building anything you want. Be sure to checkout what else is possible with the library. Here are few cool ideas to get you started: ","position":{"start":{"line":147,"column":1,"offset":13197},"end":{"line":147,"column":220,"offset":13416}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/examples/3d-geometries.html"},"children":[{"type":"text","value":"3D graphics","position":{"start":{"line":147,"column":221,"offset":13417},"end":{"line":147,"column":232,"offset":13428}}}],"position":{"start":{"line":147,"column":220,"offset":13416},"end":{"line":147,"column":279,"offset":13475}}},{"type":"text","value":", ","position":{"start":{"line":147,"column":279,"offset":13475},"end":{"line":147,"column":281,"offset":13477}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/examples/dom-slider.html"},"children":[{"type":"text","value":"sliders","position":{"start":{"line":147,"column":282,"offset":13478},"end":{"line":147,"column":289,"offset":13485}}}],"position":{"start":{"line":147,"column":281,"offset":13477},"end":{"line":147,"column":333,"offset":13529}}},{"type":"text","value":" and ","position":{"start":{"line":147,"column":333,"offset":13529},"end":{"line":147,"column":338,"offset":13534}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/examples/image-load-and-display-image.html"},"children":[{"type":"text","value":"images","position":{"start":{"line":147,"column":339,"offset":13535},"end":{"line":147,"column":345,"offset":13541}}}],"position":{"start":{"line":147,"column":338,"offset":13534},"end":{"line":147,"column":407,"offset":13603}}},{"type":"text","value":".","position":{"start":{"line":147,"column":407,"offset":13603},"end":{"line":147,"column":408,"offset":13604}}}],"position":{"start":{"line":147,"column":1,"offset":13197},"end":{"line":147,"column":408,"offset":13604}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":149,"column":5,"offset":13610},"end":{"line":149,"column":15,"offset":13620}}}],"position":{"start":{"line":149,"column":1,"offset":13606},"end":{"line":149,"column":15,"offset":13620}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As computers and technology become ubiquitous in our daily lives and an increasing number of professions are now relying on computer literacy, p5.js is a beautiful example of how we can ensure as many people as possible have an entry-point to the wonderful world of computer programming. It also acts as a reminder to some more experienced programmers that creativity and imagination are vital in producing meaningful code and ultimately making the tech world a better place.","position":{"start":{"line":151,"column":1,"offset":13622},"end":{"line":151,"column":476,"offset":14097}}}],"position":{"start":{"line":151,"column":1,"offset":13622},"end":{"line":151,"column":476,"offset":14097}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Hopefully this intro to p5 has convinced you of its usefulness and has encouraged you to start taking your first steps into the world of graphics programming. Here are my recommendations for where to go next:","position":{"start":{"line":153,"column":1,"offset":14099},"end":{"line":153,"column":209,"offset":14307}}}],"position":{"start":{"line":153,"column":1,"offset":14099},"end":{"line":153,"column":209,"offset":14307}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.youtube.com/user/shiffman"},"children":[{"type":"text","value":"The Coding Train","position":{"start":{"line":155,"column":4,"offset":14312},"end":{"line":155,"column":20,"offset":14328}}}],"position":{"start":{"line":155,"column":3,"offset":14311},"end":{"line":155,"column":60,"offset":14368}}},{"type":"text","value":" — A brilliant YouTube channel by Daniel Shiffman where he teaches JavaScript and p5.js amongst many other incredible things!","position":{"start":{"line":155,"column":60,"offset":14368},"end":{"line":155,"column":185,"offset":14493}}}],"position":{"start":{"line":155,"column":3,"offset":14311},"end":{"line":155,"column":185,"offset":14493}}},{"type":"text","value":"\n"}],"position":{"start":{"line":155,"column":1,"offset":14309},"end":{"line":156,"column":1,"offset":14494}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/examples/"},"children":[{"type":"text","value":"p5js.org ","position":{"start":{"line":157,"column":4,"offset":14498},"end":{"line":157,"column":13,"offset":14507}}}],"position":{"start":{"line":157,"column":3,"offset":14497},"end":{"line":157,"column":42,"offset":14536}}},{"type":"text","value":"— The examples page on this website is full of inspiring projects which you could recreate and extend further.","position":{"start":{"line":157,"column":42,"offset":14536},"end":{"line":157,"column":152,"offset":14646}}}],"position":{"start":{"line":157,"column":3,"offset":14497},"end":{"line":157,"column":152,"offset":14646}}},{"type":"text","value":"\n"}],"position":{"start":{"line":157,"column":1,"offset":14495},"end":{"line":158,"column":1,"offset":14647}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.scratchapixel.com/index.php"},"children":[{"type":"text","value":"Sratchapixel","position":{"start":{"line":159,"column":4,"offset":14651},"end":{"line":159,"column":16,"offset":14663}}}],"position":{"start":{"line":159,"column":3,"offset":14650},"end":{"line":159,"column":58,"offset":14705}}},{"type":"text","value":" — If you feel ready to delve into the deeper concepts and implementations of computer graphics then this website is an incredible resource for you to use.","position":{"start":{"line":159,"column":58,"offset":14705},"end":{"line":159,"column":213,"offset":14860}}}],"position":{"start":{"line":159,"column":3,"offset":14650},"end":{"line":159,"column":213,"offset":14860}}},{"type":"text","value":"\n"}],"position":{"start":{"line":159,"column":1,"offset":14648},"end":{"line":159,"column":213,"offset":14860}}},{"type":"text","value":"\n"}],"position":{"start":{"line":155,"column":1,"offset":14309},"end":{"line":159,"column":213,"offset":14860}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A special thanks to ","position":{"start":{"line":161,"column":1,"offset":14862},"end":{"line":161,"column":21,"offset":14882}}},{"type":"element","tagName":"a","properties":{"href":"undefined"},"children":[{"type":"text","value":"Tom Read Cutting","position":{"start":{"line":161,"column":22,"offset":14883},"end":{"line":161,"column":38,"offset":14899}}}],"position":{"start":{"line":161,"column":21,"offset":14882},"end":{"line":161,"column":50,"offset":14911}}},{"type":"text","value":" for editing this article and ","position":{"start":{"line":161,"column":50,"offset":14911},"end":{"line":161,"column":80,"offset":14941}}},{"type":"element","tagName":"a","properties":{"href":"undefined"},"children":[{"type":"text","value":"Christian Silver","position":{"start":{"line":161,"column":81,"offset":14942},"end":{"line":161,"column":97,"offset":14958}}}],"position":{"start":{"line":161,"column":80,"offset":14941},"end":{"line":161,"column":109,"offset":14970}}},{"type":"text","value":" for helping get it off the ground.","position":{"start":{"line":161,"column":109,"offset":14970},"end":{"line":161,"column":144,"offset":15005}}}],"position":{"start":{"line":161,"column":1,"offset":14862},"end":{"line":161,"column":144,"offset":15005}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":162,"column":1,"offset":15006}}}},{"id":"transformer-remark-markdown-html-e4e44af9bf82b38c4bfc0c7231e88c40-gatsby-remark-imagesgatsby-remark-prismjs-","value":"<p><img src=\"https://res.cloudinary.com/patricoferris/image/upload/v1532857964/pf2018/blogposts/27-02-2018/tree.png\" alt=\"Recursive Tree\"></p>\n<p>Graphics and computer programming are two dearly intertwined disciplines. The oscilloscope is often recognised as one of the first examples of “computer graphics”, the cathode-ray versions emitting a beam of electrons onto a phosphorescent screen. By using magnetic fields to change the beam’s direction, we can sweep from left to right and move up and down — the basic idea behind most CG! (I highly recommend watching this <a href=\"https://archive.org/details/introductiontothecathoderayoscilloscope\">video</a> from 1970).</p>\n<p>We’ve come a long way since then — modern day graphics is a complicated science as well as an art, and the barrier to entry is constantly increasing. Graphics programming can be so complex, that a simple program to draw a triangle can be over <a href=\"https://github.com/SaschaWillems/Vulkan/blob/master/examples/triangle/triangle.cpp\">1000 lines of code</a>! However, this article will introduce you to <a href=\"https://p5js.org/\">p5.js</a> (also known as p5). A simpler, less complex solution for people who want to start making computer graphics, but don’t want the headache of streams of boiler-plate code.</p>\n<p>Straight from the landing page of the p5.js website.</p>\n<blockquote>\n<h1>…make coding accessible for artists, designers, educators and beginners…</h1>\n</blockquote>\n<p>p5.js is the result of hard-work of the <a href=\"https://processingfoundation.org/\">Processing Foundation</a>, a group focused on spreading computer and visual literacy. It distills their <a href=\"https://en.wikipedia.org/wiki/Processing_(programming_language)\">Processing</a> language into a JavaScript library that makes creating graphics easy and accessible whilst providing an ideal platform to springboard people’s careers in computer graphics. It should be mentioned now that a lot of inspiration has been taken from <a href=\"http://shiffman.net/\">Daniel Shiffman’s</a> p5 projects (from the <a href=\"https://github.com/CodingTrain/website/tree/master/CodingChallenges/CC_03_Snake_game_p5.js\">classic snake game</a>, to a <a href=\"https://github.com/CodingTrain/website/tree/master/CodingChallenges/CC_93_DoublePendulum_p5.js\">double pendulum</a>). I can’t urge you enough to follow these projects to really improve your understanding of coding concepts and the p5 library.</p>\n<h3>Some prerequisites:</h3>\n<p>Before jumping into the p5 code I first want to make clear that there is assumed knowledge of HTML5 and JavaScript including arrays, functions, variables etc. in the rest of this article. If you have a good grasp of JavaScript then skip to the p5 code below, otherwise here are few resources to get you up to scratch.</p>\n<ul>\n<li>\n<p><a href=\"https://www.youtube.com/watch?v=spIVWmv1jnw\">HaC Intro to Programming</a> — A workshop that is being run by Hackers at Cambridge to help anyone start learning to program (which uses JavaScript).</p>\n</li>\n<li>\n<p><a href=\"https://www.codecademy.com/learn/introduction-to-javascript\">Codecademy</a> — a great resource for learning how to code with instant feedback in your browser.</p>\n</li>\n<li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript\">MDN</a> — a great resource for learning about all aspects of web development.</p>\n</li>\n<li>\n<p><a href=\"https://codepen.io/\">Codepen</a> — a brilliant online text-editor for creating cool projects in HTML, CSS and JavaScript. Equally good for getting inspiration from a lot of talented users. Another possible solution would be <a href=\"https://jsfiddle.net/\">JSFiddle</a>.</p>\n</li>\n</ul>\n<p>What follows is a series of steps that will introduce you to p5 concepts. With code examples and explanations I hope to give you enough information to understand the ideas, but to fully grasp the concepts you will have to dive into the code, experiment with it, break it and learn from it. So without further ado, let’s get coding.</p>\n<h3>Step 1: The Setup</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//Initialisation of canvas, objects, variables etc.</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//The drawing loop - updates at a constant rate declared in setup</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>p5 is really simple to setup once you know what to do. There are two files shown above — an index.html and a template.js. The index.html file gets the libraries for us and the template.js is the barebones structure of a p5 project and at the moment it does nothing! Within this we have two functions:</p>\n<ul>\n<li>\n<p>setup() — a function for creating what we will need for our graphic or project. Like creating a canvas, initialising some objects or arrays etc.</p>\n</li>\n<li>\n<p>draw() — a function which will be called periodically like a loop. This is where will call draw functions and update functions to make graphics and animations.</p>\n</li>\n</ul>\n<iframe height='400' scrolling='no' title='Simple Triangle Tutorial' src='//codepen.io/patricoferris/embed/dddxjr/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/dddxjr/'>Simple Triangle Tutorial</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>Let’s first look at the setup function. We used the p5 function createCanvas(width, height) which created and initialised a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API\">canvas</a> with arguments width and height. Now within our setup() and createCanvas() functions we can reference the variables width and height without ever instantiating them!</p>\n<p>Next comes the meaty, draw function. I have purposefully put extra code in here so we can learn more about what p5 has to offer. Firstly always remember that draw() is a loop that runs from top to bottom. Initially, we set the background (of our canvas) to white with background(255) which is the same as background(255, 255, 255) (maximising the red, green and blue values to give white). This may seem simple, but implicitly we are also clearing our canvas every loop… in one line of code! This will be useful for animations later as we want to redraw objects in a new location rather than have the <a href=\"https://codepen.io/patricoferris/pen/paxZaw\">build-up on the same canvas</a> (click to see it go spectacularly wrong). Next is a translate(width/2, height/2) which moves our current drawing location to the centre of our canvas. We then declare the fill colour of our triangle with fill(255, 0, 0)(making it red).</p>\n<p>We want to create an equilateral triangle with side length s. The triangle itself is a function that takes the vertex coordinates as arguments — triangle(x1, y1, x2, y2, x3, y3) and in this example starting from the centre we have one vertex at (-s/2, 0) another at (s/2, 0) giving a bottom length of s . Now comes the trickier part. A very important aspect of most computer graphics is that the coordinate system starts in the top left corner (or wherever your origin is) and x increases left to right, whilst y increases top to bottom. To move of the screen we need a negative y value. Our last coordinate is given as (0, -sin(PI/3)) (if you’re stuck, think about cutting the triangle in two and using trigonometry).</p>\n<h3>Step 2: Get Creative</h3>\n<p>We’ve learnt how to set up our canvas and start drawing. Armed with the p5 <a href=\"https://p5js.org/reference/\">reference page</a> and our creativity, we can make some truly stunning graphics. How about a bouncing ball animation?</p>\n<iframe height='400' scrolling='no' title='Bouncing Balls' src='//codepen.io/patricoferris/embed/PQpOrB/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/PQpOrB/'>Bouncing Balls</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>Let’s look at the interesting p5 aspects that we didn’t know before:</p>\n<ul>\n<li>\n<p>frameRate(20) — This enables us to specify the frame rate of our drawing loop, that is, how many times per second it redraws everything for us.</p>\n</li>\n<li>\n<p>gravity = createVector(0, 9) — p5 allows us to <a href=\"https://p5js.org/reference/#/p5.Vector\">create vector objects</a> with which we can perform vector operations like addition, multiplication, dot-product and cross-product. This is useful when we want to simulate physics like forces.</p>\n</li>\n<li>\n<p>floor(random(50)) — Here we’re using p5 math functions. floor() takes a real number and rounds it down to the nearest integer. random(arg) produces a random number as small as 0 or up to 49. In this example, we are giving it to the ellipse(x, y, w)function to create randomly sized balls by setting the width to a random number. If we gave another argument it would set the ellipse’s height, but here it infers that we want a circle.</p>\n</li>\n<li>\n<p>stroke(0) — This function sets the colour of our shape’s outline. If you don’t want any border you can add noStroke() .</p>\n</li>\n</ul>\n<p>All you need now is to add some physics to these ideas and you have yourself a bouncing ball animation.</p>\n<h3>Step 3: Experiment with p5</h3>\n<p>Hopefully now you have a good understanding of the p5 fundamentals, but we’ve barely scratched the surface. This last example will use two extra features of p5: interactivity and <a href=\"http://flafla2.github.io/2014/08/09/perlinnoise.html\">Perlin Noise</a>. Keep reading to find out more on these two concepts.</p>\n<iframe height='400' scrolling='no' title='Pixel Fire' src='//codepen.io/patricoferris/embed/XZMxmV/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/XZMxmV/'>Pixel Fire</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>In this CodePen I have created a relatively simple flame model using squares and Perlin Noise. First of all, how do we get user input? Lucky for us p5 has some functions that can help.</p>\n<high-light className='JavaScript'>\nvar touch = false;\nfunction setup(){\n  createCanvas(640, 640);\n}\nfunction draw(){\n  if(touch){\n    fill(255, 0, 0);\n    rect(mouseX, mouseY, 20, 20);\n  }\n}\nfunction touchStarted(){\n  touch = true;\n}\nfunction touchEnded(){\n  touch = false;\n}\n</high-light>\n<p>At the top of the code we have declared a boolean “flag” as to whether or not our mouse is being pressed — this allows us to do things if the mouse is being held down. The touchStarted() and touchEnded() are p5 functions that are executed whenever the mouse is pressed or released or the screen is touched and released. Lastly, in our rect() function we have the variables mouseX and mouseY which are p5 variables corresponding to the mouse’s current position. Oddly, these also refer to your <a href=\"https://github.com/processing/p5.js/issues/1705\">“touch” coordinates</a>. With all these variables and functions predefined for us we can focus on making visually stunning graphics, whilst not being hampered by having to code extra functions unrelated to the graphic we’re producing.</p>\n<p>Now for the Perlin Noise. In 1983, tired with the artificial look of computer graphics, Ken Perlin developed a type of gradient noise. The basic idea being you create a big grid of gradients randomly and then use the dot product to interpolate between them. In short, we get random values based on the coordinate system we’re drawing on. Great! For each of our squares we can start them at a random position near our mouse, and generate a random upward vector using their position and Perlin Noise. Let’s look at the code:</p>\n<high-light className='JavaScript'>\nfunction Particle(x, y, color){\n  this.pos = createVector(x + random(-10, 10), y + random(-10, 10));\n  this.vel = createVector(floor(random(-1, 1))*noise(this.pos.x), -noise(this.pos.y)*7);\n  this.alpha = 255;\n  this.r = random(170, 255);\n  this.g = random(10, 255);\n  this.b = random(0, 100);\n  this.update = function(){\n    this.pos.add(this.vel);\n    this.alpha -= 5;\n  }\n  this.show = function(){\n    noStroke();\n    fill(this.r, this.g, this.b, this.alpha);\n    rect(this.pos.x, this.pos.y, 5, 5);\n  }\n  this.dead = function(){\n    if(this.alpha < 0){\n      return true;\n    }else{\n      return false;\n    }\n  }\n}\n</high-light>\n<p>Some key things to notice:</p>\n<ul>\n<li>\n<p>noise(this.pos.x) — The Perlin Noise <a href=\"https://p5js.org/reference/#/p5/noise\">function</a> that gets a random number based on the square’s current x position. It returns a value between 0 and 1.</p>\n</li>\n<li>\n<p>fill(this.r, this.g, this.b, this.alpha) — Here we have extended fill’s ability by including an alpha value for the objects transparency, by decreasing alpha in the update() function we get a nice fade out like a flame.</p>\n</li>\n<li>\n<p>dead() — This function allows us to keep track of which particles have disappeared as their alpha is now less than zero. We can then splice() them out of our array to ensure we’re not drawing an unbounded number of particles over time which would cause performance issues.</p>\n</li>\n</ul>\n<p>As a challenge, you can also use blendMode() to make it seem even more realistic — check this <a href=\"https://codepen.io/anon/pen/YeOaJX\">alteration</a> to see it in action.</p>\n<p>With only a few concepts and the p5 library, it is incredibly straightforward to start building anything you want. Be sure to checkout what else is possible with the library. Here are few cool ideas to get you started: <a href=\"https://p5js.org/examples/3d-geometries.html\">3D graphics</a>, <a href=\"https://p5js.org/examples/dom-slider.html\">sliders</a> and <a href=\"https://p5js.org/examples/image-load-and-display-image.html\">images</a>.</p>\n<h3>Conclusion</h3>\n<p>As computers and technology become ubiquitous in our daily lives and an increasing number of professions are now relying on computer literacy, p5.js is a beautiful example of how we can ensure as many people as possible have an entry-point to the wonderful world of computer programming. It also acts as a reminder to some more experienced programmers that creativity and imagination are vital in producing meaningful code and ultimately making the tech world a better place.</p>\n<p>Hopefully this intro to p5 has convinced you of its usefulness and has encouraged you to start taking your first steps into the world of graphics programming. Here are my recommendations for where to go next:</p>\n<ul>\n<li>\n<p><a href=\"https://www.youtube.com/user/shiffman\">The Coding Train</a> — A brilliant YouTube channel by Daniel Shiffman where he teaches JavaScript and p5.js amongst many other incredible things!</p>\n</li>\n<li>\n<p><a href=\"https://p5js.org/examples/\">p5js.org </a>— The examples page on this website is full of inspiring projects which you could recreate and extend further.</p>\n</li>\n<li>\n<p><a href=\"https://www.scratchapixel.com/index.php\">Sratchapixel</a> — If you feel ready to delve into the deeper concepts and implementations of computer graphics then this website is an incredible resource for you to use.</p>\n</li>\n</ul>\n<p>A special thanks to <a href=\"undefined\">Tom Read Cutting</a> for editing this article and <a href=\"undefined\">Christian Silver</a> for helping get it off the ground.</p>"},{"id":"transformer-remark-markdown-ast-a5db6dfc096fc0fa6d7ff2c192bed778-gatsby-remark-imagesgatsby-remark-prismjs-","value":{"type":"root","children":[{"type":"yaml","value":"path: '/graphics-and-p5'\ntitle: 'Computer Graphics for Everyone'\nsubtitle: 'An Introduction to Computer Graphics using p5.js'\ndate: '2018-02-27'\nimage-url: 'https://res.cloudinary.com/patricoferris/image/upload/v1532857964/pf2018/blogposts/27-02-2018/tree.png'","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":7,"column":4,"offset":268},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://res.cloudinary.com/patricoferris/image/upload/v1532857964/pf2018/blogposts/27-02-2018/tree.png","alt":"Recursive Tree","position":{"start":{"line":9,"column":1,"offset":270},"end":{"line":9,"column":122,"offset":391},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":270},"end":{"line":9,"column":122,"offset":391},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Graphics and computer programming are two dearly intertwined disciplines. The oscilloscope is often recognised as one of the first examples of “computer graphics”, the cathode-ray versions emitting a beam of electrons onto a phosphorescent screen. By using magnetic fields to change the beam’s direction, we can sweep from left to right and move up and down — the basic idea behind most CG! (I highly recommend watching this ","position":{"start":{"line":11,"column":1,"offset":393},"end":{"line":11,"column":426,"offset":818},"indent":[]}},{"type":"link","title":null,"url":"https://archive.org/details/introductiontothecathoderayoscilloscope","children":[{"type":"text","value":"video","position":{"start":{"line":11,"column":427,"offset":819},"end":{"line":11,"column":432,"offset":824},"indent":[]}}],"position":{"start":{"line":11,"column":426,"offset":818},"end":{"line":11,"column":502,"offset":894},"indent":[]}},{"type":"text","value":" from 1970).","position":{"start":{"line":11,"column":502,"offset":894},"end":{"line":11,"column":514,"offset":906},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":393},"end":{"line":11,"column":514,"offset":906},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We’ve come a long way since then — modern day graphics is a complicated science as well as an art, and the barrier to entry is constantly increasing. Graphics programming can be so complex, that a simple program to draw a triangle can be over ","position":{"start":{"line":13,"column":1,"offset":908},"end":{"line":13,"column":244,"offset":1151},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/SaschaWillems/Vulkan/blob/master/examples/triangle/triangle.cpp","children":[{"type":"text","value":"1000 lines of code","position":{"start":{"line":13,"column":245,"offset":1152},"end":{"line":13,"column":263,"offset":1170},"indent":[]}}],"position":{"start":{"line":13,"column":244,"offset":1151},"end":{"line":13,"column":348,"offset":1255},"indent":[]}},{"type":"text","value":"! However, this article will introduce you to ","position":{"start":{"line":13,"column":348,"offset":1255},"end":{"line":13,"column":394,"offset":1301},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/","children":[{"type":"text","value":"p5.js","position":{"start":{"line":13,"column":395,"offset":1302},"end":{"line":13,"column":400,"offset":1307},"indent":[]}}],"position":{"start":{"line":13,"column":394,"offset":1301},"end":{"line":13,"column":420,"offset":1327},"indent":[]}},{"type":"text","value":" (also known as p5). A simpler, less complex solution for people who want to start making computer graphics, but don’t want the headache of streams of boiler-plate code.","position":{"start":{"line":13,"column":420,"offset":1327},"end":{"line":13,"column":589,"offset":1496},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":908},"end":{"line":13,"column":589,"offset":1496},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Straight from the landing page of the p5.js website.","position":{"start":{"line":15,"column":1,"offset":1498},"end":{"line":15,"column":53,"offset":1550},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":1498},"end":{"line":15,"column":53,"offset":1550},"indent":[]}},{"type":"blockquote","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"…make coding accessible for artists, designers, educators and beginners…","position":{"start":{"line":16,"column":5,"offset":1555},"end":{"line":16,"column":77,"offset":1627},"indent":[]}}],"position":{"start":{"line":16,"column":3,"offset":1553},"end":{"line":16,"column":77,"offset":1627},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":1551},"end":{"line":16,"column":77,"offset":1627},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"p5.js is the result of hard-work of the ","position":{"start":{"line":18,"column":1,"offset":1629},"end":{"line":18,"column":41,"offset":1669},"indent":[]}},{"type":"link","title":null,"url":"https://processingfoundation.org/","children":[{"type":"text","value":"Processing Foundation","position":{"start":{"line":18,"column":42,"offset":1670},"end":{"line":18,"column":63,"offset":1691},"indent":[]}}],"position":{"start":{"line":18,"column":41,"offset":1669},"end":{"line":18,"column":99,"offset":1727},"indent":[]}},{"type":"text","value":", a group focused on spreading computer and visual literacy. It distills their ","position":{"start":{"line":18,"column":99,"offset":1727},"end":{"line":18,"column":178,"offset":1806},"indent":[]}},{"type":"link","title":null,"url":"https://en.wikipedia.org/wiki/Processing_(programming_language)","children":[{"type":"text","value":"Processing","position":{"start":{"line":18,"column":179,"offset":1807},"end":{"line":18,"column":189,"offset":1817},"indent":[]}}],"position":{"start":{"line":18,"column":178,"offset":1806},"end":{"line":18,"column":255,"offset":1883},"indent":[]}},{"type":"text","value":" language into a JavaScript library that makes creating graphics easy and accessible whilst providing an ideal platform to springboard people’s careers in computer graphics. It should be mentioned now that a lot of inspiration has been taken from ","position":{"start":{"line":18,"column":255,"offset":1883},"end":{"line":18,"column":502,"offset":2130},"indent":[]}},{"type":"link","title":null,"url":"http://shiffman.net/","children":[{"type":"text","value":"Daniel Shiffman’s","position":{"start":{"line":18,"column":503,"offset":2131},"end":{"line":18,"column":520,"offset":2148},"indent":[]}}],"position":{"start":{"line":18,"column":502,"offset":2130},"end":{"line":18,"column":543,"offset":2171},"indent":[]}},{"type":"text","value":" p5 projects (from the ","position":{"start":{"line":18,"column":543,"offset":2171},"end":{"line":18,"column":566,"offset":2194},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/CodingTrain/website/tree/master/CodingChallenges/CC_03_Snake_game_p5.js","children":[{"type":"text","value":"classic snake game","position":{"start":{"line":18,"column":567,"offset":2195},"end":{"line":18,"column":585,"offset":2213},"indent":[]}}],"position":{"start":{"line":18,"column":566,"offset":2194},"end":{"line":18,"column":678,"offset":2306},"indent":[]}},{"type":"text","value":", to a ","position":{"start":{"line":18,"column":678,"offset":2306},"end":{"line":18,"column":685,"offset":2313},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/CodingTrain/website/tree/master/CodingChallenges/CC_93_DoublePendulum_p5.js","children":[{"type":"text","value":"double pendulum","position":{"start":{"line":18,"column":686,"offset":2314},"end":{"line":18,"column":701,"offset":2329},"indent":[]}}],"position":{"start":{"line":18,"column":685,"offset":2313},"end":{"line":18,"column":798,"offset":2426},"indent":[]}},{"type":"text","value":"). I can’t urge you enough to follow these projects to really improve your understanding of coding concepts and the p5 library.","position":{"start":{"line":18,"column":798,"offset":2426},"end":{"line":18,"column":925,"offset":2553},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1629},"end":{"line":18,"column":925,"offset":2553},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Some prerequisites:","position":{"start":{"line":20,"column":5,"offset":2559},"end":{"line":20,"column":24,"offset":2578},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":2555},"end":{"line":20,"column":24,"offset":2578},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Before jumping into the p5 code I first want to make clear that there is assumed knowledge of HTML5 and JavaScript including arrays, functions, variables etc. in the rest of this article. If you have a good grasp of JavaScript then skip to the p5 code below, otherwise here are few resources to get you up to scratch.","position":{"start":{"line":22,"column":1,"offset":2580},"end":{"line":22,"column":318,"offset":2897},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":2580},"end":{"line":22,"column":318,"offset":2897},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":true,"children":[{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.youtube.com/watch?v=spIVWmv1jnw","children":[{"type":"text","value":"HaC Intro to Programming","position":{"start":{"line":24,"column":4,"offset":2902},"end":{"line":24,"column":28,"offset":2926},"indent":[]}}],"position":{"start":{"line":24,"column":3,"offset":2901},"end":{"line":24,"column":74,"offset":2972},"indent":[]}},{"type":"text","value":" — A workshop that is being run by Hackers at Cambridge to help anyone start learning to program (which uses JavaScript).","position":{"start":{"line":24,"column":74,"offset":2972},"end":{"line":24,"column":195,"offset":3093},"indent":[]}}],"position":{"start":{"line":24,"column":3,"offset":2901},"end":{"line":24,"column":195,"offset":3093},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":2899},"end":{"line":25,"column":1,"offset":3094},"indent":[1]}},{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.codecademy.com/learn/introduction-to-javascript","children":[{"type":"text","value":"Codecademy","position":{"start":{"line":26,"column":4,"offset":3098},"end":{"line":26,"column":14,"offset":3108},"indent":[]}}],"position":{"start":{"line":26,"column":3,"offset":3097},"end":{"line":26,"column":76,"offset":3170},"indent":[]}},{"type":"text","value":" — a great resource for learning how to code with instant feedback in your browser.","position":{"start":{"line":26,"column":76,"offset":3170},"end":{"line":26,"column":159,"offset":3253},"indent":[]}}],"position":{"start":{"line":26,"column":3,"offset":3097},"end":{"line":26,"column":159,"offset":3253},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":3095},"end":{"line":27,"column":1,"offset":3254},"indent":[1]}},{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript","children":[{"type":"text","value":"MDN","position":{"start":{"line":28,"column":4,"offset":3258},"end":{"line":28,"column":7,"offset":3261},"indent":[]}}],"position":{"start":{"line":28,"column":3,"offset":3257},"end":{"line":28,"column":65,"offset":3319},"indent":[]}},{"type":"text","value":" — a great resource for learning about all aspects of web development.","position":{"start":{"line":28,"column":65,"offset":3319},"end":{"line":28,"column":135,"offset":3389},"indent":[]}}],"position":{"start":{"line":28,"column":3,"offset":3257},"end":{"line":28,"column":135,"offset":3389},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":3255},"end":{"line":29,"column":1,"offset":3390},"indent":[1]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://codepen.io/","children":[{"type":"text","value":"Codepen","position":{"start":{"line":30,"column":4,"offset":3394},"end":{"line":30,"column":11,"offset":3401},"indent":[]}}],"position":{"start":{"line":30,"column":3,"offset":3393},"end":{"line":30,"column":33,"offset":3423},"indent":[]}},{"type":"text","value":" — a brilliant online text-editor for creating cool projects in HTML, CSS and JavaScript. Equally good for getting inspiration from a lot of talented users. Another possible solution would be ","position":{"start":{"line":30,"column":33,"offset":3423},"end":{"line":30,"column":225,"offset":3615},"indent":[]}},{"type":"link","title":null,"url":"https://jsfiddle.net/","children":[{"type":"text","value":"JSFiddle","position":{"start":{"line":30,"column":226,"offset":3616},"end":{"line":30,"column":234,"offset":3624},"indent":[]}}],"position":{"start":{"line":30,"column":225,"offset":3615},"end":{"line":30,"column":258,"offset":3648},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":30,"column":258,"offset":3648},"end":{"line":30,"column":259,"offset":3649},"indent":[]}}],"position":{"start":{"line":30,"column":3,"offset":3393},"end":{"line":30,"column":259,"offset":3649},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":3391},"end":{"line":30,"column":259,"offset":3649},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":2899},"end":{"line":30,"column":259,"offset":3649},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"What follows is a series of steps that will introduce you to p5 concepts. With code examples and explanations I hope to give you enough information to understand the ideas, but to fully grasp the concepts you will have to dive into the code, experiment with it, break it and learn from it. So without further ado, let’s get coding.","position":{"start":{"line":32,"column":1,"offset":3651},"end":{"line":32,"column":332,"offset":3982},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":3651},"end":{"line":32,"column":332,"offset":3982},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Step 1: The Setup","position":{"start":{"line":34,"column":5,"offset":3988},"end":{"line":34,"column":22,"offset":4005},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":3984},"end":{"line":34,"column":22,"offset":4005},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//Initialisation of canvas, objects, variables etc.</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//The drawing loop - updates at a constant rate declared in setup</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":36,"column":1,"offset":4007},"end":{"line":43,"column":4,"offset":4185},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"p5 is really simple to setup once you know what to do. There are two files shown above — an index.html and a template.js. The index.html file gets the libraries for us and the template.js is the barebones structure of a p5 project and at the moment it does nothing! Within this we have two functions:","position":{"start":{"line":45,"column":1,"offset":4187},"end":{"line":45,"column":301,"offset":4487},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":4187},"end":{"line":45,"column":301,"offset":4487},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":true,"children":[{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"setup() — a function for creating what we will need for our graphic or project. Like creating a canvas, initialising some objects or arrays etc.","position":{"start":{"line":47,"column":3,"offset":4491},"end":{"line":47,"column":147,"offset":4635},"indent":[]}}],"position":{"start":{"line":47,"column":3,"offset":4491},"end":{"line":47,"column":147,"offset":4635},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":4489},"end":{"line":48,"column":1,"offset":4636},"indent":[1]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"draw() — a function which will be called periodically like a loop. This is where will call draw functions and update functions to make graphics and animations.","position":{"start":{"line":49,"column":3,"offset":4639},"end":{"line":49,"column":162,"offset":4798},"indent":[]}}],"position":{"start":{"line":49,"column":3,"offset":4639},"end":{"line":49,"column":162,"offset":4798},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":4637},"end":{"line":49,"column":162,"offset":4798},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":4489},"end":{"line":49,"column":162,"offset":4798},"indent":[1,1]}},{"type":"html","value":"<iframe height='400' scrolling='no' title='Simple Triangle Tutorial' src='//codepen.io/patricoferris/embed/dddxjr/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/dddxjr/'>Simple Triangle Tutorial</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":51,"column":1,"offset":4800},"end":{"line":52,"column":10,"offset":5294},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Let’s first look at the setup function. We used the p5 function createCanvas(width, height) which created and initialised a ","position":{"start":{"line":54,"column":1,"offset":5296},"end":{"line":54,"column":125,"offset":5420},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API","children":[{"type":"text","value":"canvas","position":{"start":{"line":54,"column":126,"offset":5421},"end":{"line":54,"column":132,"offset":5427},"indent":[]}}],"position":{"start":{"line":54,"column":125,"offset":5420},"end":{"line":54,"column":194,"offset":5489},"indent":[]}},{"type":"text","value":" with arguments width and height. Now within our setup() and createCanvas() functions we can reference the variables width and height without ever instantiating them!","position":{"start":{"line":54,"column":194,"offset":5489},"end":{"line":54,"column":360,"offset":5655},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":5296},"end":{"line":54,"column":360,"offset":5655},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Next comes the meaty, draw function. I have purposefully put extra code in here so we can learn more about what p5 has to offer. Firstly always remember that draw() is a loop that runs from top to bottom. Initially, we set the background (of our canvas) to white with background(255) which is the same as background(255, 255, 255) (maximising the red, green and blue values to give white). This may seem simple, but implicitly we are also clearing our canvas every loop… in one line of code! This will be useful for animations later as we want to redraw objects in a new location rather than have the ","position":{"start":{"line":56,"column":1,"offset":5657},"end":{"line":56,"column":602,"offset":6258},"indent":[]}},{"type":"link","title":null,"url":"https://codepen.io/patricoferris/pen/paxZaw","children":[{"type":"text","value":"build-up on the same canvas","position":{"start":{"line":56,"column":603,"offset":6259},"end":{"line":56,"column":630,"offset":6286},"indent":[]}}],"position":{"start":{"line":56,"column":602,"offset":6258},"end":{"line":56,"column":676,"offset":6332},"indent":[]}},{"type":"text","value":" (click to see it go spectacularly wrong). Next is a translate(width/2, height/2) which moves our current drawing location to the centre of our canvas. We then declare the fill colour of our triangle with fill(255, 0, 0)(making it red).","position":{"start":{"line":56,"column":676,"offset":6332},"end":{"line":56,"column":912,"offset":6568},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":5657},"end":{"line":56,"column":912,"offset":6568},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We want to create an equilateral triangle with side length s. The triangle itself is a function that takes the vertex coordinates as arguments — triangle(x1, y1, x2, y2, x3, y3) and in this example starting from the centre we have one vertex at (-s/2, 0) another at (s/2, 0) giving a bottom length of s . Now comes the trickier part. A very important aspect of most computer graphics is that the coordinate system starts in the top left corner (or wherever your origin is) and x increases left to right, whilst y increases top to bottom. To move of the screen we need a negative y value. Our last coordinate is given as (0, -sin(PI/3)) (if you’re stuck, think about cutting the triangle in two and using trigonometry).","position":{"start":{"line":58,"column":1,"offset":6570},"end":{"line":58,"column":719,"offset":7288},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":6570},"end":{"line":58,"column":719,"offset":7288},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Step 2: Get Creative","position":{"start":{"line":60,"column":5,"offset":7294},"end":{"line":60,"column":25,"offset":7314},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":7290},"end":{"line":60,"column":25,"offset":7314},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We’ve learnt how to set up our canvas and start drawing. Armed with the p5 ","position":{"start":{"line":62,"column":1,"offset":7316},"end":{"line":62,"column":76,"offset":7391},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/reference/","children":[{"type":"text","value":"reference page","position":{"start":{"line":62,"column":77,"offset":7392},"end":{"line":62,"column":91,"offset":7406},"indent":[]}}],"position":{"start":{"line":62,"column":76,"offset":7391},"end":{"line":62,"column":121,"offset":7436},"indent":[]}},{"type":"text","value":" and our creativity, we can make some truly stunning graphics. How about a bouncing ball animation?","position":{"start":{"line":62,"column":121,"offset":7436},"end":{"line":62,"column":220,"offset":7535},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":7316},"end":{"line":62,"column":220,"offset":7535},"indent":[]}},{"type":"html","value":"<iframe height='400' scrolling='no' title='Bouncing Balls' src='//codepen.io/patricoferris/embed/PQpOrB/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/PQpOrB/'>Bouncing Balls</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":64,"column":1,"offset":7537},"end":{"line":65,"column":10,"offset":8011},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Let’s look at the interesting p5 aspects that we didn’t know before:","position":{"start":{"line":67,"column":1,"offset":8013},"end":{"line":67,"column":69,"offset":8081},"indent":[]}}],"position":{"start":{"line":67,"column":1,"offset":8013},"end":{"line":67,"column":69,"offset":8081},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":true,"children":[{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"frameRate(20) — This enables us to specify the frame rate of our drawing loop, that is, how many times per second it redraws everything for us.","position":{"start":{"line":69,"column":3,"offset":8085},"end":{"line":69,"column":146,"offset":8228},"indent":[]}}],"position":{"start":{"line":69,"column":3,"offset":8085},"end":{"line":69,"column":146,"offset":8228},"indent":[]}}],"position":{"start":{"line":69,"column":1,"offset":8083},"end":{"line":70,"column":1,"offset":8229},"indent":[1]}},{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"gravity = createVector(0, 9) — p5 allows us to ","position":{"start":{"line":71,"column":3,"offset":8232},"end":{"line":71,"column":50,"offset":8279},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/reference/#/p5.Vector","children":[{"type":"text","value":"create vector objects","position":{"start":{"line":71,"column":51,"offset":8280},"end":{"line":71,"column":72,"offset":8301},"indent":[]}}],"position":{"start":{"line":71,"column":50,"offset":8279},"end":{"line":71,"column":113,"offset":8342},"indent":[]}},{"type":"text","value":" with which we can perform vector operations like addition, multiplication, dot-product and cross-product. This is useful when we want to simulate physics like forces.","position":{"start":{"line":71,"column":113,"offset":8342},"end":{"line":71,"column":280,"offset":8509},"indent":[]}}],"position":{"start":{"line":71,"column":3,"offset":8232},"end":{"line":71,"column":280,"offset":8509},"indent":[]}}],"position":{"start":{"line":71,"column":1,"offset":8230},"end":{"line":72,"column":1,"offset":8510},"indent":[1]}},{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"floor(random(50)) — Here we’re using p5 math functions. floor() takes a real number and rounds it down to the nearest integer. random(arg) produces a random number as small as 0 or up to 49. In this example, we are giving it to the ellipse(x, y, w)function to create randomly sized balls by setting the width to a random number. If we gave another argument it would set the ellipse’s height, but here it infers that we want a circle.","position":{"start":{"line":73,"column":3,"offset":8513},"end":{"line":73,"column":436,"offset":8946},"indent":[]}}],"position":{"start":{"line":73,"column":3,"offset":8513},"end":{"line":73,"column":436,"offset":8946},"indent":[]}}],"position":{"start":{"line":73,"column":1,"offset":8511},"end":{"line":74,"column":1,"offset":8947},"indent":[1]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"stroke(0) — This function sets the colour of our shape’s outline. If you don’t want any border you can add noStroke() .","position":{"start":{"line":75,"column":3,"offset":8950},"end":{"line":75,"column":122,"offset":9069},"indent":[]}}],"position":{"start":{"line":75,"column":3,"offset":8950},"end":{"line":75,"column":122,"offset":9069},"indent":[]}}],"position":{"start":{"line":75,"column":1,"offset":8948},"end":{"line":75,"column":122,"offset":9069},"indent":[]}}],"position":{"start":{"line":69,"column":1,"offset":8083},"end":{"line":75,"column":122,"offset":9069},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"All you need now is to add some physics to these ideas and you have yourself a bouncing ball animation.","position":{"start":{"line":77,"column":1,"offset":9071},"end":{"line":77,"column":104,"offset":9174},"indent":[]}}],"position":{"start":{"line":77,"column":1,"offset":9071},"end":{"line":77,"column":104,"offset":9174},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Step 3: Experiment with p5","position":{"start":{"line":79,"column":5,"offset":9180},"end":{"line":79,"column":31,"offset":9206},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":9176},"end":{"line":79,"column":31,"offset":9206},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Hopefully now you have a good understanding of the p5 fundamentals, but we’ve barely scratched the surface. This last example will use two extra features of p5: interactivity and ","position":{"start":{"line":81,"column":1,"offset":9208},"end":{"line":81,"column":180,"offset":9387},"indent":[]}},{"type":"link","title":null,"url":"http://flafla2.github.io/2014/08/09/perlinnoise.html","children":[{"type":"text","value":"Perlin Noise","position":{"start":{"line":81,"column":181,"offset":9388},"end":{"line":81,"column":193,"offset":9400},"indent":[]}}],"position":{"start":{"line":81,"column":180,"offset":9387},"end":{"line":81,"column":248,"offset":9455},"indent":[]}},{"type":"text","value":". Keep reading to find out more on these two concepts.","position":{"start":{"line":81,"column":248,"offset":9455},"end":{"line":81,"column":302,"offset":9509},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":9208},"end":{"line":81,"column":302,"offset":9509},"indent":[]}},{"type":"html","value":"<iframe height='400' scrolling='no' title='Pixel Fire' src='//codepen.io/patricoferris/embed/XZMxmV/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/XZMxmV/'>Pixel Fire</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":83,"column":1,"offset":9511},"end":{"line":84,"column":10,"offset":9977},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"In this CodePen I have created a relatively simple flame model using squares and Perlin Noise. First of all, how do we get user input? Lucky for us p5 has some functions that can help.","position":{"start":{"line":86,"column":1,"offset":9979},"end":{"line":86,"column":185,"offset":10163},"indent":[]}}],"position":{"start":{"line":86,"column":1,"offset":9979},"end":{"line":86,"column":185,"offset":10163},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> touch <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">createCanvas</span><span class=\"token punctuation\">(</span><span class=\"token number\">640</span><span class=\"token punctuation\">,</span> <span class=\"token number\">640</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>touch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">rect</span><span class=\"token punctuation\">(</span>mouseX<span class=\"token punctuation\">,</span> mouseY<span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">touchStarted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  touch <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">touchEnded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  touch <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":88,"column":1,"offset":10165},"end":{"line":105,"column":4,"offset":10423},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"At the top of the code we have declared a boolean “flag” as to whether or not our mouse is being pressed — this allows us to do things if the mouse is being held down. The touchStarted() and touchEnded() are p5 functions that are executed whenever the mouse is pressed or released or the screen is touched and released. Lastly, in our rect() function we have the variables mouseX and mouseY which are p5 variables corresponding to the mouse’s current position. Oddly, these also refer to your ","position":{"start":{"line":107,"column":1,"offset":10425},"end":{"line":107,"column":494,"offset":10918},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/processing/p5.js/issues/1705","children":[{"type":"text","value":"“touch” coordinates","position":{"start":{"line":107,"column":495,"offset":10919},"end":{"line":107,"column":514,"offset":10938},"indent":[]}}],"position":{"start":{"line":107,"column":494,"offset":10918},"end":{"line":107,"column":564,"offset":10988},"indent":[]}},{"type":"text","value":". With all these variables and functions predefined for us we can focus on making visually stunning graphics, whilst not being hampered by having to code extra functions unrelated to the graphic we’re producing.","position":{"start":{"line":107,"column":564,"offset":10988},"end":{"line":107,"column":775,"offset":11199},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":10425},"end":{"line":107,"column":775,"offset":11199},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now for the Perlin Noise. In 1983, tired with the artificial look of computer graphics, Ken Perlin developed a type of gradient noise. The basic idea being you create a big grid of gradients randomly and then use the dot product to interpolate between them. In short, we get random values based on the coordinate system we’re drawing on. Great! For each of our squares we can start them at a random position near our mouse, and generate a random upward vector using their position and Perlin Noise. Let’s look at the code:","position":{"start":{"line":109,"column":1,"offset":11201},"end":{"line":109,"column":523,"offset":11723},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":11201},"end":{"line":109,"column":523,"offset":11723},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Particle</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos <span class=\"token operator\">=</span> <span class=\"token function\">createVector</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">+</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vel <span class=\"token operator\">=</span> <span class=\"token function\">createVector</span><span class=\"token punctuation\">(</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token function\">noise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token function\">noise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>alpha <span class=\"token operator\">=</span> <span class=\"token number\">255</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>r <span class=\"token operator\">=</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">170</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>g <span class=\"token operator\">=</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">update</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>alpha <span class=\"token operator\">-=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">show</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">noStroke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>g<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>alpha<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">rect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">dead</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>alpha <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":111,"column":1,"offset":11725},"end":{"line":136,"column":4,"offset":12361},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Some key things to notice:","position":{"start":{"line":138,"column":1,"offset":12363},"end":{"line":138,"column":27,"offset":12389},"indent":[]}}],"position":{"start":{"line":138,"column":1,"offset":12363},"end":{"line":138,"column":27,"offset":12389},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":true,"children":[{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"noise(this.pos.x) — The Perlin Noise ","position":{"start":{"line":140,"column":3,"offset":12393},"end":{"line":140,"column":40,"offset":12430},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/reference/#/p5/noise","children":[{"type":"text","value":"function","position":{"start":{"line":140,"column":41,"offset":12431},"end":{"line":140,"column":49,"offset":12439},"indent":[]}}],"position":{"start":{"line":140,"column":40,"offset":12430},"end":{"line":140,"column":89,"offset":12479},"indent":[]}},{"type":"text","value":" that gets a random number based on the square’s current x position. It returns a value between 0 and 1.","position":{"start":{"line":140,"column":89,"offset":12479},"end":{"line":140,"column":193,"offset":12583},"indent":[]}}],"position":{"start":{"line":140,"column":3,"offset":12393},"end":{"line":140,"column":193,"offset":12583},"indent":[]}}],"position":{"start":{"line":140,"column":1,"offset":12391},"end":{"line":141,"column":1,"offset":12584},"indent":[1]}},{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"fill(this.r, this.g, this.b, this.alpha) — Here we have extended fill’s ability by including an alpha value for the objects transparency, by decreasing alpha in the update() function we get a nice fade out like a flame.","position":{"start":{"line":142,"column":3,"offset":12587},"end":{"line":142,"column":222,"offset":12806},"indent":[]}}],"position":{"start":{"line":142,"column":3,"offset":12587},"end":{"line":142,"column":222,"offset":12806},"indent":[]}}],"position":{"start":{"line":142,"column":1,"offset":12585},"end":{"line":143,"column":1,"offset":12807},"indent":[1]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"dead() — This function allows us to keep track of which particles have disappeared as their alpha is now less than zero. We can then splice() them out of our array to ensure we’re not drawing an unbounded number of particles over time which would cause performance issues.","position":{"start":{"line":144,"column":3,"offset":12810},"end":{"line":144,"column":275,"offset":13082},"indent":[]}}],"position":{"start":{"line":144,"column":3,"offset":12810},"end":{"line":144,"column":275,"offset":13082},"indent":[]}}],"position":{"start":{"line":144,"column":1,"offset":12808},"end":{"line":144,"column":275,"offset":13082},"indent":[]}}],"position":{"start":{"line":140,"column":1,"offset":12391},"end":{"line":144,"column":275,"offset":13082},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"As a challenge, you can also use blendMode() to make it seem even more realistic — check this ","position":{"start":{"line":146,"column":1,"offset":13084},"end":{"line":146,"column":95,"offset":13178},"indent":[]}},{"type":"link","title":null,"url":"https://codepen.io/anon/pen/YeOaJX","children":[{"type":"text","value":"alteration","position":{"start":{"line":146,"column":96,"offset":13179},"end":{"line":146,"column":106,"offset":13189},"indent":[]}}],"position":{"start":{"line":146,"column":95,"offset":13178},"end":{"line":146,"column":143,"offset":13226},"indent":[]}},{"type":"text","value":" to see it in action.","position":{"start":{"line":146,"column":143,"offset":13226},"end":{"line":146,"column":164,"offset":13247},"indent":[]}}],"position":{"start":{"line":146,"column":1,"offset":13084},"end":{"line":146,"column":164,"offset":13247},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"With only a few concepts and the p5 library, it is incredibly straightforward to start building anything you want. Be sure to checkout what else is possible with the library. Here are few cool ideas to get you started: ","position":{"start":{"line":148,"column":1,"offset":13249},"end":{"line":148,"column":220,"offset":13468},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/examples/3d-geometries.html","children":[{"type":"text","value":"3D graphics","position":{"start":{"line":148,"column":221,"offset":13469},"end":{"line":148,"column":232,"offset":13480},"indent":[]}}],"position":{"start":{"line":148,"column":220,"offset":13468},"end":{"line":148,"column":279,"offset":13527},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":148,"column":279,"offset":13527},"end":{"line":148,"column":281,"offset":13529},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/examples/dom-slider.html","children":[{"type":"text","value":"sliders","position":{"start":{"line":148,"column":282,"offset":13530},"end":{"line":148,"column":289,"offset":13537},"indent":[]}}],"position":{"start":{"line":148,"column":281,"offset":13529},"end":{"line":148,"column":333,"offset":13581},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":148,"column":333,"offset":13581},"end":{"line":148,"column":338,"offset":13586},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/examples/image-load-and-display-image.html","children":[{"type":"text","value":"images","position":{"start":{"line":148,"column":339,"offset":13587},"end":{"line":148,"column":345,"offset":13593},"indent":[]}}],"position":{"start":{"line":148,"column":338,"offset":13586},"end":{"line":148,"column":407,"offset":13655},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":148,"column":407,"offset":13655},"end":{"line":148,"column":408,"offset":13656},"indent":[]}}],"position":{"start":{"line":148,"column":1,"offset":13249},"end":{"line":148,"column":408,"offset":13656},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":150,"column":5,"offset":13662},"end":{"line":150,"column":15,"offset":13672},"indent":[]}}],"position":{"start":{"line":150,"column":1,"offset":13658},"end":{"line":150,"column":15,"offset":13672},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As computers and technology become ubiquitous in our daily lives and an increasing number of professions are now relying on computer literacy, p5.js is a beautiful example of how we can ensure as many people as possible have an entry-point to the wonderful world of computer programming. It also acts as a reminder to some more experienced programmers that creativity and imagination are vital in producing meaningful code and ultimately making the tech world a better place.","position":{"start":{"line":152,"column":1,"offset":13674},"end":{"line":152,"column":476,"offset":14149},"indent":[]}}],"position":{"start":{"line":152,"column":1,"offset":13674},"end":{"line":152,"column":476,"offset":14149},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Hopefully this intro to p5 has convinced you of its usefulness and has encouraged you to start taking your first steps into the world of graphics programming. Here are my recommendations for where to go next:","position":{"start":{"line":154,"column":1,"offset":14151},"end":{"line":154,"column":209,"offset":14359},"indent":[]}}],"position":{"start":{"line":154,"column":1,"offset":14151},"end":{"line":154,"column":209,"offset":14359},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":true,"children":[{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.youtube.com/user/shiffman","children":[{"type":"text","value":"The Coding Train","position":{"start":{"line":156,"column":4,"offset":14364},"end":{"line":156,"column":20,"offset":14380},"indent":[]}}],"position":{"start":{"line":156,"column":3,"offset":14363},"end":{"line":156,"column":60,"offset":14420},"indent":[]}},{"type":"text","value":" — A brilliant YouTube channel by Daniel Shiffman where he teaches JavaScript and p5.js amongst many other incredible things!","position":{"start":{"line":156,"column":60,"offset":14420},"end":{"line":156,"column":185,"offset":14545},"indent":[]}}],"position":{"start":{"line":156,"column":3,"offset":14363},"end":{"line":156,"column":185,"offset":14545},"indent":[]}}],"position":{"start":{"line":156,"column":1,"offset":14361},"end":{"line":157,"column":1,"offset":14546},"indent":[1]}},{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://p5js.org/examples/","children":[{"type":"text","value":"p5js.org ","position":{"start":{"line":158,"column":4,"offset":14550},"end":{"line":158,"column":13,"offset":14559},"indent":[]}}],"position":{"start":{"line":158,"column":3,"offset":14549},"end":{"line":158,"column":42,"offset":14588},"indent":[]}},{"type":"text","value":"— The examples page on this website is full of inspiring projects which you could recreate and extend further.","position":{"start":{"line":158,"column":42,"offset":14588},"end":{"line":158,"column":152,"offset":14698},"indent":[]}}],"position":{"start":{"line":158,"column":3,"offset":14549},"end":{"line":158,"column":152,"offset":14698},"indent":[]}}],"position":{"start":{"line":158,"column":1,"offset":14547},"end":{"line":159,"column":1,"offset":14699},"indent":[1]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.scratchapixel.com/index.php","children":[{"type":"text","value":"Sratchapixel","position":{"start":{"line":160,"column":4,"offset":14703},"end":{"line":160,"column":16,"offset":14715},"indent":[]}}],"position":{"start":{"line":160,"column":3,"offset":14702},"end":{"line":160,"column":58,"offset":14757},"indent":[]}},{"type":"text","value":" — If you feel ready to delve into the deeper concepts and implementations of computer graphics then this website is an incredible resource for you to use.","position":{"start":{"line":160,"column":58,"offset":14757},"end":{"line":160,"column":213,"offset":14912},"indent":[]}}],"position":{"start":{"line":160,"column":3,"offset":14702},"end":{"line":160,"column":213,"offset":14912},"indent":[]}}],"position":{"start":{"line":160,"column":1,"offset":14700},"end":{"line":160,"column":213,"offset":14912},"indent":[]}}],"position":{"start":{"line":156,"column":1,"offset":14361},"end":{"line":160,"column":213,"offset":14912},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"A special thanks to ","position":{"start":{"line":162,"column":1,"offset":14914},"end":{"line":162,"column":21,"offset":14934},"indent":[]}},{"type":"link","title":null,"url":"undefined","children":[{"type":"text","value":"Tom Read Cutting","position":{"start":{"line":162,"column":22,"offset":14935},"end":{"line":162,"column":38,"offset":14951},"indent":[]}}],"position":{"start":{"line":162,"column":21,"offset":14934},"end":{"line":162,"column":50,"offset":14963},"indent":[]}},{"type":"text","value":" for editing this article and ","position":{"start":{"line":162,"column":50,"offset":14963},"end":{"line":162,"column":80,"offset":14993},"indent":[]}},{"type":"link","title":null,"url":"undefined","children":[{"type":"text","value":"Christian Silver","position":{"start":{"line":162,"column":81,"offset":14994},"end":{"line":162,"column":97,"offset":15010},"indent":[]}}],"position":{"start":{"line":162,"column":80,"offset":14993},"end":{"line":162,"column":109,"offset":15022},"indent":[]}},{"type":"text","value":" for helping get it off the ground.","position":{"start":{"line":162,"column":109,"offset":15022},"end":{"line":162,"column":144,"offset":15057},"indent":[]}}],"position":{"start":{"line":162,"column":1,"offset":14914},"end":{"line":162,"column":144,"offset":15057},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":163,"column":1,"offset":15058}}}},{"id":"transformer-remark-markdown-ast-11f36ebeac72386eeeee00597b71f344-gatsby-remark-imagesgatsby-remark-prismjs-","value":{"type":"root","children":[{"type":"yaml","value":"path: '/optimise-your-website'\ntitle: 'Optimising your Website'\nsubtitle: 'Tips and tricks to keep your website lean and fast'\ndate: '2018-07-28'\nimage-url: 'https://res.cloudinary.com/patricoferris/image/upload/v1532781201/pf2018/blogposts/28-07-2018/website_optimisation_2.png' ","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":7,"column":4,"offset":288},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://res.cloudinary.com/patricoferris/image/upload/v1532781201/pf2018/blogposts/28-07-2018/website_optimisation_2.png","alt":"Optimising your Website","position":{"start":{"line":8,"column":1,"offset":289},"end":{"line":8,"column":149,"offset":437},"indent":[]}},{"type":"text","value":"\nInspired by a ","position":{"start":{"line":8,"column":149,"offset":437},"end":{"line":9,"column":15,"offset":452},"indent":[1]}},{"type":"link","title":null,"url":"https://syntax.fm/","children":[{"type":"text","value":"Syntax","position":{"start":{"line":9,"column":16,"offset":453},"end":{"line":9,"column":22,"offset":459},"indent":[]}}],"position":{"start":{"line":9,"column":15,"offset":452},"end":{"line":9,"column":43,"offset":480},"indent":[]}},{"type":"text","value":" podcast, I got really interested in website optimisation. It can often be an overlooked aspect in web development with more focus on design and functionality, I realised my number one priority whenever I visited a website is load speed. My attention is a website’s number one goal, lose it and they lose all potential ad revenue or possibility to give me whatever information I was looking for. ","position":{"start":{"line":9,"column":43,"offset":480},"end":{"line":9,"column":439,"offset":876},"indent":[]}},{"type":"link","title":null,"url":"https://developers.google.com/web/fundamentals/performance/get-started/","children":[{"type":"text","value":"Many seem to agree. 53% of users abandon websites that take more than 3 seconds to load","position":{"start":{"line":9,"column":440,"offset":877},"end":{"line":9,"column":527,"offset":964},"indent":[]}}],"position":{"start":{"line":9,"column":439,"offset":876},"end":{"line":9,"column":601,"offset":1038},"indent":[]}},{"type":"text","value":". No amount of fancy graphics or parallax scrolling that appears five seconds after someone’s clicked will hide the slow loading times.","position":{"start":{"line":9,"column":601,"offset":1038},"end":{"line":9,"column":736,"offset":1173},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":289},"end":{"line":9,"column":736,"offset":1173},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"The aim of this article is to give a broad overview of the concepts and ideas behind optimising your website, experienced developers are likely already using things like Webpack (a module bundler) among other tools to speed-up their sites.","position":{"start":{"line":11,"column":1,"offset":1175},"end":{"line":11,"column":240,"offset":1414},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":1175},"end":{"line":11,"column":240,"offset":1414},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For testing load-times I will be using the ","position":{"start":{"line":13,"column":1,"offset":1416},"end":{"line":13,"column":44,"offset":1459},"indent":[]}},{"type":"link","title":null,"url":"https://chrome.google.com/webstore/detail/page-load-time/fploionmjgeclbkemipmkogoaohcdbig?hl=en","children":[{"type":"text","value":"Page Load Time ","position":{"start":{"line":13,"column":45,"offset":1460},"end":{"line":13,"column":60,"offset":1475},"indent":[]}}],"position":{"start":{"line":13,"column":44,"offset":1459},"end":{"line":13,"column":158,"offset":1573},"indent":[]}},{"type":"text","value":"Chrome extension. There are a few ways to measure website loading time including: ","position":{"start":{"line":13,"column":158,"offset":1573},"end":{"line":13,"column":240,"offset":1655},"indent":[]}},{"type":"link","title":null,"url":"https://developers.google.com/web/tools/chrome-user-experience-report/","children":[{"type":"text","value":"first paint, first meaning paint, DOMContentLoaded","position":{"start":{"line":13,"column":241,"offset":1656},"end":{"line":13,"column":291,"offset":1706},"indent":[]}}],"position":{"start":{"line":13,"column":240,"offset":1655},"end":{"line":13,"column":364,"offset":1779},"indent":[]}},{"type":"text","value":" etc. For a more detailed look into what this timer measures, check out the Github repository below.\n","position":{"start":{"line":13,"column":364,"offset":1779},"end":{"line":14,"column":1,"offset":1880},"indent":[1]}},{"type":"link","title":null,"url":"https://github.com/alex-vv/chrome-load-timer","children":[{"type":"strong","children":[{"type":"text","value":"alex-vv/chrome-load-timer","position":{"start":{"line":14,"column":4,"offset":1883},"end":{"line":14,"column":29,"offset":1908},"indent":[]}}],"position":{"start":{"line":14,"column":2,"offset":1881},"end":{"line":14,"column":31,"offset":1910},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":14,"column":31,"offset":1910},"end":{"line":15,"column":1,"offset":1911},"indent":[1]}},{"type":"emphasis","children":[{"type":"text","value":"chrome-load-timer - Google Chrome extension to measure page load time and display it in the toolbar","position":{"start":{"line":15,"column":2,"offset":1912},"end":{"line":15,"column":101,"offset":2011},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":1911},"end":{"line":15,"column":102,"offset":2012},"indent":[]}},{"type":"text","value":"github.com","position":{"start":{"line":15,"column":102,"offset":2012},"end":{"line":15,"column":112,"offset":2022},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":1880},"end":{"line":15,"column":159,"offset":2069},"indent":[1]}}],"position":{"start":{"line":13,"column":1,"offset":1416},"end":{"line":15,"column":159,"offset":2069},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"strong","children":[{"type":"text","value":"Use Minified Stylesheets and Scripts","position":{"start":{"line":17,"column":7,"offset":2077},"end":{"line":17,"column":43,"offset":2113},"indent":[]}}],"position":{"start":{"line":17,"column":5,"offset":2075},"end":{"line":17,"column":45,"offset":2115},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":2071},"end":{"line":17,"column":45,"offset":2115},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You would be amazed at how much performance can be gained by this simple trick. What is a minified document? When we write code it is never our job to make it optimised for the computer, instead our golden rule is to make it readable to humans. This improves readability, cuts down on debug time and makes it easier to maintain. However, to achieve this we often add extra spacing which costs us precious space. Minifying the code is trimming all this fat from what we’ve written to have code that produces the same result but is far more difficult to read and maintain. This is okay though, because a computer has no problem deciphering it. Take the following code for example.","position":{"start":{"line":19,"column":1,"offset":2117},"end":{"line":19,"column":679,"offset":2795},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":2117},"end":{"line":19,"column":679,"offset":2795},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","position":{"start":{"line":21,"column":1,"offset":2797},"end":{"line":30,"column":4,"offset":3056},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Notice how, wherever possible, our line-breaks and spaces are gone. On top of that, the code in the for-loop is only one line so there’s no need for the curly braces which extends our code over three lines when it can be done in one. Does this make a difference?","position":{"start":{"line":32,"column":1,"offset":3058},"end":{"line":32,"column":263,"offset":3320},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":3058},"end":{"line":32,"column":263,"offset":3320},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"I tried it out on simple website that just had one script tag being loaded in for the graphics library ","position":{"start":{"line":34,"column":1,"offset":3322},"end":{"line":34,"column":104,"offset":3425},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/","children":[{"type":"text","value":"p5.js","position":{"start":{"line":34,"column":105,"offset":3426},"end":{"line":34,"column":110,"offset":3431},"indent":[]}}],"position":{"start":{"line":34,"column":104,"offset":3425},"end":{"line":34,"column":130,"offset":3451},"indent":[]}},{"type":"text","value":". Using the non-minified CDN link I got a load time of 0.25 seconds. Using the minified version I got a markedly improved load time of 0.08 seconds. Depending on what your website project is, there are a few ways to automatically minify code. If it is a ","position":{"start":{"line":34,"column":130,"offset":3451},"end":{"line":34,"column":384,"offset":3705},"indent":[]}},{"type":"link","title":null,"url":"https://guide.meteor.com/build-tool.html","children":[{"type":"text","value":"Meteor app","position":{"start":{"line":34,"column":385,"offset":3706},"end":{"line":34,"column":395,"offset":3716},"indent":[]}}],"position":{"start":{"line":34,"column":384,"offset":3705},"end":{"line":34,"column":438,"offset":3759},"indent":[]}},{"type":"text","value":" it will be done automatically, using ","position":{"start":{"line":34,"column":438,"offset":3759},"end":{"line":34,"column":476,"offset":3797},"indent":[]}},{"type":"link","title":null,"url":"https://webpack.js.org/guides/production/","children":[{"type":"text","value":"Webpack ","position":{"start":{"line":34,"column":477,"offset":3798},"end":{"line":34,"column":485,"offset":3806},"indent":[]}}],"position":{"start":{"line":34,"column":476,"offset":3797},"end":{"line":34,"column":529,"offset":3850},"indent":[]}},{"type":"text","value":"will also allow you to do this. Otherwise there are some online tools like ","position":{"start":{"line":34,"column":529,"offset":3850},"end":{"line":34,"column":604,"offset":3925},"indent":[]}},{"type":"link","title":null,"url":"https://jscompress.com/","children":[{"type":"text","value":"JSCompress ","position":{"start":{"line":34,"column":605,"offset":3926},"end":{"line":34,"column":616,"offset":3937},"indent":[]}}],"position":{"start":{"line":34,"column":604,"offset":3925},"end":{"line":34,"column":642,"offset":3963},"indent":[]}},{"type":"text","value":"or ","position":{"start":{"line":34,"column":642,"offset":3963},"end":{"line":34,"column":645,"offset":3966},"indent":[]}},{"type":"link","title":null,"url":"https://cssminifier.com/","children":[{"type":"text","value":"CSSMinifier ","position":{"start":{"line":34,"column":646,"offset":3967},"end":{"line":34,"column":658,"offset":3979},"indent":[]}}],"position":{"start":{"line":34,"column":645,"offset":3966},"end":{"line":34,"column":685,"offset":4006},"indent":[]}},{"type":"text","value":"that you can upload your code to.","position":{"start":{"line":34,"column":685,"offset":4006},"end":{"line":34,"column":718,"offset":4039},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":3322},"end":{"line":34,"column":718,"offset":4039},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Design Versus Performance","position":{"start":{"line":36,"column":5,"offset":4045},"end":{"line":36,"column":30,"offset":4070},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":4041},"end":{"line":36,"column":30,"offset":4070},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Whilst design is undoubtedly a major aspect to a website’s overall success, both developers and designers must work together to compromise and make a mutually beneficial trade-off between design and performance. The classic example is fonts. Take the two screenshots of a simple website below.","position":{"start":{"line":38,"column":1,"offset":4072},"end":{"line":38,"column":294,"offset":4365},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":4072},"end":{"line":38,"column":294,"offset":4365},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://res.cloudinary.com/patricoferris/image/upload/v1532780050/pf2018/blogposts/28-07-2018/Helvetica.png","alt":"The example website using Helvetica Font (commonly found on many computers) — check [this](https://css-tricks.com/snippets/css/system-font-stack/) link for common system fonts","position":{"start":{"line":40,"column":1,"offset":4367},"end":{"line":40,"column":288,"offset":4654},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":40,"column":288,"offset":4654},"end":{"line":41,"column":1,"offset":4655},"indent":[1]}},{"type":"emphasis","children":[{"type":"text","value":"The example website using Helvetica Font (commonly found on many computers) — check ","position":{"start":{"line":41,"column":2,"offset":4656},"end":{"line":41,"column":86,"offset":4740},"indent":[]}},{"type":"link","title":null,"url":"https://css-tricks.com/snippets/css/system-font-stack/","children":[{"type":"text","value":"this","position":{"start":{"line":41,"column":87,"offset":4741},"end":{"line":41,"column":91,"offset":4745},"indent":[]}}],"position":{"start":{"line":41,"column":86,"offset":4740},"end":{"line":41,"column":148,"offset":4802},"indent":[]}},{"type":"text","value":" link for common system fonts","position":{"start":{"line":41,"column":148,"offset":4802},"end":{"line":41,"column":177,"offset":4831},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":4655},"end":{"line":41,"column":178,"offset":4832},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":4367},"end":{"line":41,"column":178,"offset":4832},"indent":[1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://cdn-images-1.medium.com/max/5760/1*8ciuJNBdqMhlLSaOpNUXow.png","alt":"The example website using Roboto Font (designed by Google and linked from [Google Fonts](https://fonts.google.com/?selection.family=Roboto))","position":{"start":{"line":43,"column":1,"offset":4834},"end":{"line":43,"column":215,"offset":5048},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"The example website using Roboto Font (designed by Google and linked from ","position":{"start":{"line":43,"column":216,"offset":5049},"end":{"line":43,"column":290,"offset":5123},"indent":[]}},{"type":"link","title":null,"url":"https://fonts.google.com/?selection.family=Roboto","children":[{"type":"text","value":"Google Fonts","position":{"start":{"line":43,"column":291,"offset":5124},"end":{"line":43,"column":303,"offset":5136},"indent":[]}}],"position":{"start":{"line":43,"column":290,"offset":5123},"end":{"line":43,"column":355,"offset":5188},"indent":[]}},{"type":"text","value":")","position":{"start":{"line":43,"column":355,"offset":5188},"end":{"line":43,"column":356,"offset":5189},"indent":[]}}],"position":{"start":{"line":43,"column":215,"offset":5048},"end":{"line":43,"column":357,"offset":5190},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":4834},"end":{"line":43,"column":357,"offset":5190},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Before critiquing my questionable design skills take a moment to appreciate that these two fonts are very similar — yet the loading time for a website for the Roboto font was 0.22 seconds as compared with 0.17 for Helvetica. Whilst not that significant, using lots of custom fonts will slow down your website, although using Google Fonts’ API will help keep your website optimised. As an over-the-top example, linking 20 different fonts from the Google API increased the load time to 0.87 seconds.","position":{"start":{"line":45,"column":1,"offset":5192},"end":{"line":45,"column":498,"offset":5689},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":5192},"end":{"line":45,"column":498,"offset":5689},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Inlining your JavaScript and CSS","position":{"start":{"line":47,"column":5,"offset":5695},"end":{"line":47,"column":37,"offset":5727},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":5691},"end":{"line":47,"column":37,"offset":5727},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For each individual document or component of your website, when the parser reaches the script tag or link tag it sends and HTTP request for that document and if not stated differently, these will be blocking actions. What this means is your machine is parsing the HTML document getting the words to display in your browser but if it hits the script tag with the attribute src='js/main.js' for example, it will block the parsing and load in that file. This is where as a developer you need to be clever about where in the document you place things.","position":{"start":{"line":49,"column":1,"offset":5729},"end":{"line":49,"column":548,"offset":6276},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":5729},"end":{"line":49,"column":548,"offset":6276},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Whilst it may not ultimately affect the loading time of your website, it can affect the order in which things are loaded. Again we’ll be using the un-minified p5.js library to simulate a large JavaScript file and load it in different places to see how it affects our user experience.","position":{"start":{"line":51,"column":1,"offset":6278},"end":{"line":51,"column":284,"offset":6561},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":6278},"end":{"line":51,"column":284,"offset":6561},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://cdn-images-1.medium.com/max/2780/1*h_3GogfkaahcXCO9a43CPA.gif","alt":"Refreshing website with the script tag inserted at the bottom of the body tag","position":{"start":{"line":53,"column":1,"offset":6563},"end":{"line":53,"column":152,"offset":6714},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Refreshing website with the script tag inserted at the bottom of the body tag","position":{"start":{"line":53,"column":153,"offset":6715},"end":{"line":53,"column":230,"offset":6792},"indent":[]}}],"position":{"start":{"line":53,"column":152,"offset":6714},"end":{"line":53,"column":231,"offset":6793},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":6563},"end":{"line":53,"column":231,"offset":6793},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://cdn-images-1.medium.com/max/2780/1*xLOq5r4erQAwb4Au_hB-Ww.gif","alt":"Refreshing website with the script tag inserted at the top of the body tag","position":{"start":{"line":55,"column":1,"offset":6795},"end":{"line":55,"column":149,"offset":6943},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Refreshing website with the script tag inserted at the top of the body tag","position":{"start":{"line":55,"column":150,"offset":6944},"end":{"line":55,"column":224,"offset":7018},"indent":[]}}],"position":{"start":{"line":55,"column":149,"offset":6943},"end":{"line":55,"column":225,"offset":7019},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":6795},"end":{"line":55,"column":225,"offset":7019},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Whilst the load times were similar for both cases — the user experience is far better by placing the script at the body tag allowing the HTML to be parsed before the JavaScript giving the user the website content immediately!","position":{"start":{"line":57,"column":1,"offset":7021},"end":{"line":57,"column":226,"offset":7246},"indent":[]}}],"position":{"start":{"line":57,"column":1,"offset":7021},"end":{"line":57,"column":226,"offset":7246},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In the same vein CSS can also be render-blocking especially because more often than not it is linked in the head tag of your HTML document before the body. But if we want our user to see the content in the quickest time we don’t want to be loading CSS for the footer of our document which the user won’t see until they’ve scrolled to the bottom. In fact, we don’t want to load any CSS in that the user can’t immediately see when the page first loads on their device.","position":{"start":{"line":59,"column":1,"offset":7248},"end":{"line":59,"column":467,"offset":7714},"indent":[]}}],"position":{"start":{"line":59,"column":1,"offset":7248},"end":{"line":59,"column":467,"offset":7714},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The CSS that you need is often called the ","position":{"start":{"line":61,"column":1,"offset":7716},"end":{"line":61,"column":43,"offset":7758},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Critical CSS","position":{"start":{"line":61,"column":44,"offset":7759},"end":{"line":61,"column":56,"offset":7771},"indent":[]}}],"position":{"start":{"line":61,"column":43,"offset":7758},"end":{"line":61,"column":57,"offset":7772},"indent":[]}},{"type":"text","value":". Finding it for yourself would be a headache. It will be different for different devices, meaning you would have to check manually for all possible devices. Lucky for us we have (if you’re using ","position":{"start":{"line":61,"column":57,"offset":7772},"end":{"line":61,"column":253,"offset":7968},"indent":[]}},{"type":"link","title":null,"url":"https://nodejs.org/en/","children":[{"type":"text","value":"Node.js","position":{"start":{"line":61,"column":254,"offset":7969},"end":{"line":61,"column":261,"offset":7976},"indent":[]}}],"position":{"start":{"line":61,"column":253,"offset":7968},"end":{"line":61,"column":286,"offset":8001},"indent":[]}},{"type":"text","value":") ","position":{"start":{"line":61,"column":286,"offset":8001},"end":{"line":61,"column":288,"offset":8003},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/addyosmani/critical","children":[{"type":"text","value":"Critical","position":{"start":{"line":61,"column":289,"offset":8004},"end":{"line":61,"column":297,"offset":8012},"indent":[]}}],"position":{"start":{"line":61,"column":288,"offset":8003},"end":{"line":61,"column":338,"offset":8053},"indent":[]}},{"type":"text","value":". This helpful package does the CSS inlining for us and all we do is add some code to a Javascript file. Here’s a code snippet from the Github page.","position":{"start":{"line":61,"column":338,"offset":8053},"end":{"line":61,"column":486,"offset":8201},"indent":[]}}],"position":{"start":{"line":61,"column":1,"offset":7716},"end":{"line":61,"column":486,"offset":8201},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> critical <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'critical'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncritical<span class=\"token punctuation\">.</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    base<span class=\"token punctuation\">:</span> <span class=\"token string\">'test/'</span><span class=\"token punctuation\">,</span>\n    src<span class=\"token punctuation\">:</span> <span class=\"token string\">'index.html'</span><span class=\"token punctuation\">,</span>\n    dest<span class=\"token punctuation\">:</span> <span class=\"token string\">'styles/main.css'</span><span class=\"token punctuation\">,</span>\n    dimensions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n        height<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n        width<span class=\"token punctuation\">:</span> <span class=\"token number\">500</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        height<span class=\"token punctuation\">:</span> <span class=\"token number\">900</span><span class=\"token punctuation\">,</span>\n        width<span class=\"token punctuation\">:</span> <span class=\"token number\">1200</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","position":{"start":{"line":63,"column":1,"offset":8203},"end":{"line":78,"column":4,"offset":8468},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Using the generate function, we supply it with a JavaScript object with some values defined. base is where we’re going to save our src and dest (our project folder usually). What’s great is now we just supply an array of dimensions and the code will compute the critical CSS for each and inline that code into our head tag.","position":{"start":{"line":80,"column":1,"offset":8470},"end":{"line":80,"column":324,"offset":8793},"indent":[]}}],"position":{"start":{"line":80,"column":1,"offset":8470},"end":{"line":80,"column":324,"offset":8793},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Async and Defer","position":{"start":{"line":82,"column":5,"offset":8799},"end":{"line":82,"column":20,"offset":8814},"indent":[]}}],"position":{"start":{"line":82,"column":1,"offset":8795},"end":{"line":82,"column":20,"offset":8814},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Again, we come back to this idea of render-blocking and how best we should implement this for our website. When you have a plain script tag in your HTML it blocks the HTML from loading whilst the JavaScript loads ","position":{"start":{"line":84,"column":1,"offset":8816},"end":{"line":84,"column":214,"offset":9029},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"and","position":{"start":{"line":84,"column":216,"offset":9031},"end":{"line":84,"column":219,"offset":9034},"indent":[]}}],"position":{"start":{"line":84,"column":214,"offset":9029},"end":{"line":84,"column":221,"offset":9036},"indent":[]}},{"type":"text","value":" runs. Async and defer are simple attributes that you can add to your script tags that change the way your JavaScript will be loaded.","position":{"start":{"line":84,"column":221,"offset":9036},"end":{"line":84,"column":354,"offset":9169},"indent":[]}}],"position":{"start":{"line":84,"column":1,"offset":8816},"end":{"line":84,"column":354,"offset":9169},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Defer essentially “defers” execution of the script until after the HTML has been parsed. A major advantage of this is that you no longer need some $(document).ready() jQuery-style function to make sure the body was loaded before you could manipulate it, which could cut out some of the dependencies on libraries like jQuery which helps reduce load-time.","position":{"start":{"line":86,"column":1,"offset":9171},"end":{"line":86,"column":354,"offset":9524},"indent":[]}}],"position":{"start":{"line":86,"column":1,"offset":9171},"end":{"line":86,"column":354,"offset":9524},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Async is, unsurprisingly, the asynchronous loading of JavaScript files. What does this mean? Your HTML will continue to be parsed whilst the file is loaded and then whenever its ready the file will be executed. This helps improving user experience whilst viewing your website. Imagine for example you had a JavaScript file for doing some cool graphics. You want the words around this graphic to be parsed until your graphic is ready to be executed. As soon as it is ready, it is executed and we get a more seamless loading of our webpage without missing pieces.","position":{"start":{"line":88,"column":1,"offset":9526},"end":{"line":88,"column":562,"offset":10087},"indent":[]}}],"position":{"start":{"line":88,"column":1,"offset":9526},"end":{"line":88,"column":562,"offset":10087},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Check this ","position":{"start":{"line":90,"column":1,"offset":10089},"end":{"line":90,"column":12,"offset":10100},"indent":[]}},{"type":"link","title":null,"url":"http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html","children":[{"type":"text","value":"website","position":{"start":{"line":90,"column":13,"offset":10101},"end":{"line":90,"column":20,"offset":10108},"indent":[]}}],"position":{"start":{"line":90,"column":12,"offset":10100},"end":{"line":90,"column":94,"offset":10182},"indent":[]}},{"type":"text","value":" for a really intuitive, graphical representation of this.","position":{"start":{"line":90,"column":94,"offset":10182},"end":{"line":90,"column":152,"offset":10240},"indent":[]}}],"position":{"start":{"line":90,"column":1,"offset":10089},"end":{"line":90,"column":152,"offset":10240},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Image Optimisation and Media Queries","position":{"start":{"line":92,"column":5,"offset":10246},"end":{"line":92,"column":41,"offset":10282},"indent":[]}}],"position":{"start":{"line":92,"column":1,"offset":10242},"end":{"line":92,"column":41,"offset":10282},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The cornerstone of all website performance optimisation is the simple rule that, the less data you send to the client, the quicker and better your website will perform. With the plethora of devices on the market capable of viewing websites, there is a growing trend to optimise your website based on the device it is being viewed on.","position":{"start":{"line":94,"column":1,"offset":10284},"end":{"line":94,"column":334,"offset":10617},"indent":[]}}],"position":{"start":{"line":94,"column":1,"offset":10284},"end":{"line":94,"column":334,"offset":10617},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Media queries are a fairly new tool added to CSS3. With more and more content being consumed using mobile-devices there has been a shift in design thinking towards mobile first. Using media queries you can then add stylings for larger screen sizes.","position":{"start":{"line":96,"column":1,"offset":10619},"end":{"line":96,"column":249,"offset":10867},"indent":[]}}],"position":{"start":{"line":96,"column":1,"offset":10619},"end":{"line":96,"column":249,"offset":10867},"indent":[]}},{"type":"html","lang":"css","value":"<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/* Some CSS for screen sizes bigger than 600px but smaller than 992px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/*  Some CSS for screen sizes bigger than 992px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">orientation</span><span class=\"token punctuation\">:</span> landscape<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* Some CSS for landscape-oriented devices */</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":98,"column":1,"offset":10869},"end":{"line":110,"column":4,"offset":11199},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The @media tag starts a new CSS rule, whilst the only keyword stops older browsers that don’t support media queries from using it. The screen keyword applies the rules to screens rather than prints. After that you add the media-feature which supports the and , or and not keywords so you can get as specific as you want. When you’re loading your image you can write code like:","position":{"start":{"line":112,"column":1,"offset":11201},"end":{"line":112,"column":377,"offset":11577},"indent":[]}}],"position":{"start":{"line":112,"column":1,"offset":11201},"end":{"line":112,"column":377,"offset":11577},"indent":[]}},{"type":"html","lang":"css","value":"<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-small.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-big.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":114,"column":1,"offset":11579},"end":{"line":122,"column":4,"offset":11798},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This isn’t necessarily the best or optimal approach for image optimisation. Luckily we have other options. ","position":{"start":{"line":124,"column":1,"offset":11800},"end":{"line":124,"column":108,"offset":11907},"indent":[]}},{"type":"link","title":null,"url":"https://www.imgix.com/","children":[{"type":"text","value":"Imgix","position":{"start":{"line":124,"column":109,"offset":11908},"end":{"line":124,"column":114,"offset":11913},"indent":[]}}],"position":{"start":{"line":124,"column":108,"offset":11907},"end":{"line":124,"column":139,"offset":11938},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":124,"column":139,"offset":11938},"end":{"line":124,"column":144,"offset":11943},"indent":[]}},{"type":"link","title":null,"url":"https://cloudinary.com/","children":[{"type":"text","value":"Cloudinary","position":{"start":{"line":124,"column":145,"offset":11944},"end":{"line":124,"column":155,"offset":11954},"indent":[]}}],"position":{"start":{"line":124,"column":144,"offset":11943},"end":{"line":124,"column":181,"offset":11980},"indent":[]}},{"type":"text","value":" are two ways you can help optimise your site for the right device. Imgix is a Content Delivery Network (CDN) for images with a lot of cool features. A CDN simply takes your files and spreads them across the globe so that someone in a different country doesn’t have to wait for your files on your server to make it all the way to them. This ","position":{"start":{"line":124,"column":181,"offset":11980},"end":{"line":124,"column":522,"offset":12321},"indent":[]}},{"type":"link","title":null,"url":"https://docs.imgix.com/tutorials/responsive-images-srcset-imgix","children":[{"type":"text","value":"tutorial","position":{"start":{"line":124,"column":523,"offset":12322},"end":{"line":124,"column":531,"offset":12330},"indent":[]}}],"position":{"start":{"line":124,"column":522,"offset":12321},"end":{"line":124,"column":597,"offset":12396},"indent":[]}},{"type":"text","value":" goes through how to use Imgix for different device pixel ratios. Cloudinary is a similar service, and their ","position":{"start":{"line":124,"column":597,"offset":12396},"end":{"line":124,"column":706,"offset":12505},"indent":[]}},{"type":"link","title":null,"url":"https://cloudinary.com/documentation/image_optimization","children":[{"type":"text","value":"tutorial ","position":{"start":{"line":124,"column":707,"offset":12506},"end":{"line":124,"column":716,"offset":12515},"indent":[]}}],"position":{"start":{"line":124,"column":706,"offset":12505},"end":{"line":124,"column":774,"offset":12573},"indent":[]}},{"type":"text","value":"will take you through the importance of optimisation and how to achieve it will their incredible services. Below is a small example showing how easy it is to use Cloudinary straight in the HTML markup.","position":{"start":{"line":124,"column":774,"offset":12573},"end":{"line":124,"column":975,"offset":12774},"indent":[]}}],"position":{"start":{"line":124,"column":1,"offset":11800},"end":{"line":124,"column":975,"offset":12774},"indent":[]}},{"type":"html","value":"<iframe height='400' scrolling='no' title='Cloudinary Example' src='//codepen.io/patricoferris/embed/ejgVJN/?height=400&theme-id=0&default-tab=html,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/ejgVJN/'>Cloudinary Example</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":126,"column":1,"offset":12776},"end":{"line":127,"column":10,"offset":13260},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"As a last point on image optimisation, the format you use can have a large impact on file size. Some files contain lots of metadata which you don’t want to be serving to your client — ","position":{"start":{"line":129,"column":1,"offset":13262},"end":{"line":129,"column":185,"offset":13446},"indent":[]}},{"type":"link","title":null,"url":"https://www.sno.phy.queensu.ca/~phil/exiftool/","children":[{"type":"text","value":"ExifTool","position":{"start":{"line":129,"column":186,"offset":13447},"end":{"line":129,"column":194,"offset":13455},"indent":[]}}],"position":{"start":{"line":129,"column":185,"offset":13446},"end":{"line":129,"column":243,"offset":13504},"indent":[]}},{"type":"text","value":" is a commonly used command-line application that can help you trim down those files sizes. On top of this, Scalable Vector Graphics (SVG) are a web-standard developed by W3C that offers XML-based vector graphics. This means they have infinite resolution unlike PNG or JPG files. It also makes them highly versatile, easily editable and can even be animated. At the end of the day SVGs are just code and so the file sizes tend to be small. For more reasons to use them, check out this ","position":{"start":{"line":129,"column":243,"offset":13504},"end":{"line":129,"column":728,"offset":13989},"indent":[]}},{"type":"link","title":null,"url":"https://watb.co.uk/5-reasons-you-should-be-using-svgs-over-pngs/","children":[{"type":"text","value":"article","position":{"start":{"line":129,"column":729,"offset":13990},"end":{"line":129,"column":736,"offset":13997},"indent":[]}}],"position":{"start":{"line":129,"column":728,"offset":13989},"end":{"line":129,"column":803,"offset":14064},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":129,"column":803,"offset":14064},"end":{"line":129,"column":804,"offset":14065},"indent":[]}}],"position":{"start":{"line":129,"column":1,"offset":13262},"end":{"line":129,"column":804,"offset":14065},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":131,"column":5,"offset":14071},"end":{"line":131,"column":15,"offset":14081},"indent":[]}}],"position":{"start":{"line":131,"column":1,"offset":14067},"end":{"line":131,"column":15,"offset":14081},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We’ve only scratched the surface of what’s possible for website optimisation. There are many tools you can use to help you stream-line this process like ","position":{"start":{"line":133,"column":1,"offset":14083},"end":{"line":133,"column":154,"offset":14236},"indent":[]}},{"type":"link","title":null,"url":"https://webpack.js.org/","children":[{"type":"text","value":"Webpack","position":{"start":{"line":133,"column":155,"offset":14237},"end":{"line":133,"column":162,"offset":14244},"indent":[]}}],"position":{"start":{"line":133,"column":154,"offset":14236},"end":{"line":133,"column":188,"offset":14270},"indent":[]}},{"type":"text","value":" for bundling or static-site generators like ","position":{"start":{"line":133,"column":188,"offset":14270},"end":{"line":133,"column":233,"offset":14315},"indent":[]}},{"type":"link","title":null,"url":"https://www.gatsbyjs.org/","children":[{"type":"text","value":"Gatsby","position":{"start":{"line":133,"column":234,"offset":14316},"end":{"line":133,"column":240,"offset":14322},"indent":[]}}],"position":{"start":{"line":133,"column":233,"offset":14315},"end":{"line":133,"column":268,"offset":14350},"indent":[]}},{"type":"text","value":". ","position":{"start":{"line":133,"column":268,"offset":14350},"end":{"line":133,"column":270,"offset":14352},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking","children":[{"type":"text","value":"Tree shaking","position":{"start":{"line":133,"column":271,"offset":14353},"end":{"line":133,"column":283,"offset":14365},"indent":[]}}],"position":{"start":{"line":133,"column":270,"offset":14352},"end":{"line":133,"column":348,"offset":14430},"indent":[]}},{"type":"text","value":" is another commonly used technique to remove excess, unused modules lying around your website.","position":{"start":{"line":133,"column":348,"offset":14430},"end":{"line":133,"column":443,"offset":14525},"indent":[]}}],"position":{"start":{"line":133,"column":1,"offset":14083},"end":{"line":133,"column":443,"offset":14525},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Hopefully this article has touched on some useful techniques you can use on your next site to help improve its performance. Happy coding!","position":{"start":{"line":135,"column":1,"offset":14527},"end":{"line":135,"column":138,"offset":14664},"indent":[]}}],"position":{"start":{"line":135,"column":1,"offset":14527},"end":{"line":135,"column":138,"offset":14664},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A big thank you to ","position":{"start":{"line":137,"column":1,"offset":14666},"end":{"line":137,"column":20,"offset":14685},"indent":[]}},{"type":"link","title":null,"url":"https://medium.com/@pinpickle","children":[{"type":"text","value":"Christian Silver","position":{"start":{"line":137,"column":21,"offset":14686},"end":{"line":137,"column":37,"offset":14702},"indent":[]}}],"position":{"start":{"line":137,"column":20,"offset":14685},"end":{"line":137,"column":69,"offset":14734},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":137,"column":69,"offset":14734},"end":{"line":137,"column":74,"offset":14739},"indent":[]}},{"type":"link","title":null,"url":"https://medium.com/@charliecrisp249","children":[{"type":"text","value":"Charlie Crisp","position":{"start":{"line":137,"column":75,"offset":14740},"end":{"line":137,"column":88,"offset":14753},"indent":[]}}],"position":{"start":{"line":137,"column":74,"offset":14739},"end":{"line":137,"column":126,"offset":14791},"indent":[]}},{"type":"text","value":" for editing this post and providing extremely useful advice and extra content to make it even better.","position":{"start":{"line":137,"column":126,"offset":14791},"end":{"line":137,"column":228,"offset":14893},"indent":[]}}],"position":{"start":{"line":137,"column":1,"offset":14666},"end":{"line":137,"column":228,"offset":14893},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":138,"column":1,"offset":14894}}}},{"id":"transformer-remark-markdown-html-ast-a5db6dfc096fc0fa6d7ff2c192bed778-gatsby-remark-imagesgatsby-remark-prismjs-","value":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/patricoferris/image/upload/v1532857964/pf2018/blogposts/27-02-2018/tree.png","alt":"Recursive Tree"},"children":[],"position":{"start":{"line":9,"column":1,"offset":270},"end":{"line":9,"column":122,"offset":391}}}],"position":{"start":{"line":9,"column":1,"offset":270},"end":{"line":9,"column":122,"offset":391}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Graphics and computer programming are two dearly intertwined disciplines. The oscilloscope is often recognised as one of the first examples of “computer graphics”, the cathode-ray versions emitting a beam of electrons onto a phosphorescent screen. By using magnetic fields to change the beam’s direction, we can sweep from left to right and move up and down — the basic idea behind most CG! (I highly recommend watching this ","position":{"start":{"line":11,"column":1,"offset":393},"end":{"line":11,"column":426,"offset":818}}},{"type":"element","tagName":"a","properties":{"href":"https://archive.org/details/introductiontothecathoderayoscilloscope"},"children":[{"type":"text","value":"video","position":{"start":{"line":11,"column":427,"offset":819},"end":{"line":11,"column":432,"offset":824}}}],"position":{"start":{"line":11,"column":426,"offset":818},"end":{"line":11,"column":502,"offset":894}}},{"type":"text","value":" from 1970).","position":{"start":{"line":11,"column":502,"offset":894},"end":{"line":11,"column":514,"offset":906}}}],"position":{"start":{"line":11,"column":1,"offset":393},"end":{"line":11,"column":514,"offset":906}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We’ve come a long way since then — modern day graphics is a complicated science as well as an art, and the barrier to entry is constantly increasing. Graphics programming can be so complex, that a simple program to draw a triangle can be over ","position":{"start":{"line":13,"column":1,"offset":908},"end":{"line":13,"column":244,"offset":1151}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/SaschaWillems/Vulkan/blob/master/examples/triangle/triangle.cpp"},"children":[{"type":"text","value":"1000 lines of code","position":{"start":{"line":13,"column":245,"offset":1152},"end":{"line":13,"column":263,"offset":1170}}}],"position":{"start":{"line":13,"column":244,"offset":1151},"end":{"line":13,"column":348,"offset":1255}}},{"type":"text","value":"! However, this article will introduce you to ","position":{"start":{"line":13,"column":348,"offset":1255},"end":{"line":13,"column":394,"offset":1301}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/"},"children":[{"type":"text","value":"p5.js","position":{"start":{"line":13,"column":395,"offset":1302},"end":{"line":13,"column":400,"offset":1307}}}],"position":{"start":{"line":13,"column":394,"offset":1301},"end":{"line":13,"column":420,"offset":1327}}},{"type":"text","value":" (also known as p5). A simpler, less complex solution for people who want to start making computer graphics, but don’t want the headache of streams of boiler-plate code.","position":{"start":{"line":13,"column":420,"offset":1327},"end":{"line":13,"column":589,"offset":1496}}}],"position":{"start":{"line":13,"column":1,"offset":908},"end":{"line":13,"column":589,"offset":1496}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Straight from the landing page of the p5.js website.","position":{"start":{"line":15,"column":1,"offset":1498},"end":{"line":15,"column":53,"offset":1550}}}],"position":{"start":{"line":15,"column":1,"offset":1498},"end":{"line":15,"column":53,"offset":1550}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"…make coding accessible for artists, designers, educators and beginners…","position":{"start":{"line":16,"column":5,"offset":1555},"end":{"line":16,"column":77,"offset":1627}}}],"position":{"start":{"line":16,"column":3,"offset":1553},"end":{"line":16,"column":77,"offset":1627}}},{"type":"text","value":"\n"}],"position":{"start":{"line":16,"column":1,"offset":1551},"end":{"line":16,"column":77,"offset":1627}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"p5.js is the result of hard-work of the ","position":{"start":{"line":18,"column":1,"offset":1629},"end":{"line":18,"column":41,"offset":1669}}},{"type":"element","tagName":"a","properties":{"href":"https://processingfoundation.org/"},"children":[{"type":"text","value":"Processing Foundation","position":{"start":{"line":18,"column":42,"offset":1670},"end":{"line":18,"column":63,"offset":1691}}}],"position":{"start":{"line":18,"column":41,"offset":1669},"end":{"line":18,"column":99,"offset":1727}}},{"type":"text","value":", a group focused on spreading computer and visual literacy. It distills their ","position":{"start":{"line":18,"column":99,"offset":1727},"end":{"line":18,"column":178,"offset":1806}}},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/Processing_(programming_language)"},"children":[{"type":"text","value":"Processing","position":{"start":{"line":18,"column":179,"offset":1807},"end":{"line":18,"column":189,"offset":1817}}}],"position":{"start":{"line":18,"column":178,"offset":1806},"end":{"line":18,"column":255,"offset":1883}}},{"type":"text","value":" language into a JavaScript library that makes creating graphics easy and accessible whilst providing an ideal platform to springboard people’s careers in computer graphics. It should be mentioned now that a lot of inspiration has been taken from ","position":{"start":{"line":18,"column":255,"offset":1883},"end":{"line":18,"column":502,"offset":2130}}},{"type":"element","tagName":"a","properties":{"href":"http://shiffman.net/"},"children":[{"type":"text","value":"Daniel Shiffman’s","position":{"start":{"line":18,"column":503,"offset":2131},"end":{"line":18,"column":520,"offset":2148}}}],"position":{"start":{"line":18,"column":502,"offset":2130},"end":{"line":18,"column":543,"offset":2171}}},{"type":"text","value":" p5 projects (from the ","position":{"start":{"line":18,"column":543,"offset":2171},"end":{"line":18,"column":566,"offset":2194}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/CodingTrain/website/tree/master/CodingChallenges/CC_03_Snake_game_p5.js"},"children":[{"type":"text","value":"classic snake game","position":{"start":{"line":18,"column":567,"offset":2195},"end":{"line":18,"column":585,"offset":2213}}}],"position":{"start":{"line":18,"column":566,"offset":2194},"end":{"line":18,"column":678,"offset":2306}}},{"type":"text","value":", to a ","position":{"start":{"line":18,"column":678,"offset":2306},"end":{"line":18,"column":685,"offset":2313}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/CodingTrain/website/tree/master/CodingChallenges/CC_93_DoublePendulum_p5.js"},"children":[{"type":"text","value":"double pendulum","position":{"start":{"line":18,"column":686,"offset":2314},"end":{"line":18,"column":701,"offset":2329}}}],"position":{"start":{"line":18,"column":685,"offset":2313},"end":{"line":18,"column":798,"offset":2426}}},{"type":"text","value":"). I can’t urge you enough to follow these projects to really improve your understanding of coding concepts and the p5 library.","position":{"start":{"line":18,"column":798,"offset":2426},"end":{"line":18,"column":925,"offset":2553}}}],"position":{"start":{"line":18,"column":1,"offset":1629},"end":{"line":18,"column":925,"offset":2553}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Some prerequisites:","position":{"start":{"line":20,"column":5,"offset":2559},"end":{"line":20,"column":24,"offset":2578}}}],"position":{"start":{"line":20,"column":1,"offset":2555},"end":{"line":20,"column":24,"offset":2578}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Before jumping into the p5 code I first want to make clear that there is assumed knowledge of HTML5 and JavaScript including arrays, functions, variables etc. in the rest of this article. If you have a good grasp of JavaScript then skip to the p5 code below, otherwise here are few resources to get you up to scratch.","position":{"start":{"line":22,"column":1,"offset":2580},"end":{"line":22,"column":318,"offset":2897}}}],"position":{"start":{"line":22,"column":1,"offset":2580},"end":{"line":22,"column":318,"offset":2897}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.youtube.com/watch?v=spIVWmv1jnw"},"children":[{"type":"text","value":"HaC Intro to Programming","position":{"start":{"line":24,"column":4,"offset":2902},"end":{"line":24,"column":28,"offset":2926}}}],"position":{"start":{"line":24,"column":3,"offset":2901},"end":{"line":24,"column":74,"offset":2972}}},{"type":"text","value":" — A workshop that is being run by Hackers at Cambridge to help anyone start learning to program (which uses JavaScript).","position":{"start":{"line":24,"column":74,"offset":2972},"end":{"line":24,"column":195,"offset":3093}}}],"position":{"start":{"line":24,"column":3,"offset":2901},"end":{"line":24,"column":195,"offset":3093}}},{"type":"text","value":"\n"}],"position":{"start":{"line":24,"column":1,"offset":2899},"end":{"line":25,"column":1,"offset":3094}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.codecademy.com/learn/introduction-to-javascript"},"children":[{"type":"text","value":"Codecademy","position":{"start":{"line":26,"column":4,"offset":3098},"end":{"line":26,"column":14,"offset":3108}}}],"position":{"start":{"line":26,"column":3,"offset":3097},"end":{"line":26,"column":76,"offset":3170}}},{"type":"text","value":" — a great resource for learning how to code with instant feedback in your browser.","position":{"start":{"line":26,"column":76,"offset":3170},"end":{"line":26,"column":159,"offset":3253}}}],"position":{"start":{"line":26,"column":3,"offset":3097},"end":{"line":26,"column":159,"offset":3253}}},{"type":"text","value":"\n"}],"position":{"start":{"line":26,"column":1,"offset":3095},"end":{"line":27,"column":1,"offset":3254}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Web/JavaScript"},"children":[{"type":"text","value":"MDN","position":{"start":{"line":28,"column":4,"offset":3258},"end":{"line":28,"column":7,"offset":3261}}}],"position":{"start":{"line":28,"column":3,"offset":3257},"end":{"line":28,"column":65,"offset":3319}}},{"type":"text","value":" — a great resource for learning about all aspects of web development.","position":{"start":{"line":28,"column":65,"offset":3319},"end":{"line":28,"column":135,"offset":3389}}}],"position":{"start":{"line":28,"column":3,"offset":3257},"end":{"line":28,"column":135,"offset":3389}}},{"type":"text","value":"\n"}],"position":{"start":{"line":28,"column":1,"offset":3255},"end":{"line":29,"column":1,"offset":3390}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://codepen.io/"},"children":[{"type":"text","value":"Codepen","position":{"start":{"line":30,"column":4,"offset":3394},"end":{"line":30,"column":11,"offset":3401}}}],"position":{"start":{"line":30,"column":3,"offset":3393},"end":{"line":30,"column":33,"offset":3423}}},{"type":"text","value":" — a brilliant online text-editor for creating cool projects in HTML, CSS and JavaScript. Equally good for getting inspiration from a lot of talented users. Another possible solution would be ","position":{"start":{"line":30,"column":33,"offset":3423},"end":{"line":30,"column":225,"offset":3615}}},{"type":"element","tagName":"a","properties":{"href":"https://jsfiddle.net/"},"children":[{"type":"text","value":"JSFiddle","position":{"start":{"line":30,"column":226,"offset":3616},"end":{"line":30,"column":234,"offset":3624}}}],"position":{"start":{"line":30,"column":225,"offset":3615},"end":{"line":30,"column":258,"offset":3648}}},{"type":"text","value":".","position":{"start":{"line":30,"column":258,"offset":3648},"end":{"line":30,"column":259,"offset":3649}}}],"position":{"start":{"line":30,"column":3,"offset":3393},"end":{"line":30,"column":259,"offset":3649}}},{"type":"text","value":"\n"}],"position":{"start":{"line":30,"column":1,"offset":3391},"end":{"line":30,"column":259,"offset":3649}}},{"type":"text","value":"\n"}],"position":{"start":{"line":24,"column":1,"offset":2899},"end":{"line":30,"column":259,"offset":3649}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"What follows is a series of steps that will introduce you to p5 concepts. With code examples and explanations I hope to give you enough information to understand the ideas, but to fully grasp the concepts you will have to dive into the code, experiment with it, break it and learn from it. So without further ado, let’s get coding.","position":{"start":{"line":32,"column":1,"offset":3651},"end":{"line":32,"column":332,"offset":3982}}}],"position":{"start":{"line":32,"column":1,"offset":3651},"end":{"line":32,"column":332,"offset":3982}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Step 1: The Setup","position":{"start":{"line":34,"column":5,"offset":3988},"end":{"line":34,"column":22,"offset":4005}}}],"position":{"start":{"line":34,"column":1,"offset":3984},"end":{"line":34,"column":22,"offset":4005}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//Initialisation of canvas, objects, variables etc.</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//The drawing loop - updates at a constant rate declared in setup</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":36,"column":1,"offset":4007},"end":{"line":43,"column":4,"offset":4185}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"p5 is really simple to setup once you know what to do. There are two files shown above — an index.html and a template.js. The index.html file gets the libraries for us and the template.js is the barebones structure of a p5 project and at the moment it does nothing! Within this we have two functions:","position":{"start":{"line":45,"column":1,"offset":4187},"end":{"line":45,"column":301,"offset":4487}}}],"position":{"start":{"line":45,"column":1,"offset":4187},"end":{"line":45,"column":301,"offset":4487}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"setup() — a function for creating what we will need for our graphic or project. Like creating a canvas, initialising some objects or arrays etc.","position":{"start":{"line":47,"column":3,"offset":4491},"end":{"line":47,"column":147,"offset":4635}}}],"position":{"start":{"line":47,"column":3,"offset":4491},"end":{"line":47,"column":147,"offset":4635}}},{"type":"text","value":"\n"}],"position":{"start":{"line":47,"column":1,"offset":4489},"end":{"line":48,"column":1,"offset":4636}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"draw() — a function which will be called periodically like a loop. This is where will call draw functions and update functions to make graphics and animations.","position":{"start":{"line":49,"column":3,"offset":4639},"end":{"line":49,"column":162,"offset":4798}}}],"position":{"start":{"line":49,"column":3,"offset":4639},"end":{"line":49,"column":162,"offset":4798}}},{"type":"text","value":"\n"}],"position":{"start":{"line":49,"column":1,"offset":4637},"end":{"line":49,"column":162,"offset":4798}}},{"type":"text","value":"\n"}],"position":{"start":{"line":47,"column":1,"offset":4489},"end":{"line":49,"column":162,"offset":4798}}},{"type":"text","value":"\n"},{"type":"raw","value":"<iframe height='400' scrolling='no' title='Simple Triangle Tutorial' src='//codepen.io/patricoferris/embed/dddxjr/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/dddxjr/'>Simple Triangle Tutorial</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":51,"column":1,"offset":4800},"end":{"line":52,"column":10,"offset":5294}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let’s first look at the setup function. We used the p5 function createCanvas(width, height) which created and initialised a ","position":{"start":{"line":54,"column":1,"offset":5296},"end":{"line":54,"column":125,"offset":5420}}},{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API"},"children":[{"type":"text","value":"canvas","position":{"start":{"line":54,"column":126,"offset":5421},"end":{"line":54,"column":132,"offset":5427}}}],"position":{"start":{"line":54,"column":125,"offset":5420},"end":{"line":54,"column":194,"offset":5489}}},{"type":"text","value":" with arguments width and height. Now within our setup() and createCanvas() functions we can reference the variables width and height without ever instantiating them!","position":{"start":{"line":54,"column":194,"offset":5489},"end":{"line":54,"column":360,"offset":5655}}}],"position":{"start":{"line":54,"column":1,"offset":5296},"end":{"line":54,"column":360,"offset":5655}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Next comes the meaty, draw function. I have purposefully put extra code in here so we can learn more about what p5 has to offer. Firstly always remember that draw() is a loop that runs from top to bottom. Initially, we set the background (of our canvas) to white with background(255) which is the same as background(255, 255, 255) (maximising the red, green and blue values to give white). This may seem simple, but implicitly we are also clearing our canvas every loop… in one line of code! This will be useful for animations later as we want to redraw objects in a new location rather than have the ","position":{"start":{"line":56,"column":1,"offset":5657},"end":{"line":56,"column":602,"offset":6258}}},{"type":"element","tagName":"a","properties":{"href":"https://codepen.io/patricoferris/pen/paxZaw"},"children":[{"type":"text","value":"build-up on the same canvas","position":{"start":{"line":56,"column":603,"offset":6259},"end":{"line":56,"column":630,"offset":6286}}}],"position":{"start":{"line":56,"column":602,"offset":6258},"end":{"line":56,"column":676,"offset":6332}}},{"type":"text","value":" (click to see it go spectacularly wrong). Next is a translate(width/2, height/2) which moves our current drawing location to the centre of our canvas. We then declare the fill colour of our triangle with fill(255, 0, 0)(making it red).","position":{"start":{"line":56,"column":676,"offset":6332},"end":{"line":56,"column":912,"offset":6568}}}],"position":{"start":{"line":56,"column":1,"offset":5657},"end":{"line":56,"column":912,"offset":6568}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We want to create an equilateral triangle with side length s. The triangle itself is a function that takes the vertex coordinates as arguments — triangle(x1, y1, x2, y2, x3, y3) and in this example starting from the centre we have one vertex at (-s/2, 0) another at (s/2, 0) giving a bottom length of s . Now comes the trickier part. A very important aspect of most computer graphics is that the coordinate system starts in the top left corner (or wherever your origin is) and x increases left to right, whilst y increases top to bottom. To move of the screen we need a negative y value. Our last coordinate is given as (0, -sin(PI/3)) (if you’re stuck, think about cutting the triangle in two and using trigonometry).","position":{"start":{"line":58,"column":1,"offset":6570},"end":{"line":58,"column":719,"offset":7288}}}],"position":{"start":{"line":58,"column":1,"offset":6570},"end":{"line":58,"column":719,"offset":7288}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Step 2: Get Creative","position":{"start":{"line":60,"column":5,"offset":7294},"end":{"line":60,"column":25,"offset":7314}}}],"position":{"start":{"line":60,"column":1,"offset":7290},"end":{"line":60,"column":25,"offset":7314}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We’ve learnt how to set up our canvas and start drawing. Armed with the p5 ","position":{"start":{"line":62,"column":1,"offset":7316},"end":{"line":62,"column":76,"offset":7391}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/reference/"},"children":[{"type":"text","value":"reference page","position":{"start":{"line":62,"column":77,"offset":7392},"end":{"line":62,"column":91,"offset":7406}}}],"position":{"start":{"line":62,"column":76,"offset":7391},"end":{"line":62,"column":121,"offset":7436}}},{"type":"text","value":" and our creativity, we can make some truly stunning graphics. How about a bouncing ball animation?","position":{"start":{"line":62,"column":121,"offset":7436},"end":{"line":62,"column":220,"offset":7535}}}],"position":{"start":{"line":62,"column":1,"offset":7316},"end":{"line":62,"column":220,"offset":7535}}},{"type":"text","value":"\n"},{"type":"raw","value":"<iframe height='400' scrolling='no' title='Bouncing Balls' src='//codepen.io/patricoferris/embed/PQpOrB/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/PQpOrB/'>Bouncing Balls</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":64,"column":1,"offset":7537},"end":{"line":65,"column":10,"offset":8011}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let’s look at the interesting p5 aspects that we didn’t know before:","position":{"start":{"line":67,"column":1,"offset":8013},"end":{"line":67,"column":69,"offset":8081}}}],"position":{"start":{"line":67,"column":1,"offset":8013},"end":{"line":67,"column":69,"offset":8081}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"frameRate(20) — This enables us to specify the frame rate of our drawing loop, that is, how many times per second it redraws everything for us.","position":{"start":{"line":69,"column":3,"offset":8085},"end":{"line":69,"column":146,"offset":8228}}}],"position":{"start":{"line":69,"column":3,"offset":8085},"end":{"line":69,"column":146,"offset":8228}}},{"type":"text","value":"\n"}],"position":{"start":{"line":69,"column":1,"offset":8083},"end":{"line":70,"column":1,"offset":8229}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"gravity = createVector(0, 9) — p5 allows us to ","position":{"start":{"line":71,"column":3,"offset":8232},"end":{"line":71,"column":50,"offset":8279}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/reference/#/p5.Vector"},"children":[{"type":"text","value":"create vector objects","position":{"start":{"line":71,"column":51,"offset":8280},"end":{"line":71,"column":72,"offset":8301}}}],"position":{"start":{"line":71,"column":50,"offset":8279},"end":{"line":71,"column":113,"offset":8342}}},{"type":"text","value":" with which we can perform vector operations like addition, multiplication, dot-product and cross-product. This is useful when we want to simulate physics like forces.","position":{"start":{"line":71,"column":113,"offset":8342},"end":{"line":71,"column":280,"offset":8509}}}],"position":{"start":{"line":71,"column":3,"offset":8232},"end":{"line":71,"column":280,"offset":8509}}},{"type":"text","value":"\n"}],"position":{"start":{"line":71,"column":1,"offset":8230},"end":{"line":72,"column":1,"offset":8510}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"floor(random(50)) — Here we’re using p5 math functions. floor() takes a real number and rounds it down to the nearest integer. random(arg) produces a random number as small as 0 or up to 49. In this example, we are giving it to the ellipse(x, y, w)function to create randomly sized balls by setting the width to a random number. If we gave another argument it would set the ellipse’s height, but here it infers that we want a circle.","position":{"start":{"line":73,"column":3,"offset":8513},"end":{"line":73,"column":436,"offset":8946}}}],"position":{"start":{"line":73,"column":3,"offset":8513},"end":{"line":73,"column":436,"offset":8946}}},{"type":"text","value":"\n"}],"position":{"start":{"line":73,"column":1,"offset":8511},"end":{"line":74,"column":1,"offset":8947}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"stroke(0) — This function sets the colour of our shape’s outline. If you don’t want any border you can add noStroke() .","position":{"start":{"line":75,"column":3,"offset":8950},"end":{"line":75,"column":122,"offset":9069}}}],"position":{"start":{"line":75,"column":3,"offset":8950},"end":{"line":75,"column":122,"offset":9069}}},{"type":"text","value":"\n"}],"position":{"start":{"line":75,"column":1,"offset":8948},"end":{"line":75,"column":122,"offset":9069}}},{"type":"text","value":"\n"}],"position":{"start":{"line":69,"column":1,"offset":8083},"end":{"line":75,"column":122,"offset":9069}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"All you need now is to add some physics to these ideas and you have yourself a bouncing ball animation.","position":{"start":{"line":77,"column":1,"offset":9071},"end":{"line":77,"column":104,"offset":9174}}}],"position":{"start":{"line":77,"column":1,"offset":9071},"end":{"line":77,"column":104,"offset":9174}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Step 3: Experiment with p5","position":{"start":{"line":79,"column":5,"offset":9180},"end":{"line":79,"column":31,"offset":9206}}}],"position":{"start":{"line":79,"column":1,"offset":9176},"end":{"line":79,"column":31,"offset":9206}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Hopefully now you have a good understanding of the p5 fundamentals, but we’ve barely scratched the surface. This last example will use two extra features of p5: interactivity and ","position":{"start":{"line":81,"column":1,"offset":9208},"end":{"line":81,"column":180,"offset":9387}}},{"type":"element","tagName":"a","properties":{"href":"http://flafla2.github.io/2014/08/09/perlinnoise.html"},"children":[{"type":"text","value":"Perlin Noise","position":{"start":{"line":81,"column":181,"offset":9388},"end":{"line":81,"column":193,"offset":9400}}}],"position":{"start":{"line":81,"column":180,"offset":9387},"end":{"line":81,"column":248,"offset":9455}}},{"type":"text","value":". Keep reading to find out more on these two concepts.","position":{"start":{"line":81,"column":248,"offset":9455},"end":{"line":81,"column":302,"offset":9509}}}],"position":{"start":{"line":81,"column":1,"offset":9208},"end":{"line":81,"column":302,"offset":9509}}},{"type":"text","value":"\n"},{"type":"raw","value":"<iframe height='400' scrolling='no' title='Pixel Fire' src='//codepen.io/patricoferris/embed/XZMxmV/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/XZMxmV/'>Pixel Fire</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":83,"column":1,"offset":9511},"end":{"line":84,"column":10,"offset":9977}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In this CodePen I have created a relatively simple flame model using squares and Perlin Noise. First of all, how do we get user input? Lucky for us p5 has some functions that can help.","position":{"start":{"line":86,"column":1,"offset":9979},"end":{"line":86,"column":185,"offset":10163}}}],"position":{"start":{"line":86,"column":1,"offset":9979},"end":{"line":86,"column":185,"offset":10163}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> touch <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">createCanvas</span><span class=\"token punctuation\">(</span><span class=\"token number\">640</span><span class=\"token punctuation\">,</span> <span class=\"token number\">640</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>touch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">rect</span><span class=\"token punctuation\">(</span>mouseX<span class=\"token punctuation\">,</span> mouseY<span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">touchStarted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  touch <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">touchEnded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  touch <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":88,"column":1,"offset":10165},"end":{"line":105,"column":4,"offset":10423}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"At the top of the code we have declared a boolean “flag” as to whether or not our mouse is being pressed — this allows us to do things if the mouse is being held down. The touchStarted() and touchEnded() are p5 functions that are executed whenever the mouse is pressed or released or the screen is touched and released. Lastly, in our rect() function we have the variables mouseX and mouseY which are p5 variables corresponding to the mouse’s current position. Oddly, these also refer to your ","position":{"start":{"line":107,"column":1,"offset":10425},"end":{"line":107,"column":494,"offset":10918}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/processing/p5.js/issues/1705"},"children":[{"type":"text","value":"“touch” coordinates","position":{"start":{"line":107,"column":495,"offset":10919},"end":{"line":107,"column":514,"offset":10938}}}],"position":{"start":{"line":107,"column":494,"offset":10918},"end":{"line":107,"column":564,"offset":10988}}},{"type":"text","value":". With all these variables and functions predefined for us we can focus on making visually stunning graphics, whilst not being hampered by having to code extra functions unrelated to the graphic we’re producing.","position":{"start":{"line":107,"column":564,"offset":10988},"end":{"line":107,"column":775,"offset":11199}}}],"position":{"start":{"line":107,"column":1,"offset":10425},"end":{"line":107,"column":775,"offset":11199}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now for the Perlin Noise. In 1983, tired with the artificial look of computer graphics, Ken Perlin developed a type of gradient noise. The basic idea being you create a big grid of gradients randomly and then use the dot product to interpolate between them. In short, we get random values based on the coordinate system we’re drawing on. Great! For each of our squares we can start them at a random position near our mouse, and generate a random upward vector using their position and Perlin Noise. Let’s look at the code:","position":{"start":{"line":109,"column":1,"offset":11201},"end":{"line":109,"column":523,"offset":11723}}}],"position":{"start":{"line":109,"column":1,"offset":11201},"end":{"line":109,"column":523,"offset":11723}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Particle</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos <span class=\"token operator\">=</span> <span class=\"token function\">createVector</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">+</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vel <span class=\"token operator\">=</span> <span class=\"token function\">createVector</span><span class=\"token punctuation\">(</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token function\">noise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token function\">noise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>alpha <span class=\"token operator\">=</span> <span class=\"token number\">255</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>r <span class=\"token operator\">=</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">170</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>g <span class=\"token operator\">=</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">update</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>alpha <span class=\"token operator\">-=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">show</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">noStroke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>g<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>alpha<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">rect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">dead</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>alpha <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":111,"column":1,"offset":11725},"end":{"line":136,"column":4,"offset":12361}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Some key things to notice:","position":{"start":{"line":138,"column":1,"offset":12363},"end":{"line":138,"column":27,"offset":12389}}}],"position":{"start":{"line":138,"column":1,"offset":12363},"end":{"line":138,"column":27,"offset":12389}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"noise(this.pos.x) — The Perlin Noise ","position":{"start":{"line":140,"column":3,"offset":12393},"end":{"line":140,"column":40,"offset":12430}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/reference/#/p5/noise"},"children":[{"type":"text","value":"function","position":{"start":{"line":140,"column":41,"offset":12431},"end":{"line":140,"column":49,"offset":12439}}}],"position":{"start":{"line":140,"column":40,"offset":12430},"end":{"line":140,"column":89,"offset":12479}}},{"type":"text","value":" that gets a random number based on the square’s current x position. It returns a value between 0 and 1.","position":{"start":{"line":140,"column":89,"offset":12479},"end":{"line":140,"column":193,"offset":12583}}}],"position":{"start":{"line":140,"column":3,"offset":12393},"end":{"line":140,"column":193,"offset":12583}}},{"type":"text","value":"\n"}],"position":{"start":{"line":140,"column":1,"offset":12391},"end":{"line":141,"column":1,"offset":12584}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"fill(this.r, this.g, this.b, this.alpha) — Here we have extended fill’s ability by including an alpha value for the objects transparency, by decreasing alpha in the update() function we get a nice fade out like a flame.","position":{"start":{"line":142,"column":3,"offset":12587},"end":{"line":142,"column":222,"offset":12806}}}],"position":{"start":{"line":142,"column":3,"offset":12587},"end":{"line":142,"column":222,"offset":12806}}},{"type":"text","value":"\n"}],"position":{"start":{"line":142,"column":1,"offset":12585},"end":{"line":143,"column":1,"offset":12807}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"dead() — This function allows us to keep track of which particles have disappeared as their alpha is now less than zero. We can then splice() them out of our array to ensure we’re not drawing an unbounded number of particles over time which would cause performance issues.","position":{"start":{"line":144,"column":3,"offset":12810},"end":{"line":144,"column":275,"offset":13082}}}],"position":{"start":{"line":144,"column":3,"offset":12810},"end":{"line":144,"column":275,"offset":13082}}},{"type":"text","value":"\n"}],"position":{"start":{"line":144,"column":1,"offset":12808},"end":{"line":144,"column":275,"offset":13082}}},{"type":"text","value":"\n"}],"position":{"start":{"line":140,"column":1,"offset":12391},"end":{"line":144,"column":275,"offset":13082}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As a challenge, you can also use blendMode() to make it seem even more realistic — check this ","position":{"start":{"line":146,"column":1,"offset":13084},"end":{"line":146,"column":95,"offset":13178}}},{"type":"element","tagName":"a","properties":{"href":"https://codepen.io/anon/pen/YeOaJX"},"children":[{"type":"text","value":"alteration","position":{"start":{"line":146,"column":96,"offset":13179},"end":{"line":146,"column":106,"offset":13189}}}],"position":{"start":{"line":146,"column":95,"offset":13178},"end":{"line":146,"column":143,"offset":13226}}},{"type":"text","value":" to see it in action.","position":{"start":{"line":146,"column":143,"offset":13226},"end":{"line":146,"column":164,"offset":13247}}}],"position":{"start":{"line":146,"column":1,"offset":13084},"end":{"line":146,"column":164,"offset":13247}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"With only a few concepts and the p5 library, it is incredibly straightforward to start building anything you want. Be sure to checkout what else is possible with the library. Here are few cool ideas to get you started: ","position":{"start":{"line":148,"column":1,"offset":13249},"end":{"line":148,"column":220,"offset":13468}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/examples/3d-geometries.html"},"children":[{"type":"text","value":"3D graphics","position":{"start":{"line":148,"column":221,"offset":13469},"end":{"line":148,"column":232,"offset":13480}}}],"position":{"start":{"line":148,"column":220,"offset":13468},"end":{"line":148,"column":279,"offset":13527}}},{"type":"text","value":", ","position":{"start":{"line":148,"column":279,"offset":13527},"end":{"line":148,"column":281,"offset":13529}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/examples/dom-slider.html"},"children":[{"type":"text","value":"sliders","position":{"start":{"line":148,"column":282,"offset":13530},"end":{"line":148,"column":289,"offset":13537}}}],"position":{"start":{"line":148,"column":281,"offset":13529},"end":{"line":148,"column":333,"offset":13581}}},{"type":"text","value":" and ","position":{"start":{"line":148,"column":333,"offset":13581},"end":{"line":148,"column":338,"offset":13586}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/examples/image-load-and-display-image.html"},"children":[{"type":"text","value":"images","position":{"start":{"line":148,"column":339,"offset":13587},"end":{"line":148,"column":345,"offset":13593}}}],"position":{"start":{"line":148,"column":338,"offset":13586},"end":{"line":148,"column":407,"offset":13655}}},{"type":"text","value":".","position":{"start":{"line":148,"column":407,"offset":13655},"end":{"line":148,"column":408,"offset":13656}}}],"position":{"start":{"line":148,"column":1,"offset":13249},"end":{"line":148,"column":408,"offset":13656}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":150,"column":5,"offset":13662},"end":{"line":150,"column":15,"offset":13672}}}],"position":{"start":{"line":150,"column":1,"offset":13658},"end":{"line":150,"column":15,"offset":13672}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As computers and technology become ubiquitous in our daily lives and an increasing number of professions are now relying on computer literacy, p5.js is a beautiful example of how we can ensure as many people as possible have an entry-point to the wonderful world of computer programming. It also acts as a reminder to some more experienced programmers that creativity and imagination are vital in producing meaningful code and ultimately making the tech world a better place.","position":{"start":{"line":152,"column":1,"offset":13674},"end":{"line":152,"column":476,"offset":14149}}}],"position":{"start":{"line":152,"column":1,"offset":13674},"end":{"line":152,"column":476,"offset":14149}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Hopefully this intro to p5 has convinced you of its usefulness and has encouraged you to start taking your first steps into the world of graphics programming. Here are my recommendations for where to go next:","position":{"start":{"line":154,"column":1,"offset":14151},"end":{"line":154,"column":209,"offset":14359}}}],"position":{"start":{"line":154,"column":1,"offset":14151},"end":{"line":154,"column":209,"offset":14359}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.youtube.com/user/shiffman"},"children":[{"type":"text","value":"The Coding Train","position":{"start":{"line":156,"column":4,"offset":14364},"end":{"line":156,"column":20,"offset":14380}}}],"position":{"start":{"line":156,"column":3,"offset":14363},"end":{"line":156,"column":60,"offset":14420}}},{"type":"text","value":" — A brilliant YouTube channel by Daniel Shiffman where he teaches JavaScript and p5.js amongst many other incredible things!","position":{"start":{"line":156,"column":60,"offset":14420},"end":{"line":156,"column":185,"offset":14545}}}],"position":{"start":{"line":156,"column":3,"offset":14363},"end":{"line":156,"column":185,"offset":14545}}},{"type":"text","value":"\n"}],"position":{"start":{"line":156,"column":1,"offset":14361},"end":{"line":157,"column":1,"offset":14546}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/examples/"},"children":[{"type":"text","value":"p5js.org ","position":{"start":{"line":158,"column":4,"offset":14550},"end":{"line":158,"column":13,"offset":14559}}}],"position":{"start":{"line":158,"column":3,"offset":14549},"end":{"line":158,"column":42,"offset":14588}}},{"type":"text","value":"— The examples page on this website is full of inspiring projects which you could recreate and extend further.","position":{"start":{"line":158,"column":42,"offset":14588},"end":{"line":158,"column":152,"offset":14698}}}],"position":{"start":{"line":158,"column":3,"offset":14549},"end":{"line":158,"column":152,"offset":14698}}},{"type":"text","value":"\n"}],"position":{"start":{"line":158,"column":1,"offset":14547},"end":{"line":159,"column":1,"offset":14699}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.scratchapixel.com/index.php"},"children":[{"type":"text","value":"Sratchapixel","position":{"start":{"line":160,"column":4,"offset":14703},"end":{"line":160,"column":16,"offset":14715}}}],"position":{"start":{"line":160,"column":3,"offset":14702},"end":{"line":160,"column":58,"offset":14757}}},{"type":"text","value":" — If you feel ready to delve into the deeper concepts and implementations of computer graphics then this website is an incredible resource for you to use.","position":{"start":{"line":160,"column":58,"offset":14757},"end":{"line":160,"column":213,"offset":14912}}}],"position":{"start":{"line":160,"column":3,"offset":14702},"end":{"line":160,"column":213,"offset":14912}}},{"type":"text","value":"\n"}],"position":{"start":{"line":160,"column":1,"offset":14700},"end":{"line":160,"column":213,"offset":14912}}},{"type":"text","value":"\n"}],"position":{"start":{"line":156,"column":1,"offset":14361},"end":{"line":160,"column":213,"offset":14912}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A special thanks to ","position":{"start":{"line":162,"column":1,"offset":14914},"end":{"line":162,"column":21,"offset":14934}}},{"type":"element","tagName":"a","properties":{"href":"undefined"},"children":[{"type":"text","value":"Tom Read Cutting","position":{"start":{"line":162,"column":22,"offset":14935},"end":{"line":162,"column":38,"offset":14951}}}],"position":{"start":{"line":162,"column":21,"offset":14934},"end":{"line":162,"column":50,"offset":14963}}},{"type":"text","value":" for editing this article and ","position":{"start":{"line":162,"column":50,"offset":14963},"end":{"line":162,"column":80,"offset":14993}}},{"type":"element","tagName":"a","properties":{"href":"undefined"},"children":[{"type":"text","value":"Christian Silver","position":{"start":{"line":162,"column":81,"offset":14994},"end":{"line":162,"column":97,"offset":15010}}}],"position":{"start":{"line":162,"column":80,"offset":14993},"end":{"line":162,"column":109,"offset":15022}}},{"type":"text","value":" for helping get it off the ground.","position":{"start":{"line":162,"column":109,"offset":15022},"end":{"line":162,"column":144,"offset":15057}}}],"position":{"start":{"line":162,"column":1,"offset":14914},"end":{"line":162,"column":144,"offset":15057}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":163,"column":1,"offset":15058}}}},{"id":"transformer-remark-markdown-html-ast-11f36ebeac72386eeeee00597b71f344-gatsby-remark-imagesgatsby-remark-prismjs-","value":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/patricoferris/image/upload/v1532781201/pf2018/blogposts/28-07-2018/website_optimisation_2.png","alt":"Optimising your Website"},"children":[],"position":{"start":{"line":8,"column":1,"offset":289},"end":{"line":8,"column":149,"offset":437}}},{"type":"text","value":"\nInspired by a ","position":{"start":{"line":8,"column":149,"offset":437},"end":{"line":9,"column":15,"offset":452}}},{"type":"element","tagName":"a","properties":{"href":"https://syntax.fm/"},"children":[{"type":"text","value":"Syntax","position":{"start":{"line":9,"column":16,"offset":453},"end":{"line":9,"column":22,"offset":459}}}],"position":{"start":{"line":9,"column":15,"offset":452},"end":{"line":9,"column":43,"offset":480}}},{"type":"text","value":" podcast, I got really interested in website optimisation. It can often be an overlooked aspect in web development with more focus on design and functionality, I realised my number one priority whenever I visited a website is load speed. My attention is a website’s number one goal, lose it and they lose all potential ad revenue or possibility to give me whatever information I was looking for. ","position":{"start":{"line":9,"column":43,"offset":480},"end":{"line":9,"column":439,"offset":876}}},{"type":"element","tagName":"a","properties":{"href":"https://developers.google.com/web/fundamentals/performance/get-started/"},"children":[{"type":"text","value":"Many seem to agree. 53% of users abandon websites that take more than 3 seconds to load","position":{"start":{"line":9,"column":440,"offset":877},"end":{"line":9,"column":527,"offset":964}}}],"position":{"start":{"line":9,"column":439,"offset":876},"end":{"line":9,"column":601,"offset":1038}}},{"type":"text","value":". No amount of fancy graphics or parallax scrolling that appears five seconds after someone’s clicked will hide the slow loading times.","position":{"start":{"line":9,"column":601,"offset":1038},"end":{"line":9,"column":736,"offset":1173}}}],"position":{"start":{"line":8,"column":1,"offset":289},"end":{"line":9,"column":736,"offset":1173}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The aim of this article is to give a broad overview of the concepts and ideas behind optimising your website, experienced developers are likely already using things like Webpack (a module bundler) among other tools to speed-up their sites.","position":{"start":{"line":11,"column":1,"offset":1175},"end":{"line":11,"column":240,"offset":1414}}}],"position":{"start":{"line":11,"column":1,"offset":1175},"end":{"line":11,"column":240,"offset":1414}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For testing load-times I will be using the ","position":{"start":{"line":13,"column":1,"offset":1416},"end":{"line":13,"column":44,"offset":1459}}},{"type":"element","tagName":"a","properties":{"href":"https://chrome.google.com/webstore/detail/page-load-time/fploionmjgeclbkemipmkogoaohcdbig?hl=en"},"children":[{"type":"text","value":"Page Load Time ","position":{"start":{"line":13,"column":45,"offset":1460},"end":{"line":13,"column":60,"offset":1475}}}],"position":{"start":{"line":13,"column":44,"offset":1459},"end":{"line":13,"column":158,"offset":1573}}},{"type":"text","value":"Chrome extension. There are a few ways to measure website loading time including: ","position":{"start":{"line":13,"column":158,"offset":1573},"end":{"line":13,"column":240,"offset":1655}}},{"type":"element","tagName":"a","properties":{"href":"https://developers.google.com/web/tools/chrome-user-experience-report/"},"children":[{"type":"text","value":"first paint, first meaning paint, DOMContentLoaded","position":{"start":{"line":13,"column":241,"offset":1656},"end":{"line":13,"column":291,"offset":1706}}}],"position":{"start":{"line":13,"column":240,"offset":1655},"end":{"line":13,"column":364,"offset":1779}}},{"type":"text","value":" etc. For a more detailed look into what this timer measures, check out the Github repository below.\n","position":{"start":{"line":13,"column":364,"offset":1779},"end":{"line":14,"column":1,"offset":1880}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/alex-vv/chrome-load-timer"},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"alex-vv/chrome-load-timer","position":{"start":{"line":14,"column":4,"offset":1883},"end":{"line":14,"column":29,"offset":1908}}}],"position":{"start":{"line":14,"column":2,"offset":1881},"end":{"line":14,"column":31,"offset":1910}}},{"type":"text","value":"\n","position":{"start":{"line":14,"column":31,"offset":1910},"end":{"line":15,"column":1,"offset":1911}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"chrome-load-timer - Google Chrome extension to measure page load time and display it in the toolbar","position":{"start":{"line":15,"column":2,"offset":1912},"end":{"line":15,"column":101,"offset":2011}}}],"position":{"start":{"line":15,"column":1,"offset":1911},"end":{"line":15,"column":102,"offset":2012}}},{"type":"text","value":"github.com","position":{"start":{"line":15,"column":102,"offset":2012},"end":{"line":15,"column":112,"offset":2022}}}],"position":{"start":{"line":14,"column":1,"offset":1880},"end":{"line":15,"column":159,"offset":2069}}}],"position":{"start":{"line":13,"column":1,"offset":1416},"end":{"line":15,"column":159,"offset":2069}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Use Minified Stylesheets and Scripts","position":{"start":{"line":17,"column":7,"offset":2077},"end":{"line":17,"column":43,"offset":2113}}}],"position":{"start":{"line":17,"column":5,"offset":2075},"end":{"line":17,"column":45,"offset":2115}}}],"position":{"start":{"line":17,"column":1,"offset":2071},"end":{"line":17,"column":45,"offset":2115}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You would be amazed at how much performance can be gained by this simple trick. What is a minified document? When we write code it is never our job to make it optimised for the computer, instead our golden rule is to make it readable to humans. This improves readability, cuts down on debug time and makes it easier to maintain. However, to achieve this we often add extra spacing which costs us precious space. Minifying the code is trimming all this fat from what we’ve written to have code that produces the same result but is far more difficult to read and maintain. This is okay though, because a computer has no problem deciphering it. Take the following code for example.","position":{"start":{"line":19,"column":1,"offset":2117},"end":{"line":19,"column":679,"offset":2795}}}],"position":{"start":{"line":19,"column":1,"offset":2117},"end":{"line":19,"column":679,"offset":2795}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","position":{"start":{"line":21,"column":1,"offset":2797},"end":{"line":30,"column":4,"offset":3056}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Notice how, wherever possible, our line-breaks and spaces are gone. On top of that, the code in the for-loop is only one line so there’s no need for the curly braces which extends our code over three lines when it can be done in one. Does this make a difference?","position":{"start":{"line":32,"column":1,"offset":3058},"end":{"line":32,"column":263,"offset":3320}}}],"position":{"start":{"line":32,"column":1,"offset":3058},"end":{"line":32,"column":263,"offset":3320}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I tried it out on simple website that just had one script tag being loaded in for the graphics library ","position":{"start":{"line":34,"column":1,"offset":3322},"end":{"line":34,"column":104,"offset":3425}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/"},"children":[{"type":"text","value":"p5.js","position":{"start":{"line":34,"column":105,"offset":3426},"end":{"line":34,"column":110,"offset":3431}}}],"position":{"start":{"line":34,"column":104,"offset":3425},"end":{"line":34,"column":130,"offset":3451}}},{"type":"text","value":". Using the non-minified CDN link I got a load time of 0.25 seconds. Using the minified version I got a markedly improved load time of 0.08 seconds. Depending on what your website project is, there are a few ways to automatically minify code. If it is a ","position":{"start":{"line":34,"column":130,"offset":3451},"end":{"line":34,"column":384,"offset":3705}}},{"type":"element","tagName":"a","properties":{"href":"https://guide.meteor.com/build-tool.html"},"children":[{"type":"text","value":"Meteor app","position":{"start":{"line":34,"column":385,"offset":3706},"end":{"line":34,"column":395,"offset":3716}}}],"position":{"start":{"line":34,"column":384,"offset":3705},"end":{"line":34,"column":438,"offset":3759}}},{"type":"text","value":" it will be done automatically, using ","position":{"start":{"line":34,"column":438,"offset":3759},"end":{"line":34,"column":476,"offset":3797}}},{"type":"element","tagName":"a","properties":{"href":"https://webpack.js.org/guides/production/"},"children":[{"type":"text","value":"Webpack ","position":{"start":{"line":34,"column":477,"offset":3798},"end":{"line":34,"column":485,"offset":3806}}}],"position":{"start":{"line":34,"column":476,"offset":3797},"end":{"line":34,"column":529,"offset":3850}}},{"type":"text","value":"will also allow you to do this. Otherwise there are some online tools like ","position":{"start":{"line":34,"column":529,"offset":3850},"end":{"line":34,"column":604,"offset":3925}}},{"type":"element","tagName":"a","properties":{"href":"https://jscompress.com/"},"children":[{"type":"text","value":"JSCompress ","position":{"start":{"line":34,"column":605,"offset":3926},"end":{"line":34,"column":616,"offset":3937}}}],"position":{"start":{"line":34,"column":604,"offset":3925},"end":{"line":34,"column":642,"offset":3963}}},{"type":"text","value":"or ","position":{"start":{"line":34,"column":642,"offset":3963},"end":{"line":34,"column":645,"offset":3966}}},{"type":"element","tagName":"a","properties":{"href":"https://cssminifier.com/"},"children":[{"type":"text","value":"CSSMinifier ","position":{"start":{"line":34,"column":646,"offset":3967},"end":{"line":34,"column":658,"offset":3979}}}],"position":{"start":{"line":34,"column":645,"offset":3966},"end":{"line":34,"column":685,"offset":4006}}},{"type":"text","value":"that you can upload your code to.","position":{"start":{"line":34,"column":685,"offset":4006},"end":{"line":34,"column":718,"offset":4039}}}],"position":{"start":{"line":34,"column":1,"offset":3322},"end":{"line":34,"column":718,"offset":4039}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Design Versus Performance","position":{"start":{"line":36,"column":5,"offset":4045},"end":{"line":36,"column":30,"offset":4070}}}],"position":{"start":{"line":36,"column":1,"offset":4041},"end":{"line":36,"column":30,"offset":4070}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Whilst design is undoubtedly a major aspect to a website’s overall success, both developers and designers must work together to compromise and make a mutually beneficial trade-off between design and performance. The classic example is fonts. Take the two screenshots of a simple website below.","position":{"start":{"line":38,"column":1,"offset":4072},"end":{"line":38,"column":294,"offset":4365}}}],"position":{"start":{"line":38,"column":1,"offset":4072},"end":{"line":38,"column":294,"offset":4365}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/patricoferris/image/upload/v1532780050/pf2018/blogposts/28-07-2018/Helvetica.png","alt":"The example website using Helvetica Font (commonly found on many computers) — check [this](https://css-tricks.com/snippets/css/system-font-stack/) link for common system fonts"},"children":[],"position":{"start":{"line":40,"column":1,"offset":4367},"end":{"line":40,"column":288,"offset":4654}}},{"type":"text","value":"\n","position":{"start":{"line":40,"column":288,"offset":4654},"end":{"line":41,"column":1,"offset":4655}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The example website using Helvetica Font (commonly found on many computers) — check ","position":{"start":{"line":41,"column":2,"offset":4656},"end":{"line":41,"column":86,"offset":4740}}},{"type":"element","tagName":"a","properties":{"href":"https://css-tricks.com/snippets/css/system-font-stack/"},"children":[{"type":"text","value":"this","position":{"start":{"line":41,"column":87,"offset":4741},"end":{"line":41,"column":91,"offset":4745}}}],"position":{"start":{"line":41,"column":86,"offset":4740},"end":{"line":41,"column":148,"offset":4802}}},{"type":"text","value":" link for common system fonts","position":{"start":{"line":41,"column":148,"offset":4802},"end":{"line":41,"column":177,"offset":4831}}}],"position":{"start":{"line":41,"column":1,"offset":4655},"end":{"line":41,"column":178,"offset":4832}}}],"position":{"start":{"line":40,"column":1,"offset":4367},"end":{"line":41,"column":178,"offset":4832}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://cdn-images-1.medium.com/max/5760/1*8ciuJNBdqMhlLSaOpNUXow.png","alt":"The example website using Roboto Font (designed by Google and linked from [Google Fonts](https://fonts.google.com/?selection.family=Roboto))"},"children":[],"position":{"start":{"line":43,"column":1,"offset":4834},"end":{"line":43,"column":215,"offset":5048}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The example website using Roboto Font (designed by Google and linked from ","position":{"start":{"line":43,"column":216,"offset":5049},"end":{"line":43,"column":290,"offset":5123}}},{"type":"element","tagName":"a","properties":{"href":"https://fonts.google.com/?selection.family=Roboto"},"children":[{"type":"text","value":"Google Fonts","position":{"start":{"line":43,"column":291,"offset":5124},"end":{"line":43,"column":303,"offset":5136}}}],"position":{"start":{"line":43,"column":290,"offset":5123},"end":{"line":43,"column":355,"offset":5188}}},{"type":"text","value":")","position":{"start":{"line":43,"column":355,"offset":5188},"end":{"line":43,"column":356,"offset":5189}}}],"position":{"start":{"line":43,"column":215,"offset":5048},"end":{"line":43,"column":357,"offset":5190}}}],"position":{"start":{"line":43,"column":1,"offset":4834},"end":{"line":43,"column":357,"offset":5190}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Before critiquing my questionable design skills take a moment to appreciate that these two fonts are very similar — yet the loading time for a website for the Roboto font was 0.22 seconds as compared with 0.17 for Helvetica. Whilst not that significant, using lots of custom fonts will slow down your website, although using Google Fonts’ API will help keep your website optimised. As an over-the-top example, linking 20 different fonts from the Google API increased the load time to 0.87 seconds.","position":{"start":{"line":45,"column":1,"offset":5192},"end":{"line":45,"column":498,"offset":5689}}}],"position":{"start":{"line":45,"column":1,"offset":5192},"end":{"line":45,"column":498,"offset":5689}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Inlining your JavaScript and CSS","position":{"start":{"line":47,"column":5,"offset":5695},"end":{"line":47,"column":37,"offset":5727}}}],"position":{"start":{"line":47,"column":1,"offset":5691},"end":{"line":47,"column":37,"offset":5727}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For each individual document or component of your website, when the parser reaches the script tag or link tag it sends and HTTP request for that document and if not stated differently, these will be blocking actions. What this means is your machine is parsing the HTML document getting the words to display in your browser but if it hits the script tag with the attribute src='js/main.js' for example, it will block the parsing and load in that file. This is where as a developer you need to be clever about where in the document you place things.","position":{"start":{"line":49,"column":1,"offset":5729},"end":{"line":49,"column":548,"offset":6276}}}],"position":{"start":{"line":49,"column":1,"offset":5729},"end":{"line":49,"column":548,"offset":6276}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Whilst it may not ultimately affect the loading time of your website, it can affect the order in which things are loaded. Again we’ll be using the un-minified p5.js library to simulate a large JavaScript file and load it in different places to see how it affects our user experience.","position":{"start":{"line":51,"column":1,"offset":6278},"end":{"line":51,"column":284,"offset":6561}}}],"position":{"start":{"line":51,"column":1,"offset":6278},"end":{"line":51,"column":284,"offset":6561}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://cdn-images-1.medium.com/max/2780/1*h_3GogfkaahcXCO9a43CPA.gif","alt":"Refreshing website with the script tag inserted at the bottom of the body tag"},"children":[],"position":{"start":{"line":53,"column":1,"offset":6563},"end":{"line":53,"column":152,"offset":6714}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Refreshing website with the script tag inserted at the bottom of the body tag","position":{"start":{"line":53,"column":153,"offset":6715},"end":{"line":53,"column":230,"offset":6792}}}],"position":{"start":{"line":53,"column":152,"offset":6714},"end":{"line":53,"column":231,"offset":6793}}}],"position":{"start":{"line":53,"column":1,"offset":6563},"end":{"line":53,"column":231,"offset":6793}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://cdn-images-1.medium.com/max/2780/1*xLOq5r4erQAwb4Au_hB-Ww.gif","alt":"Refreshing website with the script tag inserted at the top of the body tag"},"children":[],"position":{"start":{"line":55,"column":1,"offset":6795},"end":{"line":55,"column":149,"offset":6943}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Refreshing website with the script tag inserted at the top of the body tag","position":{"start":{"line":55,"column":150,"offset":6944},"end":{"line":55,"column":224,"offset":7018}}}],"position":{"start":{"line":55,"column":149,"offset":6943},"end":{"line":55,"column":225,"offset":7019}}}],"position":{"start":{"line":55,"column":1,"offset":6795},"end":{"line":55,"column":225,"offset":7019}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Whilst the load times were similar for both cases — the user experience is far better by placing the script at the body tag allowing the HTML to be parsed before the JavaScript giving the user the website content immediately!","position":{"start":{"line":57,"column":1,"offset":7021},"end":{"line":57,"column":226,"offset":7246}}}],"position":{"start":{"line":57,"column":1,"offset":7021},"end":{"line":57,"column":226,"offset":7246}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In the same vein CSS can also be render-blocking especially because more often than not it is linked in the head tag of your HTML document before the body. But if we want our user to see the content in the quickest time we don’t want to be loading CSS for the footer of our document which the user won’t see until they’ve scrolled to the bottom. In fact, we don’t want to load any CSS in that the user can’t immediately see when the page first loads on their device.","position":{"start":{"line":59,"column":1,"offset":7248},"end":{"line":59,"column":467,"offset":7714}}}],"position":{"start":{"line":59,"column":1,"offset":7248},"end":{"line":59,"column":467,"offset":7714}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The CSS that you need is often called the ","position":{"start":{"line":61,"column":1,"offset":7716},"end":{"line":61,"column":43,"offset":7758}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Critical CSS","position":{"start":{"line":61,"column":44,"offset":7759},"end":{"line":61,"column":56,"offset":7771}}}],"position":{"start":{"line":61,"column":43,"offset":7758},"end":{"line":61,"column":57,"offset":7772}}},{"type":"text","value":". Finding it for yourself would be a headache. It will be different for different devices, meaning you would have to check manually for all possible devices. Lucky for us we have (if you’re using ","position":{"start":{"line":61,"column":57,"offset":7772},"end":{"line":61,"column":253,"offset":7968}}},{"type":"element","tagName":"a","properties":{"href":"https://nodejs.org/en/"},"children":[{"type":"text","value":"Node.js","position":{"start":{"line":61,"column":254,"offset":7969},"end":{"line":61,"column":261,"offset":7976}}}],"position":{"start":{"line":61,"column":253,"offset":7968},"end":{"line":61,"column":286,"offset":8001}}},{"type":"text","value":") ","position":{"start":{"line":61,"column":286,"offset":8001},"end":{"line":61,"column":288,"offset":8003}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/addyosmani/critical"},"children":[{"type":"text","value":"Critical","position":{"start":{"line":61,"column":289,"offset":8004},"end":{"line":61,"column":297,"offset":8012}}}],"position":{"start":{"line":61,"column":288,"offset":8003},"end":{"line":61,"column":338,"offset":8053}}},{"type":"text","value":". This helpful package does the CSS inlining for us and all we do is add some code to a Javascript file. Here’s a code snippet from the Github page.","position":{"start":{"line":61,"column":338,"offset":8053},"end":{"line":61,"column":486,"offset":8201}}}],"position":{"start":{"line":61,"column":1,"offset":7716},"end":{"line":61,"column":486,"offset":8201}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> critical <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'critical'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncritical<span class=\"token punctuation\">.</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    base<span class=\"token punctuation\">:</span> <span class=\"token string\">'test/'</span><span class=\"token punctuation\">,</span>\n    src<span class=\"token punctuation\">:</span> <span class=\"token string\">'index.html'</span><span class=\"token punctuation\">,</span>\n    dest<span class=\"token punctuation\">:</span> <span class=\"token string\">'styles/main.css'</span><span class=\"token punctuation\">,</span>\n    dimensions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n        height<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n        width<span class=\"token punctuation\">:</span> <span class=\"token number\">500</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        height<span class=\"token punctuation\">:</span> <span class=\"token number\">900</span><span class=\"token punctuation\">,</span>\n        width<span class=\"token punctuation\">:</span> <span class=\"token number\">1200</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","position":{"start":{"line":63,"column":1,"offset":8203},"end":{"line":78,"column":4,"offset":8468}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Using the generate function, we supply it with a JavaScript object with some values defined. base is where we’re going to save our src and dest (our project folder usually). What’s great is now we just supply an array of dimensions and the code will compute the critical CSS for each and inline that code into our head tag.","position":{"start":{"line":80,"column":1,"offset":8470},"end":{"line":80,"column":324,"offset":8793}}}],"position":{"start":{"line":80,"column":1,"offset":8470},"end":{"line":80,"column":324,"offset":8793}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Async and Defer","position":{"start":{"line":82,"column":5,"offset":8799},"end":{"line":82,"column":20,"offset":8814}}}],"position":{"start":{"line":82,"column":1,"offset":8795},"end":{"line":82,"column":20,"offset":8814}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Again, we come back to this idea of render-blocking and how best we should implement this for our website. When you have a plain script tag in your HTML it blocks the HTML from loading whilst the JavaScript loads ","position":{"start":{"line":84,"column":1,"offset":8816},"end":{"line":84,"column":214,"offset":9029}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"and","position":{"start":{"line":84,"column":216,"offset":9031},"end":{"line":84,"column":219,"offset":9034}}}],"position":{"start":{"line":84,"column":214,"offset":9029},"end":{"line":84,"column":221,"offset":9036}}},{"type":"text","value":" runs. Async and defer are simple attributes that you can add to your script tags that change the way your JavaScript will be loaded.","position":{"start":{"line":84,"column":221,"offset":9036},"end":{"line":84,"column":354,"offset":9169}}}],"position":{"start":{"line":84,"column":1,"offset":8816},"end":{"line":84,"column":354,"offset":9169}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Defer essentially “defers” execution of the script until after the HTML has been parsed. A major advantage of this is that you no longer need some $(document).ready() jQuery-style function to make sure the body was loaded before you could manipulate it, which could cut out some of the dependencies on libraries like jQuery which helps reduce load-time.","position":{"start":{"line":86,"column":1,"offset":9171},"end":{"line":86,"column":354,"offset":9524}}}],"position":{"start":{"line":86,"column":1,"offset":9171},"end":{"line":86,"column":354,"offset":9524}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Async is, unsurprisingly, the asynchronous loading of JavaScript files. What does this mean? Your HTML will continue to be parsed whilst the file is loaded and then whenever its ready the file will be executed. This helps improving user experience whilst viewing your website. Imagine for example you had a JavaScript file for doing some cool graphics. You want the words around this graphic to be parsed until your graphic is ready to be executed. As soon as it is ready, it is executed and we get a more seamless loading of our webpage without missing pieces.","position":{"start":{"line":88,"column":1,"offset":9526},"end":{"line":88,"column":562,"offset":10087}}}],"position":{"start":{"line":88,"column":1,"offset":9526},"end":{"line":88,"column":562,"offset":10087}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Check this ","position":{"start":{"line":90,"column":1,"offset":10089},"end":{"line":90,"column":12,"offset":10100}}},{"type":"element","tagName":"a","properties":{"href":"http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html"},"children":[{"type":"text","value":"website","position":{"start":{"line":90,"column":13,"offset":10101},"end":{"line":90,"column":20,"offset":10108}}}],"position":{"start":{"line":90,"column":12,"offset":10100},"end":{"line":90,"column":94,"offset":10182}}},{"type":"text","value":" for a really intuitive, graphical representation of this.","position":{"start":{"line":90,"column":94,"offset":10182},"end":{"line":90,"column":152,"offset":10240}}}],"position":{"start":{"line":90,"column":1,"offset":10089},"end":{"line":90,"column":152,"offset":10240}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Image Optimisation and Media Queries","position":{"start":{"line":92,"column":5,"offset":10246},"end":{"line":92,"column":41,"offset":10282}}}],"position":{"start":{"line":92,"column":1,"offset":10242},"end":{"line":92,"column":41,"offset":10282}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The cornerstone of all website performance optimisation is the simple rule that, the less data you send to the client, the quicker and better your website will perform. With the plethora of devices on the market capable of viewing websites, there is a growing trend to optimise your website based on the device it is being viewed on.","position":{"start":{"line":94,"column":1,"offset":10284},"end":{"line":94,"column":334,"offset":10617}}}],"position":{"start":{"line":94,"column":1,"offset":10284},"end":{"line":94,"column":334,"offset":10617}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Media queries are a fairly new tool added to CSS3. With more and more content being consumed using mobile-devices there has been a shift in design thinking towards mobile first. Using media queries you can then add stylings for larger screen sizes.","position":{"start":{"line":96,"column":1,"offset":10619},"end":{"line":96,"column":249,"offset":10867}}}],"position":{"start":{"line":96,"column":1,"offset":10619},"end":{"line":96,"column":249,"offset":10867}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/* Some CSS for screen sizes bigger than 600px but smaller than 992px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/*  Some CSS for screen sizes bigger than 992px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">orientation</span><span class=\"token punctuation\">:</span> landscape<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* Some CSS for landscape-oriented devices */</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":98,"column":1,"offset":10869},"end":{"line":110,"column":4,"offset":11199}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The @media tag starts a new CSS rule, whilst the only keyword stops older browsers that don’t support media queries from using it. The screen keyword applies the rules to screens rather than prints. After that you add the media-feature which supports the and , or and not keywords so you can get as specific as you want. When you’re loading your image you can write code like:","position":{"start":{"line":112,"column":1,"offset":11201},"end":{"line":112,"column":377,"offset":11577}}}],"position":{"start":{"line":112,"column":1,"offset":11201},"end":{"line":112,"column":377,"offset":11577}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-small.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-big.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":114,"column":1,"offset":11579},"end":{"line":122,"column":4,"offset":11798}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This isn’t necessarily the best or optimal approach for image optimisation. Luckily we have other options. ","position":{"start":{"line":124,"column":1,"offset":11800},"end":{"line":124,"column":108,"offset":11907}}},{"type":"element","tagName":"a","properties":{"href":"https://www.imgix.com/"},"children":[{"type":"text","value":"Imgix","position":{"start":{"line":124,"column":109,"offset":11908},"end":{"line":124,"column":114,"offset":11913}}}],"position":{"start":{"line":124,"column":108,"offset":11907},"end":{"line":124,"column":139,"offset":11938}}},{"type":"text","value":" and ","position":{"start":{"line":124,"column":139,"offset":11938},"end":{"line":124,"column":144,"offset":11943}}},{"type":"element","tagName":"a","properties":{"href":"https://cloudinary.com/"},"children":[{"type":"text","value":"Cloudinary","position":{"start":{"line":124,"column":145,"offset":11944},"end":{"line":124,"column":155,"offset":11954}}}],"position":{"start":{"line":124,"column":144,"offset":11943},"end":{"line":124,"column":181,"offset":11980}}},{"type":"text","value":" are two ways you can help optimise your site for the right device. Imgix is a Content Delivery Network (CDN) for images with a lot of cool features. A CDN simply takes your files and spreads them across the globe so that someone in a different country doesn’t have to wait for your files on your server to make it all the way to them. This ","position":{"start":{"line":124,"column":181,"offset":11980},"end":{"line":124,"column":522,"offset":12321}}},{"type":"element","tagName":"a","properties":{"href":"https://docs.imgix.com/tutorials/responsive-images-srcset-imgix"},"children":[{"type":"text","value":"tutorial","position":{"start":{"line":124,"column":523,"offset":12322},"end":{"line":124,"column":531,"offset":12330}}}],"position":{"start":{"line":124,"column":522,"offset":12321},"end":{"line":124,"column":597,"offset":12396}}},{"type":"text","value":" goes through how to use Imgix for different device pixel ratios. Cloudinary is a similar service, and their ","position":{"start":{"line":124,"column":597,"offset":12396},"end":{"line":124,"column":706,"offset":12505}}},{"type":"element","tagName":"a","properties":{"href":"https://cloudinary.com/documentation/image_optimization"},"children":[{"type":"text","value":"tutorial ","position":{"start":{"line":124,"column":707,"offset":12506},"end":{"line":124,"column":716,"offset":12515}}}],"position":{"start":{"line":124,"column":706,"offset":12505},"end":{"line":124,"column":774,"offset":12573}}},{"type":"text","value":"will take you through the importance of optimisation and how to achieve it will their incredible services. Below is a small example showing how easy it is to use Cloudinary straight in the HTML markup.","position":{"start":{"line":124,"column":774,"offset":12573},"end":{"line":124,"column":975,"offset":12774}}}],"position":{"start":{"line":124,"column":1,"offset":11800},"end":{"line":124,"column":975,"offset":12774}}},{"type":"text","value":"\n"},{"type":"raw","value":"<iframe height='400' scrolling='no' title='Cloudinary Example' src='//codepen.io/patricoferris/embed/ejgVJN/?height=400&theme-id=0&default-tab=html,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/ejgVJN/'>Cloudinary Example</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":126,"column":1,"offset":12776},"end":{"line":127,"column":10,"offset":13260}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As a last point on image optimisation, the format you use can have a large impact on file size. Some files contain lots of metadata which you don’t want to be serving to your client — ","position":{"start":{"line":129,"column":1,"offset":13262},"end":{"line":129,"column":185,"offset":13446}}},{"type":"element","tagName":"a","properties":{"href":"https://www.sno.phy.queensu.ca/~phil/exiftool/"},"children":[{"type":"text","value":"ExifTool","position":{"start":{"line":129,"column":186,"offset":13447},"end":{"line":129,"column":194,"offset":13455}}}],"position":{"start":{"line":129,"column":185,"offset":13446},"end":{"line":129,"column":243,"offset":13504}}},{"type":"text","value":" is a commonly used command-line application that can help you trim down those files sizes. On top of this, Scalable Vector Graphics (SVG) are a web-standard developed by W3C that offers XML-based vector graphics. This means they have infinite resolution unlike PNG or JPG files. It also makes them highly versatile, easily editable and can even be animated. At the end of the day SVGs are just code and so the file sizes tend to be small. For more reasons to use them, check out this ","position":{"start":{"line":129,"column":243,"offset":13504},"end":{"line":129,"column":728,"offset":13989}}},{"type":"element","tagName":"a","properties":{"href":"https://watb.co.uk/5-reasons-you-should-be-using-svgs-over-pngs/"},"children":[{"type":"text","value":"article","position":{"start":{"line":129,"column":729,"offset":13990},"end":{"line":129,"column":736,"offset":13997}}}],"position":{"start":{"line":129,"column":728,"offset":13989},"end":{"line":129,"column":803,"offset":14064}}},{"type":"text","value":".","position":{"start":{"line":129,"column":803,"offset":14064},"end":{"line":129,"column":804,"offset":14065}}}],"position":{"start":{"line":129,"column":1,"offset":13262},"end":{"line":129,"column":804,"offset":14065}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":131,"column":5,"offset":14071},"end":{"line":131,"column":15,"offset":14081}}}],"position":{"start":{"line":131,"column":1,"offset":14067},"end":{"line":131,"column":15,"offset":14081}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We’ve only scratched the surface of what’s possible for website optimisation. There are many tools you can use to help you stream-line this process like ","position":{"start":{"line":133,"column":1,"offset":14083},"end":{"line":133,"column":154,"offset":14236}}},{"type":"element","tagName":"a","properties":{"href":"https://webpack.js.org/"},"children":[{"type":"text","value":"Webpack","position":{"start":{"line":133,"column":155,"offset":14237},"end":{"line":133,"column":162,"offset":14244}}}],"position":{"start":{"line":133,"column":154,"offset":14236},"end":{"line":133,"column":188,"offset":14270}}},{"type":"text","value":" for bundling or static-site generators like ","position":{"start":{"line":133,"column":188,"offset":14270},"end":{"line":133,"column":233,"offset":14315}}},{"type":"element","tagName":"a","properties":{"href":"https://www.gatsbyjs.org/"},"children":[{"type":"text","value":"Gatsby","position":{"start":{"line":133,"column":234,"offset":14316},"end":{"line":133,"column":240,"offset":14322}}}],"position":{"start":{"line":133,"column":233,"offset":14315},"end":{"line":133,"column":268,"offset":14350}}},{"type":"text","value":". ","position":{"start":{"line":133,"column":268,"offset":14350},"end":{"line":133,"column":270,"offset":14352}}},{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking"},"children":[{"type":"text","value":"Tree shaking","position":{"start":{"line":133,"column":271,"offset":14353},"end":{"line":133,"column":283,"offset":14365}}}],"position":{"start":{"line":133,"column":270,"offset":14352},"end":{"line":133,"column":348,"offset":14430}}},{"type":"text","value":" is another commonly used technique to remove excess, unused modules lying around your website.","position":{"start":{"line":133,"column":348,"offset":14430},"end":{"line":133,"column":443,"offset":14525}}}],"position":{"start":{"line":133,"column":1,"offset":14083},"end":{"line":133,"column":443,"offset":14525}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Hopefully this article has touched on some useful techniques you can use on your next site to help improve its performance. Happy coding!","position":{"start":{"line":135,"column":1,"offset":14527},"end":{"line":135,"column":138,"offset":14664}}}],"position":{"start":{"line":135,"column":1,"offset":14527},"end":{"line":135,"column":138,"offset":14664}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A big thank you to ","position":{"start":{"line":137,"column":1,"offset":14666},"end":{"line":137,"column":20,"offset":14685}}},{"type":"element","tagName":"a","properties":{"href":"https://medium.com/@pinpickle"},"children":[{"type":"text","value":"Christian Silver","position":{"start":{"line":137,"column":21,"offset":14686},"end":{"line":137,"column":37,"offset":14702}}}],"position":{"start":{"line":137,"column":20,"offset":14685},"end":{"line":137,"column":69,"offset":14734}}},{"type":"text","value":" and ","position":{"start":{"line":137,"column":69,"offset":14734},"end":{"line":137,"column":74,"offset":14739}}},{"type":"element","tagName":"a","properties":{"href":"https://medium.com/@charliecrisp249"},"children":[{"type":"text","value":"Charlie Crisp","position":{"start":{"line":137,"column":75,"offset":14740},"end":{"line":137,"column":88,"offset":14753}}}],"position":{"start":{"line":137,"column":74,"offset":14739},"end":{"line":137,"column":126,"offset":14791}}},{"type":"text","value":" for editing this post and providing extremely useful advice and extra content to make it even better.","position":{"start":{"line":137,"column":126,"offset":14791},"end":{"line":137,"column":228,"offset":14893}}}],"position":{"start":{"line":137,"column":1,"offset":14666},"end":{"line":137,"column":228,"offset":14893}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":138,"column":1,"offset":14894}}}},{"id":"transformer-remark-markdown-html-a5db6dfc096fc0fa6d7ff2c192bed778-gatsby-remark-imagesgatsby-remark-prismjs-","value":"<p><img src=\"https://res.cloudinary.com/patricoferris/image/upload/v1532857964/pf2018/blogposts/27-02-2018/tree.png\" alt=\"Recursive Tree\"></p>\n<p>Graphics and computer programming are two dearly intertwined disciplines. The oscilloscope is often recognised as one of the first examples of “computer graphics”, the cathode-ray versions emitting a beam of electrons onto a phosphorescent screen. By using magnetic fields to change the beam’s direction, we can sweep from left to right and move up and down — the basic idea behind most CG! (I highly recommend watching this <a href=\"https://archive.org/details/introductiontothecathoderayoscilloscope\">video</a> from 1970).</p>\n<p>We’ve come a long way since then — modern day graphics is a complicated science as well as an art, and the barrier to entry is constantly increasing. Graphics programming can be so complex, that a simple program to draw a triangle can be over <a href=\"https://github.com/SaschaWillems/Vulkan/blob/master/examples/triangle/triangle.cpp\">1000 lines of code</a>! However, this article will introduce you to <a href=\"https://p5js.org/\">p5.js</a> (also known as p5). A simpler, less complex solution for people who want to start making computer graphics, but don’t want the headache of streams of boiler-plate code.</p>\n<p>Straight from the landing page of the p5.js website.</p>\n<blockquote>\n<h1>…make coding accessible for artists, designers, educators and beginners…</h1>\n</blockquote>\n<p>p5.js is the result of hard-work of the <a href=\"https://processingfoundation.org/\">Processing Foundation</a>, a group focused on spreading computer and visual literacy. It distills their <a href=\"https://en.wikipedia.org/wiki/Processing_(programming_language)\">Processing</a> language into a JavaScript library that makes creating graphics easy and accessible whilst providing an ideal platform to springboard people’s careers in computer graphics. It should be mentioned now that a lot of inspiration has been taken from <a href=\"http://shiffman.net/\">Daniel Shiffman’s</a> p5 projects (from the <a href=\"https://github.com/CodingTrain/website/tree/master/CodingChallenges/CC_03_Snake_game_p5.js\">classic snake game</a>, to a <a href=\"https://github.com/CodingTrain/website/tree/master/CodingChallenges/CC_93_DoublePendulum_p5.js\">double pendulum</a>). I can’t urge you enough to follow these projects to really improve your understanding of coding concepts and the p5 library.</p>\n<h3>Some prerequisites:</h3>\n<p>Before jumping into the p5 code I first want to make clear that there is assumed knowledge of HTML5 and JavaScript including arrays, functions, variables etc. in the rest of this article. If you have a good grasp of JavaScript then skip to the p5 code below, otherwise here are few resources to get you up to scratch.</p>\n<ul>\n<li>\n<p><a href=\"https://www.youtube.com/watch?v=spIVWmv1jnw\">HaC Intro to Programming</a> — A workshop that is being run by Hackers at Cambridge to help anyone start learning to program (which uses JavaScript).</p>\n</li>\n<li>\n<p><a href=\"https://www.codecademy.com/learn/introduction-to-javascript\">Codecademy</a> — a great resource for learning how to code with instant feedback in your browser.</p>\n</li>\n<li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript\">MDN</a> — a great resource for learning about all aspects of web development.</p>\n</li>\n<li>\n<p><a href=\"https://codepen.io/\">Codepen</a> — a brilliant online text-editor for creating cool projects in HTML, CSS and JavaScript. Equally good for getting inspiration from a lot of talented users. Another possible solution would be <a href=\"https://jsfiddle.net/\">JSFiddle</a>.</p>\n</li>\n</ul>\n<p>What follows is a series of steps that will introduce you to p5 concepts. With code examples and explanations I hope to give you enough information to understand the ideas, but to fully grasp the concepts you will have to dive into the code, experiment with it, break it and learn from it. So without further ado, let’s get coding.</p>\n<h3>Step 1: The Setup</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//Initialisation of canvas, objects, variables etc.</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//The drawing loop - updates at a constant rate declared in setup</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>p5 is really simple to setup once you know what to do. There are two files shown above — an index.html and a template.js. The index.html file gets the libraries for us and the template.js is the barebones structure of a p5 project and at the moment it does nothing! Within this we have two functions:</p>\n<ul>\n<li>\n<p>setup() — a function for creating what we will need for our graphic or project. Like creating a canvas, initialising some objects or arrays etc.</p>\n</li>\n<li>\n<p>draw() — a function which will be called periodically like a loop. This is where will call draw functions and update functions to make graphics and animations.</p>\n</li>\n</ul>\n<iframe height='400' scrolling='no' title='Simple Triangle Tutorial' src='//codepen.io/patricoferris/embed/dddxjr/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/dddxjr/'>Simple Triangle Tutorial</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>Let’s first look at the setup function. We used the p5 function createCanvas(width, height) which created and initialised a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API\">canvas</a> with arguments width and height. Now within our setup() and createCanvas() functions we can reference the variables width and height without ever instantiating them!</p>\n<p>Next comes the meaty, draw function. I have purposefully put extra code in here so we can learn more about what p5 has to offer. Firstly always remember that draw() is a loop that runs from top to bottom. Initially, we set the background (of our canvas) to white with background(255) which is the same as background(255, 255, 255) (maximising the red, green and blue values to give white). This may seem simple, but implicitly we are also clearing our canvas every loop… in one line of code! This will be useful for animations later as we want to redraw objects in a new location rather than have the <a href=\"https://codepen.io/patricoferris/pen/paxZaw\">build-up on the same canvas</a> (click to see it go spectacularly wrong). Next is a translate(width/2, height/2) which moves our current drawing location to the centre of our canvas. We then declare the fill colour of our triangle with fill(255, 0, 0)(making it red).</p>\n<p>We want to create an equilateral triangle with side length s. The triangle itself is a function that takes the vertex coordinates as arguments — triangle(x1, y1, x2, y2, x3, y3) and in this example starting from the centre we have one vertex at (-s/2, 0) another at (s/2, 0) giving a bottom length of s . Now comes the trickier part. A very important aspect of most computer graphics is that the coordinate system starts in the top left corner (or wherever your origin is) and x increases left to right, whilst y increases top to bottom. To move of the screen we need a negative y value. Our last coordinate is given as (0, -sin(PI/3)) (if you’re stuck, think about cutting the triangle in two and using trigonometry).</p>\n<h3>Step 2: Get Creative</h3>\n<p>We’ve learnt how to set up our canvas and start drawing. Armed with the p5 <a href=\"https://p5js.org/reference/\">reference page</a> and our creativity, we can make some truly stunning graphics. How about a bouncing ball animation?</p>\n<iframe height='400' scrolling='no' title='Bouncing Balls' src='//codepen.io/patricoferris/embed/PQpOrB/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/PQpOrB/'>Bouncing Balls</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>Let’s look at the interesting p5 aspects that we didn’t know before:</p>\n<ul>\n<li>\n<p>frameRate(20) — This enables us to specify the frame rate of our drawing loop, that is, how many times per second it redraws everything for us.</p>\n</li>\n<li>\n<p>gravity = createVector(0, 9) — p5 allows us to <a href=\"https://p5js.org/reference/#/p5.Vector\">create vector objects</a> with which we can perform vector operations like addition, multiplication, dot-product and cross-product. This is useful when we want to simulate physics like forces.</p>\n</li>\n<li>\n<p>floor(random(50)) — Here we’re using p5 math functions. floor() takes a real number and rounds it down to the nearest integer. random(arg) produces a random number as small as 0 or up to 49. In this example, we are giving it to the ellipse(x, y, w)function to create randomly sized balls by setting the width to a random number. If we gave another argument it would set the ellipse’s height, but here it infers that we want a circle.</p>\n</li>\n<li>\n<p>stroke(0) — This function sets the colour of our shape’s outline. If you don’t want any border you can add noStroke() .</p>\n</li>\n</ul>\n<p>All you need now is to add some physics to these ideas and you have yourself a bouncing ball animation.</p>\n<h3>Step 3: Experiment with p5</h3>\n<p>Hopefully now you have a good understanding of the p5 fundamentals, but we’ve barely scratched the surface. This last example will use two extra features of p5: interactivity and <a href=\"http://flafla2.github.io/2014/08/09/perlinnoise.html\">Perlin Noise</a>. Keep reading to find out more on these two concepts.</p>\n<iframe height='400' scrolling='no' title='Pixel Fire' src='//codepen.io/patricoferris/embed/XZMxmV/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/XZMxmV/'>Pixel Fire</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>In this CodePen I have created a relatively simple flame model using squares and Perlin Noise. First of all, how do we get user input? Lucky for us p5 has some functions that can help.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> touch <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">createCanvas</span><span class=\"token punctuation\">(</span><span class=\"token number\">640</span><span class=\"token punctuation\">,</span> <span class=\"token number\">640</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>touch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">rect</span><span class=\"token punctuation\">(</span>mouseX<span class=\"token punctuation\">,</span> mouseY<span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">touchStarted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  touch <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">touchEnded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  touch <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>At the top of the code we have declared a boolean “flag” as to whether or not our mouse is being pressed — this allows us to do things if the mouse is being held down. The touchStarted() and touchEnded() are p5 functions that are executed whenever the mouse is pressed or released or the screen is touched and released. Lastly, in our rect() function we have the variables mouseX and mouseY which are p5 variables corresponding to the mouse’s current position. Oddly, these also refer to your <a href=\"https://github.com/processing/p5.js/issues/1705\">“touch” coordinates</a>. With all these variables and functions predefined for us we can focus on making visually stunning graphics, whilst not being hampered by having to code extra functions unrelated to the graphic we’re producing.</p>\n<p>Now for the Perlin Noise. In 1983, tired with the artificial look of computer graphics, Ken Perlin developed a type of gradient noise. The basic idea being you create a big grid of gradients randomly and then use the dot product to interpolate between them. In short, we get random values based on the coordinate system we’re drawing on. Great! For each of our squares we can start them at a random position near our mouse, and generate a random upward vector using their position and Perlin Noise. Let’s look at the code:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Particle</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos <span class=\"token operator\">=</span> <span class=\"token function\">createVector</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">+</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vel <span class=\"token operator\">=</span> <span class=\"token function\">createVector</span><span class=\"token punctuation\">(</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token function\">noise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token function\">noise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>alpha <span class=\"token operator\">=</span> <span class=\"token number\">255</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>r <span class=\"token operator\">=</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">170</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>g <span class=\"token operator\">=</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">update</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>alpha <span class=\"token operator\">-=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">show</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">noStroke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>g<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>alpha<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">rect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">dead</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>alpha <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>Some key things to notice:</p>\n<ul>\n<li>\n<p>noise(this.pos.x) — The Perlin Noise <a href=\"https://p5js.org/reference/#/p5/noise\">function</a> that gets a random number based on the square’s current x position. It returns a value between 0 and 1.</p>\n</li>\n<li>\n<p>fill(this.r, this.g, this.b, this.alpha) — Here we have extended fill’s ability by including an alpha value for the objects transparency, by decreasing alpha in the update() function we get a nice fade out like a flame.</p>\n</li>\n<li>\n<p>dead() — This function allows us to keep track of which particles have disappeared as their alpha is now less than zero. We can then splice() them out of our array to ensure we’re not drawing an unbounded number of particles over time which would cause performance issues.</p>\n</li>\n</ul>\n<p>As a challenge, you can also use blendMode() to make it seem even more realistic — check this <a href=\"https://codepen.io/anon/pen/YeOaJX\">alteration</a> to see it in action.</p>\n<p>With only a few concepts and the p5 library, it is incredibly straightforward to start building anything you want. Be sure to checkout what else is possible with the library. Here are few cool ideas to get you started: <a href=\"https://p5js.org/examples/3d-geometries.html\">3D graphics</a>, <a href=\"https://p5js.org/examples/dom-slider.html\">sliders</a> and <a href=\"https://p5js.org/examples/image-load-and-display-image.html\">images</a>.</p>\n<h3>Conclusion</h3>\n<p>As computers and technology become ubiquitous in our daily lives and an increasing number of professions are now relying on computer literacy, p5.js is a beautiful example of how we can ensure as many people as possible have an entry-point to the wonderful world of computer programming. It also acts as a reminder to some more experienced programmers that creativity and imagination are vital in producing meaningful code and ultimately making the tech world a better place.</p>\n<p>Hopefully this intro to p5 has convinced you of its usefulness and has encouraged you to start taking your first steps into the world of graphics programming. Here are my recommendations for where to go next:</p>\n<ul>\n<li>\n<p><a href=\"https://www.youtube.com/user/shiffman\">The Coding Train</a> — A brilliant YouTube channel by Daniel Shiffman where he teaches JavaScript and p5.js amongst many other incredible things!</p>\n</li>\n<li>\n<p><a href=\"https://p5js.org/examples/\">p5js.org </a>— The examples page on this website is full of inspiring projects which you could recreate and extend further.</p>\n</li>\n<li>\n<p><a href=\"https://www.scratchapixel.com/index.php\">Sratchapixel</a> — If you feel ready to delve into the deeper concepts and implementations of computer graphics then this website is an incredible resource for you to use.</p>\n</li>\n</ul>\n<p>A special thanks to <a href=\"undefined\">Tom Read Cutting</a> for editing this article and <a href=\"undefined\">Christian Silver</a> for helping get it off the ground.</p>"},{"id":"transformer-remark-markdown-html-11f36ebeac72386eeeee00597b71f344-gatsby-remark-imagesgatsby-remark-prismjs-","value":"<p><img src=\"https://res.cloudinary.com/patricoferris/image/upload/v1532781201/pf2018/blogposts/28-07-2018/website_optimisation_2.png\" alt=\"Optimising your Website\">\nInspired by a <a href=\"https://syntax.fm/\">Syntax</a> podcast, I got really interested in website optimisation. It can often be an overlooked aspect in web development with more focus on design and functionality, I realised my number one priority whenever I visited a website is load speed. My attention is a website’s number one goal, lose it and they lose all potential ad revenue or possibility to give me whatever information I was looking for. <a href=\"https://developers.google.com/web/fundamentals/performance/get-started/\">Many seem to agree. 53% of users abandon websites that take more than 3 seconds to load</a>. No amount of fancy graphics or parallax scrolling that appears five seconds after someone’s clicked will hide the slow loading times.</p>\n<p>The aim of this article is to give a broad overview of the concepts and ideas behind optimising your website, experienced developers are likely already using things like Webpack (a module bundler) among other tools to speed-up their sites.</p>\n<p>For testing load-times I will be using the <a href=\"https://chrome.google.com/webstore/detail/page-load-time/fploionmjgeclbkemipmkogoaohcdbig?hl=en\">Page Load Time </a>Chrome extension. There are a few ways to measure website loading time including: <a href=\"https://developers.google.com/web/tools/chrome-user-experience-report/\">first paint, first meaning paint, DOMContentLoaded</a> etc. For a more detailed look into what this timer measures, check out the Github repository below.\n<a href=\"https://github.com/alex-vv/chrome-load-timer\"><strong>alex-vv/chrome-load-timer</strong>\n<em>chrome-load-timer - Google Chrome extension to measure page load time and display it in the toolbar</em>github.com</a></p>\n<h3><strong>Use Minified Stylesheets and Scripts</strong></h3>\n<p>You would be amazed at how much performance can be gained by this simple trick. What is a minified document? When we write code it is never our job to make it optimised for the computer, instead our golden rule is to make it readable to humans. This improves readability, cuts down on debug time and makes it easier to maintain. However, to achieve this we often add extra spacing which costs us precious space. Minifying the code is trimming all this fat from what we’ve written to have code that produces the same result but is far more difficult to read and maintain. This is okay though, because a computer has no problem deciphering it. Take the following code for example.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Notice how, wherever possible, our line-breaks and spaces are gone. On top of that, the code in the for-loop is only one line so there’s no need for the curly braces which extends our code over three lines when it can be done in one. Does this make a difference?</p>\n<p>I tried it out on simple website that just had one script tag being loaded in for the graphics library <a href=\"https://p5js.org/\">p5.js</a>. Using the non-minified CDN link I got a load time of 0.25 seconds. Using the minified version I got a markedly improved load time of 0.08 seconds. Depending on what your website project is, there are a few ways to automatically minify code. If it is a <a href=\"https://guide.meteor.com/build-tool.html\">Meteor app</a> it will be done automatically, using <a href=\"https://webpack.js.org/guides/production/\">Webpack </a>will also allow you to do this. Otherwise there are some online tools like <a href=\"https://jscompress.com/\">JSCompress </a>or <a href=\"https://cssminifier.com/\">CSSMinifier </a>that you can upload your code to.</p>\n<h3>Design Versus Performance</h3>\n<p>Whilst design is undoubtedly a major aspect to a website’s overall success, both developers and designers must work together to compromise and make a mutually beneficial trade-off between design and performance. The classic example is fonts. Take the two screenshots of a simple website below.</p>\n<p><img src=\"https://res.cloudinary.com/patricoferris/image/upload/v1532780050/pf2018/blogposts/28-07-2018/Helvetica.png\" alt=\"The example website using Helvetica Font (commonly found on many computers) — check [this](https://css-tricks.com/snippets/css/system-font-stack/) link for common system fonts\">\n<em>The example website using Helvetica Font (commonly found on many computers) — check <a href=\"https://css-tricks.com/snippets/css/system-font-stack/\">this</a> link for common system fonts</em></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/5760/1*8ciuJNBdqMhlLSaOpNUXow.png\" alt=\"The example website using Roboto Font (designed by Google and linked from [Google Fonts](https://fonts.google.com/?selection.family=Roboto))\"><em>The example website using Roboto Font (designed by Google and linked from <a href=\"https://fonts.google.com/?selection.family=Roboto\">Google Fonts</a>)</em></p>\n<p>Before critiquing my questionable design skills take a moment to appreciate that these two fonts are very similar — yet the loading time for a website for the Roboto font was 0.22 seconds as compared with 0.17 for Helvetica. Whilst not that significant, using lots of custom fonts will slow down your website, although using Google Fonts’ API will help keep your website optimised. As an over-the-top example, linking 20 different fonts from the Google API increased the load time to 0.87 seconds.</p>\n<h3>Inlining your JavaScript and CSS</h3>\n<p>For each individual document or component of your website, when the parser reaches the script tag or link tag it sends and HTTP request for that document and if not stated differently, these will be blocking actions. What this means is your machine is parsing the HTML document getting the words to display in your browser but if it hits the script tag with the attribute src='js/main.js' for example, it will block the parsing and load in that file. This is where as a developer you need to be clever about where in the document you place things.</p>\n<p>Whilst it may not ultimately affect the loading time of your website, it can affect the order in which things are loaded. Again we’ll be using the un-minified p5.js library to simulate a large JavaScript file and load it in different places to see how it affects our user experience.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2780/1*h_3GogfkaahcXCO9a43CPA.gif\" alt=\"Refreshing website with the script tag inserted at the bottom of the body tag\"><em>Refreshing website with the script tag inserted at the bottom of the body tag</em></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2780/1*xLOq5r4erQAwb4Au_hB-Ww.gif\" alt=\"Refreshing website with the script tag inserted at the top of the body tag\"><em>Refreshing website with the script tag inserted at the top of the body tag</em></p>\n<p>Whilst the load times were similar for both cases — the user experience is far better by placing the script at the body tag allowing the HTML to be parsed before the JavaScript giving the user the website content immediately!</p>\n<p>In the same vein CSS can also be render-blocking especially because more often than not it is linked in the head tag of your HTML document before the body. But if we want our user to see the content in the quickest time we don’t want to be loading CSS for the footer of our document which the user won’t see until they’ve scrolled to the bottom. In fact, we don’t want to load any CSS in that the user can’t immediately see when the page first loads on their device.</p>\n<p>The CSS that you need is often called the <em>Critical CSS</em>. Finding it for yourself would be a headache. It will be different for different devices, meaning you would have to check manually for all possible devices. Lucky for us we have (if you’re using <a href=\"https://nodejs.org/en/\">Node.js</a>) <a href=\"https://github.com/addyosmani/critical\">Critical</a>. This helpful package does the CSS inlining for us and all we do is add some code to a Javascript file. Here’s a code snippet from the Github page.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> critical <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'critical'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncritical<span class=\"token punctuation\">.</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    base<span class=\"token punctuation\">:</span> <span class=\"token string\">'test/'</span><span class=\"token punctuation\">,</span>\n    src<span class=\"token punctuation\">:</span> <span class=\"token string\">'index.html'</span><span class=\"token punctuation\">,</span>\n    dest<span class=\"token punctuation\">:</span> <span class=\"token string\">'styles/main.css'</span><span class=\"token punctuation\">,</span>\n    dimensions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n        height<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n        width<span class=\"token punctuation\">:</span> <span class=\"token number\">500</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        height<span class=\"token punctuation\">:</span> <span class=\"token number\">900</span><span class=\"token punctuation\">,</span>\n        width<span class=\"token punctuation\">:</span> <span class=\"token number\">1200</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Using the generate function, we supply it with a JavaScript object with some values defined. base is where we’re going to save our src and dest (our project folder usually). What’s great is now we just supply an array of dimensions and the code will compute the critical CSS for each and inline that code into our head tag.</p>\n<h3>Async and Defer</h3>\n<p>Again, we come back to this idea of render-blocking and how best we should implement this for our website. When you have a plain script tag in your HTML it blocks the HTML from loading whilst the JavaScript loads <strong>and</strong> runs. Async and defer are simple attributes that you can add to your script tags that change the way your JavaScript will be loaded.</p>\n<p>Defer essentially “defers” execution of the script until after the HTML has been parsed. A major advantage of this is that you no longer need some $(document).ready() jQuery-style function to make sure the body was loaded before you could manipulate it, which could cut out some of the dependencies on libraries like jQuery which helps reduce load-time.</p>\n<p>Async is, unsurprisingly, the asynchronous loading of JavaScript files. What does this mean? Your HTML will continue to be parsed whilst the file is loaded and then whenever its ready the file will be executed. This helps improving user experience whilst viewing your website. Imagine for example you had a JavaScript file for doing some cool graphics. You want the words around this graphic to be parsed until your graphic is ready to be executed. As soon as it is ready, it is executed and we get a more seamless loading of our webpage without missing pieces.</p>\n<p>Check this <a href=\"http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html\">website</a> for a really intuitive, graphical representation of this.</p>\n<h3>Image Optimisation and Media Queries</h3>\n<p>The cornerstone of all website performance optimisation is the simple rule that, the less data you send to the client, the quicker and better your website will perform. With the plethora of devices on the market capable of viewing websites, there is a growing trend to optimise your website based on the device it is being viewed on.</p>\n<p>Media queries are a fairly new tool added to CSS3. With more and more content being consumed using mobile-devices there has been a shift in design thinking towards mobile first. Using media queries you can then add stylings for larger screen sizes.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/* Some CSS for screen sizes bigger than 600px but smaller than 992px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/*  Some CSS for screen sizes bigger than 992px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">orientation</span><span class=\"token punctuation\">:</span> landscape<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* Some CSS for landscape-oriented devices */</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>The @media tag starts a new CSS rule, whilst the only keyword stops older browsers that don’t support media queries from using it. The screen keyword applies the rules to screens rather than prints. After that you add the media-feature which supports the and , or and not keywords so you can get as specific as you want. When you’re loading your image you can write code like:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-small.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-big.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>This isn’t necessarily the best or optimal approach for image optimisation. Luckily we have other options. <a href=\"https://www.imgix.com/\">Imgix</a> and <a href=\"https://cloudinary.com/\">Cloudinary</a> are two ways you can help optimise your site for the right device. Imgix is a Content Delivery Network (CDN) for images with a lot of cool features. A CDN simply takes your files and spreads them across the globe so that someone in a different country doesn’t have to wait for your files on your server to make it all the way to them. This <a href=\"https://docs.imgix.com/tutorials/responsive-images-srcset-imgix\">tutorial</a> goes through how to use Imgix for different device pixel ratios. Cloudinary is a similar service, and their <a href=\"https://cloudinary.com/documentation/image_optimization\">tutorial </a>will take you through the importance of optimisation and how to achieve it will their incredible services. Below is a small example showing how easy it is to use Cloudinary straight in the HTML markup.</p>\n<iframe height='400' scrolling='no' title='Cloudinary Example' src='//codepen.io/patricoferris/embed/ejgVJN/?height=400&theme-id=0&default-tab=html,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/ejgVJN/'>Cloudinary Example</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>As a last point on image optimisation, the format you use can have a large impact on file size. Some files contain lots of metadata which you don’t want to be serving to your client — <a href=\"https://www.sno.phy.queensu.ca/~phil/exiftool/\">ExifTool</a> is a commonly used command-line application that can help you trim down those files sizes. On top of this, Scalable Vector Graphics (SVG) are a web-standard developed by W3C that offers XML-based vector graphics. This means they have infinite resolution unlike PNG or JPG files. It also makes them highly versatile, easily editable and can even be animated. At the end of the day SVGs are just code and so the file sizes tend to be small. For more reasons to use them, check out this <a href=\"https://watb.co.uk/5-reasons-you-should-be-using-svgs-over-pngs/\">article</a>.</p>\n<h3>Conclusion</h3>\n<p>We’ve only scratched the surface of what’s possible for website optimisation. There are many tools you can use to help you stream-line this process like <a href=\"https://webpack.js.org/\">Webpack</a> for bundling or static-site generators like <a href=\"https://www.gatsbyjs.org/\">Gatsby</a>. <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking\">Tree shaking</a> is another commonly used technique to remove excess, unused modules lying around your website.</p>\n<p>Hopefully this article has touched on some useful techniques you can use on your next site to help improve its performance. Happy coding!</p>\n<p>A big thank you to <a href=\"https://medium.com/@pinpickle\">Christian Silver</a> and <a href=\"https://medium.com/@charliecrisp249\">Charlie Crisp</a> for editing this post and providing extremely useful advice and extra content to make it even better.</p>"},{"id":"transformer-remark-markdown-ast-bef3e0bfbad7eb71514a552e294e4316-gatsby-remark-imagesgatsby-remark-prismjs-","value":{"type":"root","children":[{"type":"yaml","value":"path: '/graphics-and-p5'\ntitle: 'Computer Graphics for Everyone'\nsubtitle: 'An Introduction to Computer Graphics using p5.js'\ndate: '2018-02-27'\nimageUrl: 'https://res.cloudinary.com/patricoferris/image/upload/v1532857964/pf2018/blogposts/27-02-2018/tree.png'","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":7,"column":4,"offset":267},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://res.cloudinary.com/patricoferris/image/upload/v1532857964/pf2018/blogposts/27-02-2018/tree.png","alt":"Recursive Tree","position":{"start":{"line":9,"column":1,"offset":269},"end":{"line":9,"column":122,"offset":390},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":269},"end":{"line":9,"column":122,"offset":390},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Graphics and computer programming are two dearly intertwined disciplines. The oscilloscope is often recognised as one of the first examples of “computer graphics”, the cathode-ray versions emitting a beam of electrons onto a phosphorescent screen. By using magnetic fields to change the beam’s direction, we can sweep from left to right and move up and down — the basic idea behind most CG! (I highly recommend watching this ","position":{"start":{"line":11,"column":1,"offset":392},"end":{"line":11,"column":426,"offset":817},"indent":[]}},{"type":"link","title":null,"url":"https://archive.org/details/introductiontothecathoderayoscilloscope","children":[{"type":"text","value":"video","position":{"start":{"line":11,"column":427,"offset":818},"end":{"line":11,"column":432,"offset":823},"indent":[]}}],"position":{"start":{"line":11,"column":426,"offset":817},"end":{"line":11,"column":502,"offset":893},"indent":[]}},{"type":"text","value":" from 1970).","position":{"start":{"line":11,"column":502,"offset":893},"end":{"line":11,"column":514,"offset":905},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":392},"end":{"line":11,"column":514,"offset":905},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We’ve come a long way since then — modern day graphics is a complicated science as well as an art, and the barrier to entry is constantly increasing. Graphics programming can be so complex, that a simple program to draw a triangle can be over ","position":{"start":{"line":13,"column":1,"offset":907},"end":{"line":13,"column":244,"offset":1150},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/SaschaWillems/Vulkan/blob/master/examples/triangle/triangle.cpp","children":[{"type":"text","value":"1000 lines of code","position":{"start":{"line":13,"column":245,"offset":1151},"end":{"line":13,"column":263,"offset":1169},"indent":[]}}],"position":{"start":{"line":13,"column":244,"offset":1150},"end":{"line":13,"column":348,"offset":1254},"indent":[]}},{"type":"text","value":"! However, this article will introduce you to ","position":{"start":{"line":13,"column":348,"offset":1254},"end":{"line":13,"column":394,"offset":1300},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/","children":[{"type":"text","value":"p5.js","position":{"start":{"line":13,"column":395,"offset":1301},"end":{"line":13,"column":400,"offset":1306},"indent":[]}}],"position":{"start":{"line":13,"column":394,"offset":1300},"end":{"line":13,"column":420,"offset":1326},"indent":[]}},{"type":"text","value":" (also known as p5). A simpler, less complex solution for people who want to start making computer graphics, but don’t want the headache of streams of boiler-plate code.","position":{"start":{"line":13,"column":420,"offset":1326},"end":{"line":13,"column":589,"offset":1495},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":907},"end":{"line":13,"column":589,"offset":1495},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Straight from the landing page of the p5.js website.","position":{"start":{"line":15,"column":1,"offset":1497},"end":{"line":15,"column":53,"offset":1549},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":1497},"end":{"line":15,"column":53,"offset":1549},"indent":[]}},{"type":"blockquote","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"…make coding accessible for artists, designers, educators and beginners…","position":{"start":{"line":16,"column":5,"offset":1554},"end":{"line":16,"column":77,"offset":1626},"indent":[]}}],"position":{"start":{"line":16,"column":3,"offset":1552},"end":{"line":16,"column":77,"offset":1626},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":1550},"end":{"line":16,"column":77,"offset":1626},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"p5.js is the result of hard-work of the ","position":{"start":{"line":18,"column":1,"offset":1628},"end":{"line":18,"column":41,"offset":1668},"indent":[]}},{"type":"link","title":null,"url":"https://processingfoundation.org/","children":[{"type":"text","value":"Processing Foundation","position":{"start":{"line":18,"column":42,"offset":1669},"end":{"line":18,"column":63,"offset":1690},"indent":[]}}],"position":{"start":{"line":18,"column":41,"offset":1668},"end":{"line":18,"column":99,"offset":1726},"indent":[]}},{"type":"text","value":", a group focused on spreading computer and visual literacy. It distills their ","position":{"start":{"line":18,"column":99,"offset":1726},"end":{"line":18,"column":178,"offset":1805},"indent":[]}},{"type":"link","title":null,"url":"https://en.wikipedia.org/wiki/Processing_(programming_language)","children":[{"type":"text","value":"Processing","position":{"start":{"line":18,"column":179,"offset":1806},"end":{"line":18,"column":189,"offset":1816},"indent":[]}}],"position":{"start":{"line":18,"column":178,"offset":1805},"end":{"line":18,"column":255,"offset":1882},"indent":[]}},{"type":"text","value":" language into a JavaScript library that makes creating graphics easy and accessible whilst providing an ideal platform to springboard people’s careers in computer graphics. It should be mentioned now that a lot of inspiration has been taken from ","position":{"start":{"line":18,"column":255,"offset":1882},"end":{"line":18,"column":502,"offset":2129},"indent":[]}},{"type":"link","title":null,"url":"http://shiffman.net/","children":[{"type":"text","value":"Daniel Shiffman’s","position":{"start":{"line":18,"column":503,"offset":2130},"end":{"line":18,"column":520,"offset":2147},"indent":[]}}],"position":{"start":{"line":18,"column":502,"offset":2129},"end":{"line":18,"column":543,"offset":2170},"indent":[]}},{"type":"text","value":" p5 projects (from the ","position":{"start":{"line":18,"column":543,"offset":2170},"end":{"line":18,"column":566,"offset":2193},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/CodingTrain/website/tree/master/CodingChallenges/CC_03_Snake_game_p5.js","children":[{"type":"text","value":"classic snake game","position":{"start":{"line":18,"column":567,"offset":2194},"end":{"line":18,"column":585,"offset":2212},"indent":[]}}],"position":{"start":{"line":18,"column":566,"offset":2193},"end":{"line":18,"column":678,"offset":2305},"indent":[]}},{"type":"text","value":", to a ","position":{"start":{"line":18,"column":678,"offset":2305},"end":{"line":18,"column":685,"offset":2312},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/CodingTrain/website/tree/master/CodingChallenges/CC_93_DoublePendulum_p5.js","children":[{"type":"text","value":"double pendulum","position":{"start":{"line":18,"column":686,"offset":2313},"end":{"line":18,"column":701,"offset":2328},"indent":[]}}],"position":{"start":{"line":18,"column":685,"offset":2312},"end":{"line":18,"column":798,"offset":2425},"indent":[]}},{"type":"text","value":"). I can’t urge you enough to follow these projects to really improve your understanding of coding concepts and the p5 library.","position":{"start":{"line":18,"column":798,"offset":2425},"end":{"line":18,"column":925,"offset":2552},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1628},"end":{"line":18,"column":925,"offset":2552},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Some prerequisites:","position":{"start":{"line":20,"column":5,"offset":2558},"end":{"line":20,"column":24,"offset":2577},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":2554},"end":{"line":20,"column":24,"offset":2577},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Before jumping into the p5 code I first want to make clear that there is assumed knowledge of HTML5 and JavaScript including arrays, functions, variables etc. in the rest of this article. If you have a good grasp of JavaScript then skip to the p5 code below, otherwise here are few resources to get you up to scratch.","position":{"start":{"line":22,"column":1,"offset":2579},"end":{"line":22,"column":318,"offset":2896},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":2579},"end":{"line":22,"column":318,"offset":2896},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":true,"children":[{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.youtube.com/watch?v=spIVWmv1jnw","children":[{"type":"text","value":"HaC Intro to Programming","position":{"start":{"line":24,"column":4,"offset":2901},"end":{"line":24,"column":28,"offset":2925},"indent":[]}}],"position":{"start":{"line":24,"column":3,"offset":2900},"end":{"line":24,"column":74,"offset":2971},"indent":[]}},{"type":"text","value":" — A workshop that is being run by Hackers at Cambridge to help anyone start learning to program (which uses JavaScript).","position":{"start":{"line":24,"column":74,"offset":2971},"end":{"line":24,"column":195,"offset":3092},"indent":[]}}],"position":{"start":{"line":24,"column":3,"offset":2900},"end":{"line":24,"column":195,"offset":3092},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":2898},"end":{"line":25,"column":1,"offset":3093},"indent":[1]}},{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.codecademy.com/learn/introduction-to-javascript","children":[{"type":"text","value":"Codecademy","position":{"start":{"line":26,"column":4,"offset":3097},"end":{"line":26,"column":14,"offset":3107},"indent":[]}}],"position":{"start":{"line":26,"column":3,"offset":3096},"end":{"line":26,"column":76,"offset":3169},"indent":[]}},{"type":"text","value":" — a great resource for learning how to code with instant feedback in your browser.","position":{"start":{"line":26,"column":76,"offset":3169},"end":{"line":26,"column":159,"offset":3252},"indent":[]}}],"position":{"start":{"line":26,"column":3,"offset":3096},"end":{"line":26,"column":159,"offset":3252},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":3094},"end":{"line":27,"column":1,"offset":3253},"indent":[1]}},{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript","children":[{"type":"text","value":"MDN","position":{"start":{"line":28,"column":4,"offset":3257},"end":{"line":28,"column":7,"offset":3260},"indent":[]}}],"position":{"start":{"line":28,"column":3,"offset":3256},"end":{"line":28,"column":65,"offset":3318},"indent":[]}},{"type":"text","value":" — a great resource for learning about all aspects of web development.","position":{"start":{"line":28,"column":65,"offset":3318},"end":{"line":28,"column":135,"offset":3388},"indent":[]}}],"position":{"start":{"line":28,"column":3,"offset":3256},"end":{"line":28,"column":135,"offset":3388},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":3254},"end":{"line":29,"column":1,"offset":3389},"indent":[1]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://codepen.io/","children":[{"type":"text","value":"Codepen","position":{"start":{"line":30,"column":4,"offset":3393},"end":{"line":30,"column":11,"offset":3400},"indent":[]}}],"position":{"start":{"line":30,"column":3,"offset":3392},"end":{"line":30,"column":33,"offset":3422},"indent":[]}},{"type":"text","value":" — a brilliant online text-editor for creating cool projects in HTML, CSS and JavaScript. Equally good for getting inspiration from a lot of talented users. Another possible solution would be ","position":{"start":{"line":30,"column":33,"offset":3422},"end":{"line":30,"column":225,"offset":3614},"indent":[]}},{"type":"link","title":null,"url":"https://jsfiddle.net/","children":[{"type":"text","value":"JSFiddle","position":{"start":{"line":30,"column":226,"offset":3615},"end":{"line":30,"column":234,"offset":3623},"indent":[]}}],"position":{"start":{"line":30,"column":225,"offset":3614},"end":{"line":30,"column":258,"offset":3647},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":30,"column":258,"offset":3647},"end":{"line":30,"column":259,"offset":3648},"indent":[]}}],"position":{"start":{"line":30,"column":3,"offset":3392},"end":{"line":30,"column":259,"offset":3648},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":3390},"end":{"line":30,"column":259,"offset":3648},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":2898},"end":{"line":30,"column":259,"offset":3648},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"What follows is a series of steps that will introduce you to p5 concepts. With code examples and explanations I hope to give you enough information to understand the ideas, but to fully grasp the concepts you will have to dive into the code, experiment with it, break it and learn from it. So without further ado, let’s get coding.","position":{"start":{"line":32,"column":1,"offset":3650},"end":{"line":32,"column":332,"offset":3981},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":3650},"end":{"line":32,"column":332,"offset":3981},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Step 1: The Setup","position":{"start":{"line":34,"column":5,"offset":3987},"end":{"line":34,"column":22,"offset":4004},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":3983},"end":{"line":34,"column":22,"offset":4004},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//Initialisation of canvas, objects, variables etc.</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//The drawing loop - updates at a constant rate declared in setup</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":36,"column":1,"offset":4006},"end":{"line":43,"column":4,"offset":4184},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"p5 is really simple to setup once you know what to do. There are two files shown above — an index.html and a template.js. The index.html file gets the libraries for us and the template.js is the barebones structure of a p5 project and at the moment it does nothing! Within this we have two functions:","position":{"start":{"line":45,"column":1,"offset":4186},"end":{"line":45,"column":301,"offset":4486},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":4186},"end":{"line":45,"column":301,"offset":4486},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":true,"children":[{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"setup() — a function for creating what we will need for our graphic or project. Like creating a canvas, initialising some objects or arrays etc.","position":{"start":{"line":47,"column":3,"offset":4490},"end":{"line":47,"column":147,"offset":4634},"indent":[]}}],"position":{"start":{"line":47,"column":3,"offset":4490},"end":{"line":47,"column":147,"offset":4634},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":4488},"end":{"line":48,"column":1,"offset":4635},"indent":[1]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"draw() — a function which will be called periodically like a loop. This is where will call draw functions and update functions to make graphics and animations.","position":{"start":{"line":49,"column":3,"offset":4638},"end":{"line":49,"column":162,"offset":4797},"indent":[]}}],"position":{"start":{"line":49,"column":3,"offset":4638},"end":{"line":49,"column":162,"offset":4797},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":4636},"end":{"line":49,"column":162,"offset":4797},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":4488},"end":{"line":49,"column":162,"offset":4797},"indent":[1,1]}},{"type":"html","value":"<iframe height='400' scrolling='no' title='Simple Triangle Tutorial' src='//codepen.io/patricoferris/embed/dddxjr/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/dddxjr/'>Simple Triangle Tutorial</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":51,"column":1,"offset":4799},"end":{"line":52,"column":10,"offset":5293},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Let’s first look at the setup function. We used the p5 function createCanvas(width, height) which created and initialised a ","position":{"start":{"line":54,"column":1,"offset":5295},"end":{"line":54,"column":125,"offset":5419},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API","children":[{"type":"text","value":"canvas","position":{"start":{"line":54,"column":126,"offset":5420},"end":{"line":54,"column":132,"offset":5426},"indent":[]}}],"position":{"start":{"line":54,"column":125,"offset":5419},"end":{"line":54,"column":194,"offset":5488},"indent":[]}},{"type":"text","value":" with arguments width and height. Now within our setup() and createCanvas() functions we can reference the variables width and height without ever instantiating them!","position":{"start":{"line":54,"column":194,"offset":5488},"end":{"line":54,"column":360,"offset":5654},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":5295},"end":{"line":54,"column":360,"offset":5654},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Next comes the meaty, draw function. I have purposefully put extra code in here so we can learn more about what p5 has to offer. Firstly always remember that draw() is a loop that runs from top to bottom. Initially, we set the background (of our canvas) to white with background(255) which is the same as background(255, 255, 255) (maximising the red, green and blue values to give white). This may seem simple, but implicitly we are also clearing our canvas every loop… in one line of code! This will be useful for animations later as we want to redraw objects in a new location rather than have the ","position":{"start":{"line":56,"column":1,"offset":5656},"end":{"line":56,"column":602,"offset":6257},"indent":[]}},{"type":"link","title":null,"url":"https://codepen.io/patricoferris/pen/paxZaw","children":[{"type":"text","value":"build-up on the same canvas","position":{"start":{"line":56,"column":603,"offset":6258},"end":{"line":56,"column":630,"offset":6285},"indent":[]}}],"position":{"start":{"line":56,"column":602,"offset":6257},"end":{"line":56,"column":676,"offset":6331},"indent":[]}},{"type":"text","value":" (click to see it go spectacularly wrong). Next is a translate(width/2, height/2) which moves our current drawing location to the centre of our canvas. We then declare the fill colour of our triangle with fill(255, 0, 0)(making it red).","position":{"start":{"line":56,"column":676,"offset":6331},"end":{"line":56,"column":912,"offset":6567},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":5656},"end":{"line":56,"column":912,"offset":6567},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We want to create an equilateral triangle with side length s. The triangle itself is a function that takes the vertex coordinates as arguments — triangle(x1, y1, x2, y2, x3, y3) and in this example starting from the centre we have one vertex at (-s/2, 0) another at (s/2, 0) giving a bottom length of s . Now comes the trickier part. A very important aspect of most computer graphics is that the coordinate system starts in the top left corner (or wherever your origin is) and x increases left to right, whilst y increases top to bottom. To move of the screen we need a negative y value. Our last coordinate is given as (0, -sin(PI/3)) (if you’re stuck, think about cutting the triangle in two and using trigonometry).","position":{"start":{"line":58,"column":1,"offset":6569},"end":{"line":58,"column":719,"offset":7287},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":6569},"end":{"line":58,"column":719,"offset":7287},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Step 2: Get Creative","position":{"start":{"line":60,"column":5,"offset":7293},"end":{"line":60,"column":25,"offset":7313},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":7289},"end":{"line":60,"column":25,"offset":7313},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We’ve learnt how to set up our canvas and start drawing. Armed with the p5 ","position":{"start":{"line":62,"column":1,"offset":7315},"end":{"line":62,"column":76,"offset":7390},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/reference/","children":[{"type":"text","value":"reference page","position":{"start":{"line":62,"column":77,"offset":7391},"end":{"line":62,"column":91,"offset":7405},"indent":[]}}],"position":{"start":{"line":62,"column":76,"offset":7390},"end":{"line":62,"column":121,"offset":7435},"indent":[]}},{"type":"text","value":" and our creativity, we can make some truly stunning graphics. How about a bouncing ball animation?","position":{"start":{"line":62,"column":121,"offset":7435},"end":{"line":62,"column":220,"offset":7534},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":7315},"end":{"line":62,"column":220,"offset":7534},"indent":[]}},{"type":"html","value":"<iframe height='400' scrolling='no' title='Bouncing Balls' src='//codepen.io/patricoferris/embed/PQpOrB/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/PQpOrB/'>Bouncing Balls</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":64,"column":1,"offset":7536},"end":{"line":65,"column":10,"offset":8010},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Let’s look at the interesting p5 aspects that we didn’t know before:","position":{"start":{"line":67,"column":1,"offset":8012},"end":{"line":67,"column":69,"offset":8080},"indent":[]}}],"position":{"start":{"line":67,"column":1,"offset":8012},"end":{"line":67,"column":69,"offset":8080},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":true,"children":[{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"frameRate(20) — This enables us to specify the frame rate of our drawing loop, that is, how many times per second it redraws everything for us.","position":{"start":{"line":69,"column":3,"offset":8084},"end":{"line":69,"column":146,"offset":8227},"indent":[]}}],"position":{"start":{"line":69,"column":3,"offset":8084},"end":{"line":69,"column":146,"offset":8227},"indent":[]}}],"position":{"start":{"line":69,"column":1,"offset":8082},"end":{"line":70,"column":1,"offset":8228},"indent":[1]}},{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"gravity = createVector(0, 9) — p5 allows us to ","position":{"start":{"line":71,"column":3,"offset":8231},"end":{"line":71,"column":50,"offset":8278},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/reference/#/p5.Vector","children":[{"type":"text","value":"create vector objects","position":{"start":{"line":71,"column":51,"offset":8279},"end":{"line":71,"column":72,"offset":8300},"indent":[]}}],"position":{"start":{"line":71,"column":50,"offset":8278},"end":{"line":71,"column":113,"offset":8341},"indent":[]}},{"type":"text","value":" with which we can perform vector operations like addition, multiplication, dot-product and cross-product. This is useful when we want to simulate physics like forces.","position":{"start":{"line":71,"column":113,"offset":8341},"end":{"line":71,"column":280,"offset":8508},"indent":[]}}],"position":{"start":{"line":71,"column":3,"offset":8231},"end":{"line":71,"column":280,"offset":8508},"indent":[]}}],"position":{"start":{"line":71,"column":1,"offset":8229},"end":{"line":72,"column":1,"offset":8509},"indent":[1]}},{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"floor(random(50)) — Here we’re using p5 math functions. floor() takes a real number and rounds it down to the nearest integer. random(arg) produces a random number as small as 0 or up to 49. In this example, we are giving it to the ellipse(x, y, w)function to create randomly sized balls by setting the width to a random number. If we gave another argument it would set the ellipse’s height, but here it infers that we want a circle.","position":{"start":{"line":73,"column":3,"offset":8512},"end":{"line":73,"column":436,"offset":8945},"indent":[]}}],"position":{"start":{"line":73,"column":3,"offset":8512},"end":{"line":73,"column":436,"offset":8945},"indent":[]}}],"position":{"start":{"line":73,"column":1,"offset":8510},"end":{"line":74,"column":1,"offset":8946},"indent":[1]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"stroke(0) — This function sets the colour of our shape’s outline. If you don’t want any border you can add noStroke() .","position":{"start":{"line":75,"column":3,"offset":8949},"end":{"line":75,"column":122,"offset":9068},"indent":[]}}],"position":{"start":{"line":75,"column":3,"offset":8949},"end":{"line":75,"column":122,"offset":9068},"indent":[]}}],"position":{"start":{"line":75,"column":1,"offset":8947},"end":{"line":75,"column":122,"offset":9068},"indent":[]}}],"position":{"start":{"line":69,"column":1,"offset":8082},"end":{"line":75,"column":122,"offset":9068},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"All you need now is to add some physics to these ideas and you have yourself a bouncing ball animation.","position":{"start":{"line":77,"column":1,"offset":9070},"end":{"line":77,"column":104,"offset":9173},"indent":[]}}],"position":{"start":{"line":77,"column":1,"offset":9070},"end":{"line":77,"column":104,"offset":9173},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Step 3: Experiment with p5","position":{"start":{"line":79,"column":5,"offset":9179},"end":{"line":79,"column":31,"offset":9205},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":9175},"end":{"line":79,"column":31,"offset":9205},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Hopefully now you have a good understanding of the p5 fundamentals, but we’ve barely scratched the surface. This last example will use two extra features of p5: interactivity and ","position":{"start":{"line":81,"column":1,"offset":9207},"end":{"line":81,"column":180,"offset":9386},"indent":[]}},{"type":"link","title":null,"url":"http://flafla2.github.io/2014/08/09/perlinnoise.html","children":[{"type":"text","value":"Perlin Noise","position":{"start":{"line":81,"column":181,"offset":9387},"end":{"line":81,"column":193,"offset":9399},"indent":[]}}],"position":{"start":{"line":81,"column":180,"offset":9386},"end":{"line":81,"column":248,"offset":9454},"indent":[]}},{"type":"text","value":". Keep reading to find out more on these two concepts.","position":{"start":{"line":81,"column":248,"offset":9454},"end":{"line":81,"column":302,"offset":9508},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":9207},"end":{"line":81,"column":302,"offset":9508},"indent":[]}},{"type":"html","value":"<iframe height='400' scrolling='no' title='Pixel Fire' src='//codepen.io/patricoferris/embed/XZMxmV/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/XZMxmV/'>Pixel Fire</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":83,"column":1,"offset":9510},"end":{"line":84,"column":10,"offset":9976},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"In this CodePen I have created a relatively simple flame model using squares and Perlin Noise. First of all, how do we get user input? Lucky for us p5 has some functions that can help.","position":{"start":{"line":86,"column":1,"offset":9978},"end":{"line":86,"column":185,"offset":10162},"indent":[]}}],"position":{"start":{"line":86,"column":1,"offset":9978},"end":{"line":86,"column":185,"offset":10162},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> touch <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">createCanvas</span><span class=\"token punctuation\">(</span><span class=\"token number\">640</span><span class=\"token punctuation\">,</span> <span class=\"token number\">640</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>touch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">rect</span><span class=\"token punctuation\">(</span>mouseX<span class=\"token punctuation\">,</span> mouseY<span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">touchStarted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  touch <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">touchEnded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  touch <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":88,"column":1,"offset":10164},"end":{"line":105,"column":4,"offset":10422},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"At the top of the code we have declared a boolean “flag” as to whether or not our mouse is being pressed — this allows us to do things if the mouse is being held down. The touchStarted() and touchEnded() are p5 functions that are executed whenever the mouse is pressed or released or the screen is touched and released. Lastly, in our rect() function we have the variables mouseX and mouseY which are p5 variables corresponding to the mouse’s current position. Oddly, these also refer to your ","position":{"start":{"line":107,"column":1,"offset":10424},"end":{"line":107,"column":494,"offset":10917},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/processing/p5.js/issues/1705","children":[{"type":"text","value":"“touch” coordinates","position":{"start":{"line":107,"column":495,"offset":10918},"end":{"line":107,"column":514,"offset":10937},"indent":[]}}],"position":{"start":{"line":107,"column":494,"offset":10917},"end":{"line":107,"column":564,"offset":10987},"indent":[]}},{"type":"text","value":". With all these variables and functions predefined for us we can focus on making visually stunning graphics, whilst not being hampered by having to code extra functions unrelated to the graphic we’re producing.","position":{"start":{"line":107,"column":564,"offset":10987},"end":{"line":107,"column":775,"offset":11198},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":10424},"end":{"line":107,"column":775,"offset":11198},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now for the Perlin Noise. In 1983, tired with the artificial look of computer graphics, Ken Perlin developed a type of gradient noise. The basic idea being you create a big grid of gradients randomly and then use the dot product to interpolate between them. In short, we get random values based on the coordinate system we’re drawing on. Great! For each of our squares we can start them at a random position near our mouse, and generate a random upward vector using their position and Perlin Noise. Let’s look at the code:","position":{"start":{"line":109,"column":1,"offset":11200},"end":{"line":109,"column":523,"offset":11722},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":11200},"end":{"line":109,"column":523,"offset":11722},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Particle</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos <span class=\"token operator\">=</span> <span class=\"token function\">createVector</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">+</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vel <span class=\"token operator\">=</span> <span class=\"token function\">createVector</span><span class=\"token punctuation\">(</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token function\">noise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token function\">noise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>alpha <span class=\"token operator\">=</span> <span class=\"token number\">255</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>r <span class=\"token operator\">=</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">170</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>g <span class=\"token operator\">=</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">update</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>alpha <span class=\"token operator\">-=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">show</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">noStroke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>g<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>alpha<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">rect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">dead</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>alpha <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":111,"column":1,"offset":11724},"end":{"line":136,"column":4,"offset":12360},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Some key things to notice:","position":{"start":{"line":138,"column":1,"offset":12362},"end":{"line":138,"column":27,"offset":12388},"indent":[]}}],"position":{"start":{"line":138,"column":1,"offset":12362},"end":{"line":138,"column":27,"offset":12388},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":true,"children":[{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"noise(this.pos.x) — The Perlin Noise ","position":{"start":{"line":140,"column":3,"offset":12392},"end":{"line":140,"column":40,"offset":12429},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/reference/#/p5/noise","children":[{"type":"text","value":"function","position":{"start":{"line":140,"column":41,"offset":12430},"end":{"line":140,"column":49,"offset":12438},"indent":[]}}],"position":{"start":{"line":140,"column":40,"offset":12429},"end":{"line":140,"column":89,"offset":12478},"indent":[]}},{"type":"text","value":" that gets a random number based on the square’s current x position. It returns a value between 0 and 1.","position":{"start":{"line":140,"column":89,"offset":12478},"end":{"line":140,"column":193,"offset":12582},"indent":[]}}],"position":{"start":{"line":140,"column":3,"offset":12392},"end":{"line":140,"column":193,"offset":12582},"indent":[]}}],"position":{"start":{"line":140,"column":1,"offset":12390},"end":{"line":141,"column":1,"offset":12583},"indent":[1]}},{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"fill(this.r, this.g, this.b, this.alpha) — Here we have extended fill’s ability by including an alpha value for the objects transparency, by decreasing alpha in the update() function we get a nice fade out like a flame.","position":{"start":{"line":142,"column":3,"offset":12586},"end":{"line":142,"column":222,"offset":12805},"indent":[]}}],"position":{"start":{"line":142,"column":3,"offset":12586},"end":{"line":142,"column":222,"offset":12805},"indent":[]}}],"position":{"start":{"line":142,"column":1,"offset":12584},"end":{"line":143,"column":1,"offset":12806},"indent":[1]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"dead() — This function allows us to keep track of which particles have disappeared as their alpha is now less than zero. We can then splice() them out of our array to ensure we’re not drawing an unbounded number of particles over time which would cause performance issues.","position":{"start":{"line":144,"column":3,"offset":12809},"end":{"line":144,"column":275,"offset":13081},"indent":[]}}],"position":{"start":{"line":144,"column":3,"offset":12809},"end":{"line":144,"column":275,"offset":13081},"indent":[]}}],"position":{"start":{"line":144,"column":1,"offset":12807},"end":{"line":144,"column":275,"offset":13081},"indent":[]}}],"position":{"start":{"line":140,"column":1,"offset":12390},"end":{"line":144,"column":275,"offset":13081},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"As a challenge, you can also use blendMode() to make it seem even more realistic — check this ","position":{"start":{"line":146,"column":1,"offset":13083},"end":{"line":146,"column":95,"offset":13177},"indent":[]}},{"type":"link","title":null,"url":"https://codepen.io/anon/pen/YeOaJX","children":[{"type":"text","value":"alteration","position":{"start":{"line":146,"column":96,"offset":13178},"end":{"line":146,"column":106,"offset":13188},"indent":[]}}],"position":{"start":{"line":146,"column":95,"offset":13177},"end":{"line":146,"column":143,"offset":13225},"indent":[]}},{"type":"text","value":" to see it in action.","position":{"start":{"line":146,"column":143,"offset":13225},"end":{"line":146,"column":164,"offset":13246},"indent":[]}}],"position":{"start":{"line":146,"column":1,"offset":13083},"end":{"line":146,"column":164,"offset":13246},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"With only a few concepts and the p5 library, it is incredibly straightforward to start building anything you want. Be sure to checkout what else is possible with the library. Here are few cool ideas to get you started: ","position":{"start":{"line":148,"column":1,"offset":13248},"end":{"line":148,"column":220,"offset":13467},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/examples/3d-geometries.html","children":[{"type":"text","value":"3D graphics","position":{"start":{"line":148,"column":221,"offset":13468},"end":{"line":148,"column":232,"offset":13479},"indent":[]}}],"position":{"start":{"line":148,"column":220,"offset":13467},"end":{"line":148,"column":279,"offset":13526},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":148,"column":279,"offset":13526},"end":{"line":148,"column":281,"offset":13528},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/examples/dom-slider.html","children":[{"type":"text","value":"sliders","position":{"start":{"line":148,"column":282,"offset":13529},"end":{"line":148,"column":289,"offset":13536},"indent":[]}}],"position":{"start":{"line":148,"column":281,"offset":13528},"end":{"line":148,"column":333,"offset":13580},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":148,"column":333,"offset":13580},"end":{"line":148,"column":338,"offset":13585},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/examples/image-load-and-display-image.html","children":[{"type":"text","value":"images","position":{"start":{"line":148,"column":339,"offset":13586},"end":{"line":148,"column":345,"offset":13592},"indent":[]}}],"position":{"start":{"line":148,"column":338,"offset":13585},"end":{"line":148,"column":407,"offset":13654},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":148,"column":407,"offset":13654},"end":{"line":148,"column":408,"offset":13655},"indent":[]}}],"position":{"start":{"line":148,"column":1,"offset":13248},"end":{"line":148,"column":408,"offset":13655},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":150,"column":5,"offset":13661},"end":{"line":150,"column":15,"offset":13671},"indent":[]}}],"position":{"start":{"line":150,"column":1,"offset":13657},"end":{"line":150,"column":15,"offset":13671},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As computers and technology become ubiquitous in our daily lives and an increasing number of professions are now relying on computer literacy, p5.js is a beautiful example of how we can ensure as many people as possible have an entry-point to the wonderful world of computer programming. It also acts as a reminder to some more experienced programmers that creativity and imagination are vital in producing meaningful code and ultimately making the tech world a better place.","position":{"start":{"line":152,"column":1,"offset":13673},"end":{"line":152,"column":476,"offset":14148},"indent":[]}}],"position":{"start":{"line":152,"column":1,"offset":13673},"end":{"line":152,"column":476,"offset":14148},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Hopefully this intro to p5 has convinced you of its usefulness and has encouraged you to start taking your first steps into the world of graphics programming. Here are my recommendations for where to go next:","position":{"start":{"line":154,"column":1,"offset":14150},"end":{"line":154,"column":209,"offset":14358},"indent":[]}}],"position":{"start":{"line":154,"column":1,"offset":14150},"end":{"line":154,"column":209,"offset":14358},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":true,"children":[{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.youtube.com/user/shiffman","children":[{"type":"text","value":"The Coding Train","position":{"start":{"line":156,"column":4,"offset":14363},"end":{"line":156,"column":20,"offset":14379},"indent":[]}}],"position":{"start":{"line":156,"column":3,"offset":14362},"end":{"line":156,"column":60,"offset":14419},"indent":[]}},{"type":"text","value":" — A brilliant YouTube channel by Daniel Shiffman where he teaches JavaScript and p5.js amongst many other incredible things!","position":{"start":{"line":156,"column":60,"offset":14419},"end":{"line":156,"column":185,"offset":14544},"indent":[]}}],"position":{"start":{"line":156,"column":3,"offset":14362},"end":{"line":156,"column":185,"offset":14544},"indent":[]}}],"position":{"start":{"line":156,"column":1,"offset":14360},"end":{"line":157,"column":1,"offset":14545},"indent":[1]}},{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://p5js.org/examples/","children":[{"type":"text","value":"p5js.org ","position":{"start":{"line":158,"column":4,"offset":14549},"end":{"line":158,"column":13,"offset":14558},"indent":[]}}],"position":{"start":{"line":158,"column":3,"offset":14548},"end":{"line":158,"column":42,"offset":14587},"indent":[]}},{"type":"text","value":"— The examples page on this website is full of inspiring projects which you could recreate and extend further.","position":{"start":{"line":158,"column":42,"offset":14587},"end":{"line":158,"column":152,"offset":14697},"indent":[]}}],"position":{"start":{"line":158,"column":3,"offset":14548},"end":{"line":158,"column":152,"offset":14697},"indent":[]}}],"position":{"start":{"line":158,"column":1,"offset":14546},"end":{"line":159,"column":1,"offset":14698},"indent":[1]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.scratchapixel.com/index.php","children":[{"type":"text","value":"Sratchapixel","position":{"start":{"line":160,"column":4,"offset":14702},"end":{"line":160,"column":16,"offset":14714},"indent":[]}}],"position":{"start":{"line":160,"column":3,"offset":14701},"end":{"line":160,"column":58,"offset":14756},"indent":[]}},{"type":"text","value":" — If you feel ready to delve into the deeper concepts and implementations of computer graphics then this website is an incredible resource for you to use.","position":{"start":{"line":160,"column":58,"offset":14756},"end":{"line":160,"column":213,"offset":14911},"indent":[]}}],"position":{"start":{"line":160,"column":3,"offset":14701},"end":{"line":160,"column":213,"offset":14911},"indent":[]}}],"position":{"start":{"line":160,"column":1,"offset":14699},"end":{"line":160,"column":213,"offset":14911},"indent":[]}}],"position":{"start":{"line":156,"column":1,"offset":14360},"end":{"line":160,"column":213,"offset":14911},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"A special thanks to ","position":{"start":{"line":162,"column":1,"offset":14913},"end":{"line":162,"column":21,"offset":14933},"indent":[]}},{"type":"link","title":null,"url":"undefined","children":[{"type":"text","value":"Tom Read Cutting","position":{"start":{"line":162,"column":22,"offset":14934},"end":{"line":162,"column":38,"offset":14950},"indent":[]}}],"position":{"start":{"line":162,"column":21,"offset":14933},"end":{"line":162,"column":50,"offset":14962},"indent":[]}},{"type":"text","value":" for editing this article and ","position":{"start":{"line":162,"column":50,"offset":14962},"end":{"line":162,"column":80,"offset":14992},"indent":[]}},{"type":"link","title":null,"url":"undefined","children":[{"type":"text","value":"Christian Silver","position":{"start":{"line":162,"column":81,"offset":14993},"end":{"line":162,"column":97,"offset":15009},"indent":[]}}],"position":{"start":{"line":162,"column":80,"offset":14992},"end":{"line":162,"column":109,"offset":15021},"indent":[]}},{"type":"text","value":" for helping get it off the ground.","position":{"start":{"line":162,"column":109,"offset":15021},"end":{"line":162,"column":144,"offset":15056},"indent":[]}}],"position":{"start":{"line":162,"column":1,"offset":14913},"end":{"line":162,"column":144,"offset":15056},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":163,"column":1,"offset":15057}}}},{"id":"transformer-remark-markdown-html-ast-bef3e0bfbad7eb71514a552e294e4316-gatsby-remark-imagesgatsby-remark-prismjs-","value":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/patricoferris/image/upload/v1532857964/pf2018/blogposts/27-02-2018/tree.png","alt":"Recursive Tree"},"children":[],"position":{"start":{"line":9,"column":1,"offset":269},"end":{"line":9,"column":122,"offset":390}}}],"position":{"start":{"line":9,"column":1,"offset":269},"end":{"line":9,"column":122,"offset":390}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Graphics and computer programming are two dearly intertwined disciplines. The oscilloscope is often recognised as one of the first examples of “computer graphics”, the cathode-ray versions emitting a beam of electrons onto a phosphorescent screen. By using magnetic fields to change the beam’s direction, we can sweep from left to right and move up and down — the basic idea behind most CG! (I highly recommend watching this ","position":{"start":{"line":11,"column":1,"offset":392},"end":{"line":11,"column":426,"offset":817}}},{"type":"element","tagName":"a","properties":{"href":"https://archive.org/details/introductiontothecathoderayoscilloscope"},"children":[{"type":"text","value":"video","position":{"start":{"line":11,"column":427,"offset":818},"end":{"line":11,"column":432,"offset":823}}}],"position":{"start":{"line":11,"column":426,"offset":817},"end":{"line":11,"column":502,"offset":893}}},{"type":"text","value":" from 1970).","position":{"start":{"line":11,"column":502,"offset":893},"end":{"line":11,"column":514,"offset":905}}}],"position":{"start":{"line":11,"column":1,"offset":392},"end":{"line":11,"column":514,"offset":905}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We’ve come a long way since then — modern day graphics is a complicated science as well as an art, and the barrier to entry is constantly increasing. Graphics programming can be so complex, that a simple program to draw a triangle can be over ","position":{"start":{"line":13,"column":1,"offset":907},"end":{"line":13,"column":244,"offset":1150}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/SaschaWillems/Vulkan/blob/master/examples/triangle/triangle.cpp"},"children":[{"type":"text","value":"1000 lines of code","position":{"start":{"line":13,"column":245,"offset":1151},"end":{"line":13,"column":263,"offset":1169}}}],"position":{"start":{"line":13,"column":244,"offset":1150},"end":{"line":13,"column":348,"offset":1254}}},{"type":"text","value":"! However, this article will introduce you to ","position":{"start":{"line":13,"column":348,"offset":1254},"end":{"line":13,"column":394,"offset":1300}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/"},"children":[{"type":"text","value":"p5.js","position":{"start":{"line":13,"column":395,"offset":1301},"end":{"line":13,"column":400,"offset":1306}}}],"position":{"start":{"line":13,"column":394,"offset":1300},"end":{"line":13,"column":420,"offset":1326}}},{"type":"text","value":" (also known as p5). A simpler, less complex solution for people who want to start making computer graphics, but don’t want the headache of streams of boiler-plate code.","position":{"start":{"line":13,"column":420,"offset":1326},"end":{"line":13,"column":589,"offset":1495}}}],"position":{"start":{"line":13,"column":1,"offset":907},"end":{"line":13,"column":589,"offset":1495}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Straight from the landing page of the p5.js website.","position":{"start":{"line":15,"column":1,"offset":1497},"end":{"line":15,"column":53,"offset":1549}}}],"position":{"start":{"line":15,"column":1,"offset":1497},"end":{"line":15,"column":53,"offset":1549}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"…make coding accessible for artists, designers, educators and beginners…","position":{"start":{"line":16,"column":5,"offset":1554},"end":{"line":16,"column":77,"offset":1626}}}],"position":{"start":{"line":16,"column":3,"offset":1552},"end":{"line":16,"column":77,"offset":1626}}},{"type":"text","value":"\n"}],"position":{"start":{"line":16,"column":1,"offset":1550},"end":{"line":16,"column":77,"offset":1626}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"p5.js is the result of hard-work of the ","position":{"start":{"line":18,"column":1,"offset":1628},"end":{"line":18,"column":41,"offset":1668}}},{"type":"element","tagName":"a","properties":{"href":"https://processingfoundation.org/"},"children":[{"type":"text","value":"Processing Foundation","position":{"start":{"line":18,"column":42,"offset":1669},"end":{"line":18,"column":63,"offset":1690}}}],"position":{"start":{"line":18,"column":41,"offset":1668},"end":{"line":18,"column":99,"offset":1726}}},{"type":"text","value":", a group focused on spreading computer and visual literacy. It distills their ","position":{"start":{"line":18,"column":99,"offset":1726},"end":{"line":18,"column":178,"offset":1805}}},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/Processing_(programming_language)"},"children":[{"type":"text","value":"Processing","position":{"start":{"line":18,"column":179,"offset":1806},"end":{"line":18,"column":189,"offset":1816}}}],"position":{"start":{"line":18,"column":178,"offset":1805},"end":{"line":18,"column":255,"offset":1882}}},{"type":"text","value":" language into a JavaScript library that makes creating graphics easy and accessible whilst providing an ideal platform to springboard people’s careers in computer graphics. It should be mentioned now that a lot of inspiration has been taken from ","position":{"start":{"line":18,"column":255,"offset":1882},"end":{"line":18,"column":502,"offset":2129}}},{"type":"element","tagName":"a","properties":{"href":"http://shiffman.net/"},"children":[{"type":"text","value":"Daniel Shiffman’s","position":{"start":{"line":18,"column":503,"offset":2130},"end":{"line":18,"column":520,"offset":2147}}}],"position":{"start":{"line":18,"column":502,"offset":2129},"end":{"line":18,"column":543,"offset":2170}}},{"type":"text","value":" p5 projects (from the ","position":{"start":{"line":18,"column":543,"offset":2170},"end":{"line":18,"column":566,"offset":2193}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/CodingTrain/website/tree/master/CodingChallenges/CC_03_Snake_game_p5.js"},"children":[{"type":"text","value":"classic snake game","position":{"start":{"line":18,"column":567,"offset":2194},"end":{"line":18,"column":585,"offset":2212}}}],"position":{"start":{"line":18,"column":566,"offset":2193},"end":{"line":18,"column":678,"offset":2305}}},{"type":"text","value":", to a ","position":{"start":{"line":18,"column":678,"offset":2305},"end":{"line":18,"column":685,"offset":2312}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/CodingTrain/website/tree/master/CodingChallenges/CC_93_DoublePendulum_p5.js"},"children":[{"type":"text","value":"double pendulum","position":{"start":{"line":18,"column":686,"offset":2313},"end":{"line":18,"column":701,"offset":2328}}}],"position":{"start":{"line":18,"column":685,"offset":2312},"end":{"line":18,"column":798,"offset":2425}}},{"type":"text","value":"). I can’t urge you enough to follow these projects to really improve your understanding of coding concepts and the p5 library.","position":{"start":{"line":18,"column":798,"offset":2425},"end":{"line":18,"column":925,"offset":2552}}}],"position":{"start":{"line":18,"column":1,"offset":1628},"end":{"line":18,"column":925,"offset":2552}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Some prerequisites:","position":{"start":{"line":20,"column":5,"offset":2558},"end":{"line":20,"column":24,"offset":2577}}}],"position":{"start":{"line":20,"column":1,"offset":2554},"end":{"line":20,"column":24,"offset":2577}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Before jumping into the p5 code I first want to make clear that there is assumed knowledge of HTML5 and JavaScript including arrays, functions, variables etc. in the rest of this article. If you have a good grasp of JavaScript then skip to the p5 code below, otherwise here are few resources to get you up to scratch.","position":{"start":{"line":22,"column":1,"offset":2579},"end":{"line":22,"column":318,"offset":2896}}}],"position":{"start":{"line":22,"column":1,"offset":2579},"end":{"line":22,"column":318,"offset":2896}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.youtube.com/watch?v=spIVWmv1jnw"},"children":[{"type":"text","value":"HaC Intro to Programming","position":{"start":{"line":24,"column":4,"offset":2901},"end":{"line":24,"column":28,"offset":2925}}}],"position":{"start":{"line":24,"column":3,"offset":2900},"end":{"line":24,"column":74,"offset":2971}}},{"type":"text","value":" — A workshop that is being run by Hackers at Cambridge to help anyone start learning to program (which uses JavaScript).","position":{"start":{"line":24,"column":74,"offset":2971},"end":{"line":24,"column":195,"offset":3092}}}],"position":{"start":{"line":24,"column":3,"offset":2900},"end":{"line":24,"column":195,"offset":3092}}},{"type":"text","value":"\n"}],"position":{"start":{"line":24,"column":1,"offset":2898},"end":{"line":25,"column":1,"offset":3093}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.codecademy.com/learn/introduction-to-javascript"},"children":[{"type":"text","value":"Codecademy","position":{"start":{"line":26,"column":4,"offset":3097},"end":{"line":26,"column":14,"offset":3107}}}],"position":{"start":{"line":26,"column":3,"offset":3096},"end":{"line":26,"column":76,"offset":3169}}},{"type":"text","value":" — a great resource for learning how to code with instant feedback in your browser.","position":{"start":{"line":26,"column":76,"offset":3169},"end":{"line":26,"column":159,"offset":3252}}}],"position":{"start":{"line":26,"column":3,"offset":3096},"end":{"line":26,"column":159,"offset":3252}}},{"type":"text","value":"\n"}],"position":{"start":{"line":26,"column":1,"offset":3094},"end":{"line":27,"column":1,"offset":3253}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Web/JavaScript"},"children":[{"type":"text","value":"MDN","position":{"start":{"line":28,"column":4,"offset":3257},"end":{"line":28,"column":7,"offset":3260}}}],"position":{"start":{"line":28,"column":3,"offset":3256},"end":{"line":28,"column":65,"offset":3318}}},{"type":"text","value":" — a great resource for learning about all aspects of web development.","position":{"start":{"line":28,"column":65,"offset":3318},"end":{"line":28,"column":135,"offset":3388}}}],"position":{"start":{"line":28,"column":3,"offset":3256},"end":{"line":28,"column":135,"offset":3388}}},{"type":"text","value":"\n"}],"position":{"start":{"line":28,"column":1,"offset":3254},"end":{"line":29,"column":1,"offset":3389}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://codepen.io/"},"children":[{"type":"text","value":"Codepen","position":{"start":{"line":30,"column":4,"offset":3393},"end":{"line":30,"column":11,"offset":3400}}}],"position":{"start":{"line":30,"column":3,"offset":3392},"end":{"line":30,"column":33,"offset":3422}}},{"type":"text","value":" — a brilliant online text-editor for creating cool projects in HTML, CSS and JavaScript. Equally good for getting inspiration from a lot of talented users. Another possible solution would be ","position":{"start":{"line":30,"column":33,"offset":3422},"end":{"line":30,"column":225,"offset":3614}}},{"type":"element","tagName":"a","properties":{"href":"https://jsfiddle.net/"},"children":[{"type":"text","value":"JSFiddle","position":{"start":{"line":30,"column":226,"offset":3615},"end":{"line":30,"column":234,"offset":3623}}}],"position":{"start":{"line":30,"column":225,"offset":3614},"end":{"line":30,"column":258,"offset":3647}}},{"type":"text","value":".","position":{"start":{"line":30,"column":258,"offset":3647},"end":{"line":30,"column":259,"offset":3648}}}],"position":{"start":{"line":30,"column":3,"offset":3392},"end":{"line":30,"column":259,"offset":3648}}},{"type":"text","value":"\n"}],"position":{"start":{"line":30,"column":1,"offset":3390},"end":{"line":30,"column":259,"offset":3648}}},{"type":"text","value":"\n"}],"position":{"start":{"line":24,"column":1,"offset":2898},"end":{"line":30,"column":259,"offset":3648}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"What follows is a series of steps that will introduce you to p5 concepts. With code examples and explanations I hope to give you enough information to understand the ideas, but to fully grasp the concepts you will have to dive into the code, experiment with it, break it and learn from it. So without further ado, let’s get coding.","position":{"start":{"line":32,"column":1,"offset":3650},"end":{"line":32,"column":332,"offset":3981}}}],"position":{"start":{"line":32,"column":1,"offset":3650},"end":{"line":32,"column":332,"offset":3981}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Step 1: The Setup","position":{"start":{"line":34,"column":5,"offset":3987},"end":{"line":34,"column":22,"offset":4004}}}],"position":{"start":{"line":34,"column":1,"offset":3983},"end":{"line":34,"column":22,"offset":4004}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//Initialisation of canvas, objects, variables etc.</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//The drawing loop - updates at a constant rate declared in setup</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":36,"column":1,"offset":4006},"end":{"line":43,"column":4,"offset":4184}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"p5 is really simple to setup once you know what to do. There are two files shown above — an index.html and a template.js. The index.html file gets the libraries for us and the template.js is the barebones structure of a p5 project and at the moment it does nothing! Within this we have two functions:","position":{"start":{"line":45,"column":1,"offset":4186},"end":{"line":45,"column":301,"offset":4486}}}],"position":{"start":{"line":45,"column":1,"offset":4186},"end":{"line":45,"column":301,"offset":4486}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"setup() — a function for creating what we will need for our graphic or project. Like creating a canvas, initialising some objects or arrays etc.","position":{"start":{"line":47,"column":3,"offset":4490},"end":{"line":47,"column":147,"offset":4634}}}],"position":{"start":{"line":47,"column":3,"offset":4490},"end":{"line":47,"column":147,"offset":4634}}},{"type":"text","value":"\n"}],"position":{"start":{"line":47,"column":1,"offset":4488},"end":{"line":48,"column":1,"offset":4635}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"draw() — a function which will be called periodically like a loop. This is where will call draw functions and update functions to make graphics and animations.","position":{"start":{"line":49,"column":3,"offset":4638},"end":{"line":49,"column":162,"offset":4797}}}],"position":{"start":{"line":49,"column":3,"offset":4638},"end":{"line":49,"column":162,"offset":4797}}},{"type":"text","value":"\n"}],"position":{"start":{"line":49,"column":1,"offset":4636},"end":{"line":49,"column":162,"offset":4797}}},{"type":"text","value":"\n"}],"position":{"start":{"line":47,"column":1,"offset":4488},"end":{"line":49,"column":162,"offset":4797}}},{"type":"text","value":"\n"},{"type":"raw","value":"<iframe height='400' scrolling='no' title='Simple Triangle Tutorial' src='//codepen.io/patricoferris/embed/dddxjr/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/dddxjr/'>Simple Triangle Tutorial</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":51,"column":1,"offset":4799},"end":{"line":52,"column":10,"offset":5293}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let’s first look at the setup function. We used the p5 function createCanvas(width, height) which created and initialised a ","position":{"start":{"line":54,"column":1,"offset":5295},"end":{"line":54,"column":125,"offset":5419}}},{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API"},"children":[{"type":"text","value":"canvas","position":{"start":{"line":54,"column":126,"offset":5420},"end":{"line":54,"column":132,"offset":5426}}}],"position":{"start":{"line":54,"column":125,"offset":5419},"end":{"line":54,"column":194,"offset":5488}}},{"type":"text","value":" with arguments width and height. Now within our setup() and createCanvas() functions we can reference the variables width and height without ever instantiating them!","position":{"start":{"line":54,"column":194,"offset":5488},"end":{"line":54,"column":360,"offset":5654}}}],"position":{"start":{"line":54,"column":1,"offset":5295},"end":{"line":54,"column":360,"offset":5654}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Next comes the meaty, draw function. I have purposefully put extra code in here so we can learn more about what p5 has to offer. Firstly always remember that draw() is a loop that runs from top to bottom. Initially, we set the background (of our canvas) to white with background(255) which is the same as background(255, 255, 255) (maximising the red, green and blue values to give white). This may seem simple, but implicitly we are also clearing our canvas every loop… in one line of code! This will be useful for animations later as we want to redraw objects in a new location rather than have the ","position":{"start":{"line":56,"column":1,"offset":5656},"end":{"line":56,"column":602,"offset":6257}}},{"type":"element","tagName":"a","properties":{"href":"https://codepen.io/patricoferris/pen/paxZaw"},"children":[{"type":"text","value":"build-up on the same canvas","position":{"start":{"line":56,"column":603,"offset":6258},"end":{"line":56,"column":630,"offset":6285}}}],"position":{"start":{"line":56,"column":602,"offset":6257},"end":{"line":56,"column":676,"offset":6331}}},{"type":"text","value":" (click to see it go spectacularly wrong). Next is a translate(width/2, height/2) which moves our current drawing location to the centre of our canvas. We then declare the fill colour of our triangle with fill(255, 0, 0)(making it red).","position":{"start":{"line":56,"column":676,"offset":6331},"end":{"line":56,"column":912,"offset":6567}}}],"position":{"start":{"line":56,"column":1,"offset":5656},"end":{"line":56,"column":912,"offset":6567}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We want to create an equilateral triangle with side length s. The triangle itself is a function that takes the vertex coordinates as arguments — triangle(x1, y1, x2, y2, x3, y3) and in this example starting from the centre we have one vertex at (-s/2, 0) another at (s/2, 0) giving a bottom length of s . Now comes the trickier part. A very important aspect of most computer graphics is that the coordinate system starts in the top left corner (or wherever your origin is) and x increases left to right, whilst y increases top to bottom. To move of the screen we need a negative y value. Our last coordinate is given as (0, -sin(PI/3)) (if you’re stuck, think about cutting the triangle in two and using trigonometry).","position":{"start":{"line":58,"column":1,"offset":6569},"end":{"line":58,"column":719,"offset":7287}}}],"position":{"start":{"line":58,"column":1,"offset":6569},"end":{"line":58,"column":719,"offset":7287}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Step 2: Get Creative","position":{"start":{"line":60,"column":5,"offset":7293},"end":{"line":60,"column":25,"offset":7313}}}],"position":{"start":{"line":60,"column":1,"offset":7289},"end":{"line":60,"column":25,"offset":7313}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We’ve learnt how to set up our canvas and start drawing. Armed with the p5 ","position":{"start":{"line":62,"column":1,"offset":7315},"end":{"line":62,"column":76,"offset":7390}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/reference/"},"children":[{"type":"text","value":"reference page","position":{"start":{"line":62,"column":77,"offset":7391},"end":{"line":62,"column":91,"offset":7405}}}],"position":{"start":{"line":62,"column":76,"offset":7390},"end":{"line":62,"column":121,"offset":7435}}},{"type":"text","value":" and our creativity, we can make some truly stunning graphics. How about a bouncing ball animation?","position":{"start":{"line":62,"column":121,"offset":7435},"end":{"line":62,"column":220,"offset":7534}}}],"position":{"start":{"line":62,"column":1,"offset":7315},"end":{"line":62,"column":220,"offset":7534}}},{"type":"text","value":"\n"},{"type":"raw","value":"<iframe height='400' scrolling='no' title='Bouncing Balls' src='//codepen.io/patricoferris/embed/PQpOrB/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/PQpOrB/'>Bouncing Balls</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":64,"column":1,"offset":7536},"end":{"line":65,"column":10,"offset":8010}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let’s look at the interesting p5 aspects that we didn’t know before:","position":{"start":{"line":67,"column":1,"offset":8012},"end":{"line":67,"column":69,"offset":8080}}}],"position":{"start":{"line":67,"column":1,"offset":8012},"end":{"line":67,"column":69,"offset":8080}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"frameRate(20) — This enables us to specify the frame rate of our drawing loop, that is, how many times per second it redraws everything for us.","position":{"start":{"line":69,"column":3,"offset":8084},"end":{"line":69,"column":146,"offset":8227}}}],"position":{"start":{"line":69,"column":3,"offset":8084},"end":{"line":69,"column":146,"offset":8227}}},{"type":"text","value":"\n"}],"position":{"start":{"line":69,"column":1,"offset":8082},"end":{"line":70,"column":1,"offset":8228}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"gravity = createVector(0, 9) — p5 allows us to ","position":{"start":{"line":71,"column":3,"offset":8231},"end":{"line":71,"column":50,"offset":8278}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/reference/#/p5.Vector"},"children":[{"type":"text","value":"create vector objects","position":{"start":{"line":71,"column":51,"offset":8279},"end":{"line":71,"column":72,"offset":8300}}}],"position":{"start":{"line":71,"column":50,"offset":8278},"end":{"line":71,"column":113,"offset":8341}}},{"type":"text","value":" with which we can perform vector operations like addition, multiplication, dot-product and cross-product. This is useful when we want to simulate physics like forces.","position":{"start":{"line":71,"column":113,"offset":8341},"end":{"line":71,"column":280,"offset":8508}}}],"position":{"start":{"line":71,"column":3,"offset":8231},"end":{"line":71,"column":280,"offset":8508}}},{"type":"text","value":"\n"}],"position":{"start":{"line":71,"column":1,"offset":8229},"end":{"line":72,"column":1,"offset":8509}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"floor(random(50)) — Here we’re using p5 math functions. floor() takes a real number and rounds it down to the nearest integer. random(arg) produces a random number as small as 0 or up to 49. In this example, we are giving it to the ellipse(x, y, w)function to create randomly sized balls by setting the width to a random number. If we gave another argument it would set the ellipse’s height, but here it infers that we want a circle.","position":{"start":{"line":73,"column":3,"offset":8512},"end":{"line":73,"column":436,"offset":8945}}}],"position":{"start":{"line":73,"column":3,"offset":8512},"end":{"line":73,"column":436,"offset":8945}}},{"type":"text","value":"\n"}],"position":{"start":{"line":73,"column":1,"offset":8510},"end":{"line":74,"column":1,"offset":8946}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"stroke(0) — This function sets the colour of our shape’s outline. If you don’t want any border you can add noStroke() .","position":{"start":{"line":75,"column":3,"offset":8949},"end":{"line":75,"column":122,"offset":9068}}}],"position":{"start":{"line":75,"column":3,"offset":8949},"end":{"line":75,"column":122,"offset":9068}}},{"type":"text","value":"\n"}],"position":{"start":{"line":75,"column":1,"offset":8947},"end":{"line":75,"column":122,"offset":9068}}},{"type":"text","value":"\n"}],"position":{"start":{"line":69,"column":1,"offset":8082},"end":{"line":75,"column":122,"offset":9068}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"All you need now is to add some physics to these ideas and you have yourself a bouncing ball animation.","position":{"start":{"line":77,"column":1,"offset":9070},"end":{"line":77,"column":104,"offset":9173}}}],"position":{"start":{"line":77,"column":1,"offset":9070},"end":{"line":77,"column":104,"offset":9173}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Step 3: Experiment with p5","position":{"start":{"line":79,"column":5,"offset":9179},"end":{"line":79,"column":31,"offset":9205}}}],"position":{"start":{"line":79,"column":1,"offset":9175},"end":{"line":79,"column":31,"offset":9205}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Hopefully now you have a good understanding of the p5 fundamentals, but we’ve barely scratched the surface. This last example will use two extra features of p5: interactivity and ","position":{"start":{"line":81,"column":1,"offset":9207},"end":{"line":81,"column":180,"offset":9386}}},{"type":"element","tagName":"a","properties":{"href":"http://flafla2.github.io/2014/08/09/perlinnoise.html"},"children":[{"type":"text","value":"Perlin Noise","position":{"start":{"line":81,"column":181,"offset":9387},"end":{"line":81,"column":193,"offset":9399}}}],"position":{"start":{"line":81,"column":180,"offset":9386},"end":{"line":81,"column":248,"offset":9454}}},{"type":"text","value":". Keep reading to find out more on these two concepts.","position":{"start":{"line":81,"column":248,"offset":9454},"end":{"line":81,"column":302,"offset":9508}}}],"position":{"start":{"line":81,"column":1,"offset":9207},"end":{"line":81,"column":302,"offset":9508}}},{"type":"text","value":"\n"},{"type":"raw","value":"<iframe height='400' scrolling='no' title='Pixel Fire' src='//codepen.io/patricoferris/embed/XZMxmV/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/XZMxmV/'>Pixel Fire</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":83,"column":1,"offset":9510},"end":{"line":84,"column":10,"offset":9976}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In this CodePen I have created a relatively simple flame model using squares and Perlin Noise. First of all, how do we get user input? Lucky for us p5 has some functions that can help.","position":{"start":{"line":86,"column":1,"offset":9978},"end":{"line":86,"column":185,"offset":10162}}}],"position":{"start":{"line":86,"column":1,"offset":9978},"end":{"line":86,"column":185,"offset":10162}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> touch <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">createCanvas</span><span class=\"token punctuation\">(</span><span class=\"token number\">640</span><span class=\"token punctuation\">,</span> <span class=\"token number\">640</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>touch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">rect</span><span class=\"token punctuation\">(</span>mouseX<span class=\"token punctuation\">,</span> mouseY<span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">touchStarted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  touch <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">touchEnded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  touch <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":88,"column":1,"offset":10164},"end":{"line":105,"column":4,"offset":10422}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"At the top of the code we have declared a boolean “flag” as to whether or not our mouse is being pressed — this allows us to do things if the mouse is being held down. The touchStarted() and touchEnded() are p5 functions that are executed whenever the mouse is pressed or released or the screen is touched and released. Lastly, in our rect() function we have the variables mouseX and mouseY which are p5 variables corresponding to the mouse’s current position. Oddly, these also refer to your ","position":{"start":{"line":107,"column":1,"offset":10424},"end":{"line":107,"column":494,"offset":10917}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/processing/p5.js/issues/1705"},"children":[{"type":"text","value":"“touch” coordinates","position":{"start":{"line":107,"column":495,"offset":10918},"end":{"line":107,"column":514,"offset":10937}}}],"position":{"start":{"line":107,"column":494,"offset":10917},"end":{"line":107,"column":564,"offset":10987}}},{"type":"text","value":". With all these variables and functions predefined for us we can focus on making visually stunning graphics, whilst not being hampered by having to code extra functions unrelated to the graphic we’re producing.","position":{"start":{"line":107,"column":564,"offset":10987},"end":{"line":107,"column":775,"offset":11198}}}],"position":{"start":{"line":107,"column":1,"offset":10424},"end":{"line":107,"column":775,"offset":11198}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now for the Perlin Noise. In 1983, tired with the artificial look of computer graphics, Ken Perlin developed a type of gradient noise. The basic idea being you create a big grid of gradients randomly and then use the dot product to interpolate between them. In short, we get random values based on the coordinate system we’re drawing on. Great! For each of our squares we can start them at a random position near our mouse, and generate a random upward vector using their position and Perlin Noise. Let’s look at the code:","position":{"start":{"line":109,"column":1,"offset":11200},"end":{"line":109,"column":523,"offset":11722}}}],"position":{"start":{"line":109,"column":1,"offset":11200},"end":{"line":109,"column":523,"offset":11722}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Particle</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos <span class=\"token operator\">=</span> <span class=\"token function\">createVector</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">+</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vel <span class=\"token operator\">=</span> <span class=\"token function\">createVector</span><span class=\"token punctuation\">(</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token function\">noise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token function\">noise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>alpha <span class=\"token operator\">=</span> <span class=\"token number\">255</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>r <span class=\"token operator\">=</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">170</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>g <span class=\"token operator\">=</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">update</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>alpha <span class=\"token operator\">-=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">show</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">noStroke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>g<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>alpha<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">rect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">dead</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>alpha <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":111,"column":1,"offset":11724},"end":{"line":136,"column":4,"offset":12360}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Some key things to notice:","position":{"start":{"line":138,"column":1,"offset":12362},"end":{"line":138,"column":27,"offset":12388}}}],"position":{"start":{"line":138,"column":1,"offset":12362},"end":{"line":138,"column":27,"offset":12388}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"noise(this.pos.x) — The Perlin Noise ","position":{"start":{"line":140,"column":3,"offset":12392},"end":{"line":140,"column":40,"offset":12429}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/reference/#/p5/noise"},"children":[{"type":"text","value":"function","position":{"start":{"line":140,"column":41,"offset":12430},"end":{"line":140,"column":49,"offset":12438}}}],"position":{"start":{"line":140,"column":40,"offset":12429},"end":{"line":140,"column":89,"offset":12478}}},{"type":"text","value":" that gets a random number based on the square’s current x position. It returns a value between 0 and 1.","position":{"start":{"line":140,"column":89,"offset":12478},"end":{"line":140,"column":193,"offset":12582}}}],"position":{"start":{"line":140,"column":3,"offset":12392},"end":{"line":140,"column":193,"offset":12582}}},{"type":"text","value":"\n"}],"position":{"start":{"line":140,"column":1,"offset":12390},"end":{"line":141,"column":1,"offset":12583}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"fill(this.r, this.g, this.b, this.alpha) — Here we have extended fill’s ability by including an alpha value for the objects transparency, by decreasing alpha in the update() function we get a nice fade out like a flame.","position":{"start":{"line":142,"column":3,"offset":12586},"end":{"line":142,"column":222,"offset":12805}}}],"position":{"start":{"line":142,"column":3,"offset":12586},"end":{"line":142,"column":222,"offset":12805}}},{"type":"text","value":"\n"}],"position":{"start":{"line":142,"column":1,"offset":12584},"end":{"line":143,"column":1,"offset":12806}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"dead() — This function allows us to keep track of which particles have disappeared as their alpha is now less than zero. We can then splice() them out of our array to ensure we’re not drawing an unbounded number of particles over time which would cause performance issues.","position":{"start":{"line":144,"column":3,"offset":12809},"end":{"line":144,"column":275,"offset":13081}}}],"position":{"start":{"line":144,"column":3,"offset":12809},"end":{"line":144,"column":275,"offset":13081}}},{"type":"text","value":"\n"}],"position":{"start":{"line":144,"column":1,"offset":12807},"end":{"line":144,"column":275,"offset":13081}}},{"type":"text","value":"\n"}],"position":{"start":{"line":140,"column":1,"offset":12390},"end":{"line":144,"column":275,"offset":13081}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As a challenge, you can also use blendMode() to make it seem even more realistic — check this ","position":{"start":{"line":146,"column":1,"offset":13083},"end":{"line":146,"column":95,"offset":13177}}},{"type":"element","tagName":"a","properties":{"href":"https://codepen.io/anon/pen/YeOaJX"},"children":[{"type":"text","value":"alteration","position":{"start":{"line":146,"column":96,"offset":13178},"end":{"line":146,"column":106,"offset":13188}}}],"position":{"start":{"line":146,"column":95,"offset":13177},"end":{"line":146,"column":143,"offset":13225}}},{"type":"text","value":" to see it in action.","position":{"start":{"line":146,"column":143,"offset":13225},"end":{"line":146,"column":164,"offset":13246}}}],"position":{"start":{"line":146,"column":1,"offset":13083},"end":{"line":146,"column":164,"offset":13246}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"With only a few concepts and the p5 library, it is incredibly straightforward to start building anything you want. Be sure to checkout what else is possible with the library. Here are few cool ideas to get you started: ","position":{"start":{"line":148,"column":1,"offset":13248},"end":{"line":148,"column":220,"offset":13467}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/examples/3d-geometries.html"},"children":[{"type":"text","value":"3D graphics","position":{"start":{"line":148,"column":221,"offset":13468},"end":{"line":148,"column":232,"offset":13479}}}],"position":{"start":{"line":148,"column":220,"offset":13467},"end":{"line":148,"column":279,"offset":13526}}},{"type":"text","value":", ","position":{"start":{"line":148,"column":279,"offset":13526},"end":{"line":148,"column":281,"offset":13528}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/examples/dom-slider.html"},"children":[{"type":"text","value":"sliders","position":{"start":{"line":148,"column":282,"offset":13529},"end":{"line":148,"column":289,"offset":13536}}}],"position":{"start":{"line":148,"column":281,"offset":13528},"end":{"line":148,"column":333,"offset":13580}}},{"type":"text","value":" and ","position":{"start":{"line":148,"column":333,"offset":13580},"end":{"line":148,"column":338,"offset":13585}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/examples/image-load-and-display-image.html"},"children":[{"type":"text","value":"images","position":{"start":{"line":148,"column":339,"offset":13586},"end":{"line":148,"column":345,"offset":13592}}}],"position":{"start":{"line":148,"column":338,"offset":13585},"end":{"line":148,"column":407,"offset":13654}}},{"type":"text","value":".","position":{"start":{"line":148,"column":407,"offset":13654},"end":{"line":148,"column":408,"offset":13655}}}],"position":{"start":{"line":148,"column":1,"offset":13248},"end":{"line":148,"column":408,"offset":13655}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":150,"column":5,"offset":13661},"end":{"line":150,"column":15,"offset":13671}}}],"position":{"start":{"line":150,"column":1,"offset":13657},"end":{"line":150,"column":15,"offset":13671}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As computers and technology become ubiquitous in our daily lives and an increasing number of professions are now relying on computer literacy, p5.js is a beautiful example of how we can ensure as many people as possible have an entry-point to the wonderful world of computer programming. It also acts as a reminder to some more experienced programmers that creativity and imagination are vital in producing meaningful code and ultimately making the tech world a better place.","position":{"start":{"line":152,"column":1,"offset":13673},"end":{"line":152,"column":476,"offset":14148}}}],"position":{"start":{"line":152,"column":1,"offset":13673},"end":{"line":152,"column":476,"offset":14148}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Hopefully this intro to p5 has convinced you of its usefulness and has encouraged you to start taking your first steps into the world of graphics programming. Here are my recommendations for where to go next:","position":{"start":{"line":154,"column":1,"offset":14150},"end":{"line":154,"column":209,"offset":14358}}}],"position":{"start":{"line":154,"column":1,"offset":14150},"end":{"line":154,"column":209,"offset":14358}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.youtube.com/user/shiffman"},"children":[{"type":"text","value":"The Coding Train","position":{"start":{"line":156,"column":4,"offset":14363},"end":{"line":156,"column":20,"offset":14379}}}],"position":{"start":{"line":156,"column":3,"offset":14362},"end":{"line":156,"column":60,"offset":14419}}},{"type":"text","value":" — A brilliant YouTube channel by Daniel Shiffman where he teaches JavaScript and p5.js amongst many other incredible things!","position":{"start":{"line":156,"column":60,"offset":14419},"end":{"line":156,"column":185,"offset":14544}}}],"position":{"start":{"line":156,"column":3,"offset":14362},"end":{"line":156,"column":185,"offset":14544}}},{"type":"text","value":"\n"}],"position":{"start":{"line":156,"column":1,"offset":14360},"end":{"line":157,"column":1,"offset":14545}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/examples/"},"children":[{"type":"text","value":"p5js.org ","position":{"start":{"line":158,"column":4,"offset":14549},"end":{"line":158,"column":13,"offset":14558}}}],"position":{"start":{"line":158,"column":3,"offset":14548},"end":{"line":158,"column":42,"offset":14587}}},{"type":"text","value":"— The examples page on this website is full of inspiring projects which you could recreate and extend further.","position":{"start":{"line":158,"column":42,"offset":14587},"end":{"line":158,"column":152,"offset":14697}}}],"position":{"start":{"line":158,"column":3,"offset":14548},"end":{"line":158,"column":152,"offset":14697}}},{"type":"text","value":"\n"}],"position":{"start":{"line":158,"column":1,"offset":14546},"end":{"line":159,"column":1,"offset":14698}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.scratchapixel.com/index.php"},"children":[{"type":"text","value":"Sratchapixel","position":{"start":{"line":160,"column":4,"offset":14702},"end":{"line":160,"column":16,"offset":14714}}}],"position":{"start":{"line":160,"column":3,"offset":14701},"end":{"line":160,"column":58,"offset":14756}}},{"type":"text","value":" — If you feel ready to delve into the deeper concepts and implementations of computer graphics then this website is an incredible resource for you to use.","position":{"start":{"line":160,"column":58,"offset":14756},"end":{"line":160,"column":213,"offset":14911}}}],"position":{"start":{"line":160,"column":3,"offset":14701},"end":{"line":160,"column":213,"offset":14911}}},{"type":"text","value":"\n"}],"position":{"start":{"line":160,"column":1,"offset":14699},"end":{"line":160,"column":213,"offset":14911}}},{"type":"text","value":"\n"}],"position":{"start":{"line":156,"column":1,"offset":14360},"end":{"line":160,"column":213,"offset":14911}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A special thanks to ","position":{"start":{"line":162,"column":1,"offset":14913},"end":{"line":162,"column":21,"offset":14933}}},{"type":"element","tagName":"a","properties":{"href":"undefined"},"children":[{"type":"text","value":"Tom Read Cutting","position":{"start":{"line":162,"column":22,"offset":14934},"end":{"line":162,"column":38,"offset":14950}}}],"position":{"start":{"line":162,"column":21,"offset":14933},"end":{"line":162,"column":50,"offset":14962}}},{"type":"text","value":" for editing this article and ","position":{"start":{"line":162,"column":50,"offset":14962},"end":{"line":162,"column":80,"offset":14992}}},{"type":"element","tagName":"a","properties":{"href":"undefined"},"children":[{"type":"text","value":"Christian Silver","position":{"start":{"line":162,"column":81,"offset":14993},"end":{"line":162,"column":97,"offset":15009}}}],"position":{"start":{"line":162,"column":80,"offset":14992},"end":{"line":162,"column":109,"offset":15021}}},{"type":"text","value":" for helping get it off the ground.","position":{"start":{"line":162,"column":109,"offset":15021},"end":{"line":162,"column":144,"offset":15056}}}],"position":{"start":{"line":162,"column":1,"offset":14913},"end":{"line":162,"column":144,"offset":15056}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":163,"column":1,"offset":15057}}}},{"id":"transformer-remark-markdown-html-bef3e0bfbad7eb71514a552e294e4316-gatsby-remark-imagesgatsby-remark-prismjs-","value":"<p><img src=\"https://res.cloudinary.com/patricoferris/image/upload/v1532857964/pf2018/blogposts/27-02-2018/tree.png\" alt=\"Recursive Tree\"></p>\n<p>Graphics and computer programming are two dearly intertwined disciplines. The oscilloscope is often recognised as one of the first examples of “computer graphics”, the cathode-ray versions emitting a beam of electrons onto a phosphorescent screen. By using magnetic fields to change the beam’s direction, we can sweep from left to right and move up and down — the basic idea behind most CG! (I highly recommend watching this <a href=\"https://archive.org/details/introductiontothecathoderayoscilloscope\">video</a> from 1970).</p>\n<p>We’ve come a long way since then — modern day graphics is a complicated science as well as an art, and the barrier to entry is constantly increasing. Graphics programming can be so complex, that a simple program to draw a triangle can be over <a href=\"https://github.com/SaschaWillems/Vulkan/blob/master/examples/triangle/triangle.cpp\">1000 lines of code</a>! However, this article will introduce you to <a href=\"https://p5js.org/\">p5.js</a> (also known as p5). A simpler, less complex solution for people who want to start making computer graphics, but don’t want the headache of streams of boiler-plate code.</p>\n<p>Straight from the landing page of the p5.js website.</p>\n<blockquote>\n<h1>…make coding accessible for artists, designers, educators and beginners…</h1>\n</blockquote>\n<p>p5.js is the result of hard-work of the <a href=\"https://processingfoundation.org/\">Processing Foundation</a>, a group focused on spreading computer and visual literacy. It distills their <a href=\"https://en.wikipedia.org/wiki/Processing_(programming_language)\">Processing</a> language into a JavaScript library that makes creating graphics easy and accessible whilst providing an ideal platform to springboard people’s careers in computer graphics. It should be mentioned now that a lot of inspiration has been taken from <a href=\"http://shiffman.net/\">Daniel Shiffman’s</a> p5 projects (from the <a href=\"https://github.com/CodingTrain/website/tree/master/CodingChallenges/CC_03_Snake_game_p5.js\">classic snake game</a>, to a <a href=\"https://github.com/CodingTrain/website/tree/master/CodingChallenges/CC_93_DoublePendulum_p5.js\">double pendulum</a>). I can’t urge you enough to follow these projects to really improve your understanding of coding concepts and the p5 library.</p>\n<h3>Some prerequisites:</h3>\n<p>Before jumping into the p5 code I first want to make clear that there is assumed knowledge of HTML5 and JavaScript including arrays, functions, variables etc. in the rest of this article. If you have a good grasp of JavaScript then skip to the p5 code below, otherwise here are few resources to get you up to scratch.</p>\n<ul>\n<li>\n<p><a href=\"https://www.youtube.com/watch?v=spIVWmv1jnw\">HaC Intro to Programming</a> — A workshop that is being run by Hackers at Cambridge to help anyone start learning to program (which uses JavaScript).</p>\n</li>\n<li>\n<p><a href=\"https://www.codecademy.com/learn/introduction-to-javascript\">Codecademy</a> — a great resource for learning how to code with instant feedback in your browser.</p>\n</li>\n<li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript\">MDN</a> — a great resource for learning about all aspects of web development.</p>\n</li>\n<li>\n<p><a href=\"https://codepen.io/\">Codepen</a> — a brilliant online text-editor for creating cool projects in HTML, CSS and JavaScript. Equally good for getting inspiration from a lot of talented users. Another possible solution would be <a href=\"https://jsfiddle.net/\">JSFiddle</a>.</p>\n</li>\n</ul>\n<p>What follows is a series of steps that will introduce you to p5 concepts. With code examples and explanations I hope to give you enough information to understand the ideas, but to fully grasp the concepts you will have to dive into the code, experiment with it, break it and learn from it. So without further ado, let’s get coding.</p>\n<h3>Step 1: The Setup</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//Initialisation of canvas, objects, variables etc.</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//The drawing loop - updates at a constant rate declared in setup</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>p5 is really simple to setup once you know what to do. There are two files shown above — an index.html and a template.js. The index.html file gets the libraries for us and the template.js is the barebones structure of a p5 project and at the moment it does nothing! Within this we have two functions:</p>\n<ul>\n<li>\n<p>setup() — a function for creating what we will need for our graphic or project. Like creating a canvas, initialising some objects or arrays etc.</p>\n</li>\n<li>\n<p>draw() — a function which will be called periodically like a loop. This is where will call draw functions and update functions to make graphics and animations.</p>\n</li>\n</ul>\n<iframe height='400' scrolling='no' title='Simple Triangle Tutorial' src='//codepen.io/patricoferris/embed/dddxjr/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/dddxjr/'>Simple Triangle Tutorial</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>Let’s first look at the setup function. We used the p5 function createCanvas(width, height) which created and initialised a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API\">canvas</a> with arguments width and height. Now within our setup() and createCanvas() functions we can reference the variables width and height without ever instantiating them!</p>\n<p>Next comes the meaty, draw function. I have purposefully put extra code in here so we can learn more about what p5 has to offer. Firstly always remember that draw() is a loop that runs from top to bottom. Initially, we set the background (of our canvas) to white with background(255) which is the same as background(255, 255, 255) (maximising the red, green and blue values to give white). This may seem simple, but implicitly we are also clearing our canvas every loop… in one line of code! This will be useful for animations later as we want to redraw objects in a new location rather than have the <a href=\"https://codepen.io/patricoferris/pen/paxZaw\">build-up on the same canvas</a> (click to see it go spectacularly wrong). Next is a translate(width/2, height/2) which moves our current drawing location to the centre of our canvas. We then declare the fill colour of our triangle with fill(255, 0, 0)(making it red).</p>\n<p>We want to create an equilateral triangle with side length s. The triangle itself is a function that takes the vertex coordinates as arguments — triangle(x1, y1, x2, y2, x3, y3) and in this example starting from the centre we have one vertex at (-s/2, 0) another at (s/2, 0) giving a bottom length of s . Now comes the trickier part. A very important aspect of most computer graphics is that the coordinate system starts in the top left corner (or wherever your origin is) and x increases left to right, whilst y increases top to bottom. To move of the screen we need a negative y value. Our last coordinate is given as (0, -sin(PI/3)) (if you’re stuck, think about cutting the triangle in two and using trigonometry).</p>\n<h3>Step 2: Get Creative</h3>\n<p>We’ve learnt how to set up our canvas and start drawing. Armed with the p5 <a href=\"https://p5js.org/reference/\">reference page</a> and our creativity, we can make some truly stunning graphics. How about a bouncing ball animation?</p>\n<iframe height='400' scrolling='no' title='Bouncing Balls' src='//codepen.io/patricoferris/embed/PQpOrB/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/PQpOrB/'>Bouncing Balls</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>Let’s look at the interesting p5 aspects that we didn’t know before:</p>\n<ul>\n<li>\n<p>frameRate(20) — This enables us to specify the frame rate of our drawing loop, that is, how many times per second it redraws everything for us.</p>\n</li>\n<li>\n<p>gravity = createVector(0, 9) — p5 allows us to <a href=\"https://p5js.org/reference/#/p5.Vector\">create vector objects</a> with which we can perform vector operations like addition, multiplication, dot-product and cross-product. This is useful when we want to simulate physics like forces.</p>\n</li>\n<li>\n<p>floor(random(50)) — Here we’re using p5 math functions. floor() takes a real number and rounds it down to the nearest integer. random(arg) produces a random number as small as 0 or up to 49. In this example, we are giving it to the ellipse(x, y, w)function to create randomly sized balls by setting the width to a random number. If we gave another argument it would set the ellipse’s height, but here it infers that we want a circle.</p>\n</li>\n<li>\n<p>stroke(0) — This function sets the colour of our shape’s outline. If you don’t want any border you can add noStroke() .</p>\n</li>\n</ul>\n<p>All you need now is to add some physics to these ideas and you have yourself a bouncing ball animation.</p>\n<h3>Step 3: Experiment with p5</h3>\n<p>Hopefully now you have a good understanding of the p5 fundamentals, but we’ve barely scratched the surface. This last example will use two extra features of p5: interactivity and <a href=\"http://flafla2.github.io/2014/08/09/perlinnoise.html\">Perlin Noise</a>. Keep reading to find out more on these two concepts.</p>\n<iframe height='400' scrolling='no' title='Pixel Fire' src='//codepen.io/patricoferris/embed/XZMxmV/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/XZMxmV/'>Pixel Fire</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>In this CodePen I have created a relatively simple flame model using squares and Perlin Noise. First of all, how do we get user input? Lucky for us p5 has some functions that can help.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> touch <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">createCanvas</span><span class=\"token punctuation\">(</span><span class=\"token number\">640</span><span class=\"token punctuation\">,</span> <span class=\"token number\">640</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>touch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">rect</span><span class=\"token punctuation\">(</span>mouseX<span class=\"token punctuation\">,</span> mouseY<span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">touchStarted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  touch <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">touchEnded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  touch <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>At the top of the code we have declared a boolean “flag” as to whether or not our mouse is being pressed — this allows us to do things if the mouse is being held down. The touchStarted() and touchEnded() are p5 functions that are executed whenever the mouse is pressed or released or the screen is touched and released. Lastly, in our rect() function we have the variables mouseX and mouseY which are p5 variables corresponding to the mouse’s current position. Oddly, these also refer to your <a href=\"https://github.com/processing/p5.js/issues/1705\">“touch” coordinates</a>. With all these variables and functions predefined for us we can focus on making visually stunning graphics, whilst not being hampered by having to code extra functions unrelated to the graphic we’re producing.</p>\n<p>Now for the Perlin Noise. In 1983, tired with the artificial look of computer graphics, Ken Perlin developed a type of gradient noise. The basic idea being you create a big grid of gradients randomly and then use the dot product to interpolate between them. In short, we get random values based on the coordinate system we’re drawing on. Great! For each of our squares we can start them at a random position near our mouse, and generate a random upward vector using their position and Perlin Noise. Let’s look at the code:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Particle</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos <span class=\"token operator\">=</span> <span class=\"token function\">createVector</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">+</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vel <span class=\"token operator\">=</span> <span class=\"token function\">createVector</span><span class=\"token punctuation\">(</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token function\">noise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token function\">noise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>alpha <span class=\"token operator\">=</span> <span class=\"token number\">255</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>r <span class=\"token operator\">=</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">170</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>g <span class=\"token operator\">=</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">update</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>alpha <span class=\"token operator\">-=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">show</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">noStroke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>g<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>alpha<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">rect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">dead</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>alpha <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>Some key things to notice:</p>\n<ul>\n<li>\n<p>noise(this.pos.x) — The Perlin Noise <a href=\"https://p5js.org/reference/#/p5/noise\">function</a> that gets a random number based on the square’s current x position. It returns a value between 0 and 1.</p>\n</li>\n<li>\n<p>fill(this.r, this.g, this.b, this.alpha) — Here we have extended fill’s ability by including an alpha value for the objects transparency, by decreasing alpha in the update() function we get a nice fade out like a flame.</p>\n</li>\n<li>\n<p>dead() — This function allows us to keep track of which particles have disappeared as their alpha is now less than zero. We can then splice() them out of our array to ensure we’re not drawing an unbounded number of particles over time which would cause performance issues.</p>\n</li>\n</ul>\n<p>As a challenge, you can also use blendMode() to make it seem even more realistic — check this <a href=\"https://codepen.io/anon/pen/YeOaJX\">alteration</a> to see it in action.</p>\n<p>With only a few concepts and the p5 library, it is incredibly straightforward to start building anything you want. Be sure to checkout what else is possible with the library. Here are few cool ideas to get you started: <a href=\"https://p5js.org/examples/3d-geometries.html\">3D graphics</a>, <a href=\"https://p5js.org/examples/dom-slider.html\">sliders</a> and <a href=\"https://p5js.org/examples/image-load-and-display-image.html\">images</a>.</p>\n<h3>Conclusion</h3>\n<p>As computers and technology become ubiquitous in our daily lives and an increasing number of professions are now relying on computer literacy, p5.js is a beautiful example of how we can ensure as many people as possible have an entry-point to the wonderful world of computer programming. It also acts as a reminder to some more experienced programmers that creativity and imagination are vital in producing meaningful code and ultimately making the tech world a better place.</p>\n<p>Hopefully this intro to p5 has convinced you of its usefulness and has encouraged you to start taking your first steps into the world of graphics programming. Here are my recommendations for where to go next:</p>\n<ul>\n<li>\n<p><a href=\"https://www.youtube.com/user/shiffman\">The Coding Train</a> — A brilliant YouTube channel by Daniel Shiffman where he teaches JavaScript and p5.js amongst many other incredible things!</p>\n</li>\n<li>\n<p><a href=\"https://p5js.org/examples/\">p5js.org </a>— The examples page on this website is full of inspiring projects which you could recreate and extend further.</p>\n</li>\n<li>\n<p><a href=\"https://www.scratchapixel.com/index.php\">Sratchapixel</a> — If you feel ready to delve into the deeper concepts and implementations of computer graphics then this website is an incredible resource for you to use.</p>\n</li>\n</ul>\n<p>A special thanks to <a href=\"undefined\">Tom Read Cutting</a> for editing this article and <a href=\"undefined\">Christian Silver</a> for helping get it off the ground.</p>"},{"id":"transformer-remark-markdown-ast-cdf2177f3ce165a4ad178d9595442710-gatsby-remark-imagesgatsby-remark-prismjs-","value":{"type":"root","children":[{"type":"yaml","value":"path: '/optimise-your-website'\ntitle: 'Optimising your Website'\nsubtitle: 'Tips and tricks to keep your website lean and fast'\ndate: '2018-07-28'\nimagUrl: 'https://res.cloudinary.com/patricoferris/image/upload/v1532781201/pf2018/blogposts/28-07-2018/website_optimisation_2.png' ","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":7,"column":4,"offset":286},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://res.cloudinary.com/patricoferris/image/upload/v1532781201/pf2018/blogposts/28-07-2018/website_optimisation_2.png","alt":"Optimising your Website","position":{"start":{"line":8,"column":1,"offset":287},"end":{"line":8,"column":149,"offset":435},"indent":[]}},{"type":"text","value":"\nInspired by a ","position":{"start":{"line":8,"column":149,"offset":435},"end":{"line":9,"column":15,"offset":450},"indent":[1]}},{"type":"link","title":null,"url":"https://syntax.fm/","children":[{"type":"text","value":"Syntax","position":{"start":{"line":9,"column":16,"offset":451},"end":{"line":9,"column":22,"offset":457},"indent":[]}}],"position":{"start":{"line":9,"column":15,"offset":450},"end":{"line":9,"column":43,"offset":478},"indent":[]}},{"type":"text","value":" podcast, I got really interested in website optimisation. It can often be an overlooked aspect in web development with more focus on design and functionality, I realised my number one priority whenever I visited a website is load speed. My attention is a website’s number one goal, lose it and they lose all potential ad revenue or possibility to give me whatever information I was looking for. ","position":{"start":{"line":9,"column":43,"offset":478},"end":{"line":9,"column":439,"offset":874},"indent":[]}},{"type":"link","title":null,"url":"https://developers.google.com/web/fundamentals/performance/get-started/","children":[{"type":"text","value":"Many seem to agree. 53% of users abandon websites that take more than 3 seconds to load","position":{"start":{"line":9,"column":440,"offset":875},"end":{"line":9,"column":527,"offset":962},"indent":[]}}],"position":{"start":{"line":9,"column":439,"offset":874},"end":{"line":9,"column":601,"offset":1036},"indent":[]}},{"type":"text","value":". No amount of fancy graphics or parallax scrolling that appears five seconds after someone’s clicked will hide the slow loading times.","position":{"start":{"line":9,"column":601,"offset":1036},"end":{"line":9,"column":736,"offset":1171},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":287},"end":{"line":9,"column":736,"offset":1171},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"The aim of this article is to give a broad overview of the concepts and ideas behind optimising your website, experienced developers are likely already using things like Webpack (a module bundler) among other tools to speed-up their sites.","position":{"start":{"line":11,"column":1,"offset":1173},"end":{"line":11,"column":240,"offset":1412},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":1173},"end":{"line":11,"column":240,"offset":1412},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For testing load-times I will be using the ","position":{"start":{"line":13,"column":1,"offset":1414},"end":{"line":13,"column":44,"offset":1457},"indent":[]}},{"type":"link","title":null,"url":"https://chrome.google.com/webstore/detail/page-load-time/fploionmjgeclbkemipmkogoaohcdbig?hl=en","children":[{"type":"text","value":"Page Load Time ","position":{"start":{"line":13,"column":45,"offset":1458},"end":{"line":13,"column":60,"offset":1473},"indent":[]}}],"position":{"start":{"line":13,"column":44,"offset":1457},"end":{"line":13,"column":158,"offset":1571},"indent":[]}},{"type":"text","value":"Chrome extension. There are a few ways to measure website loading time including: ","position":{"start":{"line":13,"column":158,"offset":1571},"end":{"line":13,"column":240,"offset":1653},"indent":[]}},{"type":"link","title":null,"url":"https://developers.google.com/web/tools/chrome-user-experience-report/","children":[{"type":"text","value":"first paint, first meaning paint, DOMContentLoaded","position":{"start":{"line":13,"column":241,"offset":1654},"end":{"line":13,"column":291,"offset":1704},"indent":[]}}],"position":{"start":{"line":13,"column":240,"offset":1653},"end":{"line":13,"column":364,"offset":1777},"indent":[]}},{"type":"text","value":" etc. For a more detailed look into what this timer measures, check out the Github repository below.\n","position":{"start":{"line":13,"column":364,"offset":1777},"end":{"line":14,"column":1,"offset":1878},"indent":[1]}},{"type":"link","title":null,"url":"https://github.com/alex-vv/chrome-load-timer","children":[{"type":"strong","children":[{"type":"text","value":"alex-vv/chrome-load-timer","position":{"start":{"line":14,"column":4,"offset":1881},"end":{"line":14,"column":29,"offset":1906},"indent":[]}}],"position":{"start":{"line":14,"column":2,"offset":1879},"end":{"line":14,"column":31,"offset":1908},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":14,"column":31,"offset":1908},"end":{"line":15,"column":1,"offset":1909},"indent":[1]}},{"type":"emphasis","children":[{"type":"text","value":"chrome-load-timer - Google Chrome extension to measure page load time and display it in the toolbar","position":{"start":{"line":15,"column":2,"offset":1910},"end":{"line":15,"column":101,"offset":2009},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":1909},"end":{"line":15,"column":102,"offset":2010},"indent":[]}},{"type":"text","value":"github.com","position":{"start":{"line":15,"column":102,"offset":2010},"end":{"line":15,"column":112,"offset":2020},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":1878},"end":{"line":15,"column":159,"offset":2067},"indent":[1]}}],"position":{"start":{"line":13,"column":1,"offset":1414},"end":{"line":15,"column":159,"offset":2067},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"strong","children":[{"type":"text","value":"Use Minified Stylesheets and Scripts","position":{"start":{"line":17,"column":7,"offset":2075},"end":{"line":17,"column":43,"offset":2111},"indent":[]}}],"position":{"start":{"line":17,"column":5,"offset":2073},"end":{"line":17,"column":45,"offset":2113},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":2069},"end":{"line":17,"column":45,"offset":2113},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You would be amazed at how much performance can be gained by this simple trick. What is a minified document? When we write code it is never our job to make it optimised for the computer, instead our golden rule is to make it readable to humans. This improves readability, cuts down on debug time and makes it easier to maintain. However, to achieve this we often add extra spacing which costs us precious space. Minifying the code is trimming all this fat from what we’ve written to have code that produces the same result but is far more difficult to read and maintain. This is okay though, because a computer has no problem deciphering it. Take the following code for example.","position":{"start":{"line":19,"column":1,"offset":2115},"end":{"line":19,"column":679,"offset":2793},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":2115},"end":{"line":19,"column":679,"offset":2793},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","position":{"start":{"line":21,"column":1,"offset":2795},"end":{"line":30,"column":4,"offset":3054},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Notice how, wherever possible, our line-breaks and spaces are gone. On top of that, the code in the for-loop is only one line so there’s no need for the curly braces which extends our code over three lines when it can be done in one. Does this make a difference?","position":{"start":{"line":32,"column":1,"offset":3056},"end":{"line":32,"column":263,"offset":3318},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":3056},"end":{"line":32,"column":263,"offset":3318},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"I tried it out on simple website that just had one script tag being loaded in for the graphics library ","position":{"start":{"line":34,"column":1,"offset":3320},"end":{"line":34,"column":104,"offset":3423},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/","children":[{"type":"text","value":"p5.js","position":{"start":{"line":34,"column":105,"offset":3424},"end":{"line":34,"column":110,"offset":3429},"indent":[]}}],"position":{"start":{"line":34,"column":104,"offset":3423},"end":{"line":34,"column":130,"offset":3449},"indent":[]}},{"type":"text","value":". Using the non-minified CDN link I got a load time of 0.25 seconds. Using the minified version I got a markedly improved load time of 0.08 seconds. Depending on what your website project is, there are a few ways to automatically minify code. If it is a ","position":{"start":{"line":34,"column":130,"offset":3449},"end":{"line":34,"column":384,"offset":3703},"indent":[]}},{"type":"link","title":null,"url":"https://guide.meteor.com/build-tool.html","children":[{"type":"text","value":"Meteor app","position":{"start":{"line":34,"column":385,"offset":3704},"end":{"line":34,"column":395,"offset":3714},"indent":[]}}],"position":{"start":{"line":34,"column":384,"offset":3703},"end":{"line":34,"column":438,"offset":3757},"indent":[]}},{"type":"text","value":" it will be done automatically, using ","position":{"start":{"line":34,"column":438,"offset":3757},"end":{"line":34,"column":476,"offset":3795},"indent":[]}},{"type":"link","title":null,"url":"https://webpack.js.org/guides/production/","children":[{"type":"text","value":"Webpack ","position":{"start":{"line":34,"column":477,"offset":3796},"end":{"line":34,"column":485,"offset":3804},"indent":[]}}],"position":{"start":{"line":34,"column":476,"offset":3795},"end":{"line":34,"column":529,"offset":3848},"indent":[]}},{"type":"text","value":"will also allow you to do this. Otherwise there are some online tools like ","position":{"start":{"line":34,"column":529,"offset":3848},"end":{"line":34,"column":604,"offset":3923},"indent":[]}},{"type":"link","title":null,"url":"https://jscompress.com/","children":[{"type":"text","value":"JSCompress ","position":{"start":{"line":34,"column":605,"offset":3924},"end":{"line":34,"column":616,"offset":3935},"indent":[]}}],"position":{"start":{"line":34,"column":604,"offset":3923},"end":{"line":34,"column":642,"offset":3961},"indent":[]}},{"type":"text","value":"or ","position":{"start":{"line":34,"column":642,"offset":3961},"end":{"line":34,"column":645,"offset":3964},"indent":[]}},{"type":"link","title":null,"url":"https://cssminifier.com/","children":[{"type":"text","value":"CSSMinifier ","position":{"start":{"line":34,"column":646,"offset":3965},"end":{"line":34,"column":658,"offset":3977},"indent":[]}}],"position":{"start":{"line":34,"column":645,"offset":3964},"end":{"line":34,"column":685,"offset":4004},"indent":[]}},{"type":"text","value":"that you can upload your code to.","position":{"start":{"line":34,"column":685,"offset":4004},"end":{"line":34,"column":718,"offset":4037},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":3320},"end":{"line":34,"column":718,"offset":4037},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Design Versus Performance","position":{"start":{"line":36,"column":5,"offset":4043},"end":{"line":36,"column":30,"offset":4068},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":4039},"end":{"line":36,"column":30,"offset":4068},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Whilst design is undoubtedly a major aspect to a website’s overall success, both developers and designers must work together to compromise and make a mutually beneficial trade-off between design and performance. The classic example is fonts. Take the two screenshots of a simple website below.","position":{"start":{"line":38,"column":1,"offset":4070},"end":{"line":38,"column":294,"offset":4363},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":4070},"end":{"line":38,"column":294,"offset":4363},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://res.cloudinary.com/patricoferris/image/upload/v1532780050/pf2018/blogposts/28-07-2018/Helvetica.png","alt":"The example website using Helvetica Font (commonly found on many computers) — check [this](https://css-tricks.com/snippets/css/system-font-stack/) link for common system fonts","position":{"start":{"line":40,"column":1,"offset":4365},"end":{"line":40,"column":288,"offset":4652},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":40,"column":288,"offset":4652},"end":{"line":41,"column":1,"offset":4653},"indent":[1]}},{"type":"emphasis","children":[{"type":"text","value":"The example website using Helvetica Font (commonly found on many computers) — check ","position":{"start":{"line":41,"column":2,"offset":4654},"end":{"line":41,"column":86,"offset":4738},"indent":[]}},{"type":"link","title":null,"url":"https://css-tricks.com/snippets/css/system-font-stack/","children":[{"type":"text","value":"this","position":{"start":{"line":41,"column":87,"offset":4739},"end":{"line":41,"column":91,"offset":4743},"indent":[]}}],"position":{"start":{"line":41,"column":86,"offset":4738},"end":{"line":41,"column":148,"offset":4800},"indent":[]}},{"type":"text","value":" link for common system fonts","position":{"start":{"line":41,"column":148,"offset":4800},"end":{"line":41,"column":177,"offset":4829},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":4653},"end":{"line":41,"column":178,"offset":4830},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":4365},"end":{"line":41,"column":178,"offset":4830},"indent":[1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://cdn-images-1.medium.com/max/5760/1*8ciuJNBdqMhlLSaOpNUXow.png","alt":"The example website using Roboto Font (designed by Google and linked from [Google Fonts](https://fonts.google.com/?selection.family=Roboto))","position":{"start":{"line":43,"column":1,"offset":4832},"end":{"line":43,"column":215,"offset":5046},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"The example website using Roboto Font (designed by Google and linked from ","position":{"start":{"line":43,"column":216,"offset":5047},"end":{"line":43,"column":290,"offset":5121},"indent":[]}},{"type":"link","title":null,"url":"https://fonts.google.com/?selection.family=Roboto","children":[{"type":"text","value":"Google Fonts","position":{"start":{"line":43,"column":291,"offset":5122},"end":{"line":43,"column":303,"offset":5134},"indent":[]}}],"position":{"start":{"line":43,"column":290,"offset":5121},"end":{"line":43,"column":355,"offset":5186},"indent":[]}},{"type":"text","value":")","position":{"start":{"line":43,"column":355,"offset":5186},"end":{"line":43,"column":356,"offset":5187},"indent":[]}}],"position":{"start":{"line":43,"column":215,"offset":5046},"end":{"line":43,"column":357,"offset":5188},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":4832},"end":{"line":43,"column":357,"offset":5188},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Before critiquing my questionable design skills take a moment to appreciate that these two fonts are very similar — yet the loading time for a website for the Roboto font was 0.22 seconds as compared with 0.17 for Helvetica. Whilst not that significant, using lots of custom fonts will slow down your website, although using Google Fonts’ API will help keep your website optimised. As an over-the-top example, linking 20 different fonts from the Google API increased the load time to 0.87 seconds.","position":{"start":{"line":45,"column":1,"offset":5190},"end":{"line":45,"column":498,"offset":5687},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":5190},"end":{"line":45,"column":498,"offset":5687},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Inlining your JavaScript and CSS","position":{"start":{"line":47,"column":5,"offset":5693},"end":{"line":47,"column":37,"offset":5725},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":5689},"end":{"line":47,"column":37,"offset":5725},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For each individual document or component of your website, when the parser reaches the script tag or link tag it sends and HTTP request for that document and if not stated differently, these will be blocking actions. What this means is your machine is parsing the HTML document getting the words to display in your browser but if it hits the script tag with the attribute src='js/main.js' for example, it will block the parsing and load in that file. This is where as a developer you need to be clever about where in the document you place things.","position":{"start":{"line":49,"column":1,"offset":5727},"end":{"line":49,"column":548,"offset":6274},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":5727},"end":{"line":49,"column":548,"offset":6274},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Whilst it may not ultimately affect the loading time of your website, it can affect the order in which things are loaded. Again we’ll be using the un-minified p5.js library to simulate a large JavaScript file and load it in different places to see how it affects our user experience.","position":{"start":{"line":51,"column":1,"offset":6276},"end":{"line":51,"column":284,"offset":6559},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":6276},"end":{"line":51,"column":284,"offset":6559},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://cdn-images-1.medium.com/max/2780/1*h_3GogfkaahcXCO9a43CPA.gif","alt":"Refreshing website with the script tag inserted at the bottom of the body tag","position":{"start":{"line":53,"column":1,"offset":6561},"end":{"line":53,"column":152,"offset":6712},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Refreshing website with the script tag inserted at the bottom of the body tag","position":{"start":{"line":53,"column":153,"offset":6713},"end":{"line":53,"column":230,"offset":6790},"indent":[]}}],"position":{"start":{"line":53,"column":152,"offset":6712},"end":{"line":53,"column":231,"offset":6791},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":6561},"end":{"line":53,"column":231,"offset":6791},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://cdn-images-1.medium.com/max/2780/1*xLOq5r4erQAwb4Au_hB-Ww.gif","alt":"Refreshing website with the script tag inserted at the top of the body tag","position":{"start":{"line":55,"column":1,"offset":6793},"end":{"line":55,"column":149,"offset":6941},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Refreshing website with the script tag inserted at the top of the body tag","position":{"start":{"line":55,"column":150,"offset":6942},"end":{"line":55,"column":224,"offset":7016},"indent":[]}}],"position":{"start":{"line":55,"column":149,"offset":6941},"end":{"line":55,"column":225,"offset":7017},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":6793},"end":{"line":55,"column":225,"offset":7017},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Whilst the load times were similar for both cases — the user experience is far better by placing the script at the body tag allowing the HTML to be parsed before the JavaScript giving the user the website content immediately!","position":{"start":{"line":57,"column":1,"offset":7019},"end":{"line":57,"column":226,"offset":7244},"indent":[]}}],"position":{"start":{"line":57,"column":1,"offset":7019},"end":{"line":57,"column":226,"offset":7244},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In the same vein CSS can also be render-blocking especially because more often than not it is linked in the head tag of your HTML document before the body. But if we want our user to see the content in the quickest time we don’t want to be loading CSS for the footer of our document which the user won’t see until they’ve scrolled to the bottom. In fact, we don’t want to load any CSS in that the user can’t immediately see when the page first loads on their device.","position":{"start":{"line":59,"column":1,"offset":7246},"end":{"line":59,"column":467,"offset":7712},"indent":[]}}],"position":{"start":{"line":59,"column":1,"offset":7246},"end":{"line":59,"column":467,"offset":7712},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The CSS that you need is often called the ","position":{"start":{"line":61,"column":1,"offset":7714},"end":{"line":61,"column":43,"offset":7756},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Critical CSS","position":{"start":{"line":61,"column":44,"offset":7757},"end":{"line":61,"column":56,"offset":7769},"indent":[]}}],"position":{"start":{"line":61,"column":43,"offset":7756},"end":{"line":61,"column":57,"offset":7770},"indent":[]}},{"type":"text","value":". Finding it for yourself would be a headache. It will be different for different devices, meaning you would have to check manually for all possible devices. Lucky for us we have (if you’re using ","position":{"start":{"line":61,"column":57,"offset":7770},"end":{"line":61,"column":253,"offset":7966},"indent":[]}},{"type":"link","title":null,"url":"https://nodejs.org/en/","children":[{"type":"text","value":"Node.js","position":{"start":{"line":61,"column":254,"offset":7967},"end":{"line":61,"column":261,"offset":7974},"indent":[]}}],"position":{"start":{"line":61,"column":253,"offset":7966},"end":{"line":61,"column":286,"offset":7999},"indent":[]}},{"type":"text","value":") ","position":{"start":{"line":61,"column":286,"offset":7999},"end":{"line":61,"column":288,"offset":8001},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/addyosmani/critical","children":[{"type":"text","value":"Critical","position":{"start":{"line":61,"column":289,"offset":8002},"end":{"line":61,"column":297,"offset":8010},"indent":[]}}],"position":{"start":{"line":61,"column":288,"offset":8001},"end":{"line":61,"column":338,"offset":8051},"indent":[]}},{"type":"text","value":". This helpful package does the CSS inlining for us and all we do is add some code to a Javascript file. Here’s a code snippet from the Github page.","position":{"start":{"line":61,"column":338,"offset":8051},"end":{"line":61,"column":486,"offset":8199},"indent":[]}}],"position":{"start":{"line":61,"column":1,"offset":7714},"end":{"line":61,"column":486,"offset":8199},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> critical <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'critical'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncritical<span class=\"token punctuation\">.</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    base<span class=\"token punctuation\">:</span> <span class=\"token string\">'test/'</span><span class=\"token punctuation\">,</span>\n    src<span class=\"token punctuation\">:</span> <span class=\"token string\">'index.html'</span><span class=\"token punctuation\">,</span>\n    dest<span class=\"token punctuation\">:</span> <span class=\"token string\">'styles/main.css'</span><span class=\"token punctuation\">,</span>\n    dimensions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n        height<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n        width<span class=\"token punctuation\">:</span> <span class=\"token number\">500</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        height<span class=\"token punctuation\">:</span> <span class=\"token number\">900</span><span class=\"token punctuation\">,</span>\n        width<span class=\"token punctuation\">:</span> <span class=\"token number\">1200</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","position":{"start":{"line":63,"column":1,"offset":8201},"end":{"line":78,"column":4,"offset":8466},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Using the generate function, we supply it with a JavaScript object with some values defined. base is where we’re going to save our src and dest (our project folder usually). What’s great is now we just supply an array of dimensions and the code will compute the critical CSS for each and inline that code into our head tag.","position":{"start":{"line":80,"column":1,"offset":8468},"end":{"line":80,"column":324,"offset":8791},"indent":[]}}],"position":{"start":{"line":80,"column":1,"offset":8468},"end":{"line":80,"column":324,"offset":8791},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Async and Defer","position":{"start":{"line":82,"column":5,"offset":8797},"end":{"line":82,"column":20,"offset":8812},"indent":[]}}],"position":{"start":{"line":82,"column":1,"offset":8793},"end":{"line":82,"column":20,"offset":8812},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Again, we come back to this idea of render-blocking and how best we should implement this for our website. When you have a plain script tag in your HTML it blocks the HTML from loading whilst the JavaScript loads ","position":{"start":{"line":84,"column":1,"offset":8814},"end":{"line":84,"column":214,"offset":9027},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"and","position":{"start":{"line":84,"column":216,"offset":9029},"end":{"line":84,"column":219,"offset":9032},"indent":[]}}],"position":{"start":{"line":84,"column":214,"offset":9027},"end":{"line":84,"column":221,"offset":9034},"indent":[]}},{"type":"text","value":" runs. Async and defer are simple attributes that you can add to your script tags that change the way your JavaScript will be loaded.","position":{"start":{"line":84,"column":221,"offset":9034},"end":{"line":84,"column":354,"offset":9167},"indent":[]}}],"position":{"start":{"line":84,"column":1,"offset":8814},"end":{"line":84,"column":354,"offset":9167},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Defer essentially “defers” execution of the script until after the HTML has been parsed. A major advantage of this is that you no longer need some $(document).ready() jQuery-style function to make sure the body was loaded before you could manipulate it, which could cut out some of the dependencies on libraries like jQuery which helps reduce load-time.","position":{"start":{"line":86,"column":1,"offset":9169},"end":{"line":86,"column":354,"offset":9522},"indent":[]}}],"position":{"start":{"line":86,"column":1,"offset":9169},"end":{"line":86,"column":354,"offset":9522},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Async is, unsurprisingly, the asynchronous loading of JavaScript files. What does this mean? Your HTML will continue to be parsed whilst the file is loaded and then whenever its ready the file will be executed. This helps improving user experience whilst viewing your website. Imagine for example you had a JavaScript file for doing some cool graphics. You want the words around this graphic to be parsed until your graphic is ready to be executed. As soon as it is ready, it is executed and we get a more seamless loading of our webpage without missing pieces.","position":{"start":{"line":88,"column":1,"offset":9524},"end":{"line":88,"column":562,"offset":10085},"indent":[]}}],"position":{"start":{"line":88,"column":1,"offset":9524},"end":{"line":88,"column":562,"offset":10085},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Check this ","position":{"start":{"line":90,"column":1,"offset":10087},"end":{"line":90,"column":12,"offset":10098},"indent":[]}},{"type":"link","title":null,"url":"http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html","children":[{"type":"text","value":"website","position":{"start":{"line":90,"column":13,"offset":10099},"end":{"line":90,"column":20,"offset":10106},"indent":[]}}],"position":{"start":{"line":90,"column":12,"offset":10098},"end":{"line":90,"column":94,"offset":10180},"indent":[]}},{"type":"text","value":" for a really intuitive, graphical representation of this.","position":{"start":{"line":90,"column":94,"offset":10180},"end":{"line":90,"column":152,"offset":10238},"indent":[]}}],"position":{"start":{"line":90,"column":1,"offset":10087},"end":{"line":90,"column":152,"offset":10238},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Image Optimisation and Media Queries","position":{"start":{"line":92,"column":5,"offset":10244},"end":{"line":92,"column":41,"offset":10280},"indent":[]}}],"position":{"start":{"line":92,"column":1,"offset":10240},"end":{"line":92,"column":41,"offset":10280},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The cornerstone of all website performance optimisation is the simple rule that, the less data you send to the client, the quicker and better your website will perform. With the plethora of devices on the market capable of viewing websites, there is a growing trend to optimise your website based on the device it is being viewed on.","position":{"start":{"line":94,"column":1,"offset":10282},"end":{"line":94,"column":334,"offset":10615},"indent":[]}}],"position":{"start":{"line":94,"column":1,"offset":10282},"end":{"line":94,"column":334,"offset":10615},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Media queries are a fairly new tool added to CSS3. With more and more content being consumed using mobile-devices there has been a shift in design thinking towards mobile first. Using media queries you can then add stylings for larger screen sizes.","position":{"start":{"line":96,"column":1,"offset":10617},"end":{"line":96,"column":249,"offset":10865},"indent":[]}}],"position":{"start":{"line":96,"column":1,"offset":10617},"end":{"line":96,"column":249,"offset":10865},"indent":[]}},{"type":"html","lang":"css","value":"<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/* Some CSS for screen sizes bigger than 600px but smaller than 992px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/*  Some CSS for screen sizes bigger than 992px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">orientation</span><span class=\"token punctuation\">:</span> landscape<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* Some CSS for landscape-oriented devices */</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":98,"column":1,"offset":10867},"end":{"line":110,"column":4,"offset":11197},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The @media tag starts a new CSS rule, whilst the only keyword stops older browsers that don’t support media queries from using it. The screen keyword applies the rules to screens rather than prints. After that you add the media-feature which supports the and , or and not keywords so you can get as specific as you want. When you’re loading your image you can write code like:","position":{"start":{"line":112,"column":1,"offset":11199},"end":{"line":112,"column":377,"offset":11575},"indent":[]}}],"position":{"start":{"line":112,"column":1,"offset":11199},"end":{"line":112,"column":377,"offset":11575},"indent":[]}},{"type":"html","lang":"css","value":"<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-small.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-big.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":114,"column":1,"offset":11577},"end":{"line":122,"column":4,"offset":11796},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This isn’t necessarily the best or optimal approach for image optimisation. Luckily we have other options. ","position":{"start":{"line":124,"column":1,"offset":11798},"end":{"line":124,"column":108,"offset":11905},"indent":[]}},{"type":"link","title":null,"url":"https://www.imgix.com/","children":[{"type":"text","value":"Imgix","position":{"start":{"line":124,"column":109,"offset":11906},"end":{"line":124,"column":114,"offset":11911},"indent":[]}}],"position":{"start":{"line":124,"column":108,"offset":11905},"end":{"line":124,"column":139,"offset":11936},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":124,"column":139,"offset":11936},"end":{"line":124,"column":144,"offset":11941},"indent":[]}},{"type":"link","title":null,"url":"https://cloudinary.com/","children":[{"type":"text","value":"Cloudinary","position":{"start":{"line":124,"column":145,"offset":11942},"end":{"line":124,"column":155,"offset":11952},"indent":[]}}],"position":{"start":{"line":124,"column":144,"offset":11941},"end":{"line":124,"column":181,"offset":11978},"indent":[]}},{"type":"text","value":" are two ways you can help optimise your site for the right device. Imgix is a Content Delivery Network (CDN) for images with a lot of cool features. A CDN simply takes your files and spreads them across the globe so that someone in a different country doesn’t have to wait for your files on your server to make it all the way to them. This ","position":{"start":{"line":124,"column":181,"offset":11978},"end":{"line":124,"column":522,"offset":12319},"indent":[]}},{"type":"link","title":null,"url":"https://docs.imgix.com/tutorials/responsive-images-srcset-imgix","children":[{"type":"text","value":"tutorial","position":{"start":{"line":124,"column":523,"offset":12320},"end":{"line":124,"column":531,"offset":12328},"indent":[]}}],"position":{"start":{"line":124,"column":522,"offset":12319},"end":{"line":124,"column":597,"offset":12394},"indent":[]}},{"type":"text","value":" goes through how to use Imgix for different device pixel ratios. Cloudinary is a similar service, and their ","position":{"start":{"line":124,"column":597,"offset":12394},"end":{"line":124,"column":706,"offset":12503},"indent":[]}},{"type":"link","title":null,"url":"https://cloudinary.com/documentation/image_optimization","children":[{"type":"text","value":"tutorial ","position":{"start":{"line":124,"column":707,"offset":12504},"end":{"line":124,"column":716,"offset":12513},"indent":[]}}],"position":{"start":{"line":124,"column":706,"offset":12503},"end":{"line":124,"column":774,"offset":12571},"indent":[]}},{"type":"text","value":"will take you through the importance of optimisation and how to achieve it will their incredible services. Below is a small example showing how easy it is to use Cloudinary straight in the HTML markup.","position":{"start":{"line":124,"column":774,"offset":12571},"end":{"line":124,"column":975,"offset":12772},"indent":[]}}],"position":{"start":{"line":124,"column":1,"offset":11798},"end":{"line":124,"column":975,"offset":12772},"indent":[]}},{"type":"html","value":"<iframe height='400' scrolling='no' title='Cloudinary Example' src='//codepen.io/patricoferris/embed/ejgVJN/?height=400&theme-id=0&default-tab=html,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/ejgVJN/'>Cloudinary Example</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":126,"column":1,"offset":12774},"end":{"line":127,"column":10,"offset":13258},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"As a last point on image optimisation, the format you use can have a large impact on file size. Some files contain lots of metadata which you don’t want to be serving to your client — ","position":{"start":{"line":129,"column":1,"offset":13260},"end":{"line":129,"column":185,"offset":13444},"indent":[]}},{"type":"link","title":null,"url":"https://www.sno.phy.queensu.ca/~phil/exiftool/","children":[{"type":"text","value":"ExifTool","position":{"start":{"line":129,"column":186,"offset":13445},"end":{"line":129,"column":194,"offset":13453},"indent":[]}}],"position":{"start":{"line":129,"column":185,"offset":13444},"end":{"line":129,"column":243,"offset":13502},"indent":[]}},{"type":"text","value":" is a commonly used command-line application that can help you trim down those files sizes. On top of this, Scalable Vector Graphics (SVG) are a web-standard developed by W3C that offers XML-based vector graphics. This means they have infinite resolution unlike PNG or JPG files. It also makes them highly versatile, easily editable and can even be animated. At the end of the day SVGs are just code and so the file sizes tend to be small. For more reasons to use them, check out this ","position":{"start":{"line":129,"column":243,"offset":13502},"end":{"line":129,"column":728,"offset":13987},"indent":[]}},{"type":"link","title":null,"url":"https://watb.co.uk/5-reasons-you-should-be-using-svgs-over-pngs/","children":[{"type":"text","value":"article","position":{"start":{"line":129,"column":729,"offset":13988},"end":{"line":129,"column":736,"offset":13995},"indent":[]}}],"position":{"start":{"line":129,"column":728,"offset":13987},"end":{"line":129,"column":803,"offset":14062},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":129,"column":803,"offset":14062},"end":{"line":129,"column":804,"offset":14063},"indent":[]}}],"position":{"start":{"line":129,"column":1,"offset":13260},"end":{"line":129,"column":804,"offset":14063},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":131,"column":5,"offset":14069},"end":{"line":131,"column":15,"offset":14079},"indent":[]}}],"position":{"start":{"line":131,"column":1,"offset":14065},"end":{"line":131,"column":15,"offset":14079},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We’ve only scratched the surface of what’s possible for website optimisation. There are many tools you can use to help you stream-line this process like ","position":{"start":{"line":133,"column":1,"offset":14081},"end":{"line":133,"column":154,"offset":14234},"indent":[]}},{"type":"link","title":null,"url":"https://webpack.js.org/","children":[{"type":"text","value":"Webpack","position":{"start":{"line":133,"column":155,"offset":14235},"end":{"line":133,"column":162,"offset":14242},"indent":[]}}],"position":{"start":{"line":133,"column":154,"offset":14234},"end":{"line":133,"column":188,"offset":14268},"indent":[]}},{"type":"text","value":" for bundling or static-site generators like ","position":{"start":{"line":133,"column":188,"offset":14268},"end":{"line":133,"column":233,"offset":14313},"indent":[]}},{"type":"link","title":null,"url":"https://www.gatsbyjs.org/","children":[{"type":"text","value":"Gatsby","position":{"start":{"line":133,"column":234,"offset":14314},"end":{"line":133,"column":240,"offset":14320},"indent":[]}}],"position":{"start":{"line":133,"column":233,"offset":14313},"end":{"line":133,"column":268,"offset":14348},"indent":[]}},{"type":"text","value":". ","position":{"start":{"line":133,"column":268,"offset":14348},"end":{"line":133,"column":270,"offset":14350},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking","children":[{"type":"text","value":"Tree shaking","position":{"start":{"line":133,"column":271,"offset":14351},"end":{"line":133,"column":283,"offset":14363},"indent":[]}}],"position":{"start":{"line":133,"column":270,"offset":14350},"end":{"line":133,"column":348,"offset":14428},"indent":[]}},{"type":"text","value":" is another commonly used technique to remove excess, unused modules lying around your website.","position":{"start":{"line":133,"column":348,"offset":14428},"end":{"line":133,"column":443,"offset":14523},"indent":[]}}],"position":{"start":{"line":133,"column":1,"offset":14081},"end":{"line":133,"column":443,"offset":14523},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Hopefully this article has touched on some useful techniques you can use on your next site to help improve its performance. Happy coding!","position":{"start":{"line":135,"column":1,"offset":14525},"end":{"line":135,"column":138,"offset":14662},"indent":[]}}],"position":{"start":{"line":135,"column":1,"offset":14525},"end":{"line":135,"column":138,"offset":14662},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A big thank you to ","position":{"start":{"line":137,"column":1,"offset":14664},"end":{"line":137,"column":20,"offset":14683},"indent":[]}},{"type":"link","title":null,"url":"https://medium.com/@pinpickle","children":[{"type":"text","value":"Christian Silver","position":{"start":{"line":137,"column":21,"offset":14684},"end":{"line":137,"column":37,"offset":14700},"indent":[]}}],"position":{"start":{"line":137,"column":20,"offset":14683},"end":{"line":137,"column":69,"offset":14732},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":137,"column":69,"offset":14732},"end":{"line":137,"column":74,"offset":14737},"indent":[]}},{"type":"link","title":null,"url":"https://medium.com/@charliecrisp249","children":[{"type":"text","value":"Charlie Crisp","position":{"start":{"line":137,"column":75,"offset":14738},"end":{"line":137,"column":88,"offset":14751},"indent":[]}}],"position":{"start":{"line":137,"column":74,"offset":14737},"end":{"line":137,"column":126,"offset":14789},"indent":[]}},{"type":"text","value":" for editing this post and providing extremely useful advice and extra content to make it even better.","position":{"start":{"line":137,"column":126,"offset":14789},"end":{"line":137,"column":228,"offset":14891},"indent":[]}}],"position":{"start":{"line":137,"column":1,"offset":14664},"end":{"line":137,"column":228,"offset":14891},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":138,"column":1,"offset":14892}}}},{"id":"transformer-remark-markdown-html-ast-cdf2177f3ce165a4ad178d9595442710-gatsby-remark-imagesgatsby-remark-prismjs-","value":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/patricoferris/image/upload/v1532781201/pf2018/blogposts/28-07-2018/website_optimisation_2.png","alt":"Optimising your Website"},"children":[],"position":{"start":{"line":8,"column":1,"offset":287},"end":{"line":8,"column":149,"offset":435}}},{"type":"text","value":"\nInspired by a ","position":{"start":{"line":8,"column":149,"offset":435},"end":{"line":9,"column":15,"offset":450}}},{"type":"element","tagName":"a","properties":{"href":"https://syntax.fm/"},"children":[{"type":"text","value":"Syntax","position":{"start":{"line":9,"column":16,"offset":451},"end":{"line":9,"column":22,"offset":457}}}],"position":{"start":{"line":9,"column":15,"offset":450},"end":{"line":9,"column":43,"offset":478}}},{"type":"text","value":" podcast, I got really interested in website optimisation. It can often be an overlooked aspect in web development with more focus on design and functionality, I realised my number one priority whenever I visited a website is load speed. My attention is a website’s number one goal, lose it and they lose all potential ad revenue or possibility to give me whatever information I was looking for. ","position":{"start":{"line":9,"column":43,"offset":478},"end":{"line":9,"column":439,"offset":874}}},{"type":"element","tagName":"a","properties":{"href":"https://developers.google.com/web/fundamentals/performance/get-started/"},"children":[{"type":"text","value":"Many seem to agree. 53% of users abandon websites that take more than 3 seconds to load","position":{"start":{"line":9,"column":440,"offset":875},"end":{"line":9,"column":527,"offset":962}}}],"position":{"start":{"line":9,"column":439,"offset":874},"end":{"line":9,"column":601,"offset":1036}}},{"type":"text","value":". No amount of fancy graphics or parallax scrolling that appears five seconds after someone’s clicked will hide the slow loading times.","position":{"start":{"line":9,"column":601,"offset":1036},"end":{"line":9,"column":736,"offset":1171}}}],"position":{"start":{"line":8,"column":1,"offset":287},"end":{"line":9,"column":736,"offset":1171}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The aim of this article is to give a broad overview of the concepts and ideas behind optimising your website, experienced developers are likely already using things like Webpack (a module bundler) among other tools to speed-up their sites.","position":{"start":{"line":11,"column":1,"offset":1173},"end":{"line":11,"column":240,"offset":1412}}}],"position":{"start":{"line":11,"column":1,"offset":1173},"end":{"line":11,"column":240,"offset":1412}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For testing load-times I will be using the ","position":{"start":{"line":13,"column":1,"offset":1414},"end":{"line":13,"column":44,"offset":1457}}},{"type":"element","tagName":"a","properties":{"href":"https://chrome.google.com/webstore/detail/page-load-time/fploionmjgeclbkemipmkogoaohcdbig?hl=en"},"children":[{"type":"text","value":"Page Load Time ","position":{"start":{"line":13,"column":45,"offset":1458},"end":{"line":13,"column":60,"offset":1473}}}],"position":{"start":{"line":13,"column":44,"offset":1457},"end":{"line":13,"column":158,"offset":1571}}},{"type":"text","value":"Chrome extension. There are a few ways to measure website loading time including: ","position":{"start":{"line":13,"column":158,"offset":1571},"end":{"line":13,"column":240,"offset":1653}}},{"type":"element","tagName":"a","properties":{"href":"https://developers.google.com/web/tools/chrome-user-experience-report/"},"children":[{"type":"text","value":"first paint, first meaning paint, DOMContentLoaded","position":{"start":{"line":13,"column":241,"offset":1654},"end":{"line":13,"column":291,"offset":1704}}}],"position":{"start":{"line":13,"column":240,"offset":1653},"end":{"line":13,"column":364,"offset":1777}}},{"type":"text","value":" etc. For a more detailed look into what this timer measures, check out the Github repository below.\n","position":{"start":{"line":13,"column":364,"offset":1777},"end":{"line":14,"column":1,"offset":1878}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/alex-vv/chrome-load-timer"},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"alex-vv/chrome-load-timer","position":{"start":{"line":14,"column":4,"offset":1881},"end":{"line":14,"column":29,"offset":1906}}}],"position":{"start":{"line":14,"column":2,"offset":1879},"end":{"line":14,"column":31,"offset":1908}}},{"type":"text","value":"\n","position":{"start":{"line":14,"column":31,"offset":1908},"end":{"line":15,"column":1,"offset":1909}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"chrome-load-timer - Google Chrome extension to measure page load time and display it in the toolbar","position":{"start":{"line":15,"column":2,"offset":1910},"end":{"line":15,"column":101,"offset":2009}}}],"position":{"start":{"line":15,"column":1,"offset":1909},"end":{"line":15,"column":102,"offset":2010}}},{"type":"text","value":"github.com","position":{"start":{"line":15,"column":102,"offset":2010},"end":{"line":15,"column":112,"offset":2020}}}],"position":{"start":{"line":14,"column":1,"offset":1878},"end":{"line":15,"column":159,"offset":2067}}}],"position":{"start":{"line":13,"column":1,"offset":1414},"end":{"line":15,"column":159,"offset":2067}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Use Minified Stylesheets and Scripts","position":{"start":{"line":17,"column":7,"offset":2075},"end":{"line":17,"column":43,"offset":2111}}}],"position":{"start":{"line":17,"column":5,"offset":2073},"end":{"line":17,"column":45,"offset":2113}}}],"position":{"start":{"line":17,"column":1,"offset":2069},"end":{"line":17,"column":45,"offset":2113}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You would be amazed at how much performance can be gained by this simple trick. What is a minified document? When we write code it is never our job to make it optimised for the computer, instead our golden rule is to make it readable to humans. This improves readability, cuts down on debug time and makes it easier to maintain. However, to achieve this we often add extra spacing which costs us precious space. Minifying the code is trimming all this fat from what we’ve written to have code that produces the same result but is far more difficult to read and maintain. This is okay though, because a computer has no problem deciphering it. Take the following code for example.","position":{"start":{"line":19,"column":1,"offset":2115},"end":{"line":19,"column":679,"offset":2793}}}],"position":{"start":{"line":19,"column":1,"offset":2115},"end":{"line":19,"column":679,"offset":2793}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","position":{"start":{"line":21,"column":1,"offset":2795},"end":{"line":30,"column":4,"offset":3054}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Notice how, wherever possible, our line-breaks and spaces are gone. On top of that, the code in the for-loop is only one line so there’s no need for the curly braces which extends our code over three lines when it can be done in one. Does this make a difference?","position":{"start":{"line":32,"column":1,"offset":3056},"end":{"line":32,"column":263,"offset":3318}}}],"position":{"start":{"line":32,"column":1,"offset":3056},"end":{"line":32,"column":263,"offset":3318}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I tried it out on simple website that just had one script tag being loaded in for the graphics library ","position":{"start":{"line":34,"column":1,"offset":3320},"end":{"line":34,"column":104,"offset":3423}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/"},"children":[{"type":"text","value":"p5.js","position":{"start":{"line":34,"column":105,"offset":3424},"end":{"line":34,"column":110,"offset":3429}}}],"position":{"start":{"line":34,"column":104,"offset":3423},"end":{"line":34,"column":130,"offset":3449}}},{"type":"text","value":". Using the non-minified CDN link I got a load time of 0.25 seconds. Using the minified version I got a markedly improved load time of 0.08 seconds. Depending on what your website project is, there are a few ways to automatically minify code. If it is a ","position":{"start":{"line":34,"column":130,"offset":3449},"end":{"line":34,"column":384,"offset":3703}}},{"type":"element","tagName":"a","properties":{"href":"https://guide.meteor.com/build-tool.html"},"children":[{"type":"text","value":"Meteor app","position":{"start":{"line":34,"column":385,"offset":3704},"end":{"line":34,"column":395,"offset":3714}}}],"position":{"start":{"line":34,"column":384,"offset":3703},"end":{"line":34,"column":438,"offset":3757}}},{"type":"text","value":" it will be done automatically, using ","position":{"start":{"line":34,"column":438,"offset":3757},"end":{"line":34,"column":476,"offset":3795}}},{"type":"element","tagName":"a","properties":{"href":"https://webpack.js.org/guides/production/"},"children":[{"type":"text","value":"Webpack ","position":{"start":{"line":34,"column":477,"offset":3796},"end":{"line":34,"column":485,"offset":3804}}}],"position":{"start":{"line":34,"column":476,"offset":3795},"end":{"line":34,"column":529,"offset":3848}}},{"type":"text","value":"will also allow you to do this. Otherwise there are some online tools like ","position":{"start":{"line":34,"column":529,"offset":3848},"end":{"line":34,"column":604,"offset":3923}}},{"type":"element","tagName":"a","properties":{"href":"https://jscompress.com/"},"children":[{"type":"text","value":"JSCompress ","position":{"start":{"line":34,"column":605,"offset":3924},"end":{"line":34,"column":616,"offset":3935}}}],"position":{"start":{"line":34,"column":604,"offset":3923},"end":{"line":34,"column":642,"offset":3961}}},{"type":"text","value":"or ","position":{"start":{"line":34,"column":642,"offset":3961},"end":{"line":34,"column":645,"offset":3964}}},{"type":"element","tagName":"a","properties":{"href":"https://cssminifier.com/"},"children":[{"type":"text","value":"CSSMinifier ","position":{"start":{"line":34,"column":646,"offset":3965},"end":{"line":34,"column":658,"offset":3977}}}],"position":{"start":{"line":34,"column":645,"offset":3964},"end":{"line":34,"column":685,"offset":4004}}},{"type":"text","value":"that you can upload your code to.","position":{"start":{"line":34,"column":685,"offset":4004},"end":{"line":34,"column":718,"offset":4037}}}],"position":{"start":{"line":34,"column":1,"offset":3320},"end":{"line":34,"column":718,"offset":4037}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Design Versus Performance","position":{"start":{"line":36,"column":5,"offset":4043},"end":{"line":36,"column":30,"offset":4068}}}],"position":{"start":{"line":36,"column":1,"offset":4039},"end":{"line":36,"column":30,"offset":4068}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Whilst design is undoubtedly a major aspect to a website’s overall success, both developers and designers must work together to compromise and make a mutually beneficial trade-off between design and performance. The classic example is fonts. Take the two screenshots of a simple website below.","position":{"start":{"line":38,"column":1,"offset":4070},"end":{"line":38,"column":294,"offset":4363}}}],"position":{"start":{"line":38,"column":1,"offset":4070},"end":{"line":38,"column":294,"offset":4363}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/patricoferris/image/upload/v1532780050/pf2018/blogposts/28-07-2018/Helvetica.png","alt":"The example website using Helvetica Font (commonly found on many computers) — check [this](https://css-tricks.com/snippets/css/system-font-stack/) link for common system fonts"},"children":[],"position":{"start":{"line":40,"column":1,"offset":4365},"end":{"line":40,"column":288,"offset":4652}}},{"type":"text","value":"\n","position":{"start":{"line":40,"column":288,"offset":4652},"end":{"line":41,"column":1,"offset":4653}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The example website using Helvetica Font (commonly found on many computers) — check ","position":{"start":{"line":41,"column":2,"offset":4654},"end":{"line":41,"column":86,"offset":4738}}},{"type":"element","tagName":"a","properties":{"href":"https://css-tricks.com/snippets/css/system-font-stack/"},"children":[{"type":"text","value":"this","position":{"start":{"line":41,"column":87,"offset":4739},"end":{"line":41,"column":91,"offset":4743}}}],"position":{"start":{"line":41,"column":86,"offset":4738},"end":{"line":41,"column":148,"offset":4800}}},{"type":"text","value":" link for common system fonts","position":{"start":{"line":41,"column":148,"offset":4800},"end":{"line":41,"column":177,"offset":4829}}}],"position":{"start":{"line":41,"column":1,"offset":4653},"end":{"line":41,"column":178,"offset":4830}}}],"position":{"start":{"line":40,"column":1,"offset":4365},"end":{"line":41,"column":178,"offset":4830}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://cdn-images-1.medium.com/max/5760/1*8ciuJNBdqMhlLSaOpNUXow.png","alt":"The example website using Roboto Font (designed by Google and linked from [Google Fonts](https://fonts.google.com/?selection.family=Roboto))"},"children":[],"position":{"start":{"line":43,"column":1,"offset":4832},"end":{"line":43,"column":215,"offset":5046}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The example website using Roboto Font (designed by Google and linked from ","position":{"start":{"line":43,"column":216,"offset":5047},"end":{"line":43,"column":290,"offset":5121}}},{"type":"element","tagName":"a","properties":{"href":"https://fonts.google.com/?selection.family=Roboto"},"children":[{"type":"text","value":"Google Fonts","position":{"start":{"line":43,"column":291,"offset":5122},"end":{"line":43,"column":303,"offset":5134}}}],"position":{"start":{"line":43,"column":290,"offset":5121},"end":{"line":43,"column":355,"offset":5186}}},{"type":"text","value":")","position":{"start":{"line":43,"column":355,"offset":5186},"end":{"line":43,"column":356,"offset":5187}}}],"position":{"start":{"line":43,"column":215,"offset":5046},"end":{"line":43,"column":357,"offset":5188}}}],"position":{"start":{"line":43,"column":1,"offset":4832},"end":{"line":43,"column":357,"offset":5188}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Before critiquing my questionable design skills take a moment to appreciate that these two fonts are very similar — yet the loading time for a website for the Roboto font was 0.22 seconds as compared with 0.17 for Helvetica. Whilst not that significant, using lots of custom fonts will slow down your website, although using Google Fonts’ API will help keep your website optimised. As an over-the-top example, linking 20 different fonts from the Google API increased the load time to 0.87 seconds.","position":{"start":{"line":45,"column":1,"offset":5190},"end":{"line":45,"column":498,"offset":5687}}}],"position":{"start":{"line":45,"column":1,"offset":5190},"end":{"line":45,"column":498,"offset":5687}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Inlining your JavaScript and CSS","position":{"start":{"line":47,"column":5,"offset":5693},"end":{"line":47,"column":37,"offset":5725}}}],"position":{"start":{"line":47,"column":1,"offset":5689},"end":{"line":47,"column":37,"offset":5725}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For each individual document or component of your website, when the parser reaches the script tag or link tag it sends and HTTP request for that document and if not stated differently, these will be blocking actions. What this means is your machine is parsing the HTML document getting the words to display in your browser but if it hits the script tag with the attribute src='js/main.js' for example, it will block the parsing and load in that file. This is where as a developer you need to be clever about where in the document you place things.","position":{"start":{"line":49,"column":1,"offset":5727},"end":{"line":49,"column":548,"offset":6274}}}],"position":{"start":{"line":49,"column":1,"offset":5727},"end":{"line":49,"column":548,"offset":6274}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Whilst it may not ultimately affect the loading time of your website, it can affect the order in which things are loaded. Again we’ll be using the un-minified p5.js library to simulate a large JavaScript file and load it in different places to see how it affects our user experience.","position":{"start":{"line":51,"column":1,"offset":6276},"end":{"line":51,"column":284,"offset":6559}}}],"position":{"start":{"line":51,"column":1,"offset":6276},"end":{"line":51,"column":284,"offset":6559}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://cdn-images-1.medium.com/max/2780/1*h_3GogfkaahcXCO9a43CPA.gif","alt":"Refreshing website with the script tag inserted at the bottom of the body tag"},"children":[],"position":{"start":{"line":53,"column":1,"offset":6561},"end":{"line":53,"column":152,"offset":6712}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Refreshing website with the script tag inserted at the bottom of the body tag","position":{"start":{"line":53,"column":153,"offset":6713},"end":{"line":53,"column":230,"offset":6790}}}],"position":{"start":{"line":53,"column":152,"offset":6712},"end":{"line":53,"column":231,"offset":6791}}}],"position":{"start":{"line":53,"column":1,"offset":6561},"end":{"line":53,"column":231,"offset":6791}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://cdn-images-1.medium.com/max/2780/1*xLOq5r4erQAwb4Au_hB-Ww.gif","alt":"Refreshing website with the script tag inserted at the top of the body tag"},"children":[],"position":{"start":{"line":55,"column":1,"offset":6793},"end":{"line":55,"column":149,"offset":6941}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Refreshing website with the script tag inserted at the top of the body tag","position":{"start":{"line":55,"column":150,"offset":6942},"end":{"line":55,"column":224,"offset":7016}}}],"position":{"start":{"line":55,"column":149,"offset":6941},"end":{"line":55,"column":225,"offset":7017}}}],"position":{"start":{"line":55,"column":1,"offset":6793},"end":{"line":55,"column":225,"offset":7017}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Whilst the load times were similar for both cases — the user experience is far better by placing the script at the body tag allowing the HTML to be parsed before the JavaScript giving the user the website content immediately!","position":{"start":{"line":57,"column":1,"offset":7019},"end":{"line":57,"column":226,"offset":7244}}}],"position":{"start":{"line":57,"column":1,"offset":7019},"end":{"line":57,"column":226,"offset":7244}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In the same vein CSS can also be render-blocking especially because more often than not it is linked in the head tag of your HTML document before the body. But if we want our user to see the content in the quickest time we don’t want to be loading CSS for the footer of our document which the user won’t see until they’ve scrolled to the bottom. In fact, we don’t want to load any CSS in that the user can’t immediately see when the page first loads on their device.","position":{"start":{"line":59,"column":1,"offset":7246},"end":{"line":59,"column":467,"offset":7712}}}],"position":{"start":{"line":59,"column":1,"offset":7246},"end":{"line":59,"column":467,"offset":7712}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The CSS that you need is often called the ","position":{"start":{"line":61,"column":1,"offset":7714},"end":{"line":61,"column":43,"offset":7756}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Critical CSS","position":{"start":{"line":61,"column":44,"offset":7757},"end":{"line":61,"column":56,"offset":7769}}}],"position":{"start":{"line":61,"column":43,"offset":7756},"end":{"line":61,"column":57,"offset":7770}}},{"type":"text","value":". Finding it for yourself would be a headache. It will be different for different devices, meaning you would have to check manually for all possible devices. Lucky for us we have (if you’re using ","position":{"start":{"line":61,"column":57,"offset":7770},"end":{"line":61,"column":253,"offset":7966}}},{"type":"element","tagName":"a","properties":{"href":"https://nodejs.org/en/"},"children":[{"type":"text","value":"Node.js","position":{"start":{"line":61,"column":254,"offset":7967},"end":{"line":61,"column":261,"offset":7974}}}],"position":{"start":{"line":61,"column":253,"offset":7966},"end":{"line":61,"column":286,"offset":7999}}},{"type":"text","value":") ","position":{"start":{"line":61,"column":286,"offset":7999},"end":{"line":61,"column":288,"offset":8001}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/addyosmani/critical"},"children":[{"type":"text","value":"Critical","position":{"start":{"line":61,"column":289,"offset":8002},"end":{"line":61,"column":297,"offset":8010}}}],"position":{"start":{"line":61,"column":288,"offset":8001},"end":{"line":61,"column":338,"offset":8051}}},{"type":"text","value":". This helpful package does the CSS inlining for us and all we do is add some code to a Javascript file. Here’s a code snippet from the Github page.","position":{"start":{"line":61,"column":338,"offset":8051},"end":{"line":61,"column":486,"offset":8199}}}],"position":{"start":{"line":61,"column":1,"offset":7714},"end":{"line":61,"column":486,"offset":8199}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> critical <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'critical'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncritical<span class=\"token punctuation\">.</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    base<span class=\"token punctuation\">:</span> <span class=\"token string\">'test/'</span><span class=\"token punctuation\">,</span>\n    src<span class=\"token punctuation\">:</span> <span class=\"token string\">'index.html'</span><span class=\"token punctuation\">,</span>\n    dest<span class=\"token punctuation\">:</span> <span class=\"token string\">'styles/main.css'</span><span class=\"token punctuation\">,</span>\n    dimensions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n        height<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n        width<span class=\"token punctuation\">:</span> <span class=\"token number\">500</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        height<span class=\"token punctuation\">:</span> <span class=\"token number\">900</span><span class=\"token punctuation\">,</span>\n        width<span class=\"token punctuation\">:</span> <span class=\"token number\">1200</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","position":{"start":{"line":63,"column":1,"offset":8201},"end":{"line":78,"column":4,"offset":8466}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Using the generate function, we supply it with a JavaScript object with some values defined. base is where we’re going to save our src and dest (our project folder usually). What’s great is now we just supply an array of dimensions and the code will compute the critical CSS for each and inline that code into our head tag.","position":{"start":{"line":80,"column":1,"offset":8468},"end":{"line":80,"column":324,"offset":8791}}}],"position":{"start":{"line":80,"column":1,"offset":8468},"end":{"line":80,"column":324,"offset":8791}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Async and Defer","position":{"start":{"line":82,"column":5,"offset":8797},"end":{"line":82,"column":20,"offset":8812}}}],"position":{"start":{"line":82,"column":1,"offset":8793},"end":{"line":82,"column":20,"offset":8812}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Again, we come back to this idea of render-blocking and how best we should implement this for our website. When you have a plain script tag in your HTML it blocks the HTML from loading whilst the JavaScript loads ","position":{"start":{"line":84,"column":1,"offset":8814},"end":{"line":84,"column":214,"offset":9027}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"and","position":{"start":{"line":84,"column":216,"offset":9029},"end":{"line":84,"column":219,"offset":9032}}}],"position":{"start":{"line":84,"column":214,"offset":9027},"end":{"line":84,"column":221,"offset":9034}}},{"type":"text","value":" runs. Async and defer are simple attributes that you can add to your script tags that change the way your JavaScript will be loaded.","position":{"start":{"line":84,"column":221,"offset":9034},"end":{"line":84,"column":354,"offset":9167}}}],"position":{"start":{"line":84,"column":1,"offset":8814},"end":{"line":84,"column":354,"offset":9167}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Defer essentially “defers” execution of the script until after the HTML has been parsed. A major advantage of this is that you no longer need some $(document).ready() jQuery-style function to make sure the body was loaded before you could manipulate it, which could cut out some of the dependencies on libraries like jQuery which helps reduce load-time.","position":{"start":{"line":86,"column":1,"offset":9169},"end":{"line":86,"column":354,"offset":9522}}}],"position":{"start":{"line":86,"column":1,"offset":9169},"end":{"line":86,"column":354,"offset":9522}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Async is, unsurprisingly, the asynchronous loading of JavaScript files. What does this mean? Your HTML will continue to be parsed whilst the file is loaded and then whenever its ready the file will be executed. This helps improving user experience whilst viewing your website. Imagine for example you had a JavaScript file for doing some cool graphics. You want the words around this graphic to be parsed until your graphic is ready to be executed. As soon as it is ready, it is executed and we get a more seamless loading of our webpage without missing pieces.","position":{"start":{"line":88,"column":1,"offset":9524},"end":{"line":88,"column":562,"offset":10085}}}],"position":{"start":{"line":88,"column":1,"offset":9524},"end":{"line":88,"column":562,"offset":10085}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Check this ","position":{"start":{"line":90,"column":1,"offset":10087},"end":{"line":90,"column":12,"offset":10098}}},{"type":"element","tagName":"a","properties":{"href":"http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html"},"children":[{"type":"text","value":"website","position":{"start":{"line":90,"column":13,"offset":10099},"end":{"line":90,"column":20,"offset":10106}}}],"position":{"start":{"line":90,"column":12,"offset":10098},"end":{"line":90,"column":94,"offset":10180}}},{"type":"text","value":" for a really intuitive, graphical representation of this.","position":{"start":{"line":90,"column":94,"offset":10180},"end":{"line":90,"column":152,"offset":10238}}}],"position":{"start":{"line":90,"column":1,"offset":10087},"end":{"line":90,"column":152,"offset":10238}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Image Optimisation and Media Queries","position":{"start":{"line":92,"column":5,"offset":10244},"end":{"line":92,"column":41,"offset":10280}}}],"position":{"start":{"line":92,"column":1,"offset":10240},"end":{"line":92,"column":41,"offset":10280}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The cornerstone of all website performance optimisation is the simple rule that, the less data you send to the client, the quicker and better your website will perform. With the plethora of devices on the market capable of viewing websites, there is a growing trend to optimise your website based on the device it is being viewed on.","position":{"start":{"line":94,"column":1,"offset":10282},"end":{"line":94,"column":334,"offset":10615}}}],"position":{"start":{"line":94,"column":1,"offset":10282},"end":{"line":94,"column":334,"offset":10615}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Media queries are a fairly new tool added to CSS3. With more and more content being consumed using mobile-devices there has been a shift in design thinking towards mobile first. Using media queries you can then add stylings for larger screen sizes.","position":{"start":{"line":96,"column":1,"offset":10617},"end":{"line":96,"column":249,"offset":10865}}}],"position":{"start":{"line":96,"column":1,"offset":10617},"end":{"line":96,"column":249,"offset":10865}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/* Some CSS for screen sizes bigger than 600px but smaller than 992px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/*  Some CSS for screen sizes bigger than 992px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">orientation</span><span class=\"token punctuation\">:</span> landscape<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* Some CSS for landscape-oriented devices */</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":98,"column":1,"offset":10867},"end":{"line":110,"column":4,"offset":11197}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The @media tag starts a new CSS rule, whilst the only keyword stops older browsers that don’t support media queries from using it. The screen keyword applies the rules to screens rather than prints. After that you add the media-feature which supports the and , or and not keywords so you can get as specific as you want. When you’re loading your image you can write code like:","position":{"start":{"line":112,"column":1,"offset":11199},"end":{"line":112,"column":377,"offset":11575}}}],"position":{"start":{"line":112,"column":1,"offset":11199},"end":{"line":112,"column":377,"offset":11575}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-small.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-big.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":114,"column":1,"offset":11577},"end":{"line":122,"column":4,"offset":11796}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This isn’t necessarily the best or optimal approach for image optimisation. Luckily we have other options. ","position":{"start":{"line":124,"column":1,"offset":11798},"end":{"line":124,"column":108,"offset":11905}}},{"type":"element","tagName":"a","properties":{"href":"https://www.imgix.com/"},"children":[{"type":"text","value":"Imgix","position":{"start":{"line":124,"column":109,"offset":11906},"end":{"line":124,"column":114,"offset":11911}}}],"position":{"start":{"line":124,"column":108,"offset":11905},"end":{"line":124,"column":139,"offset":11936}}},{"type":"text","value":" and ","position":{"start":{"line":124,"column":139,"offset":11936},"end":{"line":124,"column":144,"offset":11941}}},{"type":"element","tagName":"a","properties":{"href":"https://cloudinary.com/"},"children":[{"type":"text","value":"Cloudinary","position":{"start":{"line":124,"column":145,"offset":11942},"end":{"line":124,"column":155,"offset":11952}}}],"position":{"start":{"line":124,"column":144,"offset":11941},"end":{"line":124,"column":181,"offset":11978}}},{"type":"text","value":" are two ways you can help optimise your site for the right device. Imgix is a Content Delivery Network (CDN) for images with a lot of cool features. A CDN simply takes your files and spreads them across the globe so that someone in a different country doesn’t have to wait for your files on your server to make it all the way to them. This ","position":{"start":{"line":124,"column":181,"offset":11978},"end":{"line":124,"column":522,"offset":12319}}},{"type":"element","tagName":"a","properties":{"href":"https://docs.imgix.com/tutorials/responsive-images-srcset-imgix"},"children":[{"type":"text","value":"tutorial","position":{"start":{"line":124,"column":523,"offset":12320},"end":{"line":124,"column":531,"offset":12328}}}],"position":{"start":{"line":124,"column":522,"offset":12319},"end":{"line":124,"column":597,"offset":12394}}},{"type":"text","value":" goes through how to use Imgix for different device pixel ratios. Cloudinary is a similar service, and their ","position":{"start":{"line":124,"column":597,"offset":12394},"end":{"line":124,"column":706,"offset":12503}}},{"type":"element","tagName":"a","properties":{"href":"https://cloudinary.com/documentation/image_optimization"},"children":[{"type":"text","value":"tutorial ","position":{"start":{"line":124,"column":707,"offset":12504},"end":{"line":124,"column":716,"offset":12513}}}],"position":{"start":{"line":124,"column":706,"offset":12503},"end":{"line":124,"column":774,"offset":12571}}},{"type":"text","value":"will take you through the importance of optimisation and how to achieve it will their incredible services. Below is a small example showing how easy it is to use Cloudinary straight in the HTML markup.","position":{"start":{"line":124,"column":774,"offset":12571},"end":{"line":124,"column":975,"offset":12772}}}],"position":{"start":{"line":124,"column":1,"offset":11798},"end":{"line":124,"column":975,"offset":12772}}},{"type":"text","value":"\n"},{"type":"raw","value":"<iframe height='400' scrolling='no' title='Cloudinary Example' src='//codepen.io/patricoferris/embed/ejgVJN/?height=400&theme-id=0&default-tab=html,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/ejgVJN/'>Cloudinary Example</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":126,"column":1,"offset":12774},"end":{"line":127,"column":10,"offset":13258}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As a last point on image optimisation, the format you use can have a large impact on file size. Some files contain lots of metadata which you don’t want to be serving to your client — ","position":{"start":{"line":129,"column":1,"offset":13260},"end":{"line":129,"column":185,"offset":13444}}},{"type":"element","tagName":"a","properties":{"href":"https://www.sno.phy.queensu.ca/~phil/exiftool/"},"children":[{"type":"text","value":"ExifTool","position":{"start":{"line":129,"column":186,"offset":13445},"end":{"line":129,"column":194,"offset":13453}}}],"position":{"start":{"line":129,"column":185,"offset":13444},"end":{"line":129,"column":243,"offset":13502}}},{"type":"text","value":" is a commonly used command-line application that can help you trim down those files sizes. On top of this, Scalable Vector Graphics (SVG) are a web-standard developed by W3C that offers XML-based vector graphics. This means they have infinite resolution unlike PNG or JPG files. It also makes them highly versatile, easily editable and can even be animated. At the end of the day SVGs are just code and so the file sizes tend to be small. For more reasons to use them, check out this ","position":{"start":{"line":129,"column":243,"offset":13502},"end":{"line":129,"column":728,"offset":13987}}},{"type":"element","tagName":"a","properties":{"href":"https://watb.co.uk/5-reasons-you-should-be-using-svgs-over-pngs/"},"children":[{"type":"text","value":"article","position":{"start":{"line":129,"column":729,"offset":13988},"end":{"line":129,"column":736,"offset":13995}}}],"position":{"start":{"line":129,"column":728,"offset":13987},"end":{"line":129,"column":803,"offset":14062}}},{"type":"text","value":".","position":{"start":{"line":129,"column":803,"offset":14062},"end":{"line":129,"column":804,"offset":14063}}}],"position":{"start":{"line":129,"column":1,"offset":13260},"end":{"line":129,"column":804,"offset":14063}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":131,"column":5,"offset":14069},"end":{"line":131,"column":15,"offset":14079}}}],"position":{"start":{"line":131,"column":1,"offset":14065},"end":{"line":131,"column":15,"offset":14079}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We’ve only scratched the surface of what’s possible for website optimisation. There are many tools you can use to help you stream-line this process like ","position":{"start":{"line":133,"column":1,"offset":14081},"end":{"line":133,"column":154,"offset":14234}}},{"type":"element","tagName":"a","properties":{"href":"https://webpack.js.org/"},"children":[{"type":"text","value":"Webpack","position":{"start":{"line":133,"column":155,"offset":14235},"end":{"line":133,"column":162,"offset":14242}}}],"position":{"start":{"line":133,"column":154,"offset":14234},"end":{"line":133,"column":188,"offset":14268}}},{"type":"text","value":" for bundling or static-site generators like ","position":{"start":{"line":133,"column":188,"offset":14268},"end":{"line":133,"column":233,"offset":14313}}},{"type":"element","tagName":"a","properties":{"href":"https://www.gatsbyjs.org/"},"children":[{"type":"text","value":"Gatsby","position":{"start":{"line":133,"column":234,"offset":14314},"end":{"line":133,"column":240,"offset":14320}}}],"position":{"start":{"line":133,"column":233,"offset":14313},"end":{"line":133,"column":268,"offset":14348}}},{"type":"text","value":". ","position":{"start":{"line":133,"column":268,"offset":14348},"end":{"line":133,"column":270,"offset":14350}}},{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking"},"children":[{"type":"text","value":"Tree shaking","position":{"start":{"line":133,"column":271,"offset":14351},"end":{"line":133,"column":283,"offset":14363}}}],"position":{"start":{"line":133,"column":270,"offset":14350},"end":{"line":133,"column":348,"offset":14428}}},{"type":"text","value":" is another commonly used technique to remove excess, unused modules lying around your website.","position":{"start":{"line":133,"column":348,"offset":14428},"end":{"line":133,"column":443,"offset":14523}}}],"position":{"start":{"line":133,"column":1,"offset":14081},"end":{"line":133,"column":443,"offset":14523}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Hopefully this article has touched on some useful techniques you can use on your next site to help improve its performance. Happy coding!","position":{"start":{"line":135,"column":1,"offset":14525},"end":{"line":135,"column":138,"offset":14662}}}],"position":{"start":{"line":135,"column":1,"offset":14525},"end":{"line":135,"column":138,"offset":14662}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A big thank you to ","position":{"start":{"line":137,"column":1,"offset":14664},"end":{"line":137,"column":20,"offset":14683}}},{"type":"element","tagName":"a","properties":{"href":"https://medium.com/@pinpickle"},"children":[{"type":"text","value":"Christian Silver","position":{"start":{"line":137,"column":21,"offset":14684},"end":{"line":137,"column":37,"offset":14700}}}],"position":{"start":{"line":137,"column":20,"offset":14683},"end":{"line":137,"column":69,"offset":14732}}},{"type":"text","value":" and ","position":{"start":{"line":137,"column":69,"offset":14732},"end":{"line":137,"column":74,"offset":14737}}},{"type":"element","tagName":"a","properties":{"href":"https://medium.com/@charliecrisp249"},"children":[{"type":"text","value":"Charlie Crisp","position":{"start":{"line":137,"column":75,"offset":14738},"end":{"line":137,"column":88,"offset":14751}}}],"position":{"start":{"line":137,"column":74,"offset":14737},"end":{"line":137,"column":126,"offset":14789}}},{"type":"text","value":" for editing this post and providing extremely useful advice and extra content to make it even better.","position":{"start":{"line":137,"column":126,"offset":14789},"end":{"line":137,"column":228,"offset":14891}}}],"position":{"start":{"line":137,"column":1,"offset":14664},"end":{"line":137,"column":228,"offset":14891}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":138,"column":1,"offset":14892}}}},{"id":"transformer-remark-markdown-html-cdf2177f3ce165a4ad178d9595442710-gatsby-remark-imagesgatsby-remark-prismjs-","value":"<p><img src=\"https://res.cloudinary.com/patricoferris/image/upload/v1532781201/pf2018/blogposts/28-07-2018/website_optimisation_2.png\" alt=\"Optimising your Website\">\nInspired by a <a href=\"https://syntax.fm/\">Syntax</a> podcast, I got really interested in website optimisation. It can often be an overlooked aspect in web development with more focus on design and functionality, I realised my number one priority whenever I visited a website is load speed. My attention is a website’s number one goal, lose it and they lose all potential ad revenue or possibility to give me whatever information I was looking for. <a href=\"https://developers.google.com/web/fundamentals/performance/get-started/\">Many seem to agree. 53% of users abandon websites that take more than 3 seconds to load</a>. No amount of fancy graphics or parallax scrolling that appears five seconds after someone’s clicked will hide the slow loading times.</p>\n<p>The aim of this article is to give a broad overview of the concepts and ideas behind optimising your website, experienced developers are likely already using things like Webpack (a module bundler) among other tools to speed-up their sites.</p>\n<p>For testing load-times I will be using the <a href=\"https://chrome.google.com/webstore/detail/page-load-time/fploionmjgeclbkemipmkogoaohcdbig?hl=en\">Page Load Time </a>Chrome extension. There are a few ways to measure website loading time including: <a href=\"https://developers.google.com/web/tools/chrome-user-experience-report/\">first paint, first meaning paint, DOMContentLoaded</a> etc. For a more detailed look into what this timer measures, check out the Github repository below.\n<a href=\"https://github.com/alex-vv/chrome-load-timer\"><strong>alex-vv/chrome-load-timer</strong>\n<em>chrome-load-timer - Google Chrome extension to measure page load time and display it in the toolbar</em>github.com</a></p>\n<h3><strong>Use Minified Stylesheets and Scripts</strong></h3>\n<p>You would be amazed at how much performance can be gained by this simple trick. What is a minified document? When we write code it is never our job to make it optimised for the computer, instead our golden rule is to make it readable to humans. This improves readability, cuts down on debug time and makes it easier to maintain. However, to achieve this we often add extra spacing which costs us precious space. Minifying the code is trimming all this fat from what we’ve written to have code that produces the same result but is far more difficult to read and maintain. This is okay though, because a computer has no problem deciphering it. Take the following code for example.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Notice how, wherever possible, our line-breaks and spaces are gone. On top of that, the code in the for-loop is only one line so there’s no need for the curly braces which extends our code over three lines when it can be done in one. Does this make a difference?</p>\n<p>I tried it out on simple website that just had one script tag being loaded in for the graphics library <a href=\"https://p5js.org/\">p5.js</a>. Using the non-minified CDN link I got a load time of 0.25 seconds. Using the minified version I got a markedly improved load time of 0.08 seconds. Depending on what your website project is, there are a few ways to automatically minify code. If it is a <a href=\"https://guide.meteor.com/build-tool.html\">Meteor app</a> it will be done automatically, using <a href=\"https://webpack.js.org/guides/production/\">Webpack </a>will also allow you to do this. Otherwise there are some online tools like <a href=\"https://jscompress.com/\">JSCompress </a>or <a href=\"https://cssminifier.com/\">CSSMinifier </a>that you can upload your code to.</p>\n<h3>Design Versus Performance</h3>\n<p>Whilst design is undoubtedly a major aspect to a website’s overall success, both developers and designers must work together to compromise and make a mutually beneficial trade-off between design and performance. The classic example is fonts. Take the two screenshots of a simple website below.</p>\n<p><img src=\"https://res.cloudinary.com/patricoferris/image/upload/v1532780050/pf2018/blogposts/28-07-2018/Helvetica.png\" alt=\"The example website using Helvetica Font (commonly found on many computers) — check [this](https://css-tricks.com/snippets/css/system-font-stack/) link for common system fonts\">\n<em>The example website using Helvetica Font (commonly found on many computers) — check <a href=\"https://css-tricks.com/snippets/css/system-font-stack/\">this</a> link for common system fonts</em></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/5760/1*8ciuJNBdqMhlLSaOpNUXow.png\" alt=\"The example website using Roboto Font (designed by Google and linked from [Google Fonts](https://fonts.google.com/?selection.family=Roboto))\"><em>The example website using Roboto Font (designed by Google and linked from <a href=\"https://fonts.google.com/?selection.family=Roboto\">Google Fonts</a>)</em></p>\n<p>Before critiquing my questionable design skills take a moment to appreciate that these two fonts are very similar — yet the loading time for a website for the Roboto font was 0.22 seconds as compared with 0.17 for Helvetica. Whilst not that significant, using lots of custom fonts will slow down your website, although using Google Fonts’ API will help keep your website optimised. As an over-the-top example, linking 20 different fonts from the Google API increased the load time to 0.87 seconds.</p>\n<h3>Inlining your JavaScript and CSS</h3>\n<p>For each individual document or component of your website, when the parser reaches the script tag or link tag it sends and HTTP request for that document and if not stated differently, these will be blocking actions. What this means is your machine is parsing the HTML document getting the words to display in your browser but if it hits the script tag with the attribute src='js/main.js' for example, it will block the parsing and load in that file. This is where as a developer you need to be clever about where in the document you place things.</p>\n<p>Whilst it may not ultimately affect the loading time of your website, it can affect the order in which things are loaded. Again we’ll be using the un-minified p5.js library to simulate a large JavaScript file and load it in different places to see how it affects our user experience.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2780/1*h_3GogfkaahcXCO9a43CPA.gif\" alt=\"Refreshing website with the script tag inserted at the bottom of the body tag\"><em>Refreshing website with the script tag inserted at the bottom of the body tag</em></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2780/1*xLOq5r4erQAwb4Au_hB-Ww.gif\" alt=\"Refreshing website with the script tag inserted at the top of the body tag\"><em>Refreshing website with the script tag inserted at the top of the body tag</em></p>\n<p>Whilst the load times were similar for both cases — the user experience is far better by placing the script at the body tag allowing the HTML to be parsed before the JavaScript giving the user the website content immediately!</p>\n<p>In the same vein CSS can also be render-blocking especially because more often than not it is linked in the head tag of your HTML document before the body. But if we want our user to see the content in the quickest time we don’t want to be loading CSS for the footer of our document which the user won’t see until they’ve scrolled to the bottom. In fact, we don’t want to load any CSS in that the user can’t immediately see when the page first loads on their device.</p>\n<p>The CSS that you need is often called the <em>Critical CSS</em>. Finding it for yourself would be a headache. It will be different for different devices, meaning you would have to check manually for all possible devices. Lucky for us we have (if you’re using <a href=\"https://nodejs.org/en/\">Node.js</a>) <a href=\"https://github.com/addyosmani/critical\">Critical</a>. This helpful package does the CSS inlining for us and all we do is add some code to a Javascript file. Here’s a code snippet from the Github page.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> critical <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'critical'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncritical<span class=\"token punctuation\">.</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    base<span class=\"token punctuation\">:</span> <span class=\"token string\">'test/'</span><span class=\"token punctuation\">,</span>\n    src<span class=\"token punctuation\">:</span> <span class=\"token string\">'index.html'</span><span class=\"token punctuation\">,</span>\n    dest<span class=\"token punctuation\">:</span> <span class=\"token string\">'styles/main.css'</span><span class=\"token punctuation\">,</span>\n    dimensions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n        height<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n        width<span class=\"token punctuation\">:</span> <span class=\"token number\">500</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        height<span class=\"token punctuation\">:</span> <span class=\"token number\">900</span><span class=\"token punctuation\">,</span>\n        width<span class=\"token punctuation\">:</span> <span class=\"token number\">1200</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Using the generate function, we supply it with a JavaScript object with some values defined. base is where we’re going to save our src and dest (our project folder usually). What’s great is now we just supply an array of dimensions and the code will compute the critical CSS for each and inline that code into our head tag.</p>\n<h3>Async and Defer</h3>\n<p>Again, we come back to this idea of render-blocking and how best we should implement this for our website. When you have a plain script tag in your HTML it blocks the HTML from loading whilst the JavaScript loads <strong>and</strong> runs. Async and defer are simple attributes that you can add to your script tags that change the way your JavaScript will be loaded.</p>\n<p>Defer essentially “defers” execution of the script until after the HTML has been parsed. A major advantage of this is that you no longer need some $(document).ready() jQuery-style function to make sure the body was loaded before you could manipulate it, which could cut out some of the dependencies on libraries like jQuery which helps reduce load-time.</p>\n<p>Async is, unsurprisingly, the asynchronous loading of JavaScript files. What does this mean? Your HTML will continue to be parsed whilst the file is loaded and then whenever its ready the file will be executed. This helps improving user experience whilst viewing your website. Imagine for example you had a JavaScript file for doing some cool graphics. You want the words around this graphic to be parsed until your graphic is ready to be executed. As soon as it is ready, it is executed and we get a more seamless loading of our webpage without missing pieces.</p>\n<p>Check this <a href=\"http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html\">website</a> for a really intuitive, graphical representation of this.</p>\n<h3>Image Optimisation and Media Queries</h3>\n<p>The cornerstone of all website performance optimisation is the simple rule that, the less data you send to the client, the quicker and better your website will perform. With the plethora of devices on the market capable of viewing websites, there is a growing trend to optimise your website based on the device it is being viewed on.</p>\n<p>Media queries are a fairly new tool added to CSS3. With more and more content being consumed using mobile-devices there has been a shift in design thinking towards mobile first. Using media queries you can then add stylings for larger screen sizes.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/* Some CSS for screen sizes bigger than 600px but smaller than 992px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/*  Some CSS for screen sizes bigger than 992px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">orientation</span><span class=\"token punctuation\">:</span> landscape<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* Some CSS for landscape-oriented devices */</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>The @media tag starts a new CSS rule, whilst the only keyword stops older browsers that don’t support media queries from using it. The screen keyword applies the rules to screens rather than prints. After that you add the media-feature which supports the and , or and not keywords so you can get as specific as you want. When you’re loading your image you can write code like:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-small.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-big.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>This isn’t necessarily the best or optimal approach for image optimisation. Luckily we have other options. <a href=\"https://www.imgix.com/\">Imgix</a> and <a href=\"https://cloudinary.com/\">Cloudinary</a> are two ways you can help optimise your site for the right device. Imgix is a Content Delivery Network (CDN) for images with a lot of cool features. A CDN simply takes your files and spreads them across the globe so that someone in a different country doesn’t have to wait for your files on your server to make it all the way to them. This <a href=\"https://docs.imgix.com/tutorials/responsive-images-srcset-imgix\">tutorial</a> goes through how to use Imgix for different device pixel ratios. Cloudinary is a similar service, and their <a href=\"https://cloudinary.com/documentation/image_optimization\">tutorial </a>will take you through the importance of optimisation and how to achieve it will their incredible services. Below is a small example showing how easy it is to use Cloudinary straight in the HTML markup.</p>\n<iframe height='400' scrolling='no' title='Cloudinary Example' src='//codepen.io/patricoferris/embed/ejgVJN/?height=400&theme-id=0&default-tab=html,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/ejgVJN/'>Cloudinary Example</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>As a last point on image optimisation, the format you use can have a large impact on file size. Some files contain lots of metadata which you don’t want to be serving to your client — <a href=\"https://www.sno.phy.queensu.ca/~phil/exiftool/\">ExifTool</a> is a commonly used command-line application that can help you trim down those files sizes. On top of this, Scalable Vector Graphics (SVG) are a web-standard developed by W3C that offers XML-based vector graphics. This means they have infinite resolution unlike PNG or JPG files. It also makes them highly versatile, easily editable and can even be animated. At the end of the day SVGs are just code and so the file sizes tend to be small. For more reasons to use them, check out this <a href=\"https://watb.co.uk/5-reasons-you-should-be-using-svgs-over-pngs/\">article</a>.</p>\n<h3>Conclusion</h3>\n<p>We’ve only scratched the surface of what’s possible for website optimisation. There are many tools you can use to help you stream-line this process like <a href=\"https://webpack.js.org/\">Webpack</a> for bundling or static-site generators like <a href=\"https://www.gatsbyjs.org/\">Gatsby</a>. <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking\">Tree shaking</a> is another commonly used technique to remove excess, unused modules lying around your website.</p>\n<p>Hopefully this article has touched on some useful techniques you can use on your next site to help improve its performance. Happy coding!</p>\n<p>A big thank you to <a href=\"https://medium.com/@pinpickle\">Christian Silver</a> and <a href=\"https://medium.com/@charliecrisp249\">Charlie Crisp</a> for editing this post and providing extremely useful advice and extra content to make it even better.</p>"},{"id":"transformer-remark-markdown-ast-2309bc1ce3b3986c10591e4e6df33783-gatsby-remark-imagesgatsby-remark-prismjs-","value":{"type":"root","children":[{"type":"yaml","value":"path: '/optimise-your-website'\ntitle: 'Optimising your Website'\nsubtitle: 'Tips and tricks to keep your website lean and fast'\ndate: '2018-07-28'\nimageUrl: 'https://res.cloudinary.com/patricoferris/image/upload/v1532781201/pf2018/blogposts/28-07-2018/website_optimisation_2.png' ","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":7,"column":4,"offset":287},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://res.cloudinary.com/patricoferris/image/upload/v1532781201/pf2018/blogposts/28-07-2018/website_optimisation_2.png","alt":"Optimising your Website","position":{"start":{"line":8,"column":1,"offset":288},"end":{"line":8,"column":149,"offset":436},"indent":[]}},{"type":"text","value":"\nInspired by a ","position":{"start":{"line":8,"column":149,"offset":436},"end":{"line":9,"column":15,"offset":451},"indent":[1]}},{"type":"link","title":null,"url":"https://syntax.fm/","children":[{"type":"text","value":"Syntax","position":{"start":{"line":9,"column":16,"offset":452},"end":{"line":9,"column":22,"offset":458},"indent":[]}}],"position":{"start":{"line":9,"column":15,"offset":451},"end":{"line":9,"column":43,"offset":479},"indent":[]}},{"type":"text","value":" podcast, I got really interested in website optimisation. It can often be an overlooked aspect in web development with more focus on design and functionality, I realised my number one priority whenever I visited a website is load speed. My attention is a website’s number one goal, lose it and they lose all potential ad revenue or possibility to give me whatever information I was looking for. ","position":{"start":{"line":9,"column":43,"offset":479},"end":{"line":9,"column":439,"offset":875},"indent":[]}},{"type":"link","title":null,"url":"https://developers.google.com/web/fundamentals/performance/get-started/","children":[{"type":"text","value":"Many seem to agree. 53% of users abandon websites that take more than 3 seconds to load","position":{"start":{"line":9,"column":440,"offset":876},"end":{"line":9,"column":527,"offset":963},"indent":[]}}],"position":{"start":{"line":9,"column":439,"offset":875},"end":{"line":9,"column":601,"offset":1037},"indent":[]}},{"type":"text","value":". No amount of fancy graphics or parallax scrolling that appears five seconds after someone’s clicked will hide the slow loading times.","position":{"start":{"line":9,"column":601,"offset":1037},"end":{"line":9,"column":736,"offset":1172},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":288},"end":{"line":9,"column":736,"offset":1172},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"The aim of this article is to give a broad overview of the concepts and ideas behind optimising your website, experienced developers are likely already using things like Webpack (a module bundler) among other tools to speed-up their sites.","position":{"start":{"line":11,"column":1,"offset":1174},"end":{"line":11,"column":240,"offset":1413},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":1174},"end":{"line":11,"column":240,"offset":1413},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For testing load-times I will be using the ","position":{"start":{"line":13,"column":1,"offset":1415},"end":{"line":13,"column":44,"offset":1458},"indent":[]}},{"type":"link","title":null,"url":"https://chrome.google.com/webstore/detail/page-load-time/fploionmjgeclbkemipmkogoaohcdbig?hl=en","children":[{"type":"text","value":"Page Load Time ","position":{"start":{"line":13,"column":45,"offset":1459},"end":{"line":13,"column":60,"offset":1474},"indent":[]}}],"position":{"start":{"line":13,"column":44,"offset":1458},"end":{"line":13,"column":158,"offset":1572},"indent":[]}},{"type":"text","value":"Chrome extension. There are a few ways to measure website loading time including: ","position":{"start":{"line":13,"column":158,"offset":1572},"end":{"line":13,"column":240,"offset":1654},"indent":[]}},{"type":"link","title":null,"url":"https://developers.google.com/web/tools/chrome-user-experience-report/","children":[{"type":"text","value":"first paint, first meaning paint, DOMContentLoaded","position":{"start":{"line":13,"column":241,"offset":1655},"end":{"line":13,"column":291,"offset":1705},"indent":[]}}],"position":{"start":{"line":13,"column":240,"offset":1654},"end":{"line":13,"column":364,"offset":1778},"indent":[]}},{"type":"text","value":" etc. For a more detailed look into what this timer measures, check out the Github repository below.\n","position":{"start":{"line":13,"column":364,"offset":1778},"end":{"line":14,"column":1,"offset":1879},"indent":[1]}},{"type":"link","title":null,"url":"https://github.com/alex-vv/chrome-load-timer","children":[{"type":"strong","children":[{"type":"text","value":"alex-vv/chrome-load-timer","position":{"start":{"line":14,"column":4,"offset":1882},"end":{"line":14,"column":29,"offset":1907},"indent":[]}}],"position":{"start":{"line":14,"column":2,"offset":1880},"end":{"line":14,"column":31,"offset":1909},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":14,"column":31,"offset":1909},"end":{"line":15,"column":1,"offset":1910},"indent":[1]}},{"type":"emphasis","children":[{"type":"text","value":"chrome-load-timer - Google Chrome extension to measure page load time and display it in the toolbar","position":{"start":{"line":15,"column":2,"offset":1911},"end":{"line":15,"column":101,"offset":2010},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":1910},"end":{"line":15,"column":102,"offset":2011},"indent":[]}},{"type":"text","value":"github.com","position":{"start":{"line":15,"column":102,"offset":2011},"end":{"line":15,"column":112,"offset":2021},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":1879},"end":{"line":15,"column":159,"offset":2068},"indent":[1]}}],"position":{"start":{"line":13,"column":1,"offset":1415},"end":{"line":15,"column":159,"offset":2068},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"strong","children":[{"type":"text","value":"Use Minified Stylesheets and Scripts","position":{"start":{"line":17,"column":7,"offset":2076},"end":{"line":17,"column":43,"offset":2112},"indent":[]}}],"position":{"start":{"line":17,"column":5,"offset":2074},"end":{"line":17,"column":45,"offset":2114},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":2070},"end":{"line":17,"column":45,"offset":2114},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You would be amazed at how much performance can be gained by this simple trick. What is a minified document? When we write code it is never our job to make it optimised for the computer, instead our golden rule is to make it readable to humans. This improves readability, cuts down on debug time and makes it easier to maintain. However, to achieve this we often add extra spacing which costs us precious space. Minifying the code is trimming all this fat from what we’ve written to have code that produces the same result but is far more difficult to read and maintain. This is okay though, because a computer has no problem deciphering it. Take the following code for example.","position":{"start":{"line":19,"column":1,"offset":2116},"end":{"line":19,"column":679,"offset":2794},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":2116},"end":{"line":19,"column":679,"offset":2794},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","position":{"start":{"line":21,"column":1,"offset":2796},"end":{"line":30,"column":4,"offset":3055},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Notice how, wherever possible, our line-breaks and spaces are gone. On top of that, the code in the for-loop is only one line so there’s no need for the curly braces which extends our code over three lines when it can be done in one. Does this make a difference?","position":{"start":{"line":32,"column":1,"offset":3057},"end":{"line":32,"column":263,"offset":3319},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":3057},"end":{"line":32,"column":263,"offset":3319},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"I tried it out on simple website that just had one script tag being loaded in for the graphics library ","position":{"start":{"line":34,"column":1,"offset":3321},"end":{"line":34,"column":104,"offset":3424},"indent":[]}},{"type":"link","title":null,"url":"https://p5js.org/","children":[{"type":"text","value":"p5.js","position":{"start":{"line":34,"column":105,"offset":3425},"end":{"line":34,"column":110,"offset":3430},"indent":[]}}],"position":{"start":{"line":34,"column":104,"offset":3424},"end":{"line":34,"column":130,"offset":3450},"indent":[]}},{"type":"text","value":". Using the non-minified CDN link I got a load time of 0.25 seconds. Using the minified version I got a markedly improved load time of 0.08 seconds. Depending on what your website project is, there are a few ways to automatically minify code. If it is a ","position":{"start":{"line":34,"column":130,"offset":3450},"end":{"line":34,"column":384,"offset":3704},"indent":[]}},{"type":"link","title":null,"url":"https://guide.meteor.com/build-tool.html","children":[{"type":"text","value":"Meteor app","position":{"start":{"line":34,"column":385,"offset":3705},"end":{"line":34,"column":395,"offset":3715},"indent":[]}}],"position":{"start":{"line":34,"column":384,"offset":3704},"end":{"line":34,"column":438,"offset":3758},"indent":[]}},{"type":"text","value":" it will be done automatically, using ","position":{"start":{"line":34,"column":438,"offset":3758},"end":{"line":34,"column":476,"offset":3796},"indent":[]}},{"type":"link","title":null,"url":"https://webpack.js.org/guides/production/","children":[{"type":"text","value":"Webpack ","position":{"start":{"line":34,"column":477,"offset":3797},"end":{"line":34,"column":485,"offset":3805},"indent":[]}}],"position":{"start":{"line":34,"column":476,"offset":3796},"end":{"line":34,"column":529,"offset":3849},"indent":[]}},{"type":"text","value":"will also allow you to do this. Otherwise there are some online tools like ","position":{"start":{"line":34,"column":529,"offset":3849},"end":{"line":34,"column":604,"offset":3924},"indent":[]}},{"type":"link","title":null,"url":"https://jscompress.com/","children":[{"type":"text","value":"JSCompress ","position":{"start":{"line":34,"column":605,"offset":3925},"end":{"line":34,"column":616,"offset":3936},"indent":[]}}],"position":{"start":{"line":34,"column":604,"offset":3924},"end":{"line":34,"column":642,"offset":3962},"indent":[]}},{"type":"text","value":"or ","position":{"start":{"line":34,"column":642,"offset":3962},"end":{"line":34,"column":645,"offset":3965},"indent":[]}},{"type":"link","title":null,"url":"https://cssminifier.com/","children":[{"type":"text","value":"CSSMinifier ","position":{"start":{"line":34,"column":646,"offset":3966},"end":{"line":34,"column":658,"offset":3978},"indent":[]}}],"position":{"start":{"line":34,"column":645,"offset":3965},"end":{"line":34,"column":685,"offset":4005},"indent":[]}},{"type":"text","value":"that you can upload your code to.","position":{"start":{"line":34,"column":685,"offset":4005},"end":{"line":34,"column":718,"offset":4038},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":3321},"end":{"line":34,"column":718,"offset":4038},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Design Versus Performance","position":{"start":{"line":36,"column":5,"offset":4044},"end":{"line":36,"column":30,"offset":4069},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":4040},"end":{"line":36,"column":30,"offset":4069},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Whilst design is undoubtedly a major aspect to a website’s overall success, both developers and designers must work together to compromise and make a mutually beneficial trade-off between design and performance. The classic example is fonts. Take the two screenshots of a simple website below.","position":{"start":{"line":38,"column":1,"offset":4071},"end":{"line":38,"column":294,"offset":4364},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":4071},"end":{"line":38,"column":294,"offset":4364},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://res.cloudinary.com/patricoferris/image/upload/v1532780050/pf2018/blogposts/28-07-2018/Helvetica.png","alt":"The example website using Helvetica Font (commonly found on many computers) — check [this](https://css-tricks.com/snippets/css/system-font-stack/) link for common system fonts","position":{"start":{"line":40,"column":1,"offset":4366},"end":{"line":40,"column":288,"offset":4653},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":40,"column":288,"offset":4653},"end":{"line":41,"column":1,"offset":4654},"indent":[1]}},{"type":"emphasis","children":[{"type":"text","value":"The example website using Helvetica Font (commonly found on many computers) — check ","position":{"start":{"line":41,"column":2,"offset":4655},"end":{"line":41,"column":86,"offset":4739},"indent":[]}},{"type":"link","title":null,"url":"https://css-tricks.com/snippets/css/system-font-stack/","children":[{"type":"text","value":"this","position":{"start":{"line":41,"column":87,"offset":4740},"end":{"line":41,"column":91,"offset":4744},"indent":[]}}],"position":{"start":{"line":41,"column":86,"offset":4739},"end":{"line":41,"column":148,"offset":4801},"indent":[]}},{"type":"text","value":" link for common system fonts","position":{"start":{"line":41,"column":148,"offset":4801},"end":{"line":41,"column":177,"offset":4830},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":4654},"end":{"line":41,"column":178,"offset":4831},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":4366},"end":{"line":41,"column":178,"offset":4831},"indent":[1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://cdn-images-1.medium.com/max/5760/1*8ciuJNBdqMhlLSaOpNUXow.png","alt":"The example website using Roboto Font (designed by Google and linked from [Google Fonts](https://fonts.google.com/?selection.family=Roboto))","position":{"start":{"line":43,"column":1,"offset":4833},"end":{"line":43,"column":215,"offset":5047},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"The example website using Roboto Font (designed by Google and linked from ","position":{"start":{"line":43,"column":216,"offset":5048},"end":{"line":43,"column":290,"offset":5122},"indent":[]}},{"type":"link","title":null,"url":"https://fonts.google.com/?selection.family=Roboto","children":[{"type":"text","value":"Google Fonts","position":{"start":{"line":43,"column":291,"offset":5123},"end":{"line":43,"column":303,"offset":5135},"indent":[]}}],"position":{"start":{"line":43,"column":290,"offset":5122},"end":{"line":43,"column":355,"offset":5187},"indent":[]}},{"type":"text","value":")","position":{"start":{"line":43,"column":355,"offset":5187},"end":{"line":43,"column":356,"offset":5188},"indent":[]}}],"position":{"start":{"line":43,"column":215,"offset":5047},"end":{"line":43,"column":357,"offset":5189},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":4833},"end":{"line":43,"column":357,"offset":5189},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Before critiquing my questionable design skills take a moment to appreciate that these two fonts are very similar — yet the loading time for a website for the Roboto font was 0.22 seconds as compared with 0.17 for Helvetica. Whilst not that significant, using lots of custom fonts will slow down your website, although using Google Fonts’ API will help keep your website optimised. As an over-the-top example, linking 20 different fonts from the Google API increased the load time to 0.87 seconds.","position":{"start":{"line":45,"column":1,"offset":5191},"end":{"line":45,"column":498,"offset":5688},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":5191},"end":{"line":45,"column":498,"offset":5688},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Inlining your JavaScript and CSS","position":{"start":{"line":47,"column":5,"offset":5694},"end":{"line":47,"column":37,"offset":5726},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":5690},"end":{"line":47,"column":37,"offset":5726},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For each individual document or component of your website, when the parser reaches the script tag or link tag it sends and HTTP request for that document and if not stated differently, these will be blocking actions. What this means is your machine is parsing the HTML document getting the words to display in your browser but if it hits the script tag with the attribute src='js/main.js' for example, it will block the parsing and load in that file. This is where as a developer you need to be clever about where in the document you place things.","position":{"start":{"line":49,"column":1,"offset":5728},"end":{"line":49,"column":548,"offset":6275},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":5728},"end":{"line":49,"column":548,"offset":6275},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Whilst it may not ultimately affect the loading time of your website, it can affect the order in which things are loaded. Again we’ll be using the un-minified p5.js library to simulate a large JavaScript file and load it in different places to see how it affects our user experience.","position":{"start":{"line":51,"column":1,"offset":6277},"end":{"line":51,"column":284,"offset":6560},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":6277},"end":{"line":51,"column":284,"offset":6560},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://cdn-images-1.medium.com/max/2780/1*h_3GogfkaahcXCO9a43CPA.gif","alt":"Refreshing website with the script tag inserted at the bottom of the body tag","position":{"start":{"line":53,"column":1,"offset":6562},"end":{"line":53,"column":152,"offset":6713},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Refreshing website with the script tag inserted at the bottom of the body tag","position":{"start":{"line":53,"column":153,"offset":6714},"end":{"line":53,"column":230,"offset":6791},"indent":[]}}],"position":{"start":{"line":53,"column":152,"offset":6713},"end":{"line":53,"column":231,"offset":6792},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":6562},"end":{"line":53,"column":231,"offset":6792},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://cdn-images-1.medium.com/max/2780/1*xLOq5r4erQAwb4Au_hB-Ww.gif","alt":"Refreshing website with the script tag inserted at the top of the body tag","position":{"start":{"line":55,"column":1,"offset":6794},"end":{"line":55,"column":149,"offset":6942},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Refreshing website with the script tag inserted at the top of the body tag","position":{"start":{"line":55,"column":150,"offset":6943},"end":{"line":55,"column":224,"offset":7017},"indent":[]}}],"position":{"start":{"line":55,"column":149,"offset":6942},"end":{"line":55,"column":225,"offset":7018},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":6794},"end":{"line":55,"column":225,"offset":7018},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Whilst the load times were similar for both cases — the user experience is far better by placing the script at the body tag allowing the HTML to be parsed before the JavaScript giving the user the website content immediately!","position":{"start":{"line":57,"column":1,"offset":7020},"end":{"line":57,"column":226,"offset":7245},"indent":[]}}],"position":{"start":{"line":57,"column":1,"offset":7020},"end":{"line":57,"column":226,"offset":7245},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In the same vein CSS can also be render-blocking especially because more often than not it is linked in the head tag of your HTML document before the body. But if we want our user to see the content in the quickest time we don’t want to be loading CSS for the footer of our document which the user won’t see until they’ve scrolled to the bottom. In fact, we don’t want to load any CSS in that the user can’t immediately see when the page first loads on their device.","position":{"start":{"line":59,"column":1,"offset":7247},"end":{"line":59,"column":467,"offset":7713},"indent":[]}}],"position":{"start":{"line":59,"column":1,"offset":7247},"end":{"line":59,"column":467,"offset":7713},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The CSS that you need is often called the ","position":{"start":{"line":61,"column":1,"offset":7715},"end":{"line":61,"column":43,"offset":7757},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Critical CSS","position":{"start":{"line":61,"column":44,"offset":7758},"end":{"line":61,"column":56,"offset":7770},"indent":[]}}],"position":{"start":{"line":61,"column":43,"offset":7757},"end":{"line":61,"column":57,"offset":7771},"indent":[]}},{"type":"text","value":". Finding it for yourself would be a headache. It will be different for different devices, meaning you would have to check manually for all possible devices. Lucky for us we have (if you’re using ","position":{"start":{"line":61,"column":57,"offset":7771},"end":{"line":61,"column":253,"offset":7967},"indent":[]}},{"type":"link","title":null,"url":"https://nodejs.org/en/","children":[{"type":"text","value":"Node.js","position":{"start":{"line":61,"column":254,"offset":7968},"end":{"line":61,"column":261,"offset":7975},"indent":[]}}],"position":{"start":{"line":61,"column":253,"offset":7967},"end":{"line":61,"column":286,"offset":8000},"indent":[]}},{"type":"text","value":") ","position":{"start":{"line":61,"column":286,"offset":8000},"end":{"line":61,"column":288,"offset":8002},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/addyosmani/critical","children":[{"type":"text","value":"Critical","position":{"start":{"line":61,"column":289,"offset":8003},"end":{"line":61,"column":297,"offset":8011},"indent":[]}}],"position":{"start":{"line":61,"column":288,"offset":8002},"end":{"line":61,"column":338,"offset":8052},"indent":[]}},{"type":"text","value":". This helpful package does the CSS inlining for us and all we do is add some code to a Javascript file. Here’s a code snippet from the Github page.","position":{"start":{"line":61,"column":338,"offset":8052},"end":{"line":61,"column":486,"offset":8200},"indent":[]}}],"position":{"start":{"line":61,"column":1,"offset":7715},"end":{"line":61,"column":486,"offset":8200},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> critical <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'critical'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncritical<span class=\"token punctuation\">.</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    base<span class=\"token punctuation\">:</span> <span class=\"token string\">'test/'</span><span class=\"token punctuation\">,</span>\n    src<span class=\"token punctuation\">:</span> <span class=\"token string\">'index.html'</span><span class=\"token punctuation\">,</span>\n    dest<span class=\"token punctuation\">:</span> <span class=\"token string\">'styles/main.css'</span><span class=\"token punctuation\">,</span>\n    dimensions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n        height<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n        width<span class=\"token punctuation\">:</span> <span class=\"token number\">500</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        height<span class=\"token punctuation\">:</span> <span class=\"token number\">900</span><span class=\"token punctuation\">,</span>\n        width<span class=\"token punctuation\">:</span> <span class=\"token number\">1200</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","position":{"start":{"line":63,"column":1,"offset":8202},"end":{"line":78,"column":4,"offset":8467},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Using the generate function, we supply it with a JavaScript object with some values defined. base is where we’re going to save our src and dest (our project folder usually). What’s great is now we just supply an array of dimensions and the code will compute the critical CSS for each and inline that code into our head tag.","position":{"start":{"line":80,"column":1,"offset":8469},"end":{"line":80,"column":324,"offset":8792},"indent":[]}}],"position":{"start":{"line":80,"column":1,"offset":8469},"end":{"line":80,"column":324,"offset":8792},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Async and Defer","position":{"start":{"line":82,"column":5,"offset":8798},"end":{"line":82,"column":20,"offset":8813},"indent":[]}}],"position":{"start":{"line":82,"column":1,"offset":8794},"end":{"line":82,"column":20,"offset":8813},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Again, we come back to this idea of render-blocking and how best we should implement this for our website. When you have a plain script tag in your HTML it blocks the HTML from loading whilst the JavaScript loads ","position":{"start":{"line":84,"column":1,"offset":8815},"end":{"line":84,"column":214,"offset":9028},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"and","position":{"start":{"line":84,"column":216,"offset":9030},"end":{"line":84,"column":219,"offset":9033},"indent":[]}}],"position":{"start":{"line":84,"column":214,"offset":9028},"end":{"line":84,"column":221,"offset":9035},"indent":[]}},{"type":"text","value":" runs. Async and defer are simple attributes that you can add to your script tags that change the way your JavaScript will be loaded.","position":{"start":{"line":84,"column":221,"offset":9035},"end":{"line":84,"column":354,"offset":9168},"indent":[]}}],"position":{"start":{"line":84,"column":1,"offset":8815},"end":{"line":84,"column":354,"offset":9168},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Defer essentially “defers” execution of the script until after the HTML has been parsed. A major advantage of this is that you no longer need some $(document).ready() jQuery-style function to make sure the body was loaded before you could manipulate it, which could cut out some of the dependencies on libraries like jQuery which helps reduce load-time.","position":{"start":{"line":86,"column":1,"offset":9170},"end":{"line":86,"column":354,"offset":9523},"indent":[]}}],"position":{"start":{"line":86,"column":1,"offset":9170},"end":{"line":86,"column":354,"offset":9523},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Async is, unsurprisingly, the asynchronous loading of JavaScript files. What does this mean? Your HTML will continue to be parsed whilst the file is loaded and then whenever its ready the file will be executed. This helps improving user experience whilst viewing your website. Imagine for example you had a JavaScript file for doing some cool graphics. You want the words around this graphic to be parsed until your graphic is ready to be executed. As soon as it is ready, it is executed and we get a more seamless loading of our webpage without missing pieces.","position":{"start":{"line":88,"column":1,"offset":9525},"end":{"line":88,"column":562,"offset":10086},"indent":[]}}],"position":{"start":{"line":88,"column":1,"offset":9525},"end":{"line":88,"column":562,"offset":10086},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Check this ","position":{"start":{"line":90,"column":1,"offset":10088},"end":{"line":90,"column":12,"offset":10099},"indent":[]}},{"type":"link","title":null,"url":"http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html","children":[{"type":"text","value":"website","position":{"start":{"line":90,"column":13,"offset":10100},"end":{"line":90,"column":20,"offset":10107},"indent":[]}}],"position":{"start":{"line":90,"column":12,"offset":10099},"end":{"line":90,"column":94,"offset":10181},"indent":[]}},{"type":"text","value":" for a really intuitive, graphical representation of this.","position":{"start":{"line":90,"column":94,"offset":10181},"end":{"line":90,"column":152,"offset":10239},"indent":[]}}],"position":{"start":{"line":90,"column":1,"offset":10088},"end":{"line":90,"column":152,"offset":10239},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Image Optimisation and Media Queries","position":{"start":{"line":92,"column":5,"offset":10245},"end":{"line":92,"column":41,"offset":10281},"indent":[]}}],"position":{"start":{"line":92,"column":1,"offset":10241},"end":{"line":92,"column":41,"offset":10281},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The cornerstone of all website performance optimisation is the simple rule that, the less data you send to the client, the quicker and better your website will perform. With the plethora of devices on the market capable of viewing websites, there is a growing trend to optimise your website based on the device it is being viewed on.","position":{"start":{"line":94,"column":1,"offset":10283},"end":{"line":94,"column":334,"offset":10616},"indent":[]}}],"position":{"start":{"line":94,"column":1,"offset":10283},"end":{"line":94,"column":334,"offset":10616},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Media queries are a fairly new tool added to CSS3. With more and more content being consumed using mobile-devices there has been a shift in design thinking towards mobile first. Using media queries you can then add stylings for larger screen sizes.","position":{"start":{"line":96,"column":1,"offset":10618},"end":{"line":96,"column":249,"offset":10866},"indent":[]}}],"position":{"start":{"line":96,"column":1,"offset":10618},"end":{"line":96,"column":249,"offset":10866},"indent":[]}},{"type":"html","lang":"css","value":"<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/* Some CSS for screen sizes bigger than 600px but smaller than 992px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/*  Some CSS for screen sizes bigger than 992px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">orientation</span><span class=\"token punctuation\">:</span> landscape<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* Some CSS for landscape-oriented devices */</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":98,"column":1,"offset":10868},"end":{"line":110,"column":4,"offset":11198},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The @media tag starts a new CSS rule, whilst the only keyword stops older browsers that don’t support media queries from using it. The screen keyword applies the rules to screens rather than prints. After that you add the media-feature which supports the and , or and not keywords so you can get as specific as you want. When you’re loading your image you can write code like:","position":{"start":{"line":112,"column":1,"offset":11200},"end":{"line":112,"column":377,"offset":11576},"indent":[]}}],"position":{"start":{"line":112,"column":1,"offset":11200},"end":{"line":112,"column":377,"offset":11576},"indent":[]}},{"type":"html","lang":"css","value":"<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-small.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-big.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":114,"column":1,"offset":11578},"end":{"line":122,"column":4,"offset":11797},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This isn’t necessarily the best or optimal approach for image optimisation. Luckily we have other options. ","position":{"start":{"line":124,"column":1,"offset":11799},"end":{"line":124,"column":108,"offset":11906},"indent":[]}},{"type":"link","title":null,"url":"https://www.imgix.com/","children":[{"type":"text","value":"Imgix","position":{"start":{"line":124,"column":109,"offset":11907},"end":{"line":124,"column":114,"offset":11912},"indent":[]}}],"position":{"start":{"line":124,"column":108,"offset":11906},"end":{"line":124,"column":139,"offset":11937},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":124,"column":139,"offset":11937},"end":{"line":124,"column":144,"offset":11942},"indent":[]}},{"type":"link","title":null,"url":"https://cloudinary.com/","children":[{"type":"text","value":"Cloudinary","position":{"start":{"line":124,"column":145,"offset":11943},"end":{"line":124,"column":155,"offset":11953},"indent":[]}}],"position":{"start":{"line":124,"column":144,"offset":11942},"end":{"line":124,"column":181,"offset":11979},"indent":[]}},{"type":"text","value":" are two ways you can help optimise your site for the right device. Imgix is a Content Delivery Network (CDN) for images with a lot of cool features. A CDN simply takes your files and spreads them across the globe so that someone in a different country doesn’t have to wait for your files on your server to make it all the way to them. This ","position":{"start":{"line":124,"column":181,"offset":11979},"end":{"line":124,"column":522,"offset":12320},"indent":[]}},{"type":"link","title":null,"url":"https://docs.imgix.com/tutorials/responsive-images-srcset-imgix","children":[{"type":"text","value":"tutorial","position":{"start":{"line":124,"column":523,"offset":12321},"end":{"line":124,"column":531,"offset":12329},"indent":[]}}],"position":{"start":{"line":124,"column":522,"offset":12320},"end":{"line":124,"column":597,"offset":12395},"indent":[]}},{"type":"text","value":" goes through how to use Imgix for different device pixel ratios. Cloudinary is a similar service, and their ","position":{"start":{"line":124,"column":597,"offset":12395},"end":{"line":124,"column":706,"offset":12504},"indent":[]}},{"type":"link","title":null,"url":"https://cloudinary.com/documentation/image_optimization","children":[{"type":"text","value":"tutorial ","position":{"start":{"line":124,"column":707,"offset":12505},"end":{"line":124,"column":716,"offset":12514},"indent":[]}}],"position":{"start":{"line":124,"column":706,"offset":12504},"end":{"line":124,"column":774,"offset":12572},"indent":[]}},{"type":"text","value":"will take you through the importance of optimisation and how to achieve it will their incredible services. Below is a small example showing how easy it is to use Cloudinary straight in the HTML markup.","position":{"start":{"line":124,"column":774,"offset":12572},"end":{"line":124,"column":975,"offset":12773},"indent":[]}}],"position":{"start":{"line":124,"column":1,"offset":11799},"end":{"line":124,"column":975,"offset":12773},"indent":[]}},{"type":"html","value":"<iframe height='400' scrolling='no' title='Cloudinary Example' src='//codepen.io/patricoferris/embed/ejgVJN/?height=400&theme-id=0&default-tab=html,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/ejgVJN/'>Cloudinary Example</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":126,"column":1,"offset":12775},"end":{"line":127,"column":10,"offset":13259},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"As a last point on image optimisation, the format you use can have a large impact on file size. Some files contain lots of metadata which you don’t want to be serving to your client — ","position":{"start":{"line":129,"column":1,"offset":13261},"end":{"line":129,"column":185,"offset":13445},"indent":[]}},{"type":"link","title":null,"url":"https://www.sno.phy.queensu.ca/~phil/exiftool/","children":[{"type":"text","value":"ExifTool","position":{"start":{"line":129,"column":186,"offset":13446},"end":{"line":129,"column":194,"offset":13454},"indent":[]}}],"position":{"start":{"line":129,"column":185,"offset":13445},"end":{"line":129,"column":243,"offset":13503},"indent":[]}},{"type":"text","value":" is a commonly used command-line application that can help you trim down those files sizes. On top of this, Scalable Vector Graphics (SVG) are a web-standard developed by W3C that offers XML-based vector graphics. This means they have infinite resolution unlike PNG or JPG files. It also makes them highly versatile, easily editable and can even be animated. At the end of the day SVGs are just code and so the file sizes tend to be small. For more reasons to use them, check out this ","position":{"start":{"line":129,"column":243,"offset":13503},"end":{"line":129,"column":728,"offset":13988},"indent":[]}},{"type":"link","title":null,"url":"https://watb.co.uk/5-reasons-you-should-be-using-svgs-over-pngs/","children":[{"type":"text","value":"article","position":{"start":{"line":129,"column":729,"offset":13989},"end":{"line":129,"column":736,"offset":13996},"indent":[]}}],"position":{"start":{"line":129,"column":728,"offset":13988},"end":{"line":129,"column":803,"offset":14063},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":129,"column":803,"offset":14063},"end":{"line":129,"column":804,"offset":14064},"indent":[]}}],"position":{"start":{"line":129,"column":1,"offset":13261},"end":{"line":129,"column":804,"offset":14064},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":131,"column":5,"offset":14070},"end":{"line":131,"column":15,"offset":14080},"indent":[]}}],"position":{"start":{"line":131,"column":1,"offset":14066},"end":{"line":131,"column":15,"offset":14080},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We’ve only scratched the surface of what’s possible for website optimisation. There are many tools you can use to help you stream-line this process like ","position":{"start":{"line":133,"column":1,"offset":14082},"end":{"line":133,"column":154,"offset":14235},"indent":[]}},{"type":"link","title":null,"url":"https://webpack.js.org/","children":[{"type":"text","value":"Webpack","position":{"start":{"line":133,"column":155,"offset":14236},"end":{"line":133,"column":162,"offset":14243},"indent":[]}}],"position":{"start":{"line":133,"column":154,"offset":14235},"end":{"line":133,"column":188,"offset":14269},"indent":[]}},{"type":"text","value":" for bundling or static-site generators like ","position":{"start":{"line":133,"column":188,"offset":14269},"end":{"line":133,"column":233,"offset":14314},"indent":[]}},{"type":"link","title":null,"url":"https://www.gatsbyjs.org/","children":[{"type":"text","value":"Gatsby","position":{"start":{"line":133,"column":234,"offset":14315},"end":{"line":133,"column":240,"offset":14321},"indent":[]}}],"position":{"start":{"line":133,"column":233,"offset":14314},"end":{"line":133,"column":268,"offset":14349},"indent":[]}},{"type":"text","value":". ","position":{"start":{"line":133,"column":268,"offset":14349},"end":{"line":133,"column":270,"offset":14351},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking","children":[{"type":"text","value":"Tree shaking","position":{"start":{"line":133,"column":271,"offset":14352},"end":{"line":133,"column":283,"offset":14364},"indent":[]}}],"position":{"start":{"line":133,"column":270,"offset":14351},"end":{"line":133,"column":348,"offset":14429},"indent":[]}},{"type":"text","value":" is another commonly used technique to remove excess, unused modules lying around your website.","position":{"start":{"line":133,"column":348,"offset":14429},"end":{"line":133,"column":443,"offset":14524},"indent":[]}}],"position":{"start":{"line":133,"column":1,"offset":14082},"end":{"line":133,"column":443,"offset":14524},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Hopefully this article has touched on some useful techniques you can use on your next site to help improve its performance. Happy coding!","position":{"start":{"line":135,"column":1,"offset":14526},"end":{"line":135,"column":138,"offset":14663},"indent":[]}}],"position":{"start":{"line":135,"column":1,"offset":14526},"end":{"line":135,"column":138,"offset":14663},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A big thank you to ","position":{"start":{"line":137,"column":1,"offset":14665},"end":{"line":137,"column":20,"offset":14684},"indent":[]}},{"type":"link","title":null,"url":"https://medium.com/@pinpickle","children":[{"type":"text","value":"Christian Silver","position":{"start":{"line":137,"column":21,"offset":14685},"end":{"line":137,"column":37,"offset":14701},"indent":[]}}],"position":{"start":{"line":137,"column":20,"offset":14684},"end":{"line":137,"column":69,"offset":14733},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":137,"column":69,"offset":14733},"end":{"line":137,"column":74,"offset":14738},"indent":[]}},{"type":"link","title":null,"url":"https://medium.com/@charliecrisp249","children":[{"type":"text","value":"Charlie Crisp","position":{"start":{"line":137,"column":75,"offset":14739},"end":{"line":137,"column":88,"offset":14752},"indent":[]}}],"position":{"start":{"line":137,"column":74,"offset":14738},"end":{"line":137,"column":126,"offset":14790},"indent":[]}},{"type":"text","value":" for editing this post and providing extremely useful advice and extra content to make it even better.","position":{"start":{"line":137,"column":126,"offset":14790},"end":{"line":137,"column":228,"offset":14892},"indent":[]}}],"position":{"start":{"line":137,"column":1,"offset":14665},"end":{"line":137,"column":228,"offset":14892},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":138,"column":1,"offset":14893}}}},{"id":"transformer-remark-markdown-html-ast-2309bc1ce3b3986c10591e4e6df33783-gatsby-remark-imagesgatsby-remark-prismjs-","value":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/patricoferris/image/upload/v1532781201/pf2018/blogposts/28-07-2018/website_optimisation_2.png","alt":"Optimising your Website"},"children":[],"position":{"start":{"line":8,"column":1,"offset":288},"end":{"line":8,"column":149,"offset":436}}},{"type":"text","value":"\nInspired by a ","position":{"start":{"line":8,"column":149,"offset":436},"end":{"line":9,"column":15,"offset":451}}},{"type":"element","tagName":"a","properties":{"href":"https://syntax.fm/"},"children":[{"type":"text","value":"Syntax","position":{"start":{"line":9,"column":16,"offset":452},"end":{"line":9,"column":22,"offset":458}}}],"position":{"start":{"line":9,"column":15,"offset":451},"end":{"line":9,"column":43,"offset":479}}},{"type":"text","value":" podcast, I got really interested in website optimisation. It can often be an overlooked aspect in web development with more focus on design and functionality, I realised my number one priority whenever I visited a website is load speed. My attention is a website’s number one goal, lose it and they lose all potential ad revenue or possibility to give me whatever information I was looking for. ","position":{"start":{"line":9,"column":43,"offset":479},"end":{"line":9,"column":439,"offset":875}}},{"type":"element","tagName":"a","properties":{"href":"https://developers.google.com/web/fundamentals/performance/get-started/"},"children":[{"type":"text","value":"Many seem to agree. 53% of users abandon websites that take more than 3 seconds to load","position":{"start":{"line":9,"column":440,"offset":876},"end":{"line":9,"column":527,"offset":963}}}],"position":{"start":{"line":9,"column":439,"offset":875},"end":{"line":9,"column":601,"offset":1037}}},{"type":"text","value":". No amount of fancy graphics or parallax scrolling that appears five seconds after someone’s clicked will hide the slow loading times.","position":{"start":{"line":9,"column":601,"offset":1037},"end":{"line":9,"column":736,"offset":1172}}}],"position":{"start":{"line":8,"column":1,"offset":288},"end":{"line":9,"column":736,"offset":1172}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The aim of this article is to give a broad overview of the concepts and ideas behind optimising your website, experienced developers are likely already using things like Webpack (a module bundler) among other tools to speed-up their sites.","position":{"start":{"line":11,"column":1,"offset":1174},"end":{"line":11,"column":240,"offset":1413}}}],"position":{"start":{"line":11,"column":1,"offset":1174},"end":{"line":11,"column":240,"offset":1413}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For testing load-times I will be using the ","position":{"start":{"line":13,"column":1,"offset":1415},"end":{"line":13,"column":44,"offset":1458}}},{"type":"element","tagName":"a","properties":{"href":"https://chrome.google.com/webstore/detail/page-load-time/fploionmjgeclbkemipmkogoaohcdbig?hl=en"},"children":[{"type":"text","value":"Page Load Time ","position":{"start":{"line":13,"column":45,"offset":1459},"end":{"line":13,"column":60,"offset":1474}}}],"position":{"start":{"line":13,"column":44,"offset":1458},"end":{"line":13,"column":158,"offset":1572}}},{"type":"text","value":"Chrome extension. There are a few ways to measure website loading time including: ","position":{"start":{"line":13,"column":158,"offset":1572},"end":{"line":13,"column":240,"offset":1654}}},{"type":"element","tagName":"a","properties":{"href":"https://developers.google.com/web/tools/chrome-user-experience-report/"},"children":[{"type":"text","value":"first paint, first meaning paint, DOMContentLoaded","position":{"start":{"line":13,"column":241,"offset":1655},"end":{"line":13,"column":291,"offset":1705}}}],"position":{"start":{"line":13,"column":240,"offset":1654},"end":{"line":13,"column":364,"offset":1778}}},{"type":"text","value":" etc. For a more detailed look into what this timer measures, check out the Github repository below.\n","position":{"start":{"line":13,"column":364,"offset":1778},"end":{"line":14,"column":1,"offset":1879}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/alex-vv/chrome-load-timer"},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"alex-vv/chrome-load-timer","position":{"start":{"line":14,"column":4,"offset":1882},"end":{"line":14,"column":29,"offset":1907}}}],"position":{"start":{"line":14,"column":2,"offset":1880},"end":{"line":14,"column":31,"offset":1909}}},{"type":"text","value":"\n","position":{"start":{"line":14,"column":31,"offset":1909},"end":{"line":15,"column":1,"offset":1910}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"chrome-load-timer - Google Chrome extension to measure page load time and display it in the toolbar","position":{"start":{"line":15,"column":2,"offset":1911},"end":{"line":15,"column":101,"offset":2010}}}],"position":{"start":{"line":15,"column":1,"offset":1910},"end":{"line":15,"column":102,"offset":2011}}},{"type":"text","value":"github.com","position":{"start":{"line":15,"column":102,"offset":2011},"end":{"line":15,"column":112,"offset":2021}}}],"position":{"start":{"line":14,"column":1,"offset":1879},"end":{"line":15,"column":159,"offset":2068}}}],"position":{"start":{"line":13,"column":1,"offset":1415},"end":{"line":15,"column":159,"offset":2068}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Use Minified Stylesheets and Scripts","position":{"start":{"line":17,"column":7,"offset":2076},"end":{"line":17,"column":43,"offset":2112}}}],"position":{"start":{"line":17,"column":5,"offset":2074},"end":{"line":17,"column":45,"offset":2114}}}],"position":{"start":{"line":17,"column":1,"offset":2070},"end":{"line":17,"column":45,"offset":2114}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You would be amazed at how much performance can be gained by this simple trick. What is a minified document? When we write code it is never our job to make it optimised for the computer, instead our golden rule is to make it readable to humans. This improves readability, cuts down on debug time and makes it easier to maintain. However, to achieve this we often add extra spacing which costs us precious space. Minifying the code is trimming all this fat from what we’ve written to have code that produces the same result but is far more difficult to read and maintain. This is okay though, because a computer has no problem deciphering it. Take the following code for example.","position":{"start":{"line":19,"column":1,"offset":2116},"end":{"line":19,"column":679,"offset":2794}}}],"position":{"start":{"line":19,"column":1,"offset":2116},"end":{"line":19,"column":679,"offset":2794}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","position":{"start":{"line":21,"column":1,"offset":2796},"end":{"line":30,"column":4,"offset":3055}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Notice how, wherever possible, our line-breaks and spaces are gone. On top of that, the code in the for-loop is only one line so there’s no need for the curly braces which extends our code over three lines when it can be done in one. Does this make a difference?","position":{"start":{"line":32,"column":1,"offset":3057},"end":{"line":32,"column":263,"offset":3319}}}],"position":{"start":{"line":32,"column":1,"offset":3057},"end":{"line":32,"column":263,"offset":3319}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I tried it out on simple website that just had one script tag being loaded in for the graphics library ","position":{"start":{"line":34,"column":1,"offset":3321},"end":{"line":34,"column":104,"offset":3424}}},{"type":"element","tagName":"a","properties":{"href":"https://p5js.org/"},"children":[{"type":"text","value":"p5.js","position":{"start":{"line":34,"column":105,"offset":3425},"end":{"line":34,"column":110,"offset":3430}}}],"position":{"start":{"line":34,"column":104,"offset":3424},"end":{"line":34,"column":130,"offset":3450}}},{"type":"text","value":". Using the non-minified CDN link I got a load time of 0.25 seconds. Using the minified version I got a markedly improved load time of 0.08 seconds. Depending on what your website project is, there are a few ways to automatically minify code. If it is a ","position":{"start":{"line":34,"column":130,"offset":3450},"end":{"line":34,"column":384,"offset":3704}}},{"type":"element","tagName":"a","properties":{"href":"https://guide.meteor.com/build-tool.html"},"children":[{"type":"text","value":"Meteor app","position":{"start":{"line":34,"column":385,"offset":3705},"end":{"line":34,"column":395,"offset":3715}}}],"position":{"start":{"line":34,"column":384,"offset":3704},"end":{"line":34,"column":438,"offset":3758}}},{"type":"text","value":" it will be done automatically, using ","position":{"start":{"line":34,"column":438,"offset":3758},"end":{"line":34,"column":476,"offset":3796}}},{"type":"element","tagName":"a","properties":{"href":"https://webpack.js.org/guides/production/"},"children":[{"type":"text","value":"Webpack ","position":{"start":{"line":34,"column":477,"offset":3797},"end":{"line":34,"column":485,"offset":3805}}}],"position":{"start":{"line":34,"column":476,"offset":3796},"end":{"line":34,"column":529,"offset":3849}}},{"type":"text","value":"will also allow you to do this. Otherwise there are some online tools like ","position":{"start":{"line":34,"column":529,"offset":3849},"end":{"line":34,"column":604,"offset":3924}}},{"type":"element","tagName":"a","properties":{"href":"https://jscompress.com/"},"children":[{"type":"text","value":"JSCompress ","position":{"start":{"line":34,"column":605,"offset":3925},"end":{"line":34,"column":616,"offset":3936}}}],"position":{"start":{"line":34,"column":604,"offset":3924},"end":{"line":34,"column":642,"offset":3962}}},{"type":"text","value":"or ","position":{"start":{"line":34,"column":642,"offset":3962},"end":{"line":34,"column":645,"offset":3965}}},{"type":"element","tagName":"a","properties":{"href":"https://cssminifier.com/"},"children":[{"type":"text","value":"CSSMinifier ","position":{"start":{"line":34,"column":646,"offset":3966},"end":{"line":34,"column":658,"offset":3978}}}],"position":{"start":{"line":34,"column":645,"offset":3965},"end":{"line":34,"column":685,"offset":4005}}},{"type":"text","value":"that you can upload your code to.","position":{"start":{"line":34,"column":685,"offset":4005},"end":{"line":34,"column":718,"offset":4038}}}],"position":{"start":{"line":34,"column":1,"offset":3321},"end":{"line":34,"column":718,"offset":4038}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Design Versus Performance","position":{"start":{"line":36,"column":5,"offset":4044},"end":{"line":36,"column":30,"offset":4069}}}],"position":{"start":{"line":36,"column":1,"offset":4040},"end":{"line":36,"column":30,"offset":4069}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Whilst design is undoubtedly a major aspect to a website’s overall success, both developers and designers must work together to compromise and make a mutually beneficial trade-off between design and performance. The classic example is fonts. Take the two screenshots of a simple website below.","position":{"start":{"line":38,"column":1,"offset":4071},"end":{"line":38,"column":294,"offset":4364}}}],"position":{"start":{"line":38,"column":1,"offset":4071},"end":{"line":38,"column":294,"offset":4364}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://res.cloudinary.com/patricoferris/image/upload/v1532780050/pf2018/blogposts/28-07-2018/Helvetica.png","alt":"The example website using Helvetica Font (commonly found on many computers) — check [this](https://css-tricks.com/snippets/css/system-font-stack/) link for common system fonts"},"children":[],"position":{"start":{"line":40,"column":1,"offset":4366},"end":{"line":40,"column":288,"offset":4653}}},{"type":"text","value":"\n","position":{"start":{"line":40,"column":288,"offset":4653},"end":{"line":41,"column":1,"offset":4654}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The example website using Helvetica Font (commonly found on many computers) — check ","position":{"start":{"line":41,"column":2,"offset":4655},"end":{"line":41,"column":86,"offset":4739}}},{"type":"element","tagName":"a","properties":{"href":"https://css-tricks.com/snippets/css/system-font-stack/"},"children":[{"type":"text","value":"this","position":{"start":{"line":41,"column":87,"offset":4740},"end":{"line":41,"column":91,"offset":4744}}}],"position":{"start":{"line":41,"column":86,"offset":4739},"end":{"line":41,"column":148,"offset":4801}}},{"type":"text","value":" link for common system fonts","position":{"start":{"line":41,"column":148,"offset":4801},"end":{"line":41,"column":177,"offset":4830}}}],"position":{"start":{"line":41,"column":1,"offset":4654},"end":{"line":41,"column":178,"offset":4831}}}],"position":{"start":{"line":40,"column":1,"offset":4366},"end":{"line":41,"column":178,"offset":4831}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://cdn-images-1.medium.com/max/5760/1*8ciuJNBdqMhlLSaOpNUXow.png","alt":"The example website using Roboto Font (designed by Google and linked from [Google Fonts](https://fonts.google.com/?selection.family=Roboto))"},"children":[],"position":{"start":{"line":43,"column":1,"offset":4833},"end":{"line":43,"column":215,"offset":5047}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The example website using Roboto Font (designed by Google and linked from ","position":{"start":{"line":43,"column":216,"offset":5048},"end":{"line":43,"column":290,"offset":5122}}},{"type":"element","tagName":"a","properties":{"href":"https://fonts.google.com/?selection.family=Roboto"},"children":[{"type":"text","value":"Google Fonts","position":{"start":{"line":43,"column":291,"offset":5123},"end":{"line":43,"column":303,"offset":5135}}}],"position":{"start":{"line":43,"column":290,"offset":5122},"end":{"line":43,"column":355,"offset":5187}}},{"type":"text","value":")","position":{"start":{"line":43,"column":355,"offset":5187},"end":{"line":43,"column":356,"offset":5188}}}],"position":{"start":{"line":43,"column":215,"offset":5047},"end":{"line":43,"column":357,"offset":5189}}}],"position":{"start":{"line":43,"column":1,"offset":4833},"end":{"line":43,"column":357,"offset":5189}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Before critiquing my questionable design skills take a moment to appreciate that these two fonts are very similar — yet the loading time for a website for the Roboto font was 0.22 seconds as compared with 0.17 for Helvetica. Whilst not that significant, using lots of custom fonts will slow down your website, although using Google Fonts’ API will help keep your website optimised. As an over-the-top example, linking 20 different fonts from the Google API increased the load time to 0.87 seconds.","position":{"start":{"line":45,"column":1,"offset":5191},"end":{"line":45,"column":498,"offset":5688}}}],"position":{"start":{"line":45,"column":1,"offset":5191},"end":{"line":45,"column":498,"offset":5688}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Inlining your JavaScript and CSS","position":{"start":{"line":47,"column":5,"offset":5694},"end":{"line":47,"column":37,"offset":5726}}}],"position":{"start":{"line":47,"column":1,"offset":5690},"end":{"line":47,"column":37,"offset":5726}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For each individual document or component of your website, when the parser reaches the script tag or link tag it sends and HTTP request for that document and if not stated differently, these will be blocking actions. What this means is your machine is parsing the HTML document getting the words to display in your browser but if it hits the script tag with the attribute src='js/main.js' for example, it will block the parsing and load in that file. This is where as a developer you need to be clever about where in the document you place things.","position":{"start":{"line":49,"column":1,"offset":5728},"end":{"line":49,"column":548,"offset":6275}}}],"position":{"start":{"line":49,"column":1,"offset":5728},"end":{"line":49,"column":548,"offset":6275}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Whilst it may not ultimately affect the loading time of your website, it can affect the order in which things are loaded. Again we’ll be using the un-minified p5.js library to simulate a large JavaScript file and load it in different places to see how it affects our user experience.","position":{"start":{"line":51,"column":1,"offset":6277},"end":{"line":51,"column":284,"offset":6560}}}],"position":{"start":{"line":51,"column":1,"offset":6277},"end":{"line":51,"column":284,"offset":6560}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://cdn-images-1.medium.com/max/2780/1*h_3GogfkaahcXCO9a43CPA.gif","alt":"Refreshing website with the script tag inserted at the bottom of the body tag"},"children":[],"position":{"start":{"line":53,"column":1,"offset":6562},"end":{"line":53,"column":152,"offset":6713}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Refreshing website with the script tag inserted at the bottom of the body tag","position":{"start":{"line":53,"column":153,"offset":6714},"end":{"line":53,"column":230,"offset":6791}}}],"position":{"start":{"line":53,"column":152,"offset":6713},"end":{"line":53,"column":231,"offset":6792}}}],"position":{"start":{"line":53,"column":1,"offset":6562},"end":{"line":53,"column":231,"offset":6792}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://cdn-images-1.medium.com/max/2780/1*xLOq5r4erQAwb4Au_hB-Ww.gif","alt":"Refreshing website with the script tag inserted at the top of the body tag"},"children":[],"position":{"start":{"line":55,"column":1,"offset":6794},"end":{"line":55,"column":149,"offset":6942}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Refreshing website with the script tag inserted at the top of the body tag","position":{"start":{"line":55,"column":150,"offset":6943},"end":{"line":55,"column":224,"offset":7017}}}],"position":{"start":{"line":55,"column":149,"offset":6942},"end":{"line":55,"column":225,"offset":7018}}}],"position":{"start":{"line":55,"column":1,"offset":6794},"end":{"line":55,"column":225,"offset":7018}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Whilst the load times were similar for both cases — the user experience is far better by placing the script at the body tag allowing the HTML to be parsed before the JavaScript giving the user the website content immediately!","position":{"start":{"line":57,"column":1,"offset":7020},"end":{"line":57,"column":226,"offset":7245}}}],"position":{"start":{"line":57,"column":1,"offset":7020},"end":{"line":57,"column":226,"offset":7245}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In the same vein CSS can also be render-blocking especially because more often than not it is linked in the head tag of your HTML document before the body. But if we want our user to see the content in the quickest time we don’t want to be loading CSS for the footer of our document which the user won’t see until they’ve scrolled to the bottom. In fact, we don’t want to load any CSS in that the user can’t immediately see when the page first loads on their device.","position":{"start":{"line":59,"column":1,"offset":7247},"end":{"line":59,"column":467,"offset":7713}}}],"position":{"start":{"line":59,"column":1,"offset":7247},"end":{"line":59,"column":467,"offset":7713}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The CSS that you need is often called the ","position":{"start":{"line":61,"column":1,"offset":7715},"end":{"line":61,"column":43,"offset":7757}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Critical CSS","position":{"start":{"line":61,"column":44,"offset":7758},"end":{"line":61,"column":56,"offset":7770}}}],"position":{"start":{"line":61,"column":43,"offset":7757},"end":{"line":61,"column":57,"offset":7771}}},{"type":"text","value":". Finding it for yourself would be a headache. It will be different for different devices, meaning you would have to check manually for all possible devices. Lucky for us we have (if you’re using ","position":{"start":{"line":61,"column":57,"offset":7771},"end":{"line":61,"column":253,"offset":7967}}},{"type":"element","tagName":"a","properties":{"href":"https://nodejs.org/en/"},"children":[{"type":"text","value":"Node.js","position":{"start":{"line":61,"column":254,"offset":7968},"end":{"line":61,"column":261,"offset":7975}}}],"position":{"start":{"line":61,"column":253,"offset":7967},"end":{"line":61,"column":286,"offset":8000}}},{"type":"text","value":") ","position":{"start":{"line":61,"column":286,"offset":8000},"end":{"line":61,"column":288,"offset":8002}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/addyosmani/critical"},"children":[{"type":"text","value":"Critical","position":{"start":{"line":61,"column":289,"offset":8003},"end":{"line":61,"column":297,"offset":8011}}}],"position":{"start":{"line":61,"column":288,"offset":8002},"end":{"line":61,"column":338,"offset":8052}}},{"type":"text","value":". This helpful package does the CSS inlining for us and all we do is add some code to a Javascript file. Here’s a code snippet from the Github page.","position":{"start":{"line":61,"column":338,"offset":8052},"end":{"line":61,"column":486,"offset":8200}}}],"position":{"start":{"line":61,"column":1,"offset":7715},"end":{"line":61,"column":486,"offset":8200}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> critical <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'critical'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncritical<span class=\"token punctuation\">.</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    base<span class=\"token punctuation\">:</span> <span class=\"token string\">'test/'</span><span class=\"token punctuation\">,</span>\n    src<span class=\"token punctuation\">:</span> <span class=\"token string\">'index.html'</span><span class=\"token punctuation\">,</span>\n    dest<span class=\"token punctuation\">:</span> <span class=\"token string\">'styles/main.css'</span><span class=\"token punctuation\">,</span>\n    dimensions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n        height<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n        width<span class=\"token punctuation\">:</span> <span class=\"token number\">500</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        height<span class=\"token punctuation\">:</span> <span class=\"token number\">900</span><span class=\"token punctuation\">,</span>\n        width<span class=\"token punctuation\">:</span> <span class=\"token number\">1200</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","position":{"start":{"line":63,"column":1,"offset":8202},"end":{"line":78,"column":4,"offset":8467}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Using the generate function, we supply it with a JavaScript object with some values defined. base is where we’re going to save our src and dest (our project folder usually). What’s great is now we just supply an array of dimensions and the code will compute the critical CSS for each and inline that code into our head tag.","position":{"start":{"line":80,"column":1,"offset":8469},"end":{"line":80,"column":324,"offset":8792}}}],"position":{"start":{"line":80,"column":1,"offset":8469},"end":{"line":80,"column":324,"offset":8792}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Async and Defer","position":{"start":{"line":82,"column":5,"offset":8798},"end":{"line":82,"column":20,"offset":8813}}}],"position":{"start":{"line":82,"column":1,"offset":8794},"end":{"line":82,"column":20,"offset":8813}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Again, we come back to this idea of render-blocking and how best we should implement this for our website. When you have a plain script tag in your HTML it blocks the HTML from loading whilst the JavaScript loads ","position":{"start":{"line":84,"column":1,"offset":8815},"end":{"line":84,"column":214,"offset":9028}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"and","position":{"start":{"line":84,"column":216,"offset":9030},"end":{"line":84,"column":219,"offset":9033}}}],"position":{"start":{"line":84,"column":214,"offset":9028},"end":{"line":84,"column":221,"offset":9035}}},{"type":"text","value":" runs. Async and defer are simple attributes that you can add to your script tags that change the way your JavaScript will be loaded.","position":{"start":{"line":84,"column":221,"offset":9035},"end":{"line":84,"column":354,"offset":9168}}}],"position":{"start":{"line":84,"column":1,"offset":8815},"end":{"line":84,"column":354,"offset":9168}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Defer essentially “defers” execution of the script until after the HTML has been parsed. A major advantage of this is that you no longer need some $(document).ready() jQuery-style function to make sure the body was loaded before you could manipulate it, which could cut out some of the dependencies on libraries like jQuery which helps reduce load-time.","position":{"start":{"line":86,"column":1,"offset":9170},"end":{"line":86,"column":354,"offset":9523}}}],"position":{"start":{"line":86,"column":1,"offset":9170},"end":{"line":86,"column":354,"offset":9523}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Async is, unsurprisingly, the asynchronous loading of JavaScript files. What does this mean? Your HTML will continue to be parsed whilst the file is loaded and then whenever its ready the file will be executed. This helps improving user experience whilst viewing your website. Imagine for example you had a JavaScript file for doing some cool graphics. You want the words around this graphic to be parsed until your graphic is ready to be executed. As soon as it is ready, it is executed and we get a more seamless loading of our webpage without missing pieces.","position":{"start":{"line":88,"column":1,"offset":9525},"end":{"line":88,"column":562,"offset":10086}}}],"position":{"start":{"line":88,"column":1,"offset":9525},"end":{"line":88,"column":562,"offset":10086}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Check this ","position":{"start":{"line":90,"column":1,"offset":10088},"end":{"line":90,"column":12,"offset":10099}}},{"type":"element","tagName":"a","properties":{"href":"http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html"},"children":[{"type":"text","value":"website","position":{"start":{"line":90,"column":13,"offset":10100},"end":{"line":90,"column":20,"offset":10107}}}],"position":{"start":{"line":90,"column":12,"offset":10099},"end":{"line":90,"column":94,"offset":10181}}},{"type":"text","value":" for a really intuitive, graphical representation of this.","position":{"start":{"line":90,"column":94,"offset":10181},"end":{"line":90,"column":152,"offset":10239}}}],"position":{"start":{"line":90,"column":1,"offset":10088},"end":{"line":90,"column":152,"offset":10239}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Image Optimisation and Media Queries","position":{"start":{"line":92,"column":5,"offset":10245},"end":{"line":92,"column":41,"offset":10281}}}],"position":{"start":{"line":92,"column":1,"offset":10241},"end":{"line":92,"column":41,"offset":10281}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The cornerstone of all website performance optimisation is the simple rule that, the less data you send to the client, the quicker and better your website will perform. With the plethora of devices on the market capable of viewing websites, there is a growing trend to optimise your website based on the device it is being viewed on.","position":{"start":{"line":94,"column":1,"offset":10283},"end":{"line":94,"column":334,"offset":10616}}}],"position":{"start":{"line":94,"column":1,"offset":10283},"end":{"line":94,"column":334,"offset":10616}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Media queries are a fairly new tool added to CSS3. With more and more content being consumed using mobile-devices there has been a shift in design thinking towards mobile first. Using media queries you can then add stylings for larger screen sizes.","position":{"start":{"line":96,"column":1,"offset":10618},"end":{"line":96,"column":249,"offset":10866}}}],"position":{"start":{"line":96,"column":1,"offset":10618},"end":{"line":96,"column":249,"offset":10866}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/* Some CSS for screen sizes bigger than 600px but smaller than 992px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/*  Some CSS for screen sizes bigger than 992px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">orientation</span><span class=\"token punctuation\">:</span> landscape<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* Some CSS for landscape-oriented devices */</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":98,"column":1,"offset":10868},"end":{"line":110,"column":4,"offset":11198}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The @media tag starts a new CSS rule, whilst the only keyword stops older browsers that don’t support media queries from using it. The screen keyword applies the rules to screens rather than prints. After that you add the media-feature which supports the and , or and not keywords so you can get as specific as you want. When you’re loading your image you can write code like:","position":{"start":{"line":112,"column":1,"offset":11200},"end":{"line":112,"column":377,"offset":11576}}}],"position":{"start":{"line":112,"column":1,"offset":11200},"end":{"line":112,"column":377,"offset":11576}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-small.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-big.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>","position":{"start":{"line":114,"column":1,"offset":11578},"end":{"line":122,"column":4,"offset":11797}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This isn’t necessarily the best or optimal approach for image optimisation. Luckily we have other options. ","position":{"start":{"line":124,"column":1,"offset":11799},"end":{"line":124,"column":108,"offset":11906}}},{"type":"element","tagName":"a","properties":{"href":"https://www.imgix.com/"},"children":[{"type":"text","value":"Imgix","position":{"start":{"line":124,"column":109,"offset":11907},"end":{"line":124,"column":114,"offset":11912}}}],"position":{"start":{"line":124,"column":108,"offset":11906},"end":{"line":124,"column":139,"offset":11937}}},{"type":"text","value":" and ","position":{"start":{"line":124,"column":139,"offset":11937},"end":{"line":124,"column":144,"offset":11942}}},{"type":"element","tagName":"a","properties":{"href":"https://cloudinary.com/"},"children":[{"type":"text","value":"Cloudinary","position":{"start":{"line":124,"column":145,"offset":11943},"end":{"line":124,"column":155,"offset":11953}}}],"position":{"start":{"line":124,"column":144,"offset":11942},"end":{"line":124,"column":181,"offset":11979}}},{"type":"text","value":" are two ways you can help optimise your site for the right device. Imgix is a Content Delivery Network (CDN) for images with a lot of cool features. A CDN simply takes your files and spreads them across the globe so that someone in a different country doesn’t have to wait for your files on your server to make it all the way to them. This ","position":{"start":{"line":124,"column":181,"offset":11979},"end":{"line":124,"column":522,"offset":12320}}},{"type":"element","tagName":"a","properties":{"href":"https://docs.imgix.com/tutorials/responsive-images-srcset-imgix"},"children":[{"type":"text","value":"tutorial","position":{"start":{"line":124,"column":523,"offset":12321},"end":{"line":124,"column":531,"offset":12329}}}],"position":{"start":{"line":124,"column":522,"offset":12320},"end":{"line":124,"column":597,"offset":12395}}},{"type":"text","value":" goes through how to use Imgix for different device pixel ratios. Cloudinary is a similar service, and their ","position":{"start":{"line":124,"column":597,"offset":12395},"end":{"line":124,"column":706,"offset":12504}}},{"type":"element","tagName":"a","properties":{"href":"https://cloudinary.com/documentation/image_optimization"},"children":[{"type":"text","value":"tutorial ","position":{"start":{"line":124,"column":707,"offset":12505},"end":{"line":124,"column":716,"offset":12514}}}],"position":{"start":{"line":124,"column":706,"offset":12504},"end":{"line":124,"column":774,"offset":12572}}},{"type":"text","value":"will take you through the importance of optimisation and how to achieve it will their incredible services. Below is a small example showing how easy it is to use Cloudinary straight in the HTML markup.","position":{"start":{"line":124,"column":774,"offset":12572},"end":{"line":124,"column":975,"offset":12773}}}],"position":{"start":{"line":124,"column":1,"offset":11799},"end":{"line":124,"column":975,"offset":12773}}},{"type":"text","value":"\n"},{"type":"raw","value":"<iframe height='400' scrolling='no' title='Cloudinary Example' src='//codepen.io/patricoferris/embed/ejgVJN/?height=400&theme-id=0&default-tab=html,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/ejgVJN/'>Cloudinary Example</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","position":{"start":{"line":126,"column":1,"offset":12775},"end":{"line":127,"column":10,"offset":13259}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As a last point on image optimisation, the format you use can have a large impact on file size. Some files contain lots of metadata which you don’t want to be serving to your client — ","position":{"start":{"line":129,"column":1,"offset":13261},"end":{"line":129,"column":185,"offset":13445}}},{"type":"element","tagName":"a","properties":{"href":"https://www.sno.phy.queensu.ca/~phil/exiftool/"},"children":[{"type":"text","value":"ExifTool","position":{"start":{"line":129,"column":186,"offset":13446},"end":{"line":129,"column":194,"offset":13454}}}],"position":{"start":{"line":129,"column":185,"offset":13445},"end":{"line":129,"column":243,"offset":13503}}},{"type":"text","value":" is a commonly used command-line application that can help you trim down those files sizes. On top of this, Scalable Vector Graphics (SVG) are a web-standard developed by W3C that offers XML-based vector graphics. This means they have infinite resolution unlike PNG or JPG files. It also makes them highly versatile, easily editable and can even be animated. At the end of the day SVGs are just code and so the file sizes tend to be small. For more reasons to use them, check out this ","position":{"start":{"line":129,"column":243,"offset":13503},"end":{"line":129,"column":728,"offset":13988}}},{"type":"element","tagName":"a","properties":{"href":"https://watb.co.uk/5-reasons-you-should-be-using-svgs-over-pngs/"},"children":[{"type":"text","value":"article","position":{"start":{"line":129,"column":729,"offset":13989},"end":{"line":129,"column":736,"offset":13996}}}],"position":{"start":{"line":129,"column":728,"offset":13988},"end":{"line":129,"column":803,"offset":14063}}},{"type":"text","value":".","position":{"start":{"line":129,"column":803,"offset":14063},"end":{"line":129,"column":804,"offset":14064}}}],"position":{"start":{"line":129,"column":1,"offset":13261},"end":{"line":129,"column":804,"offset":14064}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":131,"column":5,"offset":14070},"end":{"line":131,"column":15,"offset":14080}}}],"position":{"start":{"line":131,"column":1,"offset":14066},"end":{"line":131,"column":15,"offset":14080}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We’ve only scratched the surface of what’s possible for website optimisation. There are many tools you can use to help you stream-line this process like ","position":{"start":{"line":133,"column":1,"offset":14082},"end":{"line":133,"column":154,"offset":14235}}},{"type":"element","tagName":"a","properties":{"href":"https://webpack.js.org/"},"children":[{"type":"text","value":"Webpack","position":{"start":{"line":133,"column":155,"offset":14236},"end":{"line":133,"column":162,"offset":14243}}}],"position":{"start":{"line":133,"column":154,"offset":14235},"end":{"line":133,"column":188,"offset":14269}}},{"type":"text","value":" for bundling or static-site generators like ","position":{"start":{"line":133,"column":188,"offset":14269},"end":{"line":133,"column":233,"offset":14314}}},{"type":"element","tagName":"a","properties":{"href":"https://www.gatsbyjs.org/"},"children":[{"type":"text","value":"Gatsby","position":{"start":{"line":133,"column":234,"offset":14315},"end":{"line":133,"column":240,"offset":14321}}}],"position":{"start":{"line":133,"column":233,"offset":14314},"end":{"line":133,"column":268,"offset":14349}}},{"type":"text","value":". ","position":{"start":{"line":133,"column":268,"offset":14349},"end":{"line":133,"column":270,"offset":14351}}},{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking"},"children":[{"type":"text","value":"Tree shaking","position":{"start":{"line":133,"column":271,"offset":14352},"end":{"line":133,"column":283,"offset":14364}}}],"position":{"start":{"line":133,"column":270,"offset":14351},"end":{"line":133,"column":348,"offset":14429}}},{"type":"text","value":" is another commonly used technique to remove excess, unused modules lying around your website.","position":{"start":{"line":133,"column":348,"offset":14429},"end":{"line":133,"column":443,"offset":14524}}}],"position":{"start":{"line":133,"column":1,"offset":14082},"end":{"line":133,"column":443,"offset":14524}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Hopefully this article has touched on some useful techniques you can use on your next site to help improve its performance. Happy coding!","position":{"start":{"line":135,"column":1,"offset":14526},"end":{"line":135,"column":138,"offset":14663}}}],"position":{"start":{"line":135,"column":1,"offset":14526},"end":{"line":135,"column":138,"offset":14663}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A big thank you to ","position":{"start":{"line":137,"column":1,"offset":14665},"end":{"line":137,"column":20,"offset":14684}}},{"type":"element","tagName":"a","properties":{"href":"https://medium.com/@pinpickle"},"children":[{"type":"text","value":"Christian Silver","position":{"start":{"line":137,"column":21,"offset":14685},"end":{"line":137,"column":37,"offset":14701}}}],"position":{"start":{"line":137,"column":20,"offset":14684},"end":{"line":137,"column":69,"offset":14733}}},{"type":"text","value":" and ","position":{"start":{"line":137,"column":69,"offset":14733},"end":{"line":137,"column":74,"offset":14738}}},{"type":"element","tagName":"a","properties":{"href":"https://medium.com/@charliecrisp249"},"children":[{"type":"text","value":"Charlie Crisp","position":{"start":{"line":137,"column":75,"offset":14739},"end":{"line":137,"column":88,"offset":14752}}}],"position":{"start":{"line":137,"column":74,"offset":14738},"end":{"line":137,"column":126,"offset":14790}}},{"type":"text","value":" for editing this post and providing extremely useful advice and extra content to make it even better.","position":{"start":{"line":137,"column":126,"offset":14790},"end":{"line":137,"column":228,"offset":14892}}}],"position":{"start":{"line":137,"column":1,"offset":14665},"end":{"line":137,"column":228,"offset":14892}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":138,"column":1,"offset":14893}}}},{"id":"transformer-remark-markdown-html-2309bc1ce3b3986c10591e4e6df33783-gatsby-remark-imagesgatsby-remark-prismjs-","value":"<p><img src=\"https://res.cloudinary.com/patricoferris/image/upload/v1532781201/pf2018/blogposts/28-07-2018/website_optimisation_2.png\" alt=\"Optimising your Website\">\nInspired by a <a href=\"https://syntax.fm/\">Syntax</a> podcast, I got really interested in website optimisation. It can often be an overlooked aspect in web development with more focus on design and functionality, I realised my number one priority whenever I visited a website is load speed. My attention is a website’s number one goal, lose it and they lose all potential ad revenue or possibility to give me whatever information I was looking for. <a href=\"https://developers.google.com/web/fundamentals/performance/get-started/\">Many seem to agree. 53% of users abandon websites that take more than 3 seconds to load</a>. No amount of fancy graphics or parallax scrolling that appears five seconds after someone’s clicked will hide the slow loading times.</p>\n<p>The aim of this article is to give a broad overview of the concepts and ideas behind optimising your website, experienced developers are likely already using things like Webpack (a module bundler) among other tools to speed-up their sites.</p>\n<p>For testing load-times I will be using the <a href=\"https://chrome.google.com/webstore/detail/page-load-time/fploionmjgeclbkemipmkogoaohcdbig?hl=en\">Page Load Time </a>Chrome extension. There are a few ways to measure website loading time including: <a href=\"https://developers.google.com/web/tools/chrome-user-experience-report/\">first paint, first meaning paint, DOMContentLoaded</a> etc. For a more detailed look into what this timer measures, check out the Github repository below.\n<a href=\"https://github.com/alex-vv/chrome-load-timer\"><strong>alex-vv/chrome-load-timer</strong>\n<em>chrome-load-timer - Google Chrome extension to measure page load time and display it in the toolbar</em>github.com</a></p>\n<h3><strong>Use Minified Stylesheets and Scripts</strong></h3>\n<p>You would be amazed at how much performance can be gained by this simple trick. What is a minified document? When we write code it is never our job to make it optimised for the computer, instead our golden rule is to make it readable to humans. This improves readability, cuts down on debug time and makes it easier to maintain. However, to achieve this we often add extra spacing which costs us precious space. Minifying the code is trimming all this fat from what we’ve written to have code that produces the same result but is far more difficult to read and maintain. This is okay though, because a computer has no problem deciphering it. Take the following code for example.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Normal JavaScript Code</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Minified Code - A 22.83% Compression saving 0.02kB</span>\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Notice how, wherever possible, our line-breaks and spaces are gone. On top of that, the code in the for-loop is only one line so there’s no need for the curly braces which extends our code over three lines when it can be done in one. Does this make a difference?</p>\n<p>I tried it out on simple website that just had one script tag being loaded in for the graphics library <a href=\"https://p5js.org/\">p5.js</a>. Using the non-minified CDN link I got a load time of 0.25 seconds. Using the minified version I got a markedly improved load time of 0.08 seconds. Depending on what your website project is, there are a few ways to automatically minify code. If it is a <a href=\"https://guide.meteor.com/build-tool.html\">Meteor app</a> it will be done automatically, using <a href=\"https://webpack.js.org/guides/production/\">Webpack </a>will also allow you to do this. Otherwise there are some online tools like <a href=\"https://jscompress.com/\">JSCompress </a>or <a href=\"https://cssminifier.com/\">CSSMinifier </a>that you can upload your code to.</p>\n<h3>Design Versus Performance</h3>\n<p>Whilst design is undoubtedly a major aspect to a website’s overall success, both developers and designers must work together to compromise and make a mutually beneficial trade-off between design and performance. The classic example is fonts. Take the two screenshots of a simple website below.</p>\n<p><img src=\"https://res.cloudinary.com/patricoferris/image/upload/v1532780050/pf2018/blogposts/28-07-2018/Helvetica.png\" alt=\"The example website using Helvetica Font (commonly found on many computers) — check [this](https://css-tricks.com/snippets/css/system-font-stack/) link for common system fonts\">\n<em>The example website using Helvetica Font (commonly found on many computers) — check <a href=\"https://css-tricks.com/snippets/css/system-font-stack/\">this</a> link for common system fonts</em></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/5760/1*8ciuJNBdqMhlLSaOpNUXow.png\" alt=\"The example website using Roboto Font (designed by Google and linked from [Google Fonts](https://fonts.google.com/?selection.family=Roboto))\"><em>The example website using Roboto Font (designed by Google and linked from <a href=\"https://fonts.google.com/?selection.family=Roboto\">Google Fonts</a>)</em></p>\n<p>Before critiquing my questionable design skills take a moment to appreciate that these two fonts are very similar — yet the loading time for a website for the Roboto font was 0.22 seconds as compared with 0.17 for Helvetica. Whilst not that significant, using lots of custom fonts will slow down your website, although using Google Fonts’ API will help keep your website optimised. As an over-the-top example, linking 20 different fonts from the Google API increased the load time to 0.87 seconds.</p>\n<h3>Inlining your JavaScript and CSS</h3>\n<p>For each individual document or component of your website, when the parser reaches the script tag or link tag it sends and HTTP request for that document and if not stated differently, these will be blocking actions. What this means is your machine is parsing the HTML document getting the words to display in your browser but if it hits the script tag with the attribute src='js/main.js' for example, it will block the parsing and load in that file. This is where as a developer you need to be clever about where in the document you place things.</p>\n<p>Whilst it may not ultimately affect the loading time of your website, it can affect the order in which things are loaded. Again we’ll be using the un-minified p5.js library to simulate a large JavaScript file and load it in different places to see how it affects our user experience.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2780/1*h_3GogfkaahcXCO9a43CPA.gif\" alt=\"Refreshing website with the script tag inserted at the bottom of the body tag\"><em>Refreshing website with the script tag inserted at the bottom of the body tag</em></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2780/1*xLOq5r4erQAwb4Au_hB-Ww.gif\" alt=\"Refreshing website with the script tag inserted at the top of the body tag\"><em>Refreshing website with the script tag inserted at the top of the body tag</em></p>\n<p>Whilst the load times were similar for both cases — the user experience is far better by placing the script at the body tag allowing the HTML to be parsed before the JavaScript giving the user the website content immediately!</p>\n<p>In the same vein CSS can also be render-blocking especially because more often than not it is linked in the head tag of your HTML document before the body. But if we want our user to see the content in the quickest time we don’t want to be loading CSS for the footer of our document which the user won’t see until they’ve scrolled to the bottom. In fact, we don’t want to load any CSS in that the user can’t immediately see when the page first loads on their device.</p>\n<p>The CSS that you need is often called the <em>Critical CSS</em>. Finding it for yourself would be a headache. It will be different for different devices, meaning you would have to check manually for all possible devices. Lucky for us we have (if you’re using <a href=\"https://nodejs.org/en/\">Node.js</a>) <a href=\"https://github.com/addyosmani/critical\">Critical</a>. This helpful package does the CSS inlining for us and all we do is add some code to a Javascript file. Here’s a code snippet from the Github page.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> critical <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'critical'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncritical<span class=\"token punctuation\">.</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    base<span class=\"token punctuation\">:</span> <span class=\"token string\">'test/'</span><span class=\"token punctuation\">,</span>\n    src<span class=\"token punctuation\">:</span> <span class=\"token string\">'index.html'</span><span class=\"token punctuation\">,</span>\n    dest<span class=\"token punctuation\">:</span> <span class=\"token string\">'styles/main.css'</span><span class=\"token punctuation\">,</span>\n    dimensions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n        height<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n        width<span class=\"token punctuation\">:</span> <span class=\"token number\">500</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        height<span class=\"token punctuation\">:</span> <span class=\"token number\">900</span><span class=\"token punctuation\">,</span>\n        width<span class=\"token punctuation\">:</span> <span class=\"token number\">1200</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Using the generate function, we supply it with a JavaScript object with some values defined. base is where we’re going to save our src and dest (our project folder usually). What’s great is now we just supply an array of dimensions and the code will compute the critical CSS for each and inline that code into our head tag.</p>\n<h3>Async and Defer</h3>\n<p>Again, we come back to this idea of render-blocking and how best we should implement this for our website. When you have a plain script tag in your HTML it blocks the HTML from loading whilst the JavaScript loads <strong>and</strong> runs. Async and defer are simple attributes that you can add to your script tags that change the way your JavaScript will be loaded.</p>\n<p>Defer essentially “defers” execution of the script until after the HTML has been parsed. A major advantage of this is that you no longer need some $(document).ready() jQuery-style function to make sure the body was loaded before you could manipulate it, which could cut out some of the dependencies on libraries like jQuery which helps reduce load-time.</p>\n<p>Async is, unsurprisingly, the asynchronous loading of JavaScript files. What does this mean? Your HTML will continue to be parsed whilst the file is loaded and then whenever its ready the file will be executed. This helps improving user experience whilst viewing your website. Imagine for example you had a JavaScript file for doing some cool graphics. You want the words around this graphic to be parsed until your graphic is ready to be executed. As soon as it is ready, it is executed and we get a more seamless loading of our webpage without missing pieces.</p>\n<p>Check this <a href=\"http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html\">website</a> for a really intuitive, graphical representation of this.</p>\n<h3>Image Optimisation and Media Queries</h3>\n<p>The cornerstone of all website performance optimisation is the simple rule that, the less data you send to the client, the quicker and better your website will perform. With the plethora of devices on the market capable of viewing websites, there is a growing trend to optimise your website based on the device it is being viewed on.</p>\n<p>Media queries are a fairly new tool added to CSS3. With more and more content being consumed using mobile-devices there has been a shift in design thinking towards mobile first. Using media queries you can then add stylings for larger screen sizes.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/* Some CSS for screen sizes bigger than 600px but smaller than 992px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/*  Some CSS for screen sizes bigger than 992px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">orientation</span><span class=\"token punctuation\">:</span> landscape<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* Some CSS for landscape-oriented devices */</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>The @media tag starts a new CSS rule, whilst the only keyword stops older browsers that don’t support media queries from using it. The screen keyword applies the rules to screens rather than prints. After that you add the media-feature which supports the and , or and not keywords so you can get as specific as you want. When you’re loading your image you can write code like:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-small.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('supercoolimages/dog-big.png')</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>This isn’t necessarily the best or optimal approach for image optimisation. Luckily we have other options. <a href=\"https://www.imgix.com/\">Imgix</a> and <a href=\"https://cloudinary.com/\">Cloudinary</a> are two ways you can help optimise your site for the right device. Imgix is a Content Delivery Network (CDN) for images with a lot of cool features. A CDN simply takes your files and spreads them across the globe so that someone in a different country doesn’t have to wait for your files on your server to make it all the way to them. This <a href=\"https://docs.imgix.com/tutorials/responsive-images-srcset-imgix\">tutorial</a> goes through how to use Imgix for different device pixel ratios. Cloudinary is a similar service, and their <a href=\"https://cloudinary.com/documentation/image_optimization\">tutorial </a>will take you through the importance of optimisation and how to achieve it will their incredible services. Below is a small example showing how easy it is to use Cloudinary straight in the HTML markup.</p>\n<iframe height='400' scrolling='no' title='Cloudinary Example' src='//codepen.io/patricoferris/embed/ejgVJN/?height=400&theme-id=0&default-tab=html,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/patricoferris/pen/ejgVJN/'>Cloudinary Example</a> by Patrick Ferris (<a href='https://codepen.io/patricoferris'>@patricoferris</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>As a last point on image optimisation, the format you use can have a large impact on file size. Some files contain lots of metadata which you don’t want to be serving to your client — <a href=\"https://www.sno.phy.queensu.ca/~phil/exiftool/\">ExifTool</a> is a commonly used command-line application that can help you trim down those files sizes. On top of this, Scalable Vector Graphics (SVG) are a web-standard developed by W3C that offers XML-based vector graphics. This means they have infinite resolution unlike PNG or JPG files. It also makes them highly versatile, easily editable and can even be animated. At the end of the day SVGs are just code and so the file sizes tend to be small. For more reasons to use them, check out this <a href=\"https://watb.co.uk/5-reasons-you-should-be-using-svgs-over-pngs/\">article</a>.</p>\n<h3>Conclusion</h3>\n<p>We’ve only scratched the surface of what’s possible for website optimisation. There are many tools you can use to help you stream-line this process like <a href=\"https://webpack.js.org/\">Webpack</a> for bundling or static-site generators like <a href=\"https://www.gatsbyjs.org/\">Gatsby</a>. <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking\">Tree shaking</a> is another commonly used technique to remove excess, unused modules lying around your website.</p>\n<p>Hopefully this article has touched on some useful techniques you can use on your next site to help improve its performance. Happy coding!</p>\n<p>A big thank you to <a href=\"https://medium.com/@pinpickle\">Christian Silver</a> and <a href=\"https://medium.com/@charliecrisp249\">Charlie Crisp</a> for editing this post and providing extremely useful advice and extra content to make it even better.</p>"}]}